var searchIndex = JSON.parse('{\
"haar_lib":{"doc":"Rust GitHub last commit","t":"AAOOOOAOOAOOAAOOOAAOOAOOOOAOOAAAAAAAAAAAAAAAAIQQKKKKKDLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDENNLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLIIIIIIIIIQIKKKDLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFNNNELLFLLLLLLMMDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFAAAAAAAFFFFFFFDLLLLLLLLLLLDLLLLLLLLLLLFFDLLLLLLLLLLLLLLAAAAAFFFFFFFFFFFFFFFDLLLLLLLLLLLFFFFFDLLLLLLLLLLLLLLLLLLLLLLLLFDDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLFFDLLLLLLLLLLDLLLLLLLLLLLAAFFDLLLLLLLLLLLLLFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADLLLLLLLLLLLLLLLLLLLLLLLLDINNELLLLLLLLLLLLLLLLLLLLLLLLLLLLDDCCLLLLLLLLLLLLLLLLLLLLLLLLLDDCCLLLLLLLLLLLLLLLLLLLLLLLLLDCCLLLLLLLLLLDCCLLLLLLLLLLLLLDCCCLLLLLLLLLLLLLLLLIDCCLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLDCLLLLLLLLLLLICDCLLLLLLLLLLLLIDLLLLLLLLLLLLLLLLLLLLLIDNNELLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLRDLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLCCCDCLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLICDLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLICNNEDCLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLIIIIQQQIQQKKKKKDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLDDDDLLLLLLAAALLLLLLLLAMALLLLLLLLAAAAAALLLLLLAAALLLLLLLLLLLLLLMLLAAAAAALLLLLLLLLLLLLLLLALLMLLAMLLLLLLLLLLLLLLLLLLLLLLFFFENNNNNLLFLLLLLLLLLLLLLLLLLFFFFFFENNLLLLFLLFLLLLLLFFFFNENNLLLLLLLLFLLLLLLLLNENNNNLLLLLLLLFLLLLLLLLLLNNNNENNLLLLLLLLLLFLLLLLLLLLLNENNNLLLLLLLLFLLLLLLLLLNENNNLLLLLLLFLLLLLLLLLLNNNELLLLLLLLLLLFLLLLLFDIDIDDQLLAAAAAALLLLLLLLAAALLLLLLLLAAAAMAALLALLLLAKLLLLLMAAMLLLLLALAAALLAAKLAKLMLLLLLLLLLLLLAAALLLLLLLLAKLMAFCFFDLLLLLLLLLLLCFFFFFAFFFDLLLLLLLLLLLLLLLLFAADLLLLLLLLLLLLLLDLLLLLLLLLLLLLLQIKKKKKDLLLLLLLLLLLLLLLLNDDENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLFDMLLMLLLLLMLMMMLLLLLFDLLLLLLLLLLLLLLFDLLLMMLFLLLLDLLLLLLLLLLLFFFFIFSSDDSDSSLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLMMFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFDDLLLLLLLLLLLLLLLLLLLLLLLLLLAAAAAAAFFFFFFFFFFFFDLLLLFLLLMLMMLLLLLFDALALLLALLLLLLLLLLLLLLLLLLFAADLLLLLLLLLLFAAADCCCCCCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCCCDICCCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLIIIQQQIKKKIQKKKAAAAFFDLLLLLLLLLLLLLLLLLLLLLLLLLLLDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFAAAAAAFFFFFFFFFFFAADLLLLLLLLLLIKFDLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFAAADMLLMLLLLLMLMLMLLLLLLLMLLLLFENDNLLLLLLLLMLLLLLLFLLLLLLLLLLMMMFAAIIIIIQQIKKDDIDQLLLLLLAMLLLLLLAALLLLLKLLLLMAMLLLLALLLLLMMAKLAAKLMLLLALLLLLLLLLALLLKLMFDLLLLLLLLLLLLDLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLDLLLLLLLLLLFFDLLLLLLLLLLFFFFAAAAAAAAAFDLLLLLLLLLLLLLLLLLLLLLLLIKDMLMLLLLLLLLLLLLLNNENLLLLLLLLLLLLLLLLLLLLLLFQIKDLLLLLLLLLLLLLLIK","n":["algebra","algo","btreemap","btreeset","chmax","chmin","ds","eps","for_loop","geom","get","get_time","graph","grid","hashmap","hashset","input","macros","math","max","min","misc","modulo","mul_vec","rec","sort_with","testtools","timer","trait_alias","traits","tree","utils","action","add_sum","affine","bitxor","dihedral","dual","max","min","prod","sum","traits","update","update_sum","Action","FType","UType","convert","fold","fold_id","update","update_id","AddSum","borrow","borrow_mut","clone","clone_into","convert","default","fold","fold_id","from","into","new","to_owned","try_from","try_into","type_id","update","update_id","vzip","Affine","borrow","borrow_mut","clone","clone_into","default","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","BitXor","borrow","borrow_mut","clone","clone_into","default","from","id","id","id","id","id","id","id","id","id","id","id","id","into","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","new","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","Dihedral","DihedralValue","R","S","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","fmt","from","from","id","into","into","inv","new","op","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Dual","borrow","borrow_mut","clone","clone_into","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","Max","borrow","borrow_mut","clone","clone_into","default","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","Min","borrow","borrow_mut","clone","clone_into","default","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","Prod","borrow","borrow_mut","clone","clone_into","default","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","Sum","borrow","borrow_mut","clone","clone_into","default","from","id","into","inv","new","op","to_owned","try_from","try_into","type_id","vzip","AlgeStruct","Associative","BinaryOp","Commutative","Group","Idempotence","Identity","Inverse","Monoid","Output","Semigroup","id","inv","op","Update","borrow","borrow_mut","clone","clone_into","default","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","UpdateSum","borrow","borrow_mut","clone","clone_into","convert","default","fold","fold_id","from","into","new","to_owned","try_from","try_into","type_id","update","update_id","vzip","bsearch","bsearch_f","compressor","edit_distance","enumerate_bitset","imos_1d","imos_2d","interval_scheduling","inversion_number","kmp","knapsack","lcs","lis","majority_vote","manacher","max_partial_sum","max_rect","merge","mo","num_subseq","parallel_binary_search","permutation","psp","rle","rolling_hash","sa","sliding_window","static_range_freq_query","static_range_inversions_query","subset_sum","two_sat","zalgo","equal_range","lower_bound","upper_bound","AllNg","AllOk","NgOk","SearchResult","borrow","borrow_mut","bsearch_ng_ok","from","into","try_from","try_into","type_id","vzip","ng","ok","Compressor","CompressorBuilder","add","add_vec","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","compress","decompress","default","from","from","get","index","into","into","new","size","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","edit_distance","gray_code","subset_asc","subset_between","subset_desc","subset_size_k","superset_asc","superset_desc","gray_code","subset_asc","subset_between","subset_desc","subset_size_k","super_asc","superset_desc","Imos1D","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","update","vzip","Imos2D","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","update","vzip","interval_scheduling","inversion_number","KMP","borrow","borrow_mut","clone","clone_into","fmt","from","into","matches","new","to_owned","try_from","try_into","type_id","vzip","limited","small_quantity","small_value","small_weight","unlimited","knapsack_limited","knapsack_small_quantity","knapsack_small_value","knapsack_small_weight","knapsack_unlimited","lcs","lis","majority_vote","manacher","max_partial_sum","max_rect","max_rect_in_histogram","inplace_merge","inplace_merge_by","merge","Mo","add","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","num_subseq","parallel_binary_search","next_permutation","permutations","prev_permutation","PSP","borrow","borrow_mut","clone","clone_into","from","gain_if_blue","gain_if_both_blue","gain_if_both_red","gain_if_red","if_red_then_must_be_red","into","must_be_blue","must_be_red","new","penalty_if_blue","penalty_if_different","penalty_if_red","penalty_if_red_blue","solve","to_owned","try_from","try_into","type_id","vzip","rle","RollingHash","Table","borrow","borrow","borrow_mut","borrow_mut","from","from","hash","hash","hash_table","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","SuffixArray","borrow","borrow_mut","clone","clone_into","fmt","from","index","into","lcp_array","new","to_owned","to_slice","try_from","try_into","type_id","vzip","sliding_maximum","sliding_minimum","StaticRangeFreqQuery","borrow","borrow_mut","from","into","new","query","try_from","try_into","type_id","vzip","StaticRangeInversionsQuery","add_query","borrow","borrow_mut","from","into","new","solve","try_from","try_into","type_id","vzip","count","limited","subset_sum","subset_sum_limited","TwoSat","add_if","add_or","borrow","borrow_mut","from","into","new","not_coexist","solve","try_from","try_into","type_id","vzip","zalgo","binary_trie","cht","cumulative_sum_1d","cumulative_sum_2d","disjoint_sparse_table","dual_segtree","fenwick","fenwick_add","fenwick_on_fenwick","foldable_deque","interval_heap","lazy_segtree","lazy_segtree_coeff","lazy_skew_heap","li_chao","multiset","partially_persistent_unionfind","persistent_array","persistent_queue","persistent_stack","qword_tree","range_search_tree","rollbackable_vector","segtree","segtree_beats","segtree_linear_add","segtree_on_segtree","skew_heap","sparse_table","starry_sky_tree","succinct_dict","traits","unionfind","wavelet_matrix","BinaryTrie","borrow","borrow_mut","clone","clone_into","count","default","erase","fmt","from","insert","into","is_empty","len","lower_bound","max","min","new","to_owned","to_vec","try_from","try_into","type_id","upper_bound","vzip","ConvexHullTrick","Elem","Max","Min","Mode","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","from","from","into","into","new","query","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","CumulativeSum1D","CumulativeSum1DBuilder","Foldable","Group","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","fmt","fold","from","from","index","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","CumulativeSum2D","CumulativeSum2DBuilder","Foldable2D","Group","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","fmt","fold","from","from","index","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","DisjointSparseTable","Foldable","Semigroup","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","vzip","DualSegtree","Monoid","Updatable","borrow","borrow_mut","from","from_vec","get","into","new","to_vec","try_from","try_into","type_id","update","vzip","FenwickTree","Foldable","Group","Updatable","borrow","borrow_mut","clone","clone_into","default","fold","fold","from","into","new","to_owned","try_from","try_into","type_id","update","vzip","Elem","FenwickTreeAdd","Foldable","Updatable","add","borrow","borrow_mut","fold","fold","from","into","new","sub","try_from","try_into","type_id","vzip","FenwickOnFenwick","FenwickOnFenwickBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","default","fold","fold_to","from","from","into","into","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","FoldableDeque","back","borrow","borrow_mut","fold","from","front","into","is_empty","len","new","pop_back","pop_front","push_back","push_front","try_from","try_into","type_id","vzip","IntervalHeap","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","max","min","new","pop_max","pop_min","push","to_owned","try_from","try_into","type_id","vzip","LazySegtree","Updatable","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","update","vzip","Elem","Foldable","LazySegtreeCoeff","Updatable","borrow","borrow_mut","fold","from","init_with_vec","into","new","try_from","try_into","type_id","update","vzip","Elem","LazySkewHeap","add","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","meld","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","Elem","LiChaoTree","Max","Min","Mode","add_line","add_segment","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","from","from","into","into","new","query","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","MultiSet","borrow","borrow_mut","clone","clone_into","contains","count","default","first","fmt","from","insert","into","is_empty","last","len","new","pop_first","pop_last","remove","to_owned","try_from","try_into","type_id","vzip","At","PartiallyPersistentUnionFind","at","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","is_same","latest","merge","new","root_of","size_of","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","PersistentArray","borrow","borrow_mut","from","get","into","new","set","try_from","try_into","type_id","vzip","PersistentQueue","back","borrow","borrow_mut","default","fmt","from","front","into","is_empty","len","new","pop","push","try_from","try_into","type_id","vzip","PersistentStack","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","iter","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","MAX","QwordTree","borrow","borrow_mut","contains","default","erase","erase_unchecked","from","insert","insert_unchecked","into","is_empty","len","max","max_le","min","min_ge","new","try_from","try_into","type_id","vzip","RangeSearchTree","RangeSearchTreeBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","default","from","from","into","into","new","search","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","RollbackableVec","assign","borrow","borrow_mut","clone","clone_into","default","fmt","from","from","index","into","is_empty","len","new","pop","push","rollback","to_owned","try_from","try_into","type_id","vzip","Assignable","Foldable","Monoid","Segtree","Updatable","assign","borrow","borrow_mut","clone","clone_into","fold","from","index","into","new","to_owned","try_from","try_into","type_id","update","vzip","SegtreeBeats","add","borrow","borrow_mut","chmax","chmin","clone","clone_into","fmt","from","get_max","get_min","get_sum","into","new","new_with_vec","to_owned","try_from","try_into","type_id","vzip","Elem","Indexable","SegtreeLinearAdd","borrow","borrow_mut","from","get","into","new","try_from","try_into","type_id","update","vzip","SegtreeOnSegtree","SegtreeOnSegtreeBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","default","fold","from","from","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","SkewHeap","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","meld","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","SparseTable","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","vzip","Elem","Foldable","Max","Min","Mode","StarrySkyTree","Updatable","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fold","from","from","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","SuccinctDict","access","borrow","borrow_mut","clone","clone_into","count","from","into","is_empty","len","new","rank","select","to_owned","try_from","try_into","type_id","vzip","Assignable","Foldable","Foldable2D","Indexable","Output","Output","Output","Updatable","Value","Value","assign","fold","fold","get","update","UnionFind","borrow","borrow_mut","count_groups","from","get_groups","into","is_same","merge","new","new_with_values","root_of","size_of","try_from","try_into","type_id","value_of","vzip","WaveletMatrix","access","borrow","borrow_mut","clone","clone_into","count","from","into","maximum","minimum","new","next_value","prev_value","quantile","range_freq","rank","select","to_owned","try_from","try_into","type_id","vzip","Circle","Eps","Line","Vector","abs","abs","abs_sq","add","angle","angle_diff","area_intersection_circle_polygon","area_intersection_circles","area_polygon","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ccw","center","circumcircle","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","closest_pair","common_tangent_circles","convex","convex_cut","convex_diameter","convex_hull","cross","cross","default","default","default","diff","dist_line_point","dist_segment_point","dist_segments","div","dot","dot","eq","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","ge","gt","incircle","intersect_circle_line","intersect_circle_segment","intersect_circles","intersect_line_segment","intersect_segments","into","into","into","into","is_orthogonal","is_parallel","le","lt","mul","ne","new","new","new","normal","normal","partial_cmp","point_in_polygon","polar","projection","radius","reflection","sub","tangent_circle","to","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unit","unit","vzip","vzip","vzip","vzip","area_intersection_circle_polygon","area_intersection_circles","area_polygon","CCW","CLOCKWISE","COUNTER_CLOCKWISE","ONLINE_BACK","ONLINE_FRONT","ON_SEGMENT","borrow","borrow_mut","ccw","clockwise","clone","clone_into","counter_clockwise","eq","fmt","from","into","on_segment","online_back","online_front","to_owned","to_value","try_from","try_into","type_id","vzip","circumcircle","closest_pair","common_tangent_circles","is_convex","convex_cut","convex_diameter","Hull","Lower","Upper","borrow","borrow_mut","clone","clone_into","convex_hull","eq","from","half_hull","into","to_owned","try_from","try_into","type_id","vzip","dist_line_point","dist_segment_point","dist_segments","incircle","CROSSED","IntersectCircleLine","OUTSIDE","TANGENT","borrow","borrow_mut","clone","clone_into","crossed","eq","fmt","from","intersect_circle_line","into","outside","tangent","to_owned","try_from","try_into","type_id","vzip","INSIDE","IntersectCircleSegment","ONE_CROSSPOINT","OUTSIDE","TANGENT","TWO_CROSSPOINTS","borrow","borrow_mut","clone","clone_into","eq","fmt","from","inside","intersect_circle_segment","into","one_crosspoint","outside","tangent","to_owned","try_from","try_into","two_crosspoints","type_id","vzip","CIRCUMSCRIBED","INSCRIBED","INSIDE","INTERSECTED","IntersectCircles","OUTSIDE","SAME","borrow","borrow_mut","circumscribed","clone","clone_into","eq","fmt","from","inscribed","inside","intersect_circles","intersected","into","num_common_tangent","outside","same","to_owned","try_from","try_into","type_id","vzip","CROSSED","IntersectLineSegment","LEFTSIDE","OVERLAPPED","RIGHTSIDE","borrow","borrow_mut","clone","clone_into","crossed","eq","fmt","from","intersect_line_segment","into","leftside","overlapped","rightside","to_owned","try_from","try_into","type_id","vzip","INTERSECTED","IntersectSegments","NOT_INTERSECTED","OVERLAPPED","SAME","borrow","borrow_mut","clone","clone_into","eq","fmt","from","intersect_segments","intersected","into","not_intersected","overlapped","same","to_owned","try_from","try_into","type_id","vzip","EXCLUSION","INCLUSION","ON_SEGMENT","PointPolygon","borrow","borrow_mut","clone","clone_into","eq","exclusion","fmt","from","inclusion","into","on_segment","point_in_polygon","to_owned","try_from","try_into","type_id","vzip","tangent_circle","Directed","Direction","Edge","EdgeTrait","Graph","Undirected","Weight","add","add","articulation_points","bellman_ford","bfs","bi_match","biconnected","bipartite","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bridges","chinese_postman","chu_liu_edmonds","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cycle","detect_cycle","dijkstra","dinic","edges","enumerate_triangles","eulerian","extend","extend","flow","fmt","fmt","fmt","fmt","ford_fulkerson","from","from","from","from","from","from","from","functional_graph","hopcroft_karp","index","into","into","into","into","is_empty","kruskal","len","lowlink","max_independent_set","min_cost_flow","new","new","prim","pseudo_tree","rev","rev","scc","to","to","to","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tsort","tsp","two_edge","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","warshall_floyd","weight","weight","weight","yen","articulation_points","NumInf","bellman_ford","bfs","BipartiteMatching","add_edge","borrow","borrow_mut","from","into","matching","new","try_from","try_into","type_id","vzip","Lowlink","biconnected","check_bipartite","bridges","chinese_postman_problem","chu_liu_edmonds","directed_shortest","directed_shortest_cycle","detect_cycle","dijkstra","Dinic","add_edge","borrow","borrow_mut","clone","clone_into","from","get_edges","into","max_flow","new","reset","to_owned","try_from","try_into","type_id","vzip","enumerate_triangles","directed","undirected","DirectedEulerianTrail","add_edge","borrow","borrow_mut","clone","clone_into","from","into","new","solve","to_owned","try_from","try_into","type_id","vzip","UndirectedEulerianTrail","add_edge","borrow","borrow_mut","clone","clone_into","from","into","new","solve","to_owned","try_from","try_into","type_id","vzip","Cap","MaxFlow","add_edge","get_edges","max_flow","new","reset","FordFulkerson","add_edge","borrow","borrow_mut","clone","clone_into","from","get_edges","into","max_flow","new","reset","to_owned","try_from","try_into","type_id","vzip","Branch","FunctionalGraph","FunctionalGraphBuilder","Kind","Leaf","Loop","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","clone","clone_into","eq","fmt","from","from","from","grp_index_of","into","into","into","kind_of","loops","new","next_of","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Edge","HopcroftKarp","add_edge","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","from","from","get_matching","into","into","matching","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","kruskal","Lowlink","back","borrow","borrow_mut","ch","clone","clone_into","fmt","from","into","low","new","ord","par","size","to_owned","try_from","try_into","type_id","vzip","max_independent_set","MinCostFlow","add_edge","borrow","borrow_mut","clone","clone_into","from","into","min_cost_flow","new","to_owned","try_from","try_into","type_id","vzip","prim","PseudoTree","borrow","borrow_mut","from","group","in_loop","into","pseudo_tree","try_from","try_into","type_id","vzip","SCC","borrow","borrow_mut","from","groups","into","new","to_vec","try_from","try_into","type_id","vzip","tsort","tsp","two_edge_connected_components","warshall_floyd","Elem","yen_algorithm","D","DIR_4","Dir","Grid","L","Position","R","U","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","dx","dy","eq","eq","fmt","fmt","fmt","from","from","from","get","into","into","into","iter","iter_mut","mov_strict","new","new","new","to_graph","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","x","y","grid_to_graph","chmax","chmin","ds_macros","eps","for_loop","get_time","io","max","min","modulo","mul_vec","rec","sort_with","timer","trait_alias","bell_number","berlekamp_massey","binomial_coefficient","convolution","count_coprime","crt","divisor","enumerate_quotients","ext_gcd","factorial","factorial_prime_factor","factorize","ff","gcd_lcm","linalg","miller_rabin","mod_ops","montmort","nim_product","prime_test","primitive_root","rational","sum_floor_linear","sum_of_exponential_times_polynomial_limit","totient","totient_sum","bell_number_table","berlekamp_massey","BinomialCoefficient","ExtLucas","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","from","from","get","get","into","into","new","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","conv_and","conv_or","mobius_sub","mobius_super","subset_conv","zeta_sub","zeta_super","convolution_and","convolution_or","fast_mobius_subset","fast_mobius_superset","subset_convolution","fast_zeta_subset","fast_zeta_superset","count_coprime","crt","crt_vec","count_divisors","enumerate_divisors","Quotient","borrow","borrow_mut","clone","clone_into","enumerate_quotients","eq","fmt","from","from","into","q","to","to_owned","try_from","try_into","type_id","vzip","ext_gcd","FactorialTable","bell","bell_number","bernoulli","bernoulli_number","borrow","borrow_mut","catalan","catalan_number","clone","clone_into","comb","default","facto","fmt","from","h","into","inv_facto","new","perm","to_owned","try_from","try_into","type_id","vzip","factorial_prime_factor","sieve","trial","FactorizeSieve","borrow","borrow_mut","factorize","from","into","new","try_from","try_into","type_id","vzip","factorize","const_modint","modint","traits","ConstModInt","FF","Frac","Inv","One","Pow","Zero","add","add_assign","borrow","borrow_mut","clone","clone_into","default","div","div_assign","eq","fmt","fmt","frac","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","into","inv","mul","mul_assign","neg","new","one","pow","sub","sub_assign","sum","to_owned","to_string","try_from","try_into","type_id","vzip","zero","FF","Frac","Inv","ModInt","Modulo","One","Pow","Zero","add","add_assign","borrow","borrow_mut","clone","clone_into","default","div","div_assign","eq","fmt","fmt","frac","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","into","inv","mul","mul_assign","neg","new","one","pow","sub","sub_assign","sum","to_owned","to_string","try_from","try_into","type_id","value","vzip","zero","FF","Frac","Inv","Output","Output","Output","Pow","frac","inv","pow","GcdLcm","Output","gcd","gcd_lcm","lcm","determinant_p","inverse_p","matrix","square_matrix","determinant_p","inverse_p","Matrix","add","add_assign","borrow","borrow_mut","clone","clone_into","eq","from","from_vec","get_mut","height","index","into","mul","mul_assign","neg","new","sub","sub_assign","to_owned","to_vec","transpose","try_from","try_into","type_id","vzip","width","SquareMatrix","SquareMatrixElem","add","add_assign","borrow","borrow_mut","clone","clone_into","eq","fmt","from","from_vec","get_mut","index","into","mul","mul_assign","neg","new","pow","size","straight_mul","strassen_mul","sub","sub_assign","to_owned","to_vec","transpose","try_from","try_into","type_id","unit","vzip","miller_rabin","enum_inv","inv","inv_p","log","pow","sqrt","enumerate_mod_inv","mod_inv","mod_inv_p","mod_log","mod_pow","mod_sqrt","montmort","nim_product_16","nim_product_32","nim_product_64","nim_product_8","eratosthenes","traits","EratosthenesSieve","borrow","borrow_mut","from","into","is_prime","new","try_from","try_into","type_id","vzip","CheckPrime","is_prime","primitive_root","Rational","add","add_assign","borrow","borrow_mut","clone","clone_into","div","div_assign","eq","fmt","from","from","into","mul","mul_assign","neg","new","partial_cmp","sub","sub_assign","to_owned","try_from","try_into","type_id","vzip","sum_floor_linear","sum_of_exponential_times_polynomial_limit","totient","totient_table","totient_sum","dice","paren","parse_paren","Dice","back","borrow","borrow_mut","bottom","clone","clone_into","eq","fmt","from","front","into","left","new","right","rot_back","rot_clockwise","rot_counterclockwise","rot_front","rot_left","rot_right","to_owned","top","try_from","try_into","type_id","vzip","check_paren","Elem","Paren","ParseResult","Value","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","elems","fmt","fmt","from","from","into","into","parse_paren","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","close","inner","open","rand_range","num","one_zero","Float","Int","Signed","Unsigned","One","Output","Output","Zero","one","zero","Tree","TreeEdge","TreeEdgeTrait","TreeNode","Weight","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","centroid","children","clone","clone","clone","clone_into","clone_into","clone_into","depth_query","euler_tour","extend","extend_rooted","fmt","fmt","fmt","from","from","from","from","from","from","hld","index","into","into","into","is_empty","lca","len","neighbors","neighbors_size","new","new","nodes","parent","rerooting","rev","rev","rooted_isomorphism","rooting","to","to","to","to_owned","to_owned","to_owned","tree_dp","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","utils","vzip","vzip","vzip","weight","weight","weight","centroids","TreeDepthQuery","ancestor","borrow","borrow_mut","children_query","from","into","me_query","new","try_from","try_into","type_id","vzip","EulerTour","borrow","borrow_mut","from","into","new","point_query","subtree_query","try_from","try_into","type_id","vzip","HLD","borrow","borrow_mut","clone","clone_into","fmt","from","get_id","into","lca","new","parent","path_query_edge","path_query_vertex","subtree_query_edge","subtree_query_vertex","to_owned","try_from","try_into","type_id","vzip","DoublingLCA","ancestor","borrow","borrow_mut","from","get_lca","into","jump","new","try_from","try_into","type_id","vzip","RerootingDP","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","rooted_isomorphism","rooting","TreeDP","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","tree_diameter","tree_distance","tree_height","tree_path","bits","fastio","join_str","linear","num_inf","swap","transpose","xor_shift","yesno","highest_one","FastIO","borrow","borrow_mut","drop","from","getc","into","new","peek","read_chars","read_f64","read_i32","read_i64","read_isize","read_u32","read_u64","read_usize","skip","try_from","try_into","type_id","vzip","write","writeln","JoinStr","join_str","Linear","a","apply","b","borrow","borrow_mut","clone","clone_into","fmt","from","into","mov_x","to_owned","try_from","try_into","type_id","vzip","Inf","NegInf","NumInf","Value","add","borrow","borrow_mut","clone","clone_into","cmp","eq","fmt","from","into","is_inf","is_neg_inf","is_value","neg","partial_cmp","sub","to_owned","try_from","try_into","type_id","unwrap","vzip","swap_vv","Output","Transpose","transpose","XorShift","borrow","borrow_mut","clone","clone_into","fmt","from","gen","into","new","to_owned","try_from","try_into","type_id","vzip","YesNo","yesno"],"q":[[0,"haar_lib"],[32,"haar_lib::algebra"],[45,"haar_lib::algebra::action"],[53,"haar_lib::algebra::add_sum"],[72,"haar_lib::algebra::affine"],[88,"haar_lib::algebra::bitxor"],[138,"haar_lib::algebra::dihedral"],[169,"haar_lib::algebra::dual"],[184,"haar_lib::algebra::max"],[200,"haar_lib::algebra::min"],[216,"haar_lib::algebra::prod"],[232,"haar_lib::algebra::sum"],[249,"haar_lib::algebra::traits"],[263,"haar_lib::algebra::update"],[279,"haar_lib::algebra::update_sum"],[298,"haar_lib::algo"],[330,"haar_lib::algo::bsearch"],[333,"haar_lib::algo::bsearch_f"],[346,"haar_lib::algo::bsearch_f::SearchResult"],[348,"haar_lib::algo::compressor"],[382,"haar_lib::algo::edit_distance"],[383,"haar_lib::algo::enumerate_bitset"],[390,"haar_lib::algo::enumerate_bitset::gray_code"],[391,"haar_lib::algo::enumerate_bitset::subset_asc"],[392,"haar_lib::algo::enumerate_bitset::subset_between"],[393,"haar_lib::algo::enumerate_bitset::subset_desc"],[394,"haar_lib::algo::enumerate_bitset::subset_size_k"],[395,"haar_lib::algo::enumerate_bitset::superset_asc"],[396,"haar_lib::algo::enumerate_bitset::superset_desc"],[397,"haar_lib::algo::imos_1d"],[409,"haar_lib::algo::imos_2d"],[421,"haar_lib::algo::interval_scheduling"],[422,"haar_lib::algo::inversion_number"],[423,"haar_lib::algo::kmp"],[438,"haar_lib::algo::knapsack"],[443,"haar_lib::algo::knapsack::limited"],[444,"haar_lib::algo::knapsack::small_quantity"],[445,"haar_lib::algo::knapsack::small_value"],[446,"haar_lib::algo::knapsack::small_weight"],[447,"haar_lib::algo::knapsack::unlimited"],[448,"haar_lib::algo::lcs"],[449,"haar_lib::algo::lis"],[450,"haar_lib::algo::majority_vote"],[451,"haar_lib::algo::manacher"],[452,"haar_lib::algo::max_partial_sum"],[453,"haar_lib::algo::max_rect"],[455,"haar_lib::algo::merge"],[458,"haar_lib::algo::mo"],[470,"haar_lib::algo::num_subseq"],[471,"haar_lib::algo::parallel_binary_search"],[472,"haar_lib::algo::permutation"],[475,"haar_lib::algo::psp"],[500,"haar_lib::algo::rle"],[501,"haar_lib::algo::rolling_hash"],[523,"haar_lib::algo::sa"],[540,"haar_lib::algo::sliding_window"],[542,"haar_lib::algo::static_range_freq_query"],[553,"haar_lib::algo::static_range_inversions_query"],[565,"haar_lib::algo::subset_sum"],[567,"haar_lib::algo::subset_sum::count"],[568,"haar_lib::algo::subset_sum::limited"],[569,"haar_lib::algo::two_sat"],[583,"haar_lib::algo::zalgo"],[584,"haar_lib::ds"],[618,"haar_lib::ds::binary_trie"],[643,"haar_lib::ds::cht"],[676,"haar_lib::ds::cumulative_sum_1d"],[705,"haar_lib::ds::cumulative_sum_2d"],[734,"haar_lib::ds::disjoint_sparse_table"],[747,"haar_lib::ds::dual_segtree"],[763,"haar_lib::ds::fenwick"],[783,"haar_lib::ds::fenwick_add"],[800,"haar_lib::ds::fenwick_on_fenwick"],[831,"haar_lib::ds::foldable_deque"],[850,"haar_lib::ds::interval_heap"],[872,"haar_lib::ds::lazy_segtree"],[885,"haar_lib::ds::lazy_segtree_coeff"],[901,"haar_lib::ds::lazy_skew_heap"],[924,"haar_lib::ds::li_chao"],[954,"haar_lib::ds::multiset"],[979,"haar_lib::ds::partially_persistent_unionfind"],[1004,"haar_lib::ds::persistent_array"],[1016,"haar_lib::ds::persistent_queue"],[1034,"haar_lib::ds::persistent_stack"],[1053,"haar_lib::ds::qword_tree"],[1076,"haar_lib::ds::range_search_tree"],[1102,"haar_lib::ds::rollbackable_vector"],[1125,"haar_lib::ds::segtree"],[1146,"haar_lib::ds::segtree_beats"],[1167,"haar_lib::ds::segtree_linear_add"],[1181,"haar_lib::ds::segtree_on_segtree"],[1208,"haar_lib::ds::skew_heap"],[1229,"haar_lib::ds::sparse_table"],[1240,"haar_lib::ds::starry_sky_tree"],[1269,"haar_lib::ds::succinct_dict"],[1288,"haar_lib::ds::traits"],[1303,"haar_lib::ds::unionfind"],[1321,"haar_lib::ds::wavelet_matrix"],[1344,"haar_lib::geom"],[1460,"haar_lib::geom::area_intersection_circle_polygon"],[1461,"haar_lib::geom::area_intersection_circles"],[1462,"haar_lib::geom::area_polygon"],[1463,"haar_lib::geom::ccw"],[1489,"haar_lib::geom::circumcircle"],[1490,"haar_lib::geom::closest_pair"],[1491,"haar_lib::geom::common_tangent_circles"],[1492,"haar_lib::geom::convex"],[1493,"haar_lib::geom::convex_cut"],[1494,"haar_lib::geom::convex_diameter"],[1495,"haar_lib::geom::convex_hull"],[1512,"haar_lib::geom::dist_line_point"],[1513,"haar_lib::geom::dist_segment_point"],[1514,"haar_lib::geom::dist_segments"],[1515,"haar_lib::geom::incircle"],[1516,"haar_lib::geom::intersect_circle_line"],[1537,"haar_lib::geom::intersect_circle_segment"],[1562,"haar_lib::geom::intersect_circles"],[1590,"haar_lib::geom::intersect_line_segment"],[1613,"haar_lib::geom::intersect_segments"],[1636,"haar_lib::geom::point_in_polygon"],[1657,"haar_lib::geom::tangent_circle"],[1658,"haar_lib::graph"],[1765,"haar_lib::graph::articulation_points"],[1766,"haar_lib::graph::bellman_ford"],[1768,"haar_lib::graph::bfs"],[1769,"haar_lib::graph::bi_match"],[1781,"haar_lib::graph::biconnected"],[1783,"haar_lib::graph::bipartite"],[1784,"haar_lib::graph::bridges"],[1785,"haar_lib::graph::chinese_postman"],[1786,"haar_lib::graph::chu_liu_edmonds"],[1787,"haar_lib::graph::cycle"],[1788,"haar_lib::graph::cycle::directed_shortest"],[1789,"haar_lib::graph::detect_cycle"],[1790,"haar_lib::graph::dijkstra"],[1791,"haar_lib::graph::dinic"],[1808,"haar_lib::graph::enumerate_triangles"],[1809,"haar_lib::graph::eulerian"],[1811,"haar_lib::graph::eulerian::directed"],[1826,"haar_lib::graph::eulerian::undirected"],[1841,"haar_lib::graph::flow"],[1848,"haar_lib::graph::ford_fulkerson"],[1865,"haar_lib::graph::functional_graph"],[1907,"haar_lib::graph::hopcroft_karp"],[1933,"haar_lib::graph::kruskal"],[1934,"haar_lib::graph::lowlink"],[1954,"haar_lib::graph::max_independent_set"],[1955,"haar_lib::graph::min_cost_flow"],[1970,"haar_lib::graph::prim"],[1971,"haar_lib::graph::pseudo_tree"],[1983,"haar_lib::graph::scc"],[1995,"haar_lib::graph::tsort"],[1996,"haar_lib::graph::tsp"],[1997,"haar_lib::graph::two_edge"],[1998,"haar_lib::graph::warshall_floyd"],[1999,"haar_lib::graph::yen"],[2001,"haar_lib::grid"],[2062,"haar_lib::grid::to_graph"],[2063,"haar_lib::macros"],[2078,"haar_lib::math"],[2104,"haar_lib::math::bell_number"],[2105,"haar_lib::math::berlekamp_massey"],[2106,"haar_lib::math::binomial_coefficient"],[2134,"haar_lib::math::convolution"],[2141,"haar_lib::math::convolution::conv_and"],[2142,"haar_lib::math::convolution::conv_or"],[2143,"haar_lib::math::convolution::mobius_sub"],[2144,"haar_lib::math::convolution::mobius_super"],[2145,"haar_lib::math::convolution::subset_conv"],[2146,"haar_lib::math::convolution::zeta_sub"],[2147,"haar_lib::math::convolution::zeta_super"],[2148,"haar_lib::math::count_coprime"],[2149,"haar_lib::math::crt"],[2151,"haar_lib::math::divisor"],[2153,"haar_lib::math::enumerate_quotients"],[2171,"haar_lib::math::ext_gcd"],[2172,"haar_lib::math::factorial"],[2198,"haar_lib::math::factorial_prime_factor"],[2199,"haar_lib::math::factorize"],[2201,"haar_lib::math::factorize::sieve"],[2212,"haar_lib::math::factorize::trial"],[2213,"haar_lib::math::ff"],[2216,"haar_lib::math::ff::const_modint"],[2268,"haar_lib::math::ff::modint"],[2322,"haar_lib::math::ff::traits"],[2332,"haar_lib::math::gcd_lcm"],[2337,"haar_lib::math::linalg"],[2341,"haar_lib::math::linalg::determinant_p"],[2342,"haar_lib::math::linalg::inverse_p"],[2343,"haar_lib::math::linalg::matrix"],[2371,"haar_lib::math::linalg::square_matrix"],[2404,"haar_lib::math::miller_rabin"],[2405,"haar_lib::math::mod_ops"],[2411,"haar_lib::math::mod_ops::enum_inv"],[2412,"haar_lib::math::mod_ops::inv"],[2413,"haar_lib::math::mod_ops::inv_p"],[2414,"haar_lib::math::mod_ops::log"],[2415,"haar_lib::math::mod_ops::pow"],[2416,"haar_lib::math::mod_ops::sqrt"],[2417,"haar_lib::math::montmort"],[2418,"haar_lib::math::nim_product"],[2422,"haar_lib::math::prime_test"],[2424,"haar_lib::math::prime_test::eratosthenes"],[2435,"haar_lib::math::prime_test::traits"],[2437,"haar_lib::math::primitive_root"],[2438,"haar_lib::math::rational"],[2464,"haar_lib::math::sum_floor_linear"],[2465,"haar_lib::math::sum_of_exponential_times_polynomial_limit"],[2466,"haar_lib::math::totient"],[2468,"haar_lib::math::totient_sum"],[2469,"haar_lib::misc"],[2472,"haar_lib::misc::dice"],[2499,"haar_lib::misc::paren"],[2500,"haar_lib::misc::parse_paren"],[2530,"haar_lib::misc::parse_paren::Elem"],[2533,"haar_lib::testtools"],[2534,"haar_lib::traits"],[2536,"haar_lib::traits::num"],[2540,"haar_lib::traits::one_zero"],[2546,"haar_lib::tree"],[2620,"haar_lib::tree::centroid"],[2621,"haar_lib::tree::depth_query"],[2634,"haar_lib::tree::euler_tour"],[2646,"haar_lib::tree::hld"],[2667,"haar_lib::tree::lca"],[2680,"haar_lib::tree::rerooting"],[2691,"haar_lib::tree::rooted_isomorphism"],[2692,"haar_lib::tree::rooting"],[2693,"haar_lib::tree::tree_dp"],[2704,"haar_lib::tree::utils"],[2708,"haar_lib::utils"],[2717,"haar_lib::utils::bits"],[2718,"haar_lib::utils::fastio"],[2742,"haar_lib::utils::join_str"],[2744,"haar_lib::utils::linear"],[2761,"haar_lib::utils::num_inf"],[2787,"haar_lib::utils::swap"],[2788,"haar_lib::utils::transpose"],[2791,"haar_lib::utils::xor_shift"],[2806,"haar_lib::utils::yesno"]],"d":["代数的構造","","","","","","データ構造","","","幾何","","","グラフ一般に関するもの","","","","","macro_exportされたmacro置き場","数学","","","分類を放置しているもの","","","…","","","","","","木に関するもの","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","二分探索","","座標圧縮","","","","","区間スケジューリング問題","転倒数","Knuth-Morris-Pratt法","ナップサック問題","最長共通部分列","最長増加部分列","Boyer-Moore majority vote algorithm","","最大連続部分和","","","","相異なる部分列の総数","並列二分探索","","Project Selection Problem","Run Length Encoding","","","スライド最小値","配列に対する範囲頻度取得クエリ","範囲転倒数取得クエリ","部分和問題","","","lower_bound, upper_boundの組を求める。","x以上となる最小のindexを求める。","xを超える最小のindexを求める。","","","","","","","二分探索","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","<code>i</code>番目の値を返す。","<code>value</code>が何番目の値(0-index)かを返す。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","…","数列の転倒数を計算する。","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","個数制限付きナップサック問題","要素数が小さいナップサック問題","価値の総和が小さいナップサック問題","容量が小さいナップサック問題","個数制限無しナップサック問題","列a, bの最長共通部分列の一つを求める。","列の最長増加部分列の一つを求める。","","","…","…","…","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","返り値<code>ret</code>に対して、<code>ret[i]</code>は<code>a[0..i]</code>…","","","","","Project Selection Problem","","","","","Returns the argument unchanged.","頂点iが青ならばcの利益を得る。","頂点iとjがともに青ならばcの利益を得る。","頂点iとjがともに赤ならばcの利益を得る。","頂点iが赤ならばcの利益を得る。","頂点iが赤ならば、頂点jも赤…","Calls <code>U::from(self)</code>.","頂点iは青でなければならない。","頂点iは赤でなければならない。","","頂点iが青ならばcの損失になる。","頂点iとjが異なる色ならばcの損失となる。","頂点iが赤ならばcの損失になる。","頂点iが赤かつ頂点jが青…","must be制約を破った場合、<code>None</code>…","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","…","…","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Time Complexity $O(|a|)$","Time Complexity $O(log |a|)$","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","部分和問題 …","…","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Convex Hull Trick","1次元累積和","2次元累積和","半群の列の区間演算を行う(O(1))","","","","","","","","係数乗算付き区間加算区間総和遅延セグ木","遅延加算付き融合可能ヒープ","Li-Chao tree","","部分永続UnionFind","永続配列","永続キュー","永続スタック","64分木","領域内の点を列挙する","ロールバック可能Vec","","","区間一次関数加算セグメントツリー","","融合可能ヒープ","冪等性と結合性をもつ列の区間取得(O(1))","区間加算・区間Max(Min)","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","…","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","…","","","","","","","","","","","","","","","","","","","","","","","Time complexity O(1)","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Time Complexity O(1)","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","使用する点を登録する。","","","","","","","","","","","Time Complexity $O(\\\\log ^ 2 n)$","Time Complexity $O(\\\\log ^ 2 n)$","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Time Complexity $O(\\\\log ^ 2 n)$","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","時刻tでの状態","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","最新時点の状態","","","","Complexity","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","永続スタック","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","　0 ~ 16777215 ($2^24 - 1$) の値の集合を管理する","","","xを含むかどうかを判定する","","xを集合から削除する","Safety","Returns the argument unchanged.","xを集合に加える","Safety","Calls <code>U::from(self)</code>.","集合が空かどうかを判断する","集合に含まれている要素数を返す","最大値を返す","x以下で最大の値を返す","最小値を返す","x以上で最小の値を返す","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","範囲<code>l..r</code>に一次関数<code>ax + b</code>の値を加算する。(<code>x</code>…","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","[l, r) に含まれる<code>b</code>の個数","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","[0, index) に含まれる<code>b</code>の個数","nth(0-indexed)番目の<code>b</code>の位置","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","<code>index</code>番目の値を得る。","","","","","<code>range</code>に含まれる<code>value</code>の個数。","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>range</code>での最大値","<code>range</code>での最小値","","<code>range</code>で<code>lb</code>以上の最小値","<code>range</code>で<code>ub</code>未満の最大値","<code>range</code>でk(0-indexed)番目に小さい値。","<code>range</code>で<code>lb</code>以上<code>ub</code>未満の値の個数","[0, index)に含まれる<code>value</code>の個数。","<code>nth</code>(0-indexed)番目の<code>value</code>の位置。","","","","","","","","","","","","","","","","円と多角形の共通部分の面積","2つの円の共通部分の面積","多角形の面積","","","","","","","","","点と線分の位置関係","","三角形の外接円","","","","","","","","","最近点対","2つの円の共通接線","凸多角形の判定","凸多角形の直線での切断","凸多角形の直径","凸包","","","","","","","直線と点の距離","線分と点の距離","2つの線分間の距離","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","三角形の内接円","円と直線の位置関係","円と線分の位置関係","2つの円の位置関係","直線と線分の位置関係","2つの線分の位置関係","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","点と多角形の位置関係","","","","","","点を通る円の接線","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","関節点の列挙","負閉路を持つグラフの最短経路 (Bellman-Ford)","","二部マッチング","二重頂点連結分解","二部グラフ判定","","","","","","","","","橋の列挙","中国人郵便配達問題","有向グラフ上の最小有向全域木を求める","","","","","","","","","","有向グラフの閉路検出","非負重み付き最短経路 (Dijkstra)","最大流 (Dinic)","","","(準)Eulerグラフの判定","","","","","","","","最大流 (Ford-Fulkerson)","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","二部マッチング (Hopcroft-Karp)","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","最小全域木 (Kruskal)","","","最大独立集合","最小費用流","","","最小全域木 (Prim)","","","","強連結成分分解","","","","","","","","","","","","","","","","トポロジカルソート","巡回セールスマン問題","二重辺連結成分分解","","","","","","","","","全頂点間最短経路長","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","橋の列挙","Time complexity O(V ^ 2 * 2 ^ V)","有向グラフ上の最小有向全域木を求める","…","…","","Time complexity O((E + V) log V)","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","…","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","最大独立集合を求める","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Time complexity O(N)","","","Time complexity O(n ^ 3)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","グリッドをグラフに変換する","","","","","","","","","","","","","","","","","","","","","中国剰余定理","約数列挙","","拡張ユークリッドの互除法","","$a!$の素因数pの個数を求める。","","","最大公約数・最小公倍数","","","mod mでの演算","","","","原始根","有理数","$\\\\sum_{i=0}^{n-1} \\\\lfloor \\\\frac{ai+b}{m} \\\\rfloor$","$\\\\sum_{i=0}^{\\\\infty} r^ii^d$","トーシェント関数","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Time complexity O(sqrt n)","Time complexity O(sqrt n)","","","","","","1以上N以下の自然数xについて<code>floor(N/x)</code>…","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","n個からk個とりだす組み合わせの個数 (nCk)","","nの階乗","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","nの階乗の逆元","Time complexity O(n)","n個からk個とりだす順列の個数 (nPk)","","","","","","$a!$の素因数pの個数を求める。","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","素数mod p上での行列式を求める。 $O(n^3)$","素数mod p上での逆行列を求める。 $O(n^3)$","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","0,1,..,nの素数mod pでの逆元を列挙する。","mod mでの逆元","素数mod pでの逆元","$a^x = b \\\\bmod m$を満たすxを求める。","$x^p \\\\bmod m$を求める。","$x^2 = a \\\\bmod p$を満たすxを一つ求める。","0,1,..,nの素数mod pでの逆元を列挙する。","mod mでの逆元","素数mod pでの逆元","$a^x = b \\\\bmod m$を満たすxを求める。","$x^p \\\\bmod m$を求める。","$x^2 = a \\\\bmod p$を満たすxを一つ求める。","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","$\\\\sum_{i=0}^{\\\\infty} r^ii^d$","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","括弧列が対応が取れているかを調べる","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","浮動小数点型","整数型","符号付きの数値型","非負の数値型","乗算についての単位元をもつ","","","加算についての単位元をもつ","","","","","","","","","","","","","","重心列挙","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","重軽分解","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","最小共通祖先","","","","","","","","全方位木DP","","","","根付き木に変換","","","","","","","木DP","","","","","","","","","","","","","","","","","","Tree depth query","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","重軽分解","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","演算は可換性を仮定する。","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","…","","","","","","全方位木DP","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","木の任意の2頂点の距離の最大値を求める。","…","…","…","","","","","正の無限大、負の無限大をもつ数","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,96,96,96,96,96,96,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,26,26,26,27,26,27,26,27,26,27,26,26,27,27,26,27,27,27,27,26,27,26,27,26,27,26,27,26,27,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,0,0,0,0,0,0,0,0,0,32,0,31,208,33,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,46,46,0,46,46,0,46,46,46,46,46,46,209,209,0,0,48,48,50,48,50,48,48,50,48,50,48,50,50,48,50,48,50,50,50,48,48,50,50,48,50,48,50,48,50,48,50,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,53,53,53,53,53,53,53,53,53,53,0,56,56,56,56,56,56,56,56,56,56,56,0,0,0,57,57,57,57,57,57,57,57,57,57,57,57,57,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,0,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,0,0,0,66,68,66,68,66,68,66,68,66,66,68,66,66,68,66,68,66,68,66,68,0,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,0,0,0,71,71,71,71,71,71,71,71,71,71,0,72,72,72,72,72,72,72,72,72,72,72,0,0,0,0,0,73,73,73,73,73,73,73,73,73,73,73,73,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,0,0,78,78,0,76,78,76,78,76,78,76,78,76,78,78,76,78,76,78,76,76,76,78,76,78,76,78,76,78,76,78,76,0,0,0,0,80,81,80,81,80,81,81,81,81,80,81,81,80,81,80,81,80,81,80,81,80,81,80,80,81,0,0,0,0,82,83,82,83,82,83,83,83,83,82,83,83,82,83,82,83,82,83,82,83,82,83,82,82,83,0,0,0,85,85,85,85,85,85,85,85,85,85,0,0,0,87,87,87,87,87,87,87,87,87,87,87,87,87,0,0,0,0,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,0,0,0,0,91,91,91,91,91,91,91,91,91,91,91,91,91,0,0,92,92,93,92,93,92,92,93,92,93,92,93,93,92,93,92,93,92,92,93,92,93,92,93,92,93,93,92,93,0,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,0,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,0,0,97,97,97,97,97,97,97,97,97,97,97,0,0,0,0,99,99,99,99,99,99,99,99,99,99,99,99,0,0,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,0,0,105,105,0,103,103,103,105,103,105,105,105,105,105,103,105,103,105,103,103,105,103,105,103,105,103,105,103,105,0,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,0,0,107,107,108,107,108,107,108,107,108,108,107,107,107,108,108,107,108,107,108,107,108,107,108,0,109,109,109,109,109,109,109,109,109,109,109,0,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,0,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,0,0,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,0,0,113,114,113,114,113,113,113,113,113,114,113,114,113,113,114,113,114,113,114,113,114,113,114,113,0,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,0,0,0,0,0,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,0,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,0,0,0,120,120,120,120,120,120,120,120,120,120,120,0,0,121,122,121,122,121,121,121,121,121,122,122,121,122,121,121,121,122,121,122,121,122,121,122,122,121,0,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,0,124,124,124,124,124,124,124,124,124,124,0,0,125,125,0,0,0,127,125,127,125,125,125,127,127,125,127,125,127,125,127,125,127,125,127,125,127,127,125,0,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,0,0,0,0,210,211,212,0,213,214,213,210,211,212,214,0,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,0,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,0,0,0,0,131,133,131,131,131,131,0,0,0,134,131,133,135,134,131,133,135,0,135,0,134,131,133,135,134,131,133,135,0,0,0,0,0,0,131,133,131,133,135,133,0,0,0,131,131,133,134,131,133,135,131,133,135,134,131,133,135,133,134,134,0,0,0,0,0,0,134,131,133,135,133,133,134,134,131,134,134,133,135,131,133,134,0,131,133,135,133,131,0,133,134,131,133,135,134,131,133,135,134,131,133,135,134,131,133,135,131,133,134,131,133,135,0,0,0,0,137,137,137,137,137,137,137,0,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,0,0,0,0,0,0,0,138,138,138,138,138,138,0,138,138,0,138,138,138,138,138,138,0,0,0,0,139,0,139,139,139,139,139,139,139,139,139,139,0,139,139,139,139,139,139,139,139,140,0,140,140,140,140,140,140,140,140,140,140,140,140,0,140,140,140,140,140,140,140,140,140,140,141,141,141,141,0,141,141,141,141,141,141,141,141,141,141,141,141,0,141,141,141,141,141,141,141,141,141,141,142,0,142,142,142,142,142,142,142,142,142,142,142,0,142,142,142,142,142,142,142,142,142,143,0,143,143,143,143,143,143,143,143,143,143,0,143,143,143,143,143,143,143,143,143,143,144,144,144,0,144,144,144,144,144,144,144,144,144,144,144,0,144,144,144,144,144,0,0,0,0,0,0,0,146,147,147,0,0,0,0,0,0,149,148,145,147,149,148,145,147,0,0,0,149,148,145,147,149,148,145,147,0,0,0,0,147,0,0,147,147,0,149,148,145,147,0,146,149,149,148,145,147,149,0,0,149,149,148,145,147,147,0,147,0,0,0,149,147,0,0,146,149,0,146,149,149,149,148,145,147,149,148,145,147,149,148,145,147,0,0,0,149,148,145,147,149,148,145,147,0,146,149,149,0,0,0,0,0,0,154,154,154,154,154,154,154,154,154,154,154,0,0,0,0,0,0,0,0,0,0,0,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,0,0,0,0,157,157,157,157,157,157,157,157,157,157,157,157,157,157,0,158,158,158,158,158,158,158,158,158,158,158,158,158,158,153,0,153,153,153,153,153,0,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,162,0,0,0,162,162,160,160,161,162,160,161,162,160,162,162,162,162,160,161,162,161,160,161,162,161,161,160,161,162,160,161,162,160,161,162,160,161,162,160,161,162,0,0,163,163,164,163,164,164,164,164,163,164,163,163,164,163,163,164,163,164,163,164,163,164,163,164,0,0,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,0,0,165,165,165,165,165,165,165,165,165,165,165,165,165,165,0,0,166,166,166,166,166,166,0,166,166,166,166,0,167,167,167,167,167,167,167,167,167,167,167,0,0,0,0,0,0,168,168,0,0,168,0,168,168,168,169,168,170,169,168,170,169,168,170,169,168,170,169,168,168,168,169,168,169,168,170,169,168,170,170,169,168,170,170,170,169,169,168,170,0,169,168,170,169,168,170,169,168,170,169,168,170,169,168,170,169,169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,174,175,174,175,174,175,174,175,174,175,174,175,174,175,174,175,174,175,174,175,174,175,174,175,174,175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,176,176,176,0,176,176,176,176,176,176,176,176,176,176,176,176,0,0,0,177,0,177,177,177,0,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,0,0,0,0,178,178,178,178,178,178,178,178,178,178,0,0,0,0,0,0,0,0,0,0,0,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,0,0,0,0,0,0,0,0,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,181,182,182,0,0,0,215,216,217,0,217,216,215,0,218,218,218,218,0,0,0,0,0,0,0,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,0,0,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,186,186,186,186,186,186,186,186,186,0,219,0,0,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,0,0,0,0,0,0,0,0,0,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,0,0,190,0,190,189,190,189,190,189,190,189,190,189,189,190,189,190,189,190,0,189,190,189,190,189,190,189,190,189,190,220,220,220,0,0,0,0,0,0,0,0,13,12,0,12,13,0,0,0,0,196,193,194,195,193,194,195,0,194,193,194,195,193,194,195,0,0,195,195,193,194,195,196,193,193,194,195,193,0,193,193,194,195,195,0,195,194,194,193,195,195,194,0,196,193,0,0,196,193,193,193,194,195,0,193,194,195,193,194,195,193,194,195,0,193,194,195,196,193,193,0,0,198,198,198,198,198,198,198,198,198,198,198,198,0,199,199,199,199,199,199,199,199,199,199,199,0,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,0,201,201,201,201,201,201,201,201,201,201,201,201,0,202,202,202,202,202,202,202,202,202,202,0,0,0,203,203,203,203,203,203,203,203,203,203,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,0,221,0,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,152,152,0,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,0,222,0,222,0,207,207,207,207,207,207,207,207,207,207,207,207,207,207,0,223],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[]],[[]],[[]],[[]],0,[[]],[[]],[[[3,[2,2]]],[[3,[2,2]]]],[[]],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]],[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]],1],[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]]]],[[],[[3,[5,5]]]],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]],[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]]],[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]]]],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]]],[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]]]],[[]],[[]],[[],3],[[]],[[],9],[[],9],[[],10],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]],[0,[4,6,5,[8,[7]]]],[0,[4,6,5,[8,[7]]]]],[[0,[4,6,5,[8,[7]]]]]],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]]],[[0,[4,6,5,[8,[7]]]]]],[[]],0,[[]],[[]],[[[11,[2]]],[[11,[2]]]],[[]],[[],[[11,[5]]]],[[]],[[[11,[[0,[12,13,14]]]]]],[[]],[[],11],[[[11,[[0,[4,6,14]]]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[15,[2]]],[[15,[2]]]],[[]],[[],[[15,[5]]]],[[]],[[[15,[1]]]],[[[15,[16]]]],[[[15,[17]]]],[[[15,[18]]]],[[[15,[19]]]],[[[15,[20]]]],[[[15,[7]]]],[[[15,[21]]]],[[[15,[22]]]],[[[15,[23]]]],[[[15,[24]]]],[[[15,[25]]]],[[]],[[[15,[7]]]],[[[15,[19]]]],[[[15,[17]]]],[[[15,[25]]]],[[[15,[18]]]],[[[15,[1]]]],[[[15,[21]]]],[[[15,[23]]]],[[[15,[16]]]],[[[15,[20]]]],[[[15,[24]]]],[[[15,[22]]]],[[],15],[[[15,[18]]]],[[[15,[16]]]],[[[15,[23]]]],[[[15,[17]]]],[[[15,[1]]]],[[[15,[19]]]],[[[15,[20]]]],[[[15,[21]]]],[[[15,[22]]]],[[[15,[25]]]],[[[15,[7]]]],[[[15,[24]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[26,26],[27,27],[[]],[[]],[[26,28],29],[[]],[[]],[27],[[]],[[]],[27],[1,27],[27],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,[[]],[[]],[[[30,[2,2]]],[[30,[2,2]]]],[[]],[[]],[[[30,[31]]]],[[]],[32,[[30,[32]]]],[[[30,[33]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[34,[2]]],[[34,[2]]]],[[]],[[],[[34,[5]]]],[[]],[34],[[]],[[],34],[[[34,[[0,[35,14]]]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[36,[2]]],[[36,[2]]]],[[]],[[],[[36,[5]]]],[[]],[36],[[]],[[],36],[[[36,[[0,[35,14]]]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[37,[2]]],[[37,[2]]]],[[]],[[],[[37,[5]]]],[[]],[[[37,[12]]]],[[]],[[],37],[[[37,[6]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[38,[2]]],[[38,[2]]]],[[]],[[],[[38,[5]]]],[[]],[[[38,[13]]]],[[]],[[[38,[39]]]],[[],38],[[[38,[4]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],0,[[]],[[]],[[[40,[2]]],[[40,[2]]]],[[]],[[],[[40,[5]]]],[[]],[40],[[]],[[],40],[40],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[41,[2,2]]],[[41,[2,2]]]],[[]],[[[41,[[0,[4,5,[8,[[0,[6,5,[8,[7]]]]]]]],[0,[6,5,[8,[7]]]]]],1]],[[],[[41,[5,5]]]],[[[41,[[0,[4,5,[8,[[0,[6,5,[8,[7]]]]]]]],[0,[6,5,[8,[7]]]]]]]],[[[41,[[0,[4,5,[8,[[0,[6,5,[8,[7]]]]]]]],[0,[6,5,[8,[7]]]]]]]],[[]],[[]],[[],41],[[]],[[],9],[[],9],[[],10],[[[41,[[0,[4,5,[8,[[0,[6,5,[8,[7]]]]]]]],[0,[6,5,[8,[7]]]]]]]],[[[41,[[0,[4,5,[8,[[0,[6,5,[8,[7]]]]]]]],[0,[6,5,[8,[7]]]]]]]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[35],[35,1],[35,1],0,0,0,0,[[]],[[]],[[[0,[14,42,4,43,44,[8,[17]]]],[0,[14,42,4,43,44,[8,[17]]]],45],[[46,[[0,[14,42,4,43,44,[8,[17]]]]]]]],[[]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,[[[48,[[0,[2,35,47]]]],[0,[2,35,47]]]],[[[48,[[0,[2,35,47]]]],49]],[[]],[[]],[[]],[[]],[[[48,[[0,[2,35,47]]]]],[[50,[[0,[2,35,47]]]]]],[[[50,[2]]],[[50,[2]]]],[[[48,[2]]],[[48,[2]]]],[[]],[[]],[[[50,[[0,[2,35,47]]]],49],51],[[[50,[[0,[2,35,47]]]],49],51],[[],[[48,[5]]]],[[]],[[]],[[[50,[[0,[2,35,47]]]],1],[[0,[2,35,47]]]],[[[50,[[0,[2,35,47]]]],[0,[2,35,47]]],1],[[]],[[]],[[],[[48,[[0,[2,35,47]]]]]],[[[50,[[0,[2,35,47]]]]],1],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],[[],1],0,0,0,0,0,0,0,[19,51],[19,51],[[19,19],51],[19,51],[[19,19],51],[[19,19],51],[[19,19],51],0,[[]],[[]],[[[53,[[0,[14,52,13,4,43]]]]],[[54,[[0,[14,52,13,4,43]]]]]],[[]],[[]],[1,[[53,[[0,[14,52,13,4,43]]]]]],[[],9],[[],9],[[],10],[[[53,[[0,[14,52,13,4,43]]]],[55,[1]],[0,[14,52,13,4,43]]]],[[]],0,[[]],[[]],[[[56,[[0,[14,52,13,4,43]]]]],[[54,[[54,[[0,[14,52,13,4,43]]]]]]]],[[]],[[]],[[1,1],[[56,[[0,[14,52,13,4,43]]]]]],[[],9],[[],9],[[],10],[[[56,[[0,[14,52,13,4,43]]]],[55,[1]],[55,[1]],[0,[14,52,13,4,43]]]],[[]],[[],[[54,[1]]]],[[],7],0,[[]],[[]],[[[57,[2]]],[[57,[2]]]],[[]],[[[57,[58]],28],29],[[]],[[]],[[[57,[[0,[59,2]]]]],[[54,[1]]]],[[[54,[[0,[59,2]]]]],[[57,[[0,[59,2]]]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,[1,[[0,[5,[8,[1]],14,35,4,6]]]],[[[0,[5,14,4,35]]],[[0,[5,14,4,35]]]],[7,1],[1,[[0,[5,14,35,4]]]],[1,[[0,[5,14,35,4]]]],[[],[[54,[[0,[14,59]]]]]],[[],[[54,[1]]]],[[],60],[[],[[54,[1]]]],[[],60],[[[0,[14,59]]],1],[[]],[1],[1],[[[54,[[0,[35,14]]]],[54,[[0,[35,14]]]]],[[54,[[0,[35,14]]]]]],0,[[61,1,1]],[[]],[[]],[[]],[[]],[[1,1,[62,[45]],[62,[45]],[62,[45]],[62,[45]],[62,[45]]],61],[61],[[],9],[[],9],[[],10],[[]],[7,[[54,[7]]]],[[1,1,63,63,63],[[54,[1]]]],[[],64],[[[54,[[0,[35,14]]]]],51],[[],64],0,[[]],[[]],[65,65],[[]],[[]],[[65,1,7]],[[65,1,1,7]],[[65,1,1,7]],[[65,1,7]],[[65,1,1]],[[]],[[65,1]],[[65,1]],[1,65],[[65,1,7]],[[65,1,1,7]],[[65,1,7]],[[65,1,1,7]],[65,[[60,[24]]]],[[]],[[],9],[[],9],[[],10],[[]],[[],54],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[66,67],7],[[68,[55,[1]]],7],[[66,67],68],[[]],[[]],[[1,7,7],66],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,[[]],[[]],[69,69],[[]],[[69,28],29],[[]],[[69,1]],[[]],[69,[[54,[1]]]],[67,69],[[]],[69],[[],9],[[],9],[[],10],[[]],[1,[[54,[[0,[35,14]]]]]],[1,[[54,[[0,[35,14]]]]]],0,[[]],[[]],[[]],[[]],[[[54,[[0,[70,47]]]]],[[71,[[0,[70,47]]]]]],[[[71,[[0,[70,47]]]],[55,[1]],[0,[70,47]]],1],[[],9],[[],9],[[],10],[[]],0,[[72,[55,[1]]]],[[]],[[]],[[]],[[]],[[],72],[72,[[54,[7]]]],[[],9],[[],9],[[],10],[[]],0,0,[[1,1],[[54,[[0,[14,[8,[1]],4]]]]]],[[1,1],[[54,[64]]]],0,[[73,16,16]],[[73,16,16]],[[]],[[]],[[]],[[]],[1,73],[[73,16,16]],[73,[[60,[[54,[64]]]]]],[[],9],[[],9],[[],10],[[]],[[],[[54,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[74,74],[[]],[[74,7],1],[[],74],[[74,7],[[60,[1]]]],[[74,28],29],[[]],[[74,7],1],[[]],[74,64],[74,1],[[74,7],1],[[74,7],[[60,[7]]]],[[74,7],[[60,[7]]]],[[],74],[[]],[74,[[54,[7]]]],[[],9],[[],9],[[],10],[[74,7],1],[[]],0,0,0,0,0,[[[76,[75]],[77,[75]]]],[[]],[[]],[[]],[[]],[78,78],[[[76,[2]]],[[76,[2]]]],[[]],[[]],[[78,78],64],[[78,28],29],[[[76,[58]],28],29],[[]],[[]],[[]],[[]],[78,[[76,[75]]]],[[[76,[75]],75],75],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[[80,[79]]],[[81,[79]]]],[[[81,[[0,[2,79]]]]],[[81,[[0,[2,79]]]]]],[[]],[[[81,[[0,[58,79]]]],28],29],[[[81,[79]],[55,[1]]]],[[]],[[]],[[[81,[79]],1]],[[]],[[]],[[1,79],[[80,[79]]]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[[80,[79]],1,14]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[[82,[79]]],[[83,[79]]]],[[[83,[[0,[2,79]]]]],[[83,[[0,[2,79]]]]]],[[]],[[[83,[[0,[58,79]]]],28],29],[[[83,[79]],[55,[1]],[55,[1]]]],[[]],[[]],[[[83,[79]]]],[[]],[[]],[[1,1,79],[[82,[79]]]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[[82,[79]],1,1,14]],[[]],[[]],0,0,0,[[]],[[]],[[[85,[84]],[55,[1]]]],[[]],[[]],[[[54,[2]],84],[[85,[84]]]],[[],9],[[],9],[[],10],[[]],0,0,0,[[]],[[]],[[]],[[[87,[86]]]],[[[87,[86]],1],2],[[]],[[1,86],[[87,[86]]]],[[[87,[86]]],[[54,[2]]]],[[],9],[[],9],[[],10],[[[87,[86]],[55,[1]]]],[[]],0,0,0,0,[[]],[[]],[[[88,[[0,[2,79]]]]],[[88,[[0,[2,79]]]]]],[[]],[[],[[88,[[0,[5,79]]]]]],[[[88,[79]],[55,[1]]]],[[[88,[79]],[89,[1]]]],[[]],[[]],[[1,79],[[88,[79]]]],[[]],[[],9],[[],9],[[],10],[[[88,[79]],1,2]],[[]],0,0,0,0,[[[91,[90]],1,90]],[[]],[[]],[[[91,[90]],[55,[1]]]],[[[91,[90]],[89,[1]]]],[[]],[[]],[1,[[91,[90]]]],[[[91,[90]],1,90]],[[],9],[[],9],[[],10],[[]],0,0,[[92,24,24]],[[]],[[]],[[]],[[]],[[92,14],[[93,[14]]]],[92,92],[[[93,[2]]],[[93,[2]]]],[[]],[[]],[[],92],[[[93,[[0,[14,4,43]]]],[55,[24]],[55,[24]]],[[0,[14,4,43]]]],[[[93,[[0,[14,4,43]]]],[89,[24]],[89,[24]]],[[0,[14,4,43]]]],[[]],[[]],[[]],[[]],[[],92],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[[93,[[0,[14,4,43]]]],24,24,[0,[14,4,43]]]],[[]],[[]],0,[[[94,[84]]],[[60,[2]]]],[[]],[[]],[[[94,[84]]],[[60,[2]]]],[[]],[[[94,[84]]],[[60,[2]]]],[[]],[[[94,[84]]],64],[[[94,[84]]],1],[84,[[94,[84]]]],[[[94,[84]]],[[60,[2]]]],[[[94,[84]]],[[60,[2]]]],[[[94,[84]],2]],[[[94,[84]],2]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[95,[2]]],[[95,[2]]]],[[]],[[],[[95,[5]]]],[[[95,[58]],28],29],[[]],[[]],[[[95,[35]]],64],[[[95,[35]]],1],[[[95,[35]]],[[60,[35]]]],[[[95,[35]]],[[60,[35]]]],[[],[[95,[35]]]],[[[95,[35]]],[[60,[35]]]],[[[95,[35]]],[[60,[35]]]],[[[95,[35]],35]],[[]],[[],9],[[],9],[[],10],[[]],0,0,[[]],[[]],[[[97,[[0,[2,47]],[0,[2,47]],[0,[2,96]]]],[55,[1]]],[[0,[2,47]]]],[[]],[[]],[[1,[0,[2,96]]],[[97,[[0,[2,47]],[0,[2,47]],[0,[2,96]]]]]],[[],9],[[],9],[[],10],[[[97,[[0,[2,47]],[0,[2,47]],[0,[2,96]]]],[55,[1]],[0,[2,47]]]],[[]],0,0,0,0,[[]],[[]],[[[99,[98]],[55,[1]]],98],[[]],[[[99,[98]],[54,[98]]]],[[]],[[1,[54,[98]]],[[99,[98]]]],[[],9],[[],9],[[],10],[[[99,[98]],[55,[1]],98]],[[]],0,0,[[[101,[100]],100]],[[]],[[]],[[[101,[2]]],[[101,[2]]]],[[]],[[],[[101,[5]]]],[[[101,[58]],28],29],[[]],[[]],[[[101,[100]]],64],[[[101,[100]]],1],[[[101,[100]],[101,[100]]]],[[],[[101,[100]]]],[[[101,[100]]],[[60,[100]]]],[[[101,[100]]],[[60,[100]]]],[[[101,[100]],100]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,[[[103,[102]],[77,[102]]]],[[[103,[102]],[77,[102]],[104,[102]]]],[[]],[[]],[[]],[[]],[105,105],[[]],[[105,105],64],[[105,28],29],[[]],[[]],[[]],[[]],[[[54,[102]],105],[[103,[102]]]],[[[103,[102]],102],[[60,[102]]]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,[[]],[[]],[[[106,[2]]],[[106,[2]]]],[[]],[[[106,[[0,[35,47,2]]]],[0,[35,47,2]]],64],[[[106,[[0,[35,47,2]]]],[0,[35,47,2]]],1],[[],[[106,[5]]]],[[[106,[[0,[35,47,2]]]]],[[60,[[0,[35,47,2]]]]]],[[[106,[58]],28],29],[[]],[[[106,[[0,[35,47,2]]]],[0,[35,47,2]]]],[[]],[[[106,[[0,[35,47,2]]]]],64],[[[106,[[0,[35,47,2]]]]],[[60,[[0,[35,47,2]]]]]],[[[106,[[0,[35,47,2]]]]],1],[[],[[106,[[0,[35,47,2]]]]]],[[[106,[[0,[35,47,2]]]]],[[60,[[0,[35,47,2]]]]]],[[[106,[[0,[35,47,2]]]]],[[60,[[0,[35,47,2]]]]]],[[[106,[[0,[35,47,2]]]],[0,[35,47,2]]],64],[[]],[[],9],[[],9],[[],10],[[]],0,0,[[107,1],108],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[108,1,1],64],[107,108],[[107,1,1]],[1,107],[[108,1],1],[[108,1],1],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,[[]],[[]],[[]],[[[109,[2]],1],2],[[]],[[1,2],[[109,[2]]]],[[[109,[2]],1,2],[[109,[2]]]],[[],9],[[],9],[[],10],[[]],0,[110,60],[[]],[[]],[[],[[110,[5]]]],[[[110,[58]],28],29],[[]],[110,60],[[]],[110,64],[110,1],[[],110],[110,[[60,[110]]]],[110,110],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[111,[2]]],[[111,[2]]]],[[]],[[],[[111,[5]]]],[[[111,[58]],28],29],[[]],[[]],[111,51],[[],111],[111,60],[111,[[60,[111]]]],[111,111],[[]],[[],9],[[],9],[[],10],[[]],0,0,[[]],[[]],[[112,19],64],[[],112],[[112,19],64],[[112,19]],[[]],[[112,19],64],[[112,19]],[[]],[112,64],[112,1],[112,[[60,[19]]]],[[112,19],[[60,[19]]]],[112,[[60,[19]]]],[[112,19],[[60,[19]]]],[[],112],[[],9],[[],9],[[],10],[[]],0,0,[[[113,[[0,[14,35]]]],[0,[14,35]],[0,[14,35]]]],[[]],[[]],[[]],[[]],[[[113,[[0,[14,35]]]]],[[114,[[0,[14,35]]]]]],[[[113,[2]]],[[113,[2]]]],[[]],[[],[[113,[5]]]],[[]],[[]],[[]],[[]],[[],[[113,[[0,[14,35]]]]]],[[[114,[[0,[14,35]]]]],54],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,[[[115,[2]],1,2]],[[]],[[]],[[[115,[2]]],[[115,[2]]]],[[]],[[],[[115,[5]]]],[[[115,[58]],28],29],[54,115],[[]],[[115,1]],[[]],[[[115,[2]]],64],[[[115,[2]]],1],[[],[[115,[2]]]],[[[115,[2]]],[[60,[2]]]],[[[115,[2]],2]],[[[115,[2]]],64],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,[[[116,[86]],1,2]],[[]],[[]],[[[116,[[0,[2,86]]]]],[[116,[[0,[2,86]]]]]],[[]],[[[116,[86]],[117,[1]]]],[[]],[[[116,[86]],1]],[[]],[[1,86],[[116,[86]]]],[[]],[[],9],[[],9],[[],10],[[[116,[86]],1,2]],[[]],0,[[118,[55,[1]],24]],[[]],[[]],[[118,[55,[1]],24]],[[118,[55,[1]],24]],[118,118],[[]],[[118,28],29],[[]],[[118,[55,[1]]],24],[[118,[55,[1]]],24],[[118,[55,[1]]],24],[[]],[1,118],[[[54,[24]]],118],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,[[]],[[]],[[]],[[[120,[119]],1]],[[]],[1,[[120,[119]]]],[[],9],[[],9],[[],10],[[[120,[119]],[55,[1]],[77,[119]]]],[[]],0,0,[[121,24,24]],[[]],[[]],[[]],[[]],[[121,[0,[86,2]]],[[122,[[0,[86,2]]]]]],[121,121],[[]],[[],121],[[[122,[86]],[55,[24]],[55,[24]]],2],[[]],[[]],[[]],[[]],[[],121],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[[122,[86]],24,24,2]],[[]],[[]],0,[[]],[[]],[[[123,[2]]],[[123,[2]]]],[[]],[[],[[123,[5]]]],[[[123,[58]],28],29],[[]],[[]],[[[123,[35]]],64],[[[123,[35]]],1],[[[123,[35]],[123,[35]]]],[[],[[123,[35]]]],[[[123,[35]]],[[60,[35]]]],[[[123,[35]]],[[60,[35]]]],[[[123,[35]],35]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[124,[33]],[55,[1]]]],[[]],[[]],[[[54,[[0,[2,5]]]],33],[[124,[33]]]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[125,125],[[]],[[[127,[126]],[55,[1]]]],[[]],[[]],[[]],[[]],[[1,125],[[127,[126]]]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[[127,[126]],[55,[1]],126]],[[]],[[]],0,[[128,1],7],[[]],[[]],[128,128],[[]],[[128,[55,[1]],64],1],[[]],[[]],[128,64],[128,1],[[[54,[64]]],128],[[128,1,64],1],[[128,1,64],[[60,[1]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[129,1],[[]],[129,[[54,[[54,[1]]]]]],[[]],[[129,1,1],64],[[129,1,1],1],[1,129],[[1,54,[62,[45]]],129],[[129,1],1],[[129,1],1],[[],9],[[],9],[[],10],[[129,1],60],[[]],0,[[130,1],7],[[]],[[]],[130,130],[[]],[[130,[117,[1]],7],1],[[]],[[]],[[130,[117,[1]]],[[60,[7]]]],[[130,[117,[1]]],[[60,[7]]]],[[[54,[7]]],130],[[130,[0,[[117,[1]],2]],7],[[60,[7]]]],[[130,[0,[[117,[1]],2]],7],[[60,[7]]]],[[130,[117,[1]],1],[[60,[7]]]],[[130,[0,[[117,[1]],2]],7,7],1],[[130,1,7],1],[[130,1,7],[[60,[1]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,[131,132],[133,132],[131,132],[[131,131],131],[[131,131],132],[[131,131],132],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[134,134],[131,131],[133,133],[135,135],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[131,131],132],[[133,133],132],[[],131],[[],133],[[],135],[133,131],0,0,0,[[131,132],131],[[131,131],132],[[133,133],132],[[134,132,132],64],[[131,131,134],64],[[133,133,134],64],[[135,135,134],64],[[131,28],29],[[133,28],29],[[135,28],29],[[]],[[]],[[]],[[]],0,[[134,132,132],64],[[134,132,132],64],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[133,133,134],64],[[133,133,134],64],[[134,132,132],64],[[134,132,132],64],[[131,132],131],[[134,132,132],64],[132,134],[[131,131],133],[[131,132],135],[131,131],[133,131],[[134,132,132],[[60,[136]]]],0,[[132,132],131],[[133,131],131],0,[[133,131],131],[[131,131],131],0,0,[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[],10],[131,131],[133,131],[[]],[[]],[[]],[[]],[[135,134],132],[[135,135,134],132],[[],132],0,0,0,0,0,0,[[]],[[]],[[131,131,131,134],137],[137,64],[137,137],[[]],[137,64],[[137,137],64],[[137,28],29],[[]],[[]],[137,64],[137,64],[137,64],[[]],[137,25],[[],9],[[],9],[[],10],[[]],[[131,131,131],135],[[[54,[131]],134],60],[[135,135,134],[[54,[131]]]],[134,64],[[133,134]],[[[54,[131]]],132],0,0,0,[[]],[[]],[138,138],[[]],[[[54,[131]],134],[[54,[131]]]],[[138,138],64],[[]],[[[54,[131]],138,134],[[54,[131]]]],[[]],[[]],[[],9],[[],9],[[],10],[[]],[[133,131],132],[[133,131],132],[[133,133],132],[[131,131,131],135],0,0,0,0,[[]],[[]],[139,139],[[]],[139,64],[[139,139],64],[[139,28],29],[[]],[[135,133,134]],[[]],[139,64],[139,64],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,0,[[]],[[]],[140,140],[[]],[[140,140],64],[[140,28],29],[[]],[140,64],[[135,133,134]],[[]],[140,64],[140,64],[140,64],[[]],[[],9],[[],9],[140,64],[[],10],[[]],0,0,0,0,0,0,0,[[]],[[]],[141,64],[141,141],[[]],[[141,141],64],[[141,28],29],[[]],[141,64],[141,64],[[135,135,134]],[141,64],[[]],[141,[[60,[19]]]],[141,64],[141,64],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,[[]],[[]],[142,142],[[]],[142,64],[[142,142],64],[[142,28],29],[[]],[[133,133,134]],[[]],[142,64],[142,64],[142,64],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,[[]],[[]],[143,143],[[]],[[143,143],64],[[143,28],29],[[]],[[133,133,134]],[143,64],[[]],[143,64],[143,64],[143,64],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,[[]],[[]],[144,144],[[]],[[144,144],64],[144,64],[[144,28],29],[[]],[144,64],[[]],[144,64],[[131,134],144],[[]],[[],9],[[],9],[[],10],[[]],[[135,131,134],[[54,[131]]]],0,0,0,0,0,0,0,[[[147,[145,[0,[146,2]]]],[0,[146,2]]]],[[[147,[148,[0,[146,2]]]],[0,[146,2]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[149,[2,2]]],[[149,[2,2]]]],[148,148],[145,145],[[[147,[2,2]]],[[147,[2,2]]]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[[147,[145,[0,[146,2]]]],49]],[[[147,[148,[0,[146,2]]]],49]],0,[[[149,[58,58]],28],29],[[148,28],29],[[145,28],29],[[[147,[58,58]],28],29],0,[[],1],[[]],[[[149,[2]]],1],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[147,64],0,[147,1],0,0,0,[[1,1],149],[1,[[147,[150,[0,[146,2]]]]]],0,0,[[]],[[[149,[2]]],[[149,[2]]]],0,[[],1],[[[149,[2]]],1],0,[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,0,[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],0,[[]],[[[149,[2]]]],0,0,[151,[[54,[1]]]],0,[[[147,[150,146]],1],[[54,[[152,[[0,[14,35,5,4]]]]]]]],[[[147,[150,146]],49],[[54,[[60,[1]]]]]],0,[[[154,[153]],1,1]],[[]],[[]],[[]],[[]],[[[154,[153]]],7],[[1,1],[[154,[153]]]],[[],9],[[],9],[[],10],[[]],0,[151,54],[[[147,[145,146]]],[[54,[60]]]],[151,54],[[[147,[145,146]]],[[0,[13,14,35,4]]]],[[[147,[148,146]],1],[[54,[146]]]],0,[[[147,[148,146]],1],[[60,[[54,[146]]]]]],[[[147,[150,146]]],[[60,[[54,[146]]]]]],[[[147,[150,146]]],[[54,[[60,[[0,[4,14,35,13,155]]]]]]]],0,[[156,1,1]],[[]],[[]],[156,156],[[]],[[]],[[156,1],54],[[]],[[156,1,1]],[1,156],[156],[[]],[[],9],[[],9],[[],10],[[]],[[[147,[145,146]]],54],0,0,0,[[[157,[[0,[146,2]]]],[0,[146,2]]]],[[]],[[]],[[[157,[[0,[2,146]]]]],[[157,[[0,[2,146]]]]]],[[]],[[]],[[]],[1,[[157,[[0,[146,2]]]]]],[[[157,[[0,[146,2]]]]],60],[[]],[[],9],[[],9],[[],10],[[]],0,[[158,1,1]],[[]],[[]],[158,158],[[]],[[]],[[]],[1,158],[158,[[60,[[54,[1]]]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,[[1,1]],[1,54],[[1,1]],[1],[[]],0,[[159,1,1]],[[]],[[]],[159,159],[[]],[[]],[[159,1],54],[[]],[[159,1,1]],[1,159],[159],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,0,[[160,1,1]],[[]],[[]],[[]],[[]],[[]],[[]],[160,161],[162,162],[[]],[[162,162],64],[[162,28],29],[[]],[[]],[[]],[[161,1],1],[[]],[[]],[[]],[[161,1],162],[161,[[54,[[54,[1]]]]]],[1,160],[[161,1],1],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[]],[[]],[[]],0,0,[[163,1,1]],[[]],[[]],[[]],[[]],[164,164],[[]],[[164,28],29],[[]],[[]],[163,54],[[]],[[]],[163,19],[[1,1],163],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],[[[147,[145,[0,[2,146]]]]],[[54,[[0,[2,146]]]]]],0,0,[[]],[[]],0,[151,151],[[]],[[151,28],29],[[]],[[]],0,[[[147,[145,146]]],151],0,0,0,[[]],[[],9],[[],9],[[],10],[[]],[[[147,[145,146]]],[[54,[1]]]],0,[[165,1,1,7,24]],[[]],[[]],[165,165],[[]],[[]],[[]],[[165,1,1,7],[[9,[24]]]],[1,165],[[]],[[],9],[[],9],[[],10],[[]],[[[147,[145,146]]],[[54,[146]]]],0,[[]],[[]],[[]],0,0,[[]],[[[147,[145,146]]],166],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[]],[167,[[54,[[54,[1]]]]]],[[]],[[[147,[148,146]]],167],[167,[[54,[1]]]],[[],9],[[],9],[[],10],[[]],[[[147,[148,146]]],[[60,[[54,[1]]]]]],[[[147,[148,146]],1],[[60,[[0,[14,35,4]]]]]],[151,[[54,[[54,[1]]]]]],[[[147,[150,146]]],[[60,[[54,[[54,[[60,[[0,[4,14,35,13]]]]]]]]]]]],0,[[[147,[150,146]],1,1,1],[[54,[60]]]],0,0,0,0,0,0,0,0,[[168,168],168],[[]],[[]],[[]],[[]],[[]],[[]],[169,169],[168,168],[[[170,[2]]],[[170,[2]]]],[[]],[[]],[[]],[[],169],[[],168],0,0,[[169,169],64],[[168,168],64],[[169,28],29],[[168,28],29],[[[170,[58]],28],29],[[]],[[]],[[]],[[170,169]],[[]],[[]],[[]],[170,51],[170,51],[[169,168,1,1],[[60,[169]]]],[[1,1],169],[[16,16],168],[49,170],0,[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[]],[[]],[[]],0,0,[[1,1,45,45],[[147,[148,[149,[2]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[54,[[54,[[0,[171,[8,[1]]]]]]]]]],[[[54,[[0,[[8,[7]],5,14,59,4,44,6,39,172,173]]]]],[[54,[[0,[[8,[7]],5,14,59,4,44,6,39,172,173]]]]]],0,0,[[]],[[]],[[]],[[]],[174,174],[175,175],[[]],[[]],[[]],[[]],[[174,7,7],7],[[175,7,7],7],[[]],[[]],[[7,7],174],[7,175],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,0,0,0,0,[[[54,[[0,[14,4,43,6]]]],[54,[[0,[14,4,43,6]]]]],[[54,[[0,[14,4,43,6]]]]]],[[[54,[[0,[14,4,43,6]]]],[54,[[0,[14,4,43,6]]]]],[[54,[[0,[14,4,43,6]]]]]],[[]],[[]],[[[54,[[0,[14,5,4,43,6]]]],[54,[[0,[14,5,4,43,6]]]]],[[54,[[0,[14,5,4,43,6]]]]]],[[]],[[]],[[7,7],7],[[],60],[[],60],[7,7],[7,[[54,[7]]]],0,[[]],[[]],[176,176],[[]],[7,[[54,[176]]]],[[176,176],64],[[176,28],29],[[]],0,[[]],0,0,[[]],[[],9],[[],9],[[],10],[[]],[[7,7]],0,0,[[[177,[[0,[171,[8,[1]]]]]],1,1],[[0,[171,[8,[1]]]]]],0,[[[177,[[0,[171,[8,[1]]]]]],1],[[54,[[0,[171,[8,[1]]]]]]]],[[]],[[]],0,[[[177,[[0,[171,[8,[1]]]]]],1],[[0,[171,[8,[1]]]]]],[[[177,[2]]],[[177,[2]]]],[[]],[[[177,[[0,[171,[8,[1]]]]]],1,1],[[0,[171,[8,[1]]]]]],[[],[[177,[5]]]],[[[177,[[0,[171,[8,[1]]]]]],1],[[0,[171,[8,[1]]]]]],[[[177,[58]],28],29],[[]],[[[177,[[0,[171,[8,[1]]]]]],1,1],[[0,[171,[8,[1]]]]]],[[]],[[[177,[[0,[171,[8,[1]]]]]],1],[[0,[171,[8,[1]]]]]],[1,[[177,[[0,[171,[8,[1]]]]]]]],[[[177,[[0,[171,[8,[1]]]]]],1,1],[[0,[171,[8,[1]]]]]],[[]],[[],9],[[],9],[[],10],[[]],[[7,7],7],0,0,0,[[]],[[]],[[178,1],[[54,[1]]]],[[]],[[]],[1,178],[[],9],[[],9],[[],10],[[]],[7,54],0,0,0,0,0,0,0,0,0,0,[[179,179],179],[[179,179]],[[]],[[]],[179,179],[[]],[[],179],[[179,179],179],[[179,179]],[[179,179],64],[[179,28],29],[[179,28],29],[[24,24],179],[21,179],[22,179],[25,179],[[]],[17,179],[20,179],[23,179],[16,179],[18,179],[7,179],[24,179],[19,179],[1,179],[67,[[9,[179]]]],[[]],[179,179],[[179,179],179],[[179,179]],[179,179],[19,179],[[]],[[179,7],179],[[179,179],179],[[179,179]],[51,179],[[]],[[],180],[[],9],[[],9],[[],10],[[]],[[]],0,0,0,0,0,0,0,0,[[[182,[181]],[182,[181]]],[[182,[181]]]],[[[182,[[0,[181,14]]]],[182,[[0,[181,14]]]]]],[[]],[[]],[[[182,[2]]],[[182,[2]]]],[[]],[[],[[182,[5]]]],[[[182,[181]],[182,[181]]],[[182,[181]]]],[[[182,[[0,[181,14]]]],[182,[[0,[181,14]]]]]],[[[182,[59]],[182,[59]]],64],[[[182,[181]],28],29],[[[182,[181]],28],29],[[24,24],[[182,[181]]]],[25,[[182,[181]]]],[22,[[182,[181]]]],[1,[[182,[181]]]],[16,[[182,[181]]]],[19,[[182,[181]]]],[20,[[182,[181]]]],[17,[[182,[181]]]],[24,[[182,[181]]]],[23,[[182,[181]]]],[7,[[182,[181]]]],[21,[[182,[181]]]],[[]],[18,[[182,[181]]]],[67,[[9,[[182,[181]]]]]],[[]],[[[182,[181]]],[[182,[181]]]],[[[182,[181]],[182,[181]]],[[182,[181]]]],[[[182,[[0,[181,14]]]],[182,[[0,[181,14]]]]]],[[[182,[181]]],[[182,[181]]]],[19,[[182,[181]]]],[[]],[[[182,[181]],7],[[182,[181]]]],[[[182,[181]],[182,[181]]],[[182,[181]]]],[[[182,[[0,[181,14]]]],[182,[[0,[181,14]]]]]],[51,[[182,[181]]]],[[]],[[],180],[[],9],[[],9],[[],10],[[],19],[[]],[[]],0,0,0,0,0,0,0,[[24,24]],[[]],[7],0,0,[[]],[[]],[[]],0,0,0,0,[[[54,[[54,[7]]]],7],7],[[[54,[[54,[7]]]],7],[[60,[[54,[[54,[7]]]]]]]],0,[[[183,[[0,[14,4]]]],[183,[[0,[14,4]]]]],[[183,[[0,[14,4]]]]]],[[[183,[[0,[14,4]]]],[183,[[0,[14,4]]]]]],[[]],[[]],[[[183,[2]]],[[183,[2]]]],[[]],[[[183,[59]],[183,[59]]],64],[[]],[[[54,[[54,[[0,[14,5]]]]]]],[[183,[[0,[14,5]]]]]],[[[183,[[0,[14,5]]]],1,1],[[60,[[0,[14,5]]]]]],[[[183,[[0,[14,5]]]]],1],[[183,1]],[[]],[[[183,[[0,[14,5,4,6]]]],[183,[[0,[14,5,4,6]]]]],[[183,[[0,[14,5,4,6]]]]]],[[[183,[[0,[14,5,4,6]]]],[183,[[0,[14,5,4,6]]]]]],[[[183,[[0,[14,39]]]]],[[183,[[0,[14,39]]]]]],[[1,1],[[183,[[0,[14,5]]]]]],[[[183,[[0,[14,43]]]],[183,[[0,[14,43]]]]],[[183,[[0,[14,43]]]]]],[[[183,[[0,[14,43]]]],[183,[[0,[14,43]]]]]],[[]],[[[183,[[0,[14,5]]]]],[[54,[[54,[[0,[14,5]]]]]]]],[[[183,[[0,[14,5]]]]],[[183,[[0,[14,5]]]]]],[[],9],[[],9],[[],10],[[]],[[[183,[[0,[14,5]]]]],1],0,0,[[[185,[184]],[185,[184]]],[[185,[184]]]],[[[185,[184]],[185,[184]]]],[[]],[[]],[[[185,[2]]],[[185,[2]]]],[[]],[[[185,[59]],[185,[59]]],64],[[[185,[58]],28],29],[[]],[[[54,[[54,[184]]]]],[[185,[184]]]],[[[185,[184]],1,1],[[60,[184]]]],[[185,1]],[[]],[[[185,[184]],[185,[184]]],[[185,[184]]]],[[[185,[184]],[185,[184]]]],[[[185,[[0,[184,39]]]]],[[185,[[0,[184,39]]]]]],[1,[[185,[184]]]],[[[185,[184]],7],[[185,[184]]]],[[[185,[184]]],1],[[[185,[184]],[185,[184]]],[[185,[184]]]],[[[185,[184]],[185,[184]]],[[185,[184]]]],[[[185,[184]],[185,[184]]],[[185,[184]]]],[[[185,[184]],[185,[184]]]],[[]],[[[185,[184]]],[[54,[[54,[184]]]]]],[[[185,[184]]],[[185,[184]]]],[[],9],[[],9],[[],10],[1,[[185,[184]]]],[[]],[7,64],0,0,0,0,0,0,[[1,7],[[54,[7]]]],[[7,7],[[60,[7]]]],[[7,7],7],[[7,7,7],[[60,[7]]]],[[7,7,7],7],[[7,7],[[60,[7]]]],[[1,7],[[54,[7]]]],[[20,20],20],[[19,19],19],[[7,7],7],[[17,17],17],0,0,0,[[]],[[]],[[]],[[]],[[186,1],64],[1,186],[[],9],[[],9],[[],10],[[]],0,[[],64],[7,[[60,[7]]]],0,[[187,187],187],[[187,187]],[[]],[[]],[187,187],[[]],[[187,187],187],[[187,187]],[[187,187],64],[[187,28],29],[[]],[24,187],[[]],[[187,187],187],[[187,187]],[187,187],[[24,24],187],[[187,187],[[60,[136]]]],[[187,187],187],[[187,187]],[[]],[[],9],[[],9],[[],10],[[]],[[7,7,7,7],7],[[7,7,7],7],[7,7],[1,[[54,[7]]]],[[7,7],7],0,0,0,0,0,[[]],[[]],0,[[[188,[2]]],[[188,[2]]]],[[]],[[[188,[59]],[188,[59]]],64],[[[188,[58]],28],29],[[]],0,[[]],0,[[2,2,2,2,2,2],[[188,[2]]]],0,[[[188,[2]]],[[188,[2]]]],[[[188,[2]]],[[188,[2]]]],[[[188,[2]]],[[188,[2]]]],[[[188,[2]]],[[188,[2]]]],[[[188,[2]]],[[188,[2]]]],[[[188,[2]]],[[188,[2]]]],[[]],0,[[],9],[[],9],[[],10],[[]],[[49,[0,[14,47]],[0,[14,47]]],64],0,0,0,0,[[]],[[]],[[]],[[]],[[[189,[2]]],[[189,[2]]]],[[[190,[2]]],[[190,[2]]]],[[]],[[]],0,[[[189,[58]],28],29],[[[190,[58]],28],29],[[]],[[]],[[]],[[]],[[51,[0,[14,47,58]],[0,[14,47,58]]],[[60,[[189,[[0,[14,47,58]]]]]]]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,[[191,[55,[[0,[192,42,2]]]]],[[55,[[0,[192,42,2]]]]]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[193,[2,2]]],[[193,[2,2]]]],[[[194,[2]]],[[194,[2]]]],[[[195,[2]]],[[195,[2]]]],[[]],[[]],[[]],0,0,[[[195,[[0,[196,2]]]],49]],[[[195,[[0,[196,2]]]],49]],[[[193,[58,58]],28],29],[[[194,[58]],28],29],[[[195,[58]],28],29],[[],1],[[[193,[2]]],1],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[195,64],0,[195,1],[[[194,[196]]],197],[[[194,[196]]],1],[[1,1],193],[1,[[195,[[0,[196,2]]]]]],0,0,0,[[]],[[[193,[2]]],[[193,[2]]]],0,0,[[],1],[[[193,[2]]],1],0,[[]],[[]],[[]],0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],0,[[]],[[]],[[]],[[]],[[[193,[2]]]],0,[[[195,[196]]],[[54,[1]]]],0,[[198,1,1],[[60,[1]]]],[[]],[[]],[[198,1,1],60],[[]],[[]],[[198,1]],[[[195,[196]],1],198],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[]],[[]],[[[195,[196]],1],199],[[199,1],1],[[199,1]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[200,200],[[]],[[200,28],29],[[]],[[200,1],1],[[]],[[200,1,1],1],[[[195,[196]],1],200],[[200,1],[[60,[1]]]],[[200,1,1],54],[[200,1,1],54],[[200,1]],[[200,1]],[[]],[[],9],[[],9],[[],10],[[]],0,[[201,1,1],[[60,[1]]]],[[]],[[]],[[]],[[201,1,1],1],[[]],[[201,1,1,1],[[60,[1]]]],[[[195,[196]],1],201],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[]],[[]],[[2,[62,[45]],[62,[45]],[62,[45]]],[[202,[14,2]]]],[[[202,[14,2]],[195,[196]]],[[54,[2]]]],[[],9],[[],9],[[],10],[[]],[[[195,[196]],1]],[[[195,[196]],1],[[9,[67]]]],0,[[]],[[]],[[]],[[]],[[2,[62,[45]],[62,[45]],[62,[45]]],[[203,[14,2]]]],[[[203,[14,2]],[195,[196]],1],[[54,[2]]]],[[],9],[[],9],[[],10],[[]],[[[195,[196]]]],[[[195,[196]],1],[[54,[[0,[4,14,5]]]]]],[[[195,[196]]],54],[[[195,[196]],1,1],[[54,[1]]]],0,0,0,0,0,0,0,0,0,[7,19],0,[[]],[[]],[204],[[]],[204,[[60,[17]]]],[[]],[[],204],[204,[[60,[17]]]],[204,[[54,[205]]]],[204,132],[204,25],[204,24],[204,16],[204,19],[204,7],[204,1],[204],[[],9],[[],9],[[],10],[[]],[[204,206]],[[204,206]],0,[67,180],0,0,[[[77,[[0,[4,6,14]]]],[0,[4,6,14]]],[[0,[4,6,14]]]],0,[[]],[[]],[[[77,[2]]],[[77,[2]]]],[[]],[[[77,[58]],28],29],[[]],[[]],[[[77,[[0,[43,6,14]]]],[0,[43,6,14]]],[[77,[[0,[43,6,14]]]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,[[[152,[4]],[152,[4]]],[[152,[4]]]],[[]],[[]],[[[152,[2]]],[[152,[2]]]],[[]],[[[152,[35]],[152,[35]]],136],[[[152,[59]],[152,[59]]],64],[[[152,[58]],28],29],[[]],[[]],[[[152,[14]]],64],[[[152,[14]]],64],[[[152,[14]]],64],[[[152,[39]]],[[152,[39]]]],[[[152,[42]],[152,[42]]],[[60,[136]]]],[[[152,[43]],[152,[43]]],[[152,[43]]]],[[]],[[],9],[[],9],[[],10],[[[152,[14]]],14],[[]],[[1,1,1,1]],0,0,[[]],0,[[]],[[]],[207,207],[[]],[[207,28],29],[[]],[207,7],[[]],[[],207],[[]],[[],9],[[],9],[[],10],[[]],0,[[67,67],67]],"c":[],"p":[[15,"usize"],[8,"Clone"],[3,"AddSum"],[8,"Add"],[8,"Default"],[8,"Mul"],[15,"u64"],[8,"From"],[4,"Result"],[3,"TypeId"],[3,"Affine"],[8,"One"],[8,"Zero"],[8,"Copy"],[3,"BitXor"],[15,"isize"],[15,"u8"],[15,"i16"],[15,"u32"],[15,"u16"],[15,"i128"],[15,"u128"],[15,"i8"],[15,"i64"],[15,"i32"],[4,"DihedralValue"],[3,"Dihedral"],[3,"Formatter"],[6,"Result"],[3,"Dual"],[8,"Identity"],[8,"AlgeStruct"],[8,"BinaryOp"],[3,"Max"],[8,"Ord"],[3,"Min"],[3,"Prod"],[3,"Sum"],[8,"Neg"],[3,"Update"],[3,"UpdateSum"],[8,"PartialOrd"],[8,"Sub"],[8,"Div"],[8,"Fn"],[4,"SearchResult"],[8,"Eq"],[3,"CompressorBuilder"],[8,"IntoIterator"],[3,"Compressor"],[8,"Iterator"],[8,"Signed"],[3,"Imos1D"],[3,"Vec"],[3,"Range"],[3,"Imos2D"],[3,"KMP"],[8,"Debug"],[8,"PartialEq"],[4,"Option"],[3,"Mo"],[3,"Box"],[8,"FnMut"],[15,"bool"],[3,"PSP"],[3,"RollingHash"],[15,"str"],[3,"Table"],[3,"SuffixArray"],[8,"Hash"],[3,"StaticRangeFreqQuery"],[3,"StaticRangeInversionsQuery"],[3,"TwoSat"],[3,"BinaryTrie"],[8,"Elem"],[3,"ConvexHullTrick"],[3,"Linear"],[4,"Mode"],[8,"Group"],[3,"CumulativeSum1DBuilder"],[3,"CumulativeSum1D"],[3,"CumulativeSum2DBuilder"],[3,"CumulativeSum2D"],[8,"Semigroup"],[3,"DisjointSparseTable"],[8,"Monoid"],[3,"DualSegtree"],[3,"FenwickTree"],[3,"RangeTo"],[8,"Elem"],[3,"FenwickTreeAdd"],[3,"FenwickOnFenwickBuilder"],[3,"FenwickOnFenwick"],[3,"FoldableDeque"],[3,"IntervalHeap"],[8,"Action"],[3,"LazySegtree"],[8,"Elem"],[3,"LazySegtreeCoeff"],[8,"Elem"],[3,"LazySkewHeap"],[8,"Elem"],[3,"LiChaoTree"],[3,"RangeInclusive"],[4,"Mode"],[3,"MultiSet"],[3,"PartiallyPersistentUnionFind"],[3,"At"],[3,"PersistentArray"],[3,"PersistentQueue"],[3,"PersistentStack"],[3,"QwordTree"],[3,"RangeSearchTreeBuilder"],[3,"RangeSearchTree"],[3,"RollbackableVec"],[3,"Segtree"],[8,"RangeBounds"],[3,"SegtreeBeats"],[8,"Elem"],[3,"SegtreeLinearAdd"],[3,"SegtreeOnSegtreeBuilder"],[3,"SegtreeOnSegtree"],[3,"SkewHeap"],[3,"SparseTable"],[4,"Mode"],[8,"Elem"],[3,"StarrySkyTree"],[3,"SuccinctDict"],[3,"UnionFind"],[3,"WaveletMatrix"],[3,"Vector"],[15,"f64"],[3,"Line"],[3,"Eps"],[3,"Circle"],[4,"Ordering"],[4,"CCW"],[4,"Hull"],[4,"IntersectCircleLine"],[4,"IntersectCircleSegment"],[4,"IntersectCircles"],[4,"IntersectLineSegment"],[4,"IntersectSegments"],[4,"PointPolygon"],[3,"Undirected"],[8,"EdgeTrait"],[3,"Graph"],[3,"Directed"],[3,"Edge"],[8,"Direction"],[3,"Lowlink"],[4,"NumInf"],[8,"MaxFlow"],[3,"BipartiteMatching"],[8,"Unsigned"],[3,"Dinic"],[3,"DirectedEulerianTrail"],[3,"UndirectedEulerianTrail"],[3,"FordFulkerson"],[3,"FunctionalGraphBuilder"],[3,"FunctionalGraph"],[4,"Kind"],[3,"HopcroftKarp"],[3,"Edge"],[3,"MinCostFlow"],[3,"PseudoTree"],[3,"SCC"],[3,"Dir"],[3,"Position"],[3,"Grid"],[8,"FF"],[8,"AddAssign"],[8,"SubAssign"],[3,"ExtLucas"],[3,"BinomialCoefficient"],[3,"Quotient"],[3,"FactorialTable"],[3,"FactorizeSieve"],[3,"ConstModInt"],[3,"String"],[8,"Modulo"],[3,"ModInt"],[3,"Matrix"],[8,"SquareMatrixElem"],[3,"SquareMatrix"],[3,"EratosthenesSieve"],[3,"Rational"],[3,"Dice"],[3,"ParseResult"],[4,"Elem"],[8,"Rng"],[8,"SampleUniform"],[3,"TreeEdge"],[3,"TreeNode"],[3,"Tree"],[8,"TreeEdgeTrait"],[8,"DoubleEndedIterator"],[3,"TreeDepthQuery"],[3,"EulerTour"],[3,"HLD"],[3,"DoublingLCA"],[3,"RerootingDP"],[3,"TreeDP"],[3,"FastIO"],[15,"char"],[8,"Display"],[3,"XorShift"],[8,"Inverse"],[13,"NgOk"],[8,"Foldable"],[8,"Foldable2D"],[8,"Indexable"],[8,"Assignable"],[8,"Updatable"],[8,"Pow"],[8,"Inv"],[8,"Frac"],[8,"GcdLcm"],[8,"CheckPrime"],[13,"Paren"],[8,"JoinStr"],[8,"Transpose"],[8,"YesNo"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
