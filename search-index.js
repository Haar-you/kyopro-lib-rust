var searchIndex = JSON.parse('{\
"haar_lib":{"doc":"Rust GitHub last commit","t":"AAOOOOAAOAOOAAOOOOOAAAAAOOAAOAAOOAOOAAAAAAAAAAAAAAAAAAAAAAAAAIQQKKKKKDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLMLLLLLLLLLLLMMLLMLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIIIIQIIIIIIIIKKKLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFNNNELLFLLLLLLLLLLMMDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLMFLLLLMLLLLLFAAAAAAAFFFFFFFFENNLLLLLLLFLLLLLLDLLLLLLLLLLLDLLLLLLLLLLLDLLLLLLLLLLLFFDLLLLLLLLLLLLLLAAAAAFFFFFFFFFFFFFFFDLLLLLLLLLLLFFFFFFDLLLLLLLLLLLLLLLLLLLLLLLLFDDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLFFFDLLLLLLLLLLDLLLLLLLLLLLAAFFENNLLLLLLLLFLLLLLDLLLLLLLLLLLLLFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLSDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDINNELLLLLLLLLLLLLLLLLLLLLLLLLLLLDDCLLLLLLLLLLLLLLLLLLLLLLLLLLDDCLLLLLLLLLLLLLLLLLLLLLLLLLLDCLLLLLLLLLLDCLLLLLLLLLLLLLDLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLDLLLLLLLLLLLLCDLLLLLLLLLLLLLLLLIDLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLIDLLLLLLLLLLLLIDLLLLLLLLLLLLLLLLLLLLLIDNNELLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLDLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLRDLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLCDLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLIDLLLLLLLLLLLIDLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLDLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLINNEDLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLIIIIQQQIQQKKKKKDDLLLLLLLLLLLLLLLLLLLLLLLLMLLDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLQIKAAKKAKKDLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLDDDDLLLLLLAAALLLLLLLLAMALLLLLLLLAAAAAALLLLLLAAALLLLLLLLLLLLLLMLLAAAAAALLLLLLLLLLLLLLLLALLMLLAMLLLLLLLLLLLLLLLLLLLLLLFFFENNNNNLLFLLLLLLLLLLLLLLLLLFFFFFFENNLLLLFLLFLLLLLLFFFFNENNLLLLLLLLFLLLLLLLLNENNNNLLLLLLLLFLLLLLLLLLLNNNNENNLLLLLLLLLLFLLLLLLLLLLNENNNLLLLLLLLFLLLLLLLLLNENNNLLLLLLLFLLLLLLLLLLNNNELLLLLLLLLLLFLLLLLFDIDIDDQLLAAAAALLLLLLLLAAALLLLLLLLAAALLAALLLLLLKLLLLLMAMLLLLLALAALLLLAAKLAKLMLLLLLLLLLLLLAAALLLLLLLLAKLMAFCFFCFFFFFAFFFFAADLLLLLLLLLLLLLLDLLLLLLLLLLLLLLNDDDENNLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLFDMLLMLLLLLMLMMMLLLLLFFENNDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLFFFDLLLLLLLLLLLLLIFSSDDSDSSLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLMMFAAAAILIDLLLLLLLLLLLILIDLLLLLLLLLLLAAAAAAAFFFDLLLLLLLLLLLLLLLLLAADLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAFFAAAAAAAAAAAAAAADLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFDDLLLLLLLLLLLLLLLLLLLLLLLLLLAAAAAAAFFFFFFFFFFFFFFDLLLLFLLLMLMMLLLLLFDALALLLALLLLLLLLLLLLLLLLLIQKIQKIQKFAADLLLLLLLLLLFFIQKKKFAAAAAAFFFFFFFFFFFFDLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFIAKACDLLLLLLLLLLCDLLLLLLLLLFFFFFFFAAAAAFDLLLLLMLLLLLLMLLLLLDMLLMLLLLLMLMLMLLLLLLLMLLLLFENDNLLLLLLLLMLLLLLLFLLLLLLLLLLMMMDDLLLLLLLLLLLALLLLMLLLLLMLLLLLLLLLLMCFAAAAAAAAAAAIDDLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLCCQIICCKKKDDLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNENLLLLLLLLLLLLLLLLLLLLLLIIKKIQQIKKDLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLALLLLLLLLLIIIIADDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFDDDDIDQALLLLLLLLLLLLAAMLLLLLLLAALLLLLKLLLLLLMAMLLLLLLALLLLLLLLMAKLLAAKLMLLLALLLLLLLLLLLLLLLALLLLLKLMDLLLLLLLLLLFDDLLLLMLLMLLLLLLMMLLLLLLLLLDLLLLLLLLLLLLDLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLDLLLLLLLLLLFFDLLLLLLLLLLFFFFAAAAAAAAAFFFFFFFFAAAAAAAAAAAFDLLLLLLLLLLLLLLLLLLLLLLLIKDMLMLLLLLLLLLLLLLSDLLLLLLLLLLLLLLLLLLFFQIKDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLIK","n":["algebra","algo","btreemap","btreeset","chmax","chmin","ds","flow","for_loop","geom","get","get_time","graph","grid","hashmap","hashset","impl_algebra","impl_ops","input","iter","linalg","macros","matching","math","max","min","misc","mul_graph","mul_vec","num","parser","rec","sort_with","testtools","timer","trait_alias","traits","tree","typical","utils","action","add_sum","affine","affine_sum","bitand","bitor","bitxor","dihedral","dual","max","max_contiguous","max_partial_sum","min","prod","sum","traits","transform","trivial","tuple","update","update_sum","Action","Lazy","Output","convert","fold","fold_id","update","update_id","AddSum","borrow","borrow_mut","clone","clone_into","convert","default","eq","fmt","fold","fold_id","from","into","new","to_owned","try_from","try_into","type_id","update","update_id","vzip","Affine","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","AffineSum","borrow","borrow_mut","clone","clone_into","convert","default","eq","fmt","fold","fold_id","from","into","new","to_owned","try_from","try_into","type_id","update","update_id","vzip","BitAnd","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","into","new","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","BitOr","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","into","new","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","BitXor","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","id","id","id","id","id","id","into","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","new","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","Dihedral","DihedralValue","R","S","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","id","into","into","inv","new","op","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Dual","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","Max","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","id","id","id","id","id","id","into","new","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","MaxContiguous","MaxContiguousValue","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","count","default","default","eq","eq","fmt","fmt","from","from","id","into","into","left","length","new","op","right","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","MaxPartialSum","MaxPartialSumValue","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","eq","eq","fmt","fmt","from","from","id","into","into","new","new","op","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Min","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","id","id","id","id","id","id","into","new","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","Prod","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","id","id","id","id","id","id","id","id","id","into","new","op","op","op","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","Sum","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","id","id","id","id","id","id","id","id","id","into","inv","inv","inv","inv","inv","inv","inv","inv","inv","new","op","op","op","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","AbelianGroup","AbelianMonoid","Associative","BinaryOp","Commutative","Element","Group","Idempotence","Identity","Inverse","Monoid","Semigroup","Set","Times","id","inv","op","times","Composition","Permutation","Transformation","apply","apply","as_slice","as_slice","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","from","from","from","id","id","into","into","into","inv","new","op","op","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Trivial","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","into","inv","op","to_owned","try_from","try_into","type_id","vzip","Tuple2","Tuple3","Tuple4","Tuple5","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","default","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","id","id","id","id","into","into","into","into","inv","inv","inv","inv","op","op","op","op","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","Update","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","UpdateSum","borrow","borrow_mut","clone","clone_into","convert","default","eq","fmt","fold","fold_id","from","into","new","to_owned","try_from","try_into","type_id","update","update_id","vzip","bsearch","bsearch_f","compressor","cycle_finding","edit_distance","enum_bit","enum_groups","golden_search","imos_1d","imos_2d","imos_geo","interval_scheduling","inversion_number","kmp","knapsack","lcs","lis","majority_vote","manacher","max_partial_sum","max_rect","merge","mo","monotone_minima","num_subseq","parallel_binary_search","permutation","psp","rle","rolling_hash","sa","shakutori","sliding_window","static_range_freq_query","static_range_inversions_query","subset_sum","ternary_search","two_sat","zalgo","equal_range","lower_bound","upper_bound","AllNg","AllOk","NgOk","SearchResult","borrow","borrow_mut","bsearch_ng_ok","clone","clone_into","fmt","from","into","to_owned","try_from","try_into","type_id","vzip","ng","ok","Compressor","CompressorBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","compress","decompress","default","extend","from","from","get","index","into","into","new","size","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Rho","borrow","borrow_mut","clone","clone_into","cycle","cycle_finding","eq","fmt","from","into","tail","to_owned","try_from","try_into","type_id","vzip","edit_distance","gray_code","subset_asc","subset_between","subset_desc","subset_size_k","superset_asc","superset_desc","gray_code","subset_asc","subset_between","subset_desc","subset_size_k","super_asc","superset_desc","enum_groups","Convex","Downwards","Upwards","borrow","borrow_mut","clone","clone_into","eq","fmt","from","golden_search","into","to_owned","try_from","try_into","type_id","vzip","Imos1D","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","update","vzip","Imos2D","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","update","vzip","ImosGeo","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","update","vzip","interval_scheduling","inversion_number","KMP","borrow","borrow_mut","clone","clone_into","fmt","from","into","matches","new","to_owned","try_from","try_into","type_id","vzip","limited","small_quantity","small_value","small_weight","unlimited","knapsack_limited","knapsack_small_quantity","knapsack_small_value","knapsack_small_weight","knapsack_unlimited","lcs","lis","majority_vote","manacher","max_partial_sum","max_rect","max_rect_in_histogram","inplace_merge","inplace_merge_by","merge","Mo","add","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","monotone_minima","num_subseq","parallel_binary_search","next_permutation","permutations","prev_permutation","PSP","borrow","borrow_mut","clone","clone_into","from","gain_if_blue","gain_if_both_blue","gain_if_both_red","gain_if_red","if_red_then_must_be_red","into","must_be_blue","must_be_red","new","penalty_if_blue","penalty_if_different","penalty_if_red","penalty_if_red_blue","solve","to_owned","try_from","try_into","type_id","vzip","rle","RollingHash","Table","borrow","borrow","borrow_mut","borrow_mut","from","from","hash","hash","hash_table","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","SuffixArray","borrow","borrow_mut","clone","clone_into","fmt","from","index","into","lcp_array","new","to_owned","to_slice","try_from","try_into","type_id","vzip","shakutori","sliding_maximum","sliding_minimum","StaticRangeFreqQuery","borrow","borrow_mut","from","into","new","query","try_from","try_into","type_id","vzip","StaticRangeInversionsQuery","add_query","borrow","borrow_mut","from","into","new","solve","try_from","try_into","type_id","vzip","count","limited","subset_sum","subset_sum_limited","Convex","Downwards","Upwards","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","ternary_search","to_owned","try_from","try_into","type_id","vzip","TwoSat","add_if","add_or","borrow","borrow_mut","from","into","new","not_coexist","solve","try_from","try_into","type_id","vzip","zalgo","aho_corasick","binary_trie","bitset","cht","cumulative_sum_1d","cumulative_sum_2d","disjoint_sparse_table","dual_segtree","dynamic_dual_segtree","dynamic_lazy_segtree","dynamic_segtree","fenwick","fenwick_add","fenwick_on_fenwick","foldable_deque","integer_set","interval_heap","lazy_segtree","lazy_segtree_coeff","lazy_skew_heap","li_chao","link_cut_tree","linked_list","merge_sort_tree","multiset","palindromic_tree","partially_persistent_unionfind","persistent_array","persistent_queue","persistent_segtree","persistent_stack","potential_unionfind","qword_tree","range_search_tree","rollbackable_unionfind","rollbackable_vector","segtree","segtree_2d","segtree_beats","segtree_linear_add","segtree_linear_add_range_sum","segtree_on_segtree","skew_heap","sparse_table","sparse_table_2d","splay_tree","starry_sky_tree","succinct_dict","traits","trie","unionfind","wavelet_matrix","AhoCorasick","AhoCorasickBuilder","Node","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","child","failure_link","from","from","from","index","into","into","into","len","matches","new","node_of","rev_failure_links","root_node","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","BinaryTrie","borrow","borrow_mut","clone","clone_into","count","erase","fmt","from","insert","into","is_empty","len","max","min","new","to_owned","try_from","try_into","type_id","vzip","B_SIZE","Bitset","and_count_ones","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","count_ones","count_zeros","flip","fmt","fmt","from","from","into","is_empty","len","new","same_size_xor_assign","set","test","to_owned","to_string","try_from","try_into","type_id","vzip","ConvexHullTrick","Elem","Max","Min","Mode","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","from","from","into","into","new","query","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","CumulativeSum1D","CumulativeSum1DBuilder","Group","assign","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","fmt","fold","from","from","index","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","CumulativeSum2D","CumulativeSum2DBuilder","Group","assign","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","fmt","fold_2d","from","from","index","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","DisjointSparseTable","Semigroup","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","vzip","DualSegtree","Monoid","borrow","borrow_mut","from","from_vec","get","into","new","to_vec","try_from","try_into","type_id","update","vzip","DynamicDualSegtree","borrow","borrow_mut","clone","clone_into","fmt","from","get","into","new","to_owned","try_from","try_into","type_id","update","vzip","DynamicLazySegtree","borrow","borrow_mut","clone","clone_into","fmt","fold","from","into","new","to_owned","try_from","try_into","type_id","update","vzip","DynamicSegtree","assign","borrow","borrow_mut","fmt","fold","from","into","new","try_from","try_into","type_id","vzip","AbelianGroup","FenwickTree","borrow","borrow_mut","clone","clone_into","default","fold","fold_to","from","into","new","to_owned","try_from","try_into","type_id","update","vzip","Elem","FenwickTreeAdd","add","borrow","borrow_mut","fold","fold_to","from","into","lower_bound","new","sub","try_from","try_into","type_id","vzip","FenwickOnFenwick","FenwickOnFenwickBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","default","fold_2d","fold_to_2d","from","from","into","into","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","FoldableDeque","back","borrow","borrow_mut","fold","from","front","into","is_empty","len","new","pop_back","pop_front","push_back","push_front","try_from","try_into","type_id","vzip","IntegerSet","borrow","borrow_mut","clone","clone_into","contains","default","fmt","from","insert","interval","into","mex","new","remove","to_owned","try_from","try_into","type_id","vzip","IntervalHeap","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","max","min","new","pop_max","pop_min","push","to_owned","try_from","try_into","type_id","vzip","LazySegtree","borrow","borrow_mut","fold","from","into","new","new_with_vec","try_from","try_into","type_id","update","vzip","Elem","LazySegtreeCoeff","borrow","borrow_mut","fold","from","init_with_vec","into","new","try_from","try_into","type_id","update","vzip","Elem","LazySkewHeap","add","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","meld","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","Elem","LiChaoTree","Max","Min","Mode","add_line","add_segment","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","from","from","into","into","new","query","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","LinkCutTree","borrow","borrow_mut","cut","evert","expose","fold","from","get","into","link","new","set","try_from","try_into","type_id","update","vzip","LinkedListPool","Node","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","concat","default","first_of","from","from","into","into","iter","last_of","new","next_of","prev_of","push","riter","split_after","split_before","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value","vzip","vzip","MergeSortTree","borrow","borrow_mut","from","into","new","sum_count_le","try_from","try_into","type_id","vzip","MultiSet","borrow","borrow_mut","clone","clone_into","contains","count","default","first","fmt","from","insert","into","is_empty","last","len","new","pop_first","pop_last","remove","to_owned","try_from","try_into","type_id","vzip","Node","PalindromicTree","borrow","borrow","borrow_mut","borrow_mut","children","count","default","even_root","from","from","index","into","into","len","length","new","node_from_strpos","node_of","odd_root","parent","push","rev_suffix_links","suffix_link","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","At","PartiallyPersistentUnionFind","at","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","is_same","latest","merge","new","root_of","size_of","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","PersistentArray","borrow","borrow_mut","clone","clone_into","from","from","get","into","new","set","to_owned","try_from","try_into","type_id","vzip","PersistentQueue","back","borrow","borrow_mut","default","fmt","from","front","into","is_empty","len","new","pop","push","try_from","try_into","type_id","vzip","PersistentSegtree","assign","borrow","borrow_mut","clone","clone_into","fmt","fold","from","from_vec","into","new","to_owned","try_from","try_into","type_id","vzip","PersistentStack","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","iter","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","PotentialUnionFind","borrow","borrow_mut","count_groups","diff","from","get_groups","into","is_same","merge","new","potential_of","root_of","size_of","try_from","try_into","type_id","vzip","MAX","QwordTree","borrow","borrow_mut","contains","default","erase","erase_unchecked","from","insert","insert_unchecked","into","is_empty","len","max","max_le","min","min_ge","new","try_from","try_into","type_id","vzip","RangeSearchTree","RangeSearchTreeBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","default","from","from","into","into","new","search","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","RollbackableUnionFind","borrow","borrow_mut","from","into","is_same","merge","new","rollback","root_of","size_of","try_from","try_into","type_id","vzip","RollbackableVec","as_slice","assign","borrow","borrow_mut","clone","clone_into","default","first","fmt","from","from","index","into","is_empty","last","len","new","pop","push","rollback","to_owned","try_from","try_into","type_id","vzip","Monoid","Segtree","assign","borrow","borrow_mut","clone","clone_into","fold","from","index","into","new","to_owned","try_from","try_into","type_id","update","vzip","Segtree2D","assign","borrow","borrow_mut","fold_2d","from","get","into","new","try_from","try_into","type_id","update","vzip","SegtreeBeats","add","borrow","borrow_mut","chmax","chmin","clone","clone_into","fmt","from","into","max","min","new","new_with_vec","sum","to_owned","try_from","try_into","type_id","vzip","Elem","SegtreeLinearAdd","borrow","borrow_mut","from","get","into","new","try_from","try_into","type_id","update","vzip","Elem","SegtreeLinearAddRangeSum","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","update","vzip","SegtreeOnSegtree","SegtreeOnSegtreeBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","default","fold_2d","from","from","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","SkewHeap","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","meld","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","SparseTable","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","vzip","SparseTable2D","borrow","borrow_mut","fold_2d","from","into","new","try_from","try_into","type_id","vzip","SplayTree","borrow","borrow_mut","drop","fold","for_each","from","get","insert","into","is_empty","len","merge_left","merge_right","new","pop_first","pop_last","push_first","push_last","remove","reverse","set","singleton","split","try_from","try_into","type_id","vzip","Elem","Max","Min","Mode","StarrySkyTree","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fold","from","from","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","SuccinctDict","access","borrow","borrow_mut","clone","clone_into","count","from","into","is_empty","len","new","rank","select","to_owned","try_from","try_into","type_id","vzip","Assignable","Foldable","Foldable2D","Indexable","Output","Output","Output","Updatable","Value","Value","assign","fold","fold","get","update","Trie","TrieNode","add","borrow","borrow","borrow_mut","borrow_mut","children_nodes","children_nodes_mut","clone","clone_into","fmt","from","from","into","into","new","root_node","root_node_mut","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value","vzip","vzip","UnionFind","borrow","borrow_mut","count_groups","from","get_groups","into","is_same","merge","new","root_of","size_of","try_from","try_into","type_id","value_of","vzip","with_values","WaveletMatrix","access","borrow","borrow_mut","clone","clone_into","count","from","into","maximum","minimum","new","next_value","prev_value","quantile","range_freq","rank","select","to_owned","try_from","try_into","type_id","vzip","Cap","MaxFlow","add_edge","dinic","ford_fulkerson","get_edges","max_flow","min_cost_flow","new","reset","Dinic","add_edge","borrow","borrow_mut","clone","clone_into","from","get_edges","into","max_flow","new","reset","to_owned","try_from","try_into","type_id","vzip","FordFulkerson","add_edge","borrow","borrow_mut","clone","clone_into","from","get_edges","into","max_flow","new","reset","to_owned","try_from","try_into","type_id","vzip","MinCostFlow","add_edge","borrow","borrow_mut","clone","clone_into","from","into","min_cost_flow","new","to_owned","try_from","try_into","type_id","vzip","Circle","Eps","Line","Vector","abs","abs","abs_sq","add","angle","angle_diff","area_intersection_circle_polygon","area_intersection_circles","area_polygon","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ccw","center","circumcircle","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","closest_pair","common_tangent_circles","convex","convex_cut","convex_diameter","convex_hull","cross","cross","default","default","default","diff","dist_line_point","dist_segment_point","dist_segments","div","dot","dot","eq","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","ge","gt","incircle","intersect_circle_line","intersect_circle_segment","intersect_circles","intersect_line_segment","intersect_segments","into","into","into","into","is_orthogonal","is_parallel","le","lt","mul","ne","new","new","new","normal","normal","partial_cmp","point_in_polygon","polar","projection","radius","reflection","sub","tangent_circle","to","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unit","unit","vzip","vzip","vzip","vzip","area_intersection_circle_polygon","area_intersection_circles","area_polygon","CCW","CLOCKWISE","COUNTER_CLOCKWISE","ONLINE_BACK","ONLINE_FRONT","ON_SEGMENT","borrow","borrow_mut","ccw","clockwise","clone","clone_into","counter_clockwise","eq","fmt","from","into","on_segment","online_back","online_front","to_owned","to_value","try_from","try_into","type_id","vzip","circumcircle","closest_pair","common_tangent_circles","is_convex","convex_cut","convex_diameter","Hull","Lower","Upper","borrow","borrow_mut","clone","clone_into","convex_hull","eq","from","half_hull","into","to_owned","try_from","try_into","type_id","vzip","dist_line_point","dist_segment_point","dist_segments","incircle","CROSSED","IntersectCircleLine","OUTSIDE","TANGENT","borrow","borrow_mut","clone","clone_into","crossed","eq","fmt","from","intersect_circle_line","into","outside","tangent","to_owned","try_from","try_into","type_id","vzip","INSIDE","IntersectCircleSegment","ONE_CROSSPOINT","OUTSIDE","TANGENT","TWO_CROSSPOINTS","borrow","borrow_mut","clone","clone_into","eq","fmt","from","inside","intersect_circle_segment","into","one_crosspoint","outside","tangent","to_owned","try_from","try_into","two_crosspoints","type_id","vzip","CIRCUMSCRIBED","INSCRIBED","INSIDE","INTERSECTED","IntersectCircles","OUTSIDE","SAME","borrow","borrow_mut","circumscribed","clone","clone_into","eq","fmt","from","inscribed","inside","intersect_circles","intersected","into","num_common_tangent","outside","same","to_owned","try_from","try_into","type_id","vzip","CROSSED","IntersectLineSegment","LEFTSIDE","OVERLAPPED","RIGHTSIDE","borrow","borrow_mut","clone","clone_into","crossed","eq","fmt","from","intersect_line_segment","into","leftside","overlapped","rightside","to_owned","try_from","try_into","type_id","vzip","INTERSECTED","IntersectSegments","NOT_INTERSECTED","OVERLAPPED","SAME","borrow","borrow_mut","clone","clone_into","eq","fmt","from","intersect_segments","intersected","into","not_intersected","overlapped","same","to_owned","try_from","try_into","type_id","vzip","EXCLUSION","INCLUSION","ON_SEGMENT","PointPolygon","borrow","borrow_mut","clone","clone_into","eq","exclusion","fmt","from","inclusion","into","on_segment","point_in_polygon","to_owned","try_from","try_into","type_id","vzip","tangent_circle","Directed","Direction","Edge","EdgeTrait","Graph","Undirected","Weight","add","add","articulation_points","bellman_ford","bfs","biconnected","bipartite","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bridges","chinese_postman","chu_liu_edmonds","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cycle","detect_cycle","dijkstra","edges","edges_mut","enumerate_triangles","eulerian","extend","extend","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","functional_graph","index","into","into","into","into","is_empty","kruskal","len","lowlink","max_independent_set","neighbours","neighbours_mut","new","new","prim","pseudo_tree","rev","rev","scc","to","to","to","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tsort","tsp","two_edge","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","warshall_floyd","weight","weight","weight","yen","articulation_points","NumInf","bellman_ford","bfs","Lowlink","biconnected","check_bipartite","bridges","chinese_postman_problem","chu_liu_edmonds","directed_shortest","directed_shortest_cycle","detect_cycle","dijkstra","enumerate_triangles","directed","undirected","DirectedEulerianTrail","add_edge","borrow","borrow_mut","clone","clone_into","from","into","new","solve","to_owned","try_from","try_into","type_id","vzip","UndirectedEulerianTrail","add_edge","borrow","borrow_mut","clone","clone_into","from","into","new","solve","to_owned","try_from","try_into","type_id","vzip","Branch","FunctionalGraph","FunctionalGraphBuilder","Group","Kind","Leaf","Loop","add","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","branches","build","children","clone","clone","clone_into","clone_into","default","eq","fmt","fmt","from","from","from","from","group_index_of","group_of","groups","into","into","into","into","is_branch","is_leaf","is_loop","kind_of","leaves","loops","new","next_of","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","kruskal","Lowlink","back","borrow","borrow_mut","ch","clone","clone_into","fmt","from","into","low","new","ord","par","size","to_owned","try_from","try_into","type_id","vzip","max_independent_set","prim","Kind","Loop","Other","PseudoTree","PseudoTreeBuilder","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","clone","clone_into","eq","fmt","from","from","from","into","into","into","is_loop","kind_of","new","root_of","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","SCC","borrow","borrow_mut","from","groups","into","new","to_vec","try_from","try_into","type_id","vzip","tsort","tsp","two_edge_connected_components","WarshallFloyd","add_edge","borrow","borrow_mut","dist","from","has_negative_loop","into","new","table","try_from","try_into","type_id","vzip","Elem","yen_algorithm","D","DIR_4","Dir","Grid","L","Position","R","U","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","dx","dy","eq","eq","fmt","fmt","fmt","from","from","from","get","get_mut","into","into","into","iter","iter_mut","mov_strict","new","new","new","to_graph","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","x","y","grid_to_graph","collect","cumsum","join_str","reject","CollectVec","collect_vec","CumSum","_CumSum","borrow","borrow_mut","cumsum","from","into","into_iter","next","try_from","try_into","type_id","vzip","JoinStr","join_str","Reject","_Reject","borrow","borrow_mut","from","into","into_iter","next","reject","try_from","try_into","type_id","vzip","mod_2","mod_m","mod_p","determinant","gaussian_elim","inverse","matrix","determinant","gaussian_elim","inverse","MatrixMod2","borrow","borrow_mut","clone","clone_into","from","from_vec_bitset","get","index","into","mul","new","to_owned","transpose","try_from","try_into","type_id","vzip","matrix","square_matrix","Matrix","add","add_assign","borrow","borrow_mut","clone","clone_into","eq","from","from_vec_2d","get_mut","height","index","into","mul","mul_assign","neg","new","sub","sub_assign","to_owned","transpose","try_from","try_into","type_id","vzip","width","SquareMatrix","add","add_assign","borrow","borrow_mut","clone","clone_into","eq","from","from_vec","get_mut","index","into","mul","mul_assign","neg","new","pow","size","straight_mul","strassen_mul","sub","sub_assign","to_owned","transpose","try_from","try_into","type_id","unit","vzip","determinant","inverse","determinant","inverse","chmax_chmin","ds_macros","for_loop","get_time","impl_algebra","impl_ops","io","max_min","mul_vec","rec","sort_with","timer","trait_alias","bi_match","hopcroft_karp","BipartiteMatching","add_edge","borrow","borrow_mut","from","into","matching","new","try_from","try_into","type_id","vzip","Edge","HopcroftKarp","add_edge","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","from","from","get_matching","into","into","matching","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","bell_number","berlekamp_massey","binomial_coefficient","convolution","count_coprime","crt","divisor","enumerate_quotients","ext_gcd","factorial","factorial_prime_factor","factorize","garner","gcd_lcm","linear_congruence","mod_ops","montmort","multipoint_eval","nim_product","ntt","polynomial","polynomial_taylor_shift","prime_test","primitive_root","sum_floor_linear","sum_of_exponential_times_polynomial_limit","tetration","totient","totient_sum","bell_number_table","berlekamp_massey","BinomialCoefficient","ExtLucas","borrow","borrow","borrow_mut","borrow_mut","calc","calc","clone","clone","clone_into","clone_into","from","from","into","into","new","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","conv_and","conv_gcd","conv_or","conv_xor","mobius","subset_conv","zeta","convolution_and","convolution_gcd","convolution_or","convolution_xor","fast_mobius_subset","fast_mobius_superset","subset_convolution","fast_zeta_subset","fast_zeta_superset","count_coprime","crt","crt_vec","count_divisors","enumerate_divisors","Quotient","borrow","borrow_mut","clone","clone_into","enumerate_quotients","eq","fmt","from","from","into","q","to","to_owned","try_from","try_into","type_id","vzip","ext_gcd","FactorialTable","bell","bell_number","bernoulli","bernoulli_number","borrow","borrow_mut","catalan","catalan_number","clone","clone_into","comb","facto","fmt","from","h","into","inv_facto","new","perm","to_owned","try_from","try_into","type_id","vzip","BellNumber","Output","bell_number","BernoulliNumber","Output","bernoulli_number","CatalanNumber","Output","catalan_number","factorial_prime_factor","sieve","trial","FactorizeSieve","borrow","borrow_mut","factorize","from","into","new","try_from","try_into","type_id","vzip","factorize","garner","GcdLcm","Output","gcd","gcd_lcm","lcm","linear_congruence","enum_inv","inv","inv_p","log","pow","sqrt","enumerate_mod_inv","mod_inv","mod_inv_p","mod_log","mod_pow","mod_sqrt","montmort","multipoint_eval","nim_product_16","nim_product_32","nim_product_64","nim_product_8","NTT","borrow","borrow_mut","convolve","from","into","new","try_from","try_into","type_id","vzip","Polynomial","PolynomialOperator","add","add_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","coeff_of","constant","deg","divmod","eq","eval","fmt","from","from","from","get_until","into","into","inv","is_empty","len","mul","mul_assign","new","scale","shrink","sq","sub","sub_assign","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","zero","polynomial_taylor_shift","CheckPrime","eratosthenes","is_prime","miller_rabin","CheckPrime","EratosthenesSieve","borrow","borrow_mut","from","into","is_prime","new","try_from","try_into","type_id","vzip","CheckPrime","MillerRabin","borrow","borrow_mut","from","into","is_prime","try_from","try_into","type_id","vzip","primitive_root","sum_floor_linear","sum_of_exponential_times_polynomial_limit","tetration","totient","totient_table","totient_sum","bitwise_sum_popcount","closed_interval","dice","paren","parse_paren","bitwise_sum_popcount","ClosedInterval","borrow","borrow_mut","clone","clone_into","default","end","eq","fmt","from","into","merge","new","start","to_owned","try_from","try_into","type_id","vzip","Dice","back","borrow","borrow_mut","bottom","clone","clone_into","eq","fmt","from","front","into","left","new","right","rot_back","rot_clockwise","rot_counterclockwise","rot_front","rot_left","rot_right","to_owned","top","try_from","try_into","type_id","vzip","check_paren","Elem","Paren","ParseResult","Value","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","elems","fmt","fmt","from","from","into","into","parse_paren","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","close","inner","open","Edge","MulGraph","add_directed","add_undirected","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","dijkstra","fmt","fmt","from","from","from","into","into","neighbours","new","new","to","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","weight","MulGraph","dijkstra","arithmetic","const_modint","ff","modint","montgomery","num_inf","one_zero","ops","rational","total_f64","traits","Arithmetic","ConstModInt","ConstModIntBuilder","add","add_assign","algebra","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","div","div_assign","eq","eq","fmt","fmt","frac","from","from","from","from","from_i64","from_u64","into","into","inv","mul","mul_assign","neg","new","one","one_zero","pow","sub","sub_assign","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","value","vzip","vzip","zero","Prod","Sum","Element","FF","FFElem","Inv","Pow","frac","from_i64","from_u64","ModInt","ModIntBuilder","add","add_assign","algebra","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","div","div_assign","eq","eq","fmt","fmt","fmt","frac","from","from","from_i64","from_u64","into","into","inv","mul","mul_assign","neg","new","new","pow","sub","sub_assign","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","value","vzip","vzip","ProdModM","SumModM","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","eq","eq","fmt","fmt","from","from","id","id","into","into","inv","new","new","op","op","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Montgomery","MontgomeryBuilder","add","add_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","div","div_assign","eq","eq","fmt","frac","from","from","from_i64","from_u64","into","into","inv","mul","mul_assign","new","pow","sub","sub_assign","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value","vzip","vzip","Inf","NegInf","NumInf","Value","add","borrow","borrow_mut","clone","clone_into","cmp","eq","fmt","from","into","is_inf","is_neg_inf","is_value","neg","partial_cmp","sub","to_owned","try_from","try_into","type_id","unwrap","vzip","One","Zero","one","zero","Inv","Output","Output","Pow","inv","pow","Rational","add","add_assign","borrow","borrow_mut","clone","clone_into","cmp","denominator","div","div_assign","eq","fmt","from","from","into","mul","mul_assign","neg","new","numerator","partial_cmp","sub","sub_assign","to_owned","try_from","try_into","type_id","vzip","Totalf64","add","add_assign","borrow","borrow_mut","clone","clone_into","cmp","default","div","div_assign","eq","fmt","from","into","mul","mul_assign","neg","one","one_zero","partial_cmp","sub","sub_assign","to_owned","try_from","try_into","type_id","vzip","zero","Float","Int","Signed","Unsigned","ll1","Input","LL1Parser","add_rule","add_rule_empty","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","consume","consume_eq","default","fmt","from","from","into","into","new","new","parse","peek","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","rand_range","RootedTreeBuilder","Tree","TreeBuilder","TreeEdge","TreeEdgeTrait","TreeNode","Weight","auxiliary_tree","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","centroid","centroid_decomposition","children","clone","clone","clone","clone_into","clone_into","clone_into","default","depth_query","euler_tour","extend","extend","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hld","index","into","into","into","into","into","is_empty","lca","len","neighbors","neighbors_size","new","new","new","nodes","nodes_iter","parent","rerooting","rev","rev","root","rooted_isomorphism","rooting","to","to","to","to_owned","to_owned","to_owned","tree_dp","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","utils","vzip","vzip","vzip","vzip","vzip","weight","weight","weight","AuxiliaryTree","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","vzip","centroids","CentroidDecomposition","Node","borrow","borrow","borrow_mut","borrow_mut","children","clone","clone_into","depth","from","from","into","into","new","nodes","par","subsize","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","TreeDepthQuery","ancestor","borrow","borrow_mut","children_query","from","into","me_query","new","try_from","try_into","type_id","vzip","EulerTour","borrow","borrow_mut","from","into","new","point_query","subtree_query","try_from","try_into","type_id","vzip","HLD","borrow","borrow_mut","clone","clone_into","fmt","from","get_edge_id","get_id","into","lca","new","parent","path_query_edge","path_query_vertex","subtree_query_edge","subtree_query_vertex","to_owned","try_from","try_into","type_id","vzip","DoublingLCA","ancestor","borrow","borrow_mut","from","into","jump","lca","new","try_from","try_into","type_id","vzip","RerootingDP","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","rooted_isomorphism","rooting","TreeDP","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","tree_diameter","tree_distance","tree_height","tree_path","double_sigma","difference","max","prod","range_prod","range_sum","range_xor","sum","xor","sum_of_sum_of_difference","sum_of_sum_of_max","sum_of_sum_of_prod","sum_of_sum_of_range_prod","sum_of_sum_of_range_sum","sum_of_sum_of_range_xor","sum_of_sum_of_sum","sum_of_sum_of_xor","bits","fastio","is_none_or","linear","nullable_usize","range","swap","transpose","usize_set","xor_shift","yesno","highest_one","FastIO","borrow","borrow_mut","drop","from","getc","into","new","peek","read_chars","read_f64","read_i32","read_i64","read_isize","read_u32","read_u64","read_usize","skip","try_from","try_into","type_id","vzip","write","writeln","IsNoneOr","is_none_or","Linear","a","apply","b","borrow","borrow_mut","clone","clone_into","fmt","from","into","mov_x","to_owned","try_from","try_into","type_id","vzip","NULL","NullableUsize","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","hash","into","is_null","partial_cmp","to_owned","try_from","try_into","type_id","vzip","range_bounds_to_range","swap_vv","Output","Transpose","transpose","UsizeSet","bitand","bitor","bitxor","borrow","borrow_mut","clone","clone_into","cmp","contains","default","difference","eq","fill","flip","fmt","from","from","hash","intersection","into","is_empty","len","partial_cmp","reset","set","sub","symmetric_difference","to_owned","try_from","try_into","type_id","union","vzip","XorShift","borrow","borrow_mut","clone","clone_into","fmt","from","gen","into","new","to_owned","try_from","try_into","type_id","vzip","YesNo","yesno"],"q":[[0,"haar_lib"],[40,"haar_lib::algebra"],[61,"haar_lib::algebra::action"],[69,"haar_lib::algebra::add_sum"],[90,"haar_lib::algebra::affine"],[108,"haar_lib::algebra::affine_sum"],[129,"haar_lib::algebra::bitand"],[157,"haar_lib::algebra::bitor"],[185,"haar_lib::algebra::bitxor"],[237,"haar_lib::algebra::dihedral"],[271,"haar_lib::algebra::dual"],[289,"haar_lib::algebra::max"],[329,"haar_lib::algebra::max_contiguous"],[366,"haar_lib::algebra::max_partial_sum"],[400,"haar_lib::algebra::min"],[440,"haar_lib::algebra::prod"],[486,"haar_lib::algebra::sum"],[541,"haar_lib::algebra::traits"],[559,"haar_lib::algebra::transform"],[613,"haar_lib::algebra::trivial"],[631,"haar_lib::algebra::tuple"],[703,"haar_lib::algebra::update"],[721,"haar_lib::algebra::update_sum"],[742,"haar_lib::algo"],[781,"haar_lib::algo::bsearch"],[784,"haar_lib::algo::bsearch_f"],[801,"haar_lib::algo::bsearch_f::SearchResult"],[803,"haar_lib::algo::compressor"],[837,"haar_lib::algo::cycle_finding"],[854,"haar_lib::algo::edit_distance"],[855,"haar_lib::algo::enum_bit"],[862,"haar_lib::algo::enum_bit::gray_code"],[863,"haar_lib::algo::enum_bit::subset_asc"],[864,"haar_lib::algo::enum_bit::subset_between"],[865,"haar_lib::algo::enum_bit::subset_desc"],[866,"haar_lib::algo::enum_bit::subset_size_k"],[867,"haar_lib::algo::enum_bit::superset_asc"],[868,"haar_lib::algo::enum_bit::superset_desc"],[869,"haar_lib::algo::enum_groups"],[870,"haar_lib::algo::golden_search"],[887,"haar_lib::algo::imos_1d"],[899,"haar_lib::algo::imos_2d"],[911,"haar_lib::algo::imos_geo"],[923,"haar_lib::algo::interval_scheduling"],[924,"haar_lib::algo::inversion_number"],[925,"haar_lib::algo::kmp"],[940,"haar_lib::algo::knapsack"],[945,"haar_lib::algo::knapsack::limited"],[946,"haar_lib::algo::knapsack::small_quantity"],[947,"haar_lib::algo::knapsack::small_value"],[948,"haar_lib::algo::knapsack::small_weight"],[949,"haar_lib::algo::knapsack::unlimited"],[950,"haar_lib::algo::lcs"],[951,"haar_lib::algo::lis"],[952,"haar_lib::algo::majority_vote"],[953,"haar_lib::algo::manacher"],[954,"haar_lib::algo::max_partial_sum"],[955,"haar_lib::algo::max_rect"],[957,"haar_lib::algo::merge"],[960,"haar_lib::algo::mo"],[972,"haar_lib::algo::monotone_minima"],[973,"haar_lib::algo::num_subseq"],[974,"haar_lib::algo::parallel_binary_search"],[975,"haar_lib::algo::permutation"],[978,"haar_lib::algo::psp"],[1003,"haar_lib::algo::rle"],[1004,"haar_lib::algo::rolling_hash"],[1026,"haar_lib::algo::sa"],[1043,"haar_lib::algo::shakutori"],[1044,"haar_lib::algo::sliding_window"],[1046,"haar_lib::algo::static_range_freq_query"],[1057,"haar_lib::algo::static_range_inversions_query"],[1069,"haar_lib::algo::subset_sum"],[1071,"haar_lib::algo::subset_sum::count"],[1072,"haar_lib::algo::subset_sum::limited"],[1073,"haar_lib::algo::ternary_search"],[1090,"haar_lib::algo::two_sat"],[1104,"haar_lib::algo::zalgo"],[1105,"haar_lib::ds"],[1157,"haar_lib::ds::aho_corasick"],[1195,"haar_lib::ds::binary_trie"],[1216,"haar_lib::ds::bitset"],[1249,"haar_lib::ds::cht"],[1282,"haar_lib::ds::cumulative_sum_1d"],[1311,"haar_lib::ds::cumulative_sum_2d"],[1340,"haar_lib::ds::disjoint_sparse_table"],[1352,"haar_lib::ds::dual_segtree"],[1367,"haar_lib::ds::dynamic_dual_segtree"],[1383,"haar_lib::ds::dynamic_lazy_segtree"],[1399,"haar_lib::ds::dynamic_segtree"],[1412,"haar_lib::ds::fenwick"],[1430,"haar_lib::ds::fenwick_add"],[1446,"haar_lib::ds::fenwick_on_fenwick"],[1477,"haar_lib::ds::foldable_deque"],[1496,"haar_lib::ds::integer_set"],[1516,"haar_lib::ds::interval_heap"],[1538,"haar_lib::ds::lazy_segtree"],[1551,"haar_lib::ds::lazy_segtree_coeff"],[1565,"haar_lib::ds::lazy_skew_heap"],[1588,"haar_lib::ds::li_chao"],[1618,"haar_lib::ds::link_cut_tree"],[1636,"haar_lib::ds::linked_list"],[1673,"haar_lib::ds::merge_sort_tree"],[1684,"haar_lib::ds::multiset"],[1709,"haar_lib::ds::palindromic_tree"],[1742,"haar_lib::ds::partially_persistent_unionfind"],[1767,"haar_lib::ds::persistent_array"],[1783,"haar_lib::ds::persistent_queue"],[1801,"haar_lib::ds::persistent_segtree"],[1818,"haar_lib::ds::persistent_stack"],[1837,"haar_lib::ds::potential_unionfind"],[1855,"haar_lib::ds::qword_tree"],[1878,"haar_lib::ds::range_search_tree"],[1904,"haar_lib::ds::rollbackable_unionfind"],[1919,"haar_lib::ds::rollbackable_vector"],[1945,"haar_lib::ds::segtree"],[1963,"haar_lib::ds::segtree_2d"],[1977,"haar_lib::ds::segtree_beats"],[1998,"haar_lib::ds::segtree_linear_add"],[2011,"haar_lib::ds::segtree_linear_add_range_sum"],[2024,"haar_lib::ds::segtree_on_segtree"],[2051,"haar_lib::ds::skew_heap"],[2072,"haar_lib::ds::sparse_table"],[2083,"haar_lib::ds::sparse_table_2d"],[2094,"haar_lib::ds::splay_tree"],[2122,"haar_lib::ds::starry_sky_tree"],[2149,"haar_lib::ds::succinct_dict"],[2168,"haar_lib::ds::traits"],[2183,"haar_lib::ds::trie"],[2212,"haar_lib::ds::unionfind"],[2230,"haar_lib::ds::wavelet_matrix"],[2253,"haar_lib::flow"],[2263,"haar_lib::flow::dinic"],[2280,"haar_lib::flow::ford_fulkerson"],[2297,"haar_lib::flow::min_cost_flow"],[2312,"haar_lib::geom"],[2428,"haar_lib::geom::area_intersection_circle_polygon"],[2429,"haar_lib::geom::area_intersection_circles"],[2430,"haar_lib::geom::area_polygon"],[2431,"haar_lib::geom::ccw"],[2457,"haar_lib::geom::circumcircle"],[2458,"haar_lib::geom::closest_pair"],[2459,"haar_lib::geom::common_tangent_circles"],[2460,"haar_lib::geom::convex"],[2461,"haar_lib::geom::convex_cut"],[2462,"haar_lib::geom::convex_diameter"],[2463,"haar_lib::geom::convex_hull"],[2480,"haar_lib::geom::dist_line_point"],[2481,"haar_lib::geom::dist_segment_point"],[2482,"haar_lib::geom::dist_segments"],[2483,"haar_lib::geom::incircle"],[2484,"haar_lib::geom::intersect_circle_line"],[2505,"haar_lib::geom::intersect_circle_segment"],[2530,"haar_lib::geom::intersect_circles"],[2558,"haar_lib::geom::intersect_line_segment"],[2581,"haar_lib::geom::intersect_segments"],[2604,"haar_lib::geom::point_in_polygon"],[2625,"haar_lib::geom::tangent_circle"],[2626,"haar_lib::graph"],[2730,"haar_lib::graph::articulation_points"],[2731,"haar_lib::graph::bellman_ford"],[2733,"haar_lib::graph::bfs"],[2734,"haar_lib::graph::biconnected"],[2736,"haar_lib::graph::bipartite"],[2737,"haar_lib::graph::bridges"],[2738,"haar_lib::graph::chinese_postman"],[2739,"haar_lib::graph::chu_liu_edmonds"],[2740,"haar_lib::graph::cycle"],[2741,"haar_lib::graph::cycle::directed_shortest"],[2742,"haar_lib::graph::detect_cycle"],[2743,"haar_lib::graph::dijkstra"],[2744,"haar_lib::graph::enumerate_triangles"],[2745,"haar_lib::graph::eulerian"],[2747,"haar_lib::graph::eulerian::directed"],[2762,"haar_lib::graph::eulerian::undirected"],[2777,"haar_lib::graph::functional_graph"],[2841,"haar_lib::graph::kruskal"],[2842,"haar_lib::graph::lowlink"],[2862,"haar_lib::graph::max_independent_set"],[2863,"haar_lib::graph::prim"],[2864,"haar_lib::graph::pseudo_tree"],[2904,"haar_lib::graph::scc"],[2916,"haar_lib::graph::tsort"],[2917,"haar_lib::graph::tsp"],[2918,"haar_lib::graph::two_edge"],[2919,"haar_lib::graph::warshall_floyd"],[2933,"haar_lib::graph::yen"],[2935,"haar_lib::grid"],[2997,"haar_lib::grid::to_graph"],[2998,"haar_lib::iter"],[3002,"haar_lib::iter::collect"],[3004,"haar_lib::iter::cumsum"],[3017,"haar_lib::iter::join_str"],[3019,"haar_lib::iter::reject"],[3032,"haar_lib::linalg"],[3035,"haar_lib::linalg::mod_2"],[3039,"haar_lib::linalg::mod_2::determinant"],[3040,"haar_lib::linalg::mod_2::gaussian_elim"],[3041,"haar_lib::linalg::mod_2::inverse"],[3042,"haar_lib::linalg::mod_2::matrix"],[3060,"haar_lib::linalg::mod_m"],[3062,"haar_lib::linalg::mod_m::matrix"],[3089,"haar_lib::linalg::mod_m::square_matrix"],[3119,"haar_lib::linalg::mod_p"],[3121,"haar_lib::linalg::mod_p::determinant"],[3122,"haar_lib::linalg::mod_p::inverse"],[3123,"haar_lib::macros"],[3136,"haar_lib::matching"],[3138,"haar_lib::matching::bi_match"],[3150,"haar_lib::matching::hopcroft_karp"],[3176,"haar_lib::math"],[3205,"haar_lib::math::bell_number"],[3206,"haar_lib::math::berlekamp_massey"],[3207,"haar_lib::math::binomial_coefficient"],[3235,"haar_lib::math::convolution"],[3242,"haar_lib::math::convolution::conv_and"],[3243,"haar_lib::math::convolution::conv_gcd"],[3244,"haar_lib::math::convolution::conv_or"],[3245,"haar_lib::math::convolution::conv_xor"],[3246,"haar_lib::math::convolution::mobius"],[3248,"haar_lib::math::convolution::subset_conv"],[3249,"haar_lib::math::convolution::zeta"],[3251,"haar_lib::math::count_coprime"],[3252,"haar_lib::math::crt"],[3254,"haar_lib::math::divisor"],[3256,"haar_lib::math::enumerate_quotients"],[3274,"haar_lib::math::ext_gcd"],[3275,"haar_lib::math::factorial"],[3300,"haar_lib::math::factorial::bell"],[3303,"haar_lib::math::factorial::bernoulli"],[3306,"haar_lib::math::factorial::catalan"],[3309,"haar_lib::math::factorial_prime_factor"],[3310,"haar_lib::math::factorize"],[3312,"haar_lib::math::factorize::sieve"],[3323,"haar_lib::math::factorize::trial"],[3324,"haar_lib::math::garner"],[3325,"haar_lib::math::gcd_lcm"],[3330,"haar_lib::math::linear_congruence"],[3331,"haar_lib::math::mod_ops"],[3337,"haar_lib::math::mod_ops::enum_inv"],[3338,"haar_lib::math::mod_ops::inv"],[3339,"haar_lib::math::mod_ops::inv_p"],[3340,"haar_lib::math::mod_ops::log"],[3341,"haar_lib::math::mod_ops::pow"],[3342,"haar_lib::math::mod_ops::sqrt"],[3343,"haar_lib::math::montmort"],[3344,"haar_lib::math::multipoint_eval"],[3345,"haar_lib::math::nim_product"],[3349,"haar_lib::math::ntt"],[3360,"haar_lib::math::polynomial"],[3404,"haar_lib::math::polynomial_taylor_shift"],[3405,"haar_lib::math::prime_test"],[3409,"haar_lib::math::prime_test::eratosthenes"],[3421,"haar_lib::math::prime_test::miller_rabin"],[3432,"haar_lib::math::primitive_root"],[3433,"haar_lib::math::sum_floor_linear"],[3434,"haar_lib::math::sum_of_exponential_times_polynomial_limit"],[3435,"haar_lib::math::tetration"],[3436,"haar_lib::math::totient"],[3438,"haar_lib::math::totient_sum"],[3439,"haar_lib::misc"],[3444,"haar_lib::misc::bitwise_sum_popcount"],[3445,"haar_lib::misc::closed_interval"],[3464,"haar_lib::misc::dice"],[3491,"haar_lib::misc::paren"],[3492,"haar_lib::misc::parse_paren"],[3522,"haar_lib::misc::parse_paren::Elem"],[3525,"haar_lib::mul_graph"],[3561,"haar_lib::mul_graph::dijkstra"],[3563,"haar_lib::num"],[3574,"haar_lib::num::arithmetic"],[3575,"haar_lib::num::const_modint"],[3628,"haar_lib::num::const_modint::algebra"],[3630,"haar_lib::num::ff"],[3638,"haar_lib::num::modint"],[3686,"haar_lib::num::modint::algebra"],[3723,"haar_lib::num::montgomery"],[3765,"haar_lib::num::num_inf"],[3791,"haar_lib::num::one_zero"],[3795,"haar_lib::num::ops"],[3801,"haar_lib::num::rational"],[3830,"haar_lib::num::total_f64"],[3859,"haar_lib::num::traits"],[3863,"haar_lib::parser"],[3864,"haar_lib::parser::ll1"],[3895,"haar_lib::testtools"],[3896,"haar_lib::tree"],[3996,"haar_lib::tree::auxiliary_tree"],[4007,"haar_lib::tree::centroid"],[4008,"haar_lib::tree::centroid_decomposition"],[4035,"haar_lib::tree::depth_query"],[4048,"haar_lib::tree::euler_tour"],[4060,"haar_lib::tree::hld"],[4082,"haar_lib::tree::lca"],[4095,"haar_lib::tree::rerooting"],[4106,"haar_lib::tree::rooted_isomorphism"],[4107,"haar_lib::tree::rooting"],[4108,"haar_lib::tree::tree_dp"],[4119,"haar_lib::tree::utils"],[4123,"haar_lib::typical"],[4124,"haar_lib::typical::double_sigma"],[4132,"haar_lib::typical::double_sigma::difference"],[4133,"haar_lib::typical::double_sigma::max"],[4134,"haar_lib::typical::double_sigma::prod"],[4135,"haar_lib::typical::double_sigma::range_prod"],[4136,"haar_lib::typical::double_sigma::range_sum"],[4137,"haar_lib::typical::double_sigma::range_xor"],[4138,"haar_lib::typical::double_sigma::sum"],[4139,"haar_lib::typical::double_sigma::xor"],[4140,"haar_lib::utils"],[4151,"haar_lib::utils::bits"],[4152,"haar_lib::utils::fastio"],[4176,"haar_lib::utils::is_none_or"],[4178,"haar_lib::utils::linear"],[4195,"haar_lib::utils::nullable_usize"],[4215,"haar_lib::utils::range"],[4216,"haar_lib::utils::swap"],[4217,"haar_lib::utils::transpose"],[4220,"haar_lib::utils::usize_set"],[4254,"haar_lib::utils::xor_shift"],[4269,"haar_lib::utils::yesno"]],"d":["代数的構造","","引数から<code>std::collections::BTreeMap</code>を作る。","引数から<code>std::collections::BTreeSet</code>を作る。","値を最大値で更新する。","値を最小値で更新する。","データ構造","フロー問題","C言語風のfor文","幾何","","","グラフ一般に関するもの","","引数から<code>std::collections::HashMap</code>を作る。","引数から<code>std::collections::HashSet</code>を作る。","","","","イテレータ","線形代数","macro_exportされたmacro置き場","マッチング問題","数学","複数の値の最大値を得る。","複数の値の最小値を得る。","分類を放置しているもの","頂点倍加グラフ","多次元の<code>Vec</code>を作る。","","構文解析","…","","","…","トレイトの別名を作る。","","木に関するもの","","便利そうなもの置き場","","Range Add Range Sum用の代数的構造","一次関数の合成を演算とする代数的構造","Range Affine Range Sum用の代数的構造","論理積を演算とする代数的構造","論理和を演算とする代数的構造","排他的論理和を演算とする代数的構造","二面体群","演算の順序を逆にした代数的構造","最大値を演算とする代数的構造","<code>bool</code>値列の結合による、連続する<code>true</code>…","","最小値を演算とする代数的構造","乗算を演算とする代数的構造","加法を演算とする代数的構造","代数的構造に関するトレイトを定義する。","配列の並び替えを演算とする代数的構造","自明な群","直積","値の更新を演算とする代数的構造","Range Update Range Sum用の代数的構造","","範囲更新の型","範囲取得の型","範囲更新を範囲取得に反映させる。","範囲取得の二項演算","範囲取得のモノイドの単位元","範囲更新の二項演算","範囲更新のモノイドの単位元","Range Add Range Sum用の代数的構造","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>AddSum&lt;T, U&gt;</code>を生成する。","","","","","","","","一次関数の合成を演算とする代数的構造","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","<code>Affine&lt;T&gt;</code>を生成する。","","","","","","","Range Affine Range Sum用の代数的構造","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>AffineSum&lt;T, U&gt;</code>を生成する。","","","","","","","","論理積を演算とする代数的構造","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","<code>BitAnd&lt;T&gt;</code>を生成する。","","","","","","","","","","","","論理和を演算とする代数的構造","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","<code>BitOr&lt;T&gt;</code>を生成する。","","","","","","","","","","","","排他的論理和を演算とする代数的構造","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","<code>BitXor&lt;T&gt;</code>を生成する。","","","","","","","","","","","","","","","","","","二面体群","二面体群の元","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","<code>Dihedral</code>を生成する。","","","","","","","","","","","","演算の順序を逆にした代数的構造","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","<code>Dual&lt;S&gt;</code>を生成する。","","","","","","","最大値を演算とする代数的構造","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","<code>Max&lt;T&gt;</code>を生成する。","","","","","","","","","","","","","","","","","","連続する<code>true</code>列の最大長を管理する。","<code>MaxContiguous</code>の元","","","","","","","","","最大連続長","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","左側最大連続長","区間長","<code>value</code>を値にもつ<code>MaxContiguousValue</code>を生成する。","","右側最大連続長","","","","","","","","","","","連続する部分列の総和の最大値を扱う。","連続する部分列の総和を管理する。","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","値<code>value</code>をもつ<code>MaxPartialSumValue</code>を生成する。","<code>MaxPartialSum</code>を生成する。","","","","","","","","","","","","最小値を演算とする代数的構造","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","<code>Min&lt;T&gt;</code>を生成する。","","","","","","","","","","","","","","","","","","乗算を演算とする代数的構造","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","<code>Prod&lt;T&gt;</code>を生成する。","","","","","","","","","","","","","","","","","","","","","加法を演算とする代数的構造","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","<code>Sum&lt;T&gt;</code>を生成する。","","","","","","","","","","","","","","","","","","","","","可換群","可換モノイド","結合性をもつ","二項演算をもつ","可換性をもつ","集合の要素の型","群","冪等性をもつ","単位元をもつ","逆元をもつ","モノイド","半群","集合","値に二項演算を複数回適用する。","単位元","逆元","二項演算","<code>n</code>個の値<code>a</code>に二項演算を適用する。","置換や変換の合成を演算とする代数的構造","置換操作","変換操作","$b_i = a_{T_i}$を満たすbを返す。","$b_i = a_{P_i}$を満たすbを返す。","内部の<code>Vec</code>のスライスへの参照を返す。","内部の<code>Vec</code>のスライスへの参照を返す。","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","<code>Composition&lt;T&gt;</code>を生成する。","","","","","","","","","","","","","","","","","","","","自明な群","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","2つの集合の直積","3つの集合の直積","4つの集合の直積","5つの集合の直積","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","値の更新を演算とする代数的構造","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","<code>Update&lt;T&gt;</code>を生成する。","","","","","","","Range Update Range Sum用の代数的構造","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>UpdateSum&lt;T,U&gt;</code>を生成する。","","","","","","","","二分探索","","座標圧縮","循環検出法","編集距離","ビット列の列挙","グループ分けの方法の全列挙","黄金分割探索","1次元のimos法","2次元のimos法","等比級数のimos法","区間スケジューリング問題","転倒数","Knuth-Morris-Pratt法","ナップサック問題","最長共通部分列","最長増加部分列","Boyer-Moore majority vote algorithm","Manacher’s algorithm","最大連続部分和","最大長方形","ソート済み配列のマージ","Mo’s algorithm","Monotone minima","相異なる部分列の総数","並列二分探索","順列の列挙","Project Selection Problem","Run Length Encoding","","Suffix Array","尺取り法","スライド最小値","配列に対する範囲頻度取得クエリ","範囲転倒数取得クエリ","部分和問題","三分探索","2-SAT","","lower_bound, upper_boundの組を求める。","x以上となる最小のindexを求める。","xを超える最小のindexを求める。","全体で条件を満たさない。","全体で条件を満たす。","<code>ng</code>以下で条件を満たさず、<code>ok</code>…","<code>bsearch_ng_ok</code>の返り値","","","二分探索","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","条件を満たさない最大値","条件を満たす最小値","座標圧縮のための構造体","<code>Compressor&lt;T&gt;</code>を生成する","座標圧縮対象に<code>value</code>を追加する。","","","","","<strong>Time complexity</strong> $O(n \\\\log n)$","","","","","<code>values</code>の要素をすべて座標圧縮する。","<code>values</code>の要素をすべて復元する。","","","Returns the argument unchanged.","Returns the argument unchanged.","<code>i</code>番目の値を返す。","<code>value</code>が何番目の値(0-index)かを返す。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>CompressorBuilder&lt;T&gt;</code>を生成する。","座標圧縮後の要素の種類数","","","","","","","","","","","<code>cycle_finding</code>の結果","","","","","循環部の長さ","循環検出法","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","先頭の非循環部の長さ","","","","","","編集距離","Gray code","ビット列の部分集合を昇順に列挙する","$a \\\\subseteq x \\\\subseteq b$を満たす<code>x</code>を列挙する","ビット列の部分集合を降順に列挙する","ビットが<code>1</code>の個数が<code>k</code>であるものを列挙する","ビット列の上位集合を昇順に列挙する","ビット列の上位集合を降順に列挙する","<code>n</code>桁のGray codeを昇順に列挙する。","ビット列としての<code>a</code>…","$a \\\\subseteq x \\\\subseteq b$を満たす<code>x</code>…","ビット列としての<code>a</code>…","幅<code>width</code>のなかで、ビットが<code>1</code>の個数が<code>k</code>…","ビット列としての<code>a</code>…","ビット列としての<code>a</code>…","<code>n</code>…","<code>golden_search</code>…","下に凸","上に凸","","","","","","","Returns the argument unchanged.","黄金分割探索","Calls <code>U::from(self)</code>.","","","","","","1次元のimos法","","","<strong>Time complexity</strong> $O(n)$","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(n)$","","","","<strong>Time complexity</strong> $O(1)$","","2次元のimos法","","","<strong>Time complexity</strong> $O(nm)$","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(nm)$","","","","<strong>Time complexity</strong> $O(1)$","","等比級数のimos法","","","<strong>Time complexity</strong> $O(n)$","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(n)$","","","","<strong>Time complexity</strong> $O(1)$","","…","数列の転倒数を計算する。","Knuth-Morris-Pratt法","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity O(|s|)</strong>","<strong>Time complexity O(|pat|)</strong>","","","","","","個数制限付きナップサック問題","要素数が小さいナップサック問題","価値の総和が小さいナップサック問題","容量が小さいナップサック問題","個数制限無しナップサック問題","個数制限付きナップサック問題","要素数が小さいナップサック問題","価値の総和が小さいナップサック問題","容量が小さいナップサック問題","個数制限無しナップサック問題","列a, bの最長共通部分列の一つを求める。","列の最長増加部分列の一つを求める。","Boyer-Moore majority vote algorithm","<code>s</code>…","…","…","…","<code>a[0..k]</code>と<code>a[k..]</code>を<code>&lt;</code>で比較してマージする。","<code>a[0..k]</code>と<code>a[k..]</code>を<code>cmp</code>で比較してマージする。","2つのソート済み<code>Vec</code>をマージした<code>Vec</code>を返す。","Mo’s algorithm","範囲<code>[l, r)</code>を登録する。","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","クエリ処理用の関数を登録して<code>Mo</code>を作る。","…","","","","","<code>n</code>行<code>m</code>…","返り値<code>ret</code>に対して、<code>ret[i]</code>は<code>a[0..i]</code>…","並列二分探索","<code>a</code>を辞書式順序で次の順列にする。","辞書式順序で<code>a</code>…","<code>a</code>を辞書式順序で前の順列にする。","Project Selection Problem","","","","","Returns the argument unchanged.","頂点iが青ならばcの利益を得る。","頂点iとjがともに青ならばcの利益を得る。","頂点iとjがともに赤ならばcの利益を得る。","頂点iが赤ならばcの利益を得る。","頂点iが赤ならば、頂点jも赤…","Calls <code>U::from(self)</code>.","頂点iは青でなければならない。","頂点iは赤でなければならない。","<code>PSP</code>を生成する。","頂点iが青ならばcの損失になる。","頂点iとjが異なる色ならばcの損失となる。","頂点iが赤ならばcの損失になる。","頂点iが赤かつ頂点jが青…","must be制約を破った場合、<code>None</code>…","","","","","","<strong>Time complexity</strong> $O(|a|)$","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","文字列<code>s</code>のハッシュを計算する。","範囲<code>l..r</code>でのハッシュを計算する。","文字列<code>s</code>からハッシュ計算テーブルを作る。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","接尾辞配列","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","文字列<code>s</code>から接尾辞配列を構築する。","","接尾辞配列への参照を返す。","","","","","尺取り法","…","…","…","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(|a|)$","<strong>Time complexity</strong> $O(\\\\log |a|)$","","","","","範囲転倒数取得クエリ","範囲<code>l..r</code>…","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(n \\\\log n)$","クエリに対しての結果を返す。","","","","","部分和問題 …","…","部分和問題 …","…","<code>ternary_search</code>…","下に凸","上に凸","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","三分探索","","","","","","2-SATを解く。","$a \\\\Rightarrow b$","$a \\\\lor b$","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(size)$","$\\\\lnot (a \\\\land b)$","<strong>Time complexity</strong> $O(size + E)$","","","","","","Aho-Corasick法","非負整数を2進数として管理する。","任意サイズのbit列を扱う。","Convex Hull Trick","1次元累積和","2次元累積和","半群の列の区間取得($O(1)$)ができる。","モノイド列の区間更新・点取得($O(\\\\log n)$, …","動的双対セグメント木","動的遅延セグメント木","動的セグメント木","可換群の点更新・区間取得($O(\\\\log n)$, $O(\\\\log …","可換な加減算に特化したFenwickTree","Fenwick木上にFenwick木を構築する。","半群で畳み込み可能なdeque","Mexを求められるデータ構造","最大値と最小値を得られるヒープ","モノイド列の区間更新・区間取得($O(\\\\log n)$, …","係数乗算付き区間加算区間総和遅延セグ木","遅延加算付き融合可能ヒープ","Li-Chao tree","Link-Cut Tree","連結リスト","Merge-sort Tree","同一要素を複数個挿入可能な<code>Set</code>","回文木","部分永続UnionFind","永続配列","永続キュー","永続セグメントツリー","永続スタック","ポテンシャル付きUnionfind","64分木","領域内の点を列挙する","ロールバック可能Unionfind","ロールバック可能Vec","モノイド列の点更新・区間取得($O(\\\\log n)$, …","二次元のセグメント木","Segment Tree Beats","区間一次関数加算セグメントツリー","…","…","融合可能ヒープ","…","…","Splay Tree","区間加算・区間Max(Min)","","","Trie木","","","Aho-Corasick法","<code>AhoCorasick</code>を構築するための構造体。","<code>AhoCorasick</code>のノード","パターン<code>pat</code>を追加する。","","","","","","","<code>AhoCorasick</code>を構築する。","文字<code>c</code>で遷移する子ノードへの参照を返す。","…","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","ノード毎に割り当てられた番号を返す。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","ノード数を返す。","文字列<code>s</code>…","<code>AhoCorasickBuilder</code>を生成する。","<code>index</code>…","…","Trie木の根ノードへの参照を返す。","","","","","","","","","","","","","非負整数を2進数として管理する。","","","","","値<code>value</code>の個数を返す。","値<code>value</code>…","","Returns the argument unchanged.","値<code>value</code>を挿入して、<code>value</code>の個数を返す。","Calls <code>U::from(self)</code>.","要素数が0ならば<code>true</code>を返す。","要素数を返す。","$\\\\max_{a \\\\in S} a \\\\oplus xor$を求める。","$\\\\min_{a \\\\in S} a \\\\oplus xor$を求める。","<code>bitlen</code>ビットの数を扱える<code>BinaryTrie</code>…","","","","","","<code>Bitset</code>内部で扱う型のBit数","任意サイズのbit列を扱う。","","","","","","","","","","","","<code>1</code>が設定されているbitの個数を数える。","<code>0</code>が設定されているbitの個数を数える。","<code>n</code>番目のbitを反転させる。","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","bit列が空ならば<code>true</code>を返す。","bit列の長さを返す。","長さ<code>n</code>の<code>Bitset</code>を構築する。","","<code>n</code>番目のbitを<code>val</code>で設定する。","<code>n</code>番目のbitが<code>1</code>ならば<code>true</code>を返す。","","","","","","","","<code>ConvexHullTrick&lt;T&gt;</code>がt扱える型","最大値クエリ","最小値クエリ","最大値クエリか最小値クエリかを表す","…","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","…","","","","","","","","","","","1次元の累積和を扱う","<code>CumulativeSum1D</code>を構築する","","<code>i</code>番目に<code>value</code>を代入する","","","","","<code>CumulativeSum1D</code>を構築する","","","","<strong>Time complexity</strong> $O(1)$","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>CumulativeSum1DBuilder</code>を生成する","","","","","","","","群<code>G</code>の演算に<code>i</code>番目の値と<code>value</code>を適用して<code>i</code>…","","","2次元の累積和を扱う","<code>CumulativeSum2D</code>を構築する","","<code>[i][j]</code>番目に<code>value</code>を代入する","","","","","<code>CumulativeSum2D</code>を構築する","","","","<strong>Time Complexity</strong> $O(1)$","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>CumulativeSum2DBuilder</code>を生成する","","","","","","","","群<code>G</code>の演算に<code>[i][j]</code>番目の値と<code>value</code>を適用して…","","","半群の列の区間取得($O(1)$)ができる。","","","","<strong>Time complexity</strong> $O(1)$","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","列<code>seq</code>から<code>DisjointSparseTable&lt;S&gt;</code>を構築する。","","","","","モノイド列の区間更新・点取得($O(\\\\log n)$, …","","","","Returns the argument unchanged.","","<strong>Time complexity</strong> $O(\\\\log n)$","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(n)$","","","","","<strong>Time complexity</strong> $O(\\\\log n)$","","動的双対セグメント木","","","","","","Returns the argument unchanged.","<code>i</code>番目の要素を取得する。","Calls <code>U::from(self)</code>.","<code>DynamicDualSegtree&lt;M&gt;</code>を生成する。","","","","","範囲<code>s..t</code>を<code>value</code>で更新する。","","動的遅延セグメント木","","","","","","範囲<code>s..t</code>で計算を集約する。","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>DynamicLazySegtree&lt;A&gt;</code>を生成する。","","","","","範囲<code>s..t</code>を<code>value</code>で更新する。","","動的セグメント木","<code>i</code>番目の要素を<code>value</code>で更新する。","","","","範囲<code>start..end</code>で計算を集約する。","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>DynamicSegtree&lt;M&gt;</code>を生成する。","","","","","","可換群の点更新・区間取得($O(\\\\log n)$, $O(\\\\log …","","","","","","範囲<code>l..r</code>で計算を集約した結果を返す。","範囲<code>0..r</code>で計算を集約した結果を返す。","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","長さ<code>size</code>、可換群<code>group</code>から<code>FenwickTree&lt;G&gt;</code>…","","","","","<code>i</code>番目の要素を<code>value</code>で更新する。","","<code>FenwickTreeAdd&lt;T&gt;</code>が扱える型","可換な加減算に特化したFenwickTree","<code>i</code>番目の値に<code>value</code>を足す。","","","範囲<code>l..r</code>の総和を返す。","範囲<code>0..r</code>の総和を返す。","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","長さ<code>size</code>の<code>FenwickTreeAdd&lt;T&gt;</code>を生成する。","<code>i</code>番目の値から<code>value</code>を引く。","","","","","Fenwick木上にFenwick木を構築する。","<code>FenwickOnFenwick</code>を構築するための構造体。","点<code>(x, y)</code>を登録する。","","","","","<code>FenwickOnFenwick</code>を構築する。","","","","","","<strong>Time Complexity</strong> $O(\\\\log ^ 2 n)$","<strong>Time Complexity</strong> $O(\\\\log ^ 2 n)$","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","空の<code>FenwickOnFenwickBuilder</code>を用意する。","","","","","","","","","<strong>Time Complexity</strong> $O(\\\\log ^ 2 n)$","","","半群で畳み込み可能なdeque","末尾の要素への参照を返す。","","","すべての要素を<code>S</code>…","Returns the argument unchanged.","先頭の要素への参照を返す。","Calls <code>U::from(self)</code>.","要素数が<code>0</code>なら<code>true</code>を返す。","要素数を返す。","空の<code>FoldableDeque&lt;S&gt;</code>を生成する。","末尾の要素を削除して返す。","先頭の要素を削除して返す。","末尾に<code>value</code>を追加する。","先頭に<code>value</code>を追加する。","","","","","…","","","","","<code>x</code>を含むかを判定","","","Returns the argument unchanged.","<code>x</code>を追加する","<code>x</code>を含む半開区間を返す","Calls <code>U::from(self)</code>.","<code>self</code>に含まれない数のうち<code>x</code>以上で最小のもの","空の<code>IntegerSet</code>を生成","<code>x</code>を削除する","","","","","","最大値と最小値を得られるヒープ","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","要素数が<code>0</code>ならば<code>true</code>を返す。","要素数を返す。","最大値の参照を返す。","最小値の参照を返す。","空の<code>IntervalHeap&lt;T&gt;</code>を構築する。","最大値を削除して返す。","最小値を削除して返す。","値<code>item</code>を挿入する。","","","","","","モノイド列の区間更新・区間取得($O(\\\\log n)$, …","","","区間<code>range</code>で計算を集約して返す。","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","長さ<code>n</code>の<code>LazySegtree</code>を生成する。","<code>Vec</code>から<code>LazySegtree</code>を構築する。","","","","区間<code>range</code>を値<code>x</code>で更新する。","","<code>LazySegtreeCoeff&lt;T&gt;</code>が扱える型","係数乗算付き区間加算区間総和遅延セグ木","","","範囲<code>range</code>で総和を取る。","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","‍係数<code>coefficients</code>を設定した<code>LazySegtreeCoeff</code>…","","","","範囲<code>range</code>に値<code>value</code>を加算する。","","<code>LazySkewHeap&lt;T&gt;</code>が扱える型","遅延加算付き融合可能ヒープ","ヒープの全要素に値<code>value</code>を加算する。","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","ヒープが空ならば<code>true</code>を返す。","ヒープに含まれている値の個数を返す。","他の<code>LazySkewHeap&lt;T&gt;</code>を融合する。","空の<code>LazySkewHeap</code>を生成する。","ヒープの最大値を返す。","…","値<code>value</code>を挿入する。","","","","","","<code>LiChaoTree&lt;T&gt;</code>が扱える型","…","最大値クエリ","最小値クエリ","最大値クエリか最小値クエリかを表す","直線を追加する。","線分を追加する。","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>query</code>で使用する点列<code>xs</code>…","<code>x</code>での最大値/最小値を返す。","","","","","","","","","","Link-Cut Tree","","","頂点<code>i</code>と頂点<code>j</code>の間にある辺を削除する。","","","頂点<code>i</code>,<code>j</code>…","Returns the argument unchanged.","頂点<code>k</code>の値を返す。","Calls <code>U::from(self)</code>.","頂点<code>i</code>と頂点<code>j</code>の間に辺を張る。","<code>LinkCutTree&lt;M&gt;</code>を生成する。","頂点<code>k</code>の値を<code>x</code>に変更する。","","","","頂点<code>k</code>の値をモノイドの演算と値<code>x</code>…","","複数の連結リストをまとめたもの","連結リストの内部ノード","","","","","","","","","<code>prev</code>の後ろに<code>next</code>を接続する。","","<code>cur</code>が属する連結リストの先頭を返す。","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>cur</code>から<code>cur</code>…","<code>cur</code>が属する連結リストの末尾を返す。","<code>LinkedListPool</code>を生成する。","<code>cur</code>の次の要素","<code>cur</code>の前の要素","<code>value</code>…","<code>cur</code>から<code>cur</code>…","<code>cur</code>の後ろでリストを切断する。","<code>cur</code>の前でリストを切断する。","","","","","","","","","<code>Node</code>がもつ値","","","Merge-sort Tree","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(n \\\\log n)$","<code>ub</code>以下の総和を求める","","","","","同一要素を複数個挿入可能な<code>Set</code>","","","","","値<code>value</code>が含まれていれば、<code>true</code>を返す。","値<code>value</code>が含まれている個数を返す。","","先頭の要素を返す。","","Returns the argument unchanged.","値<code>value</code>を挿入する。","Calls <code>U::from(self)</code>.","要素数が0ならば、<code>true</code>を返す。","末尾の要素を返す。","要素数を返す。","<code>MultiSet&lt;T&gt;</code>を生成する。","先頭の要素を<em>一つだけ</em>削除して返す。","末尾の要素を<em>一つだけ</em>削除して返す。","値<code>value</code>を<em>一つだけ</em>削除する。","","","","","","<code>PalindromicTree</code>のノード","回文木","","","","","…","","","偶数長回文の木の根への参照を返す。","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","…","回文の長さを返す。","文字列<code>s</code>から回文木を構築する。","元の文字列の長さ<code>pos+1</code>…","","奇数長回文の木の根への参照を返す。","親ノードへの参照を返す。","末尾に文字<code>c</code>を追加する。","…","…","","","","","","","","","ある時間での<code>PartiallyPersistentUnionFind</code>…","部分永続UnionFind","時刻tでの状態","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>u</code>と<code>v</code>が同じ素集合に含まれていれば<code>true</code>…","最新時点の状態","<code>u</code>を含む素集合と<code>v</code>を含む素集合を融合する。","大きさ<code>size</code>の<code>PartiallyPersistentUnionFind</code>…","<code>i</code>を含む素集合の代表の値を返す。","<code>u</code>が属する素集合の大きさを返す。","","","","","","","","","永続配列","","","","","","Returns the argument unchanged.","<strong>Time complexity</strong> $O(\\\\log n)$","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(n)$","<strong>Time complexity</strong> $O(\\\\log n)$","","","","","","永続キュー","末尾の要素への参照を返す。","","","","","Returns the argument unchanged.","先頭の要素への参照を返す。","Calls <code>U::from(self)</code>.","キューが空ならば<code>true</code>を返す。","キューの要素数を返す。","値<code>value</code>をただ一つだけもつ<code>PersistentQueue</code>…","先頭の要素を削除した<code>PersistentQueue</code>を返す。  …","値<code>value</code>を末尾に追加した<code>PersistentQueue</code>を返す。","","","","","永続セグメントツリー","<code>i</code>番目の要素を<code>value</code>にする。","","","","","","範囲<code>range</code>で計算を集約して返す。","Returns the argument unchanged.","<code>Vec</code>から<code>PersistentSegtree</code>を構築する。","Calls <code>U::from(self)</code>.","長さ<code>n</code>の<code>PersistentSegtree</code>を生成する。","","","","","","永続スタック","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","…","空の<code>PersistentStack</code>を生成する。","末尾の要素への参照を返す。","末尾の要素を削除した<code>PersistentStack</code>を返す。","値<code>value</code>を末尾に追加した<code>PersistentStack</code>を返す。","","","","","","ポテンシャル付きUnionfind","","","素集合の個数を返す。","<code>i</code>と<code>j</code>…","Returns the argument unchanged.","素集合をすべて列挙する。","Calls <code>U::from(self)</code>.","<code>i</code>と<code>j</code>が同じ素集合に属するならば<code>true</code>…","<code>i</code>の属する素集合と<code>j</code>…","大きさ<code>n</code>の<code>PotentialUnionFind</code>を生成する。","<code>i</code>のポテンシャル($P(i)$)を返す。","<code>i</code>の属する素集合の根を返す。","<code>i</code>の属する素集合の大きさを返す。","","","","","<code>QwordTree</code>で扱える最大値","　0 ~ 16777215 (2²⁴ - 1) の値の集合を管理する","","","xを含むかどうかを判定する","","xを集合から削除する","Safety","Returns the argument unchanged.","xを集合に加える","Safety","Calls <code>U::from(self)</code>.","集合が空かどうかを判断する","集合に含まれている要素数を返す","最大値を返す","x以下で最大の値を返す","最小値を返す","x以上で最小の値を返す","64分木を生成","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","ロールバック可能Unionfind","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>i</code>と<code>j</code>が同じ素集合に属するかを判定する","<code>i</code>の属する素集合と<code>j</code>…","<code>RollbackableUnionFind</code>を生成する","直前の<code>merge</code>操作を巻き戻す","<code>i</code>の属する素集合の根を返す","<code>i</code>の属する素集合の大きさを返す","","","","","ロールバック可能Vec","スライスを返す","<code>index</code>番目の要素を<code>value</code>に変更する","","","","","","先頭の要素を返す","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","要素が存在しないかを判定する","末尾の要素を返す","現在の要素数を返す","<code>RollbackableVec</code>を生成","末尾の要素を削除して返す","末尾に<code>value</code>を追加","直前の<code>push</code> / <code>pop</code> / <code>assign</code>操作を取り消す","","","","","","","モノイド列の点更新・区間取得($O(\\\\log n)$, …","<strong>Time complexity</strong> $O(\\\\log n)$","","","","","<strong>Time complexity</strong> $O(\\\\log n)$","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(n)$","","","","","<strong>Time complexity</strong> $O(\\\\log n)$","","二次元のセグメント木","<strong>Time complexity</strong> $O(\\\\log w \\\\log h)$","","","<strong>Time complexity</strong> $O(\\\\log w \\\\log h)$","Returns the argument unchanged.","<strong>Time complexity</strong> $O(1)$","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(wh)$","","","","<strong>Time complexity</strong> $O(\\\\log w \\\\log h)$","","Segment Tree Beats","区間<code>range</code>に値<code>x</code>を加算する。","","","区間<code>range</code>を値<code>x</code>…","区間<code>range</code>を値<code>x</code>…","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","区間<code>range</code>の最大値を返す。","区間<code>range</code>の最小値を返す。","長さ<code>n</code>の<code>SegtreeBeats</code>を生成する。","","区間<code>range</code>の総和を返す。","","","","","","<code>SegtreeLinearAdd&lt;T&gt;</code>が扱える型","区間一次関数加算セグメントツリー","","","Returns the argument unchanged.","<strong>Time complexity</strong> $O(\\\\log n)$","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(n)$","","","","範囲<code>l..r</code>に一次関数<code>ax + b</code>の値を加算する。(<code>x</code>…","","<code>SegtreeLinearAddRangeSum&lt;T&gt;</code>が扱える型","…","","","<strong>Time complexity</strong> $O(\\\\log n)$","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(n)$","","","","<strong>Time complexity</strong> $O(\\\\log n)$","","…","<code>SegtreeOnSegtree</code>を構築するための構造体。","点<code>(x, y)</code>を登録する。","","","","","<code>SegtreeOnSegtree</code>を構築する。","","","","<code>[x1, x2), [y1, y2)</code>で計算を集約する。","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","空の<code>SegtreeOnSegtreeBuilder</code>を用意する。","","","","","","","","点<code>(x, y)</code>の値を<code>value</code>で更新する。","","","融合可能ヒープ","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","ヒープが空ならば<code>true</code>を返す。","ヒープに含まれている値の個数を返す。","他の<code>SkewHeap&lt;T&gt;</code>を融合する。","空の<code>SkewHeap&lt;T&gt;</code>を生成する。","ヒープの最大値を返す。","…","値<code>value</code>を挿入する。","","","","","","…","","","<strong>Time complexity</strong> $O(1)$","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(n \\\\log n)$","","","","","…","","","<strong>Time complexity</strong> $O(1)$","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(nm \\\\log n \\\\log m)$","","","","","スプレーツリー","","","","<code>start..end</code>…","","Returns the argument unchanged.","<code>index</code>番目の要素の参照を返す","要素を<code>index</code>番目になるように挿入する","Calls <code>U::from(self)</code>.","スプレーツリーが要素を持たなければ<code>true</code>…","スプレーツリーの要素数を返す","左側にスプレーツリーを結合する","右側にスプレーツリーを結合する","モノイド<code>m</code>をもつ<code>SplayTree&lt;M&gt;</code>を生成","先頭の値を削除する","末尾の値を削除する","先頭に値を追加する","末尾に値を追加する","<code>index</code>番目の要素を削除して、値を返す","<code>start..end</code>の範囲を反転させる","<code>index</code>番目の要素を<code>value</code>に変更する","値<code>value</code>をもつノード一つのみからなる…","左側に<code>index</code>…","","","","","<code>StarrySkyTree&lt;T&gt;</code>が扱える型","区間Max","区間Min","区間Max/Minを選択する。","区間加算・区間Max(Min)ができるデータ構造。","","","","","","","<strong>Time complexity</strong> $O(\\\\log n)$","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(n)$","","","","","","","","<strong>Time complexity</strong> $O(\\\\log n)$","","","","","","","","","[l, r) に含まれる<code>b</code>の個数","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","[0, index) に含まれる<code>b</code>の個数","nth(0-indexed)番目の<code>b</code>の位置","","","","","","","","","","","","","","","","","","","","","Trie木","Trie木のノード","列<code>s</code>をTrie木に追加する。","","","","","…","…","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","値<code>value</code>を保持するルートのみをもつ<code>Trie</code>…","Trie木の根ノードへの参照を返す。","Trie木の根ノードへの可変参照を返す。","","","","","","","","ノードに格納している値","","","","","","素集合の個数を返す。","Returns the argument unchanged.","素集合をすべて列挙する。","Calls <code>U::from(self)</code>.","<code>i</code>と<code>j</code>が同じ素集合に属するならば<code>true</code>…","<code>i</code>の属する素集合と<code>j</code>…","","<code>i</code>の属する素集合の根を返す。","<code>i</code>の属する素集合の大きさを返す。","","","","","","","","<code>index</code>番目の値を得る。","","","","","<code>range</code>に含まれる<code>value</code>の個数。","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>range</code>での最大値","<code>range</code>での最小値","<code>WaveletMatrix</code>を生成","<code>range</code>で<code>lb</code>以上の最小値","<code>range</code>で<code>ub</code>未満の最大値","<code>range</code>でk(0-indexed)番目に小さい値。","<code>range</code>で<code>lb</code>以上<code>ub</code>未満の値の個数","[0, index)に含まれる<code>value</code>の個数。","<code>nth</code>(0-indexed)番目の<code>value</code>の位置。","","","","","","容量の型","最大フロー問題を扱うトレイト。","頂点<code>u</code>から頂点<code>v</code>へ容量<code>cap</code>の辺を張る。","最大流 (Dinic)","最大流 (Ford-Fulkerson)","…","頂点<code>s</code>から頂点<code>t</code>への最大フローを求める。","最小費用流","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","円","<code>f64</code>の誤差を許容する演算を提供する。","直線 (線分)","二次元ベクトル","絶対値を計算する","線分の大きさを返す。","絶対値の2乗を計算する","","ベクトルのなす角度を返す","","円と多角形の共通部分の面積","2つの円の共通部分の面積","多角形の面積","","","","","","","","","点と線分の位置関係","円の中心","三角形の外接円","","","","","","","","","最近点対","2つの円の共通接線","凸多角形の判定","凸多角形の直線での切断","凸多角形の直径","凸包","外積を計算する","2つの線分の外積を求める。","","","","始点から終点に向かうベクトルを返す。","直線と点の距離","線分と点の距離","2つの線分間の距離","","内積を計算する","2つの線分の内積を求める。","誤差を許容して<code>a == b</code>なら<code>true</code>を返す。","2つのベクトルが等しければ<code>true</code>を返す。","2つの線分が等しければ<code>true</code>を返す。","円が等しいかを判定する","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","線分の始点","誤差を許容して<code>a &gt;= b</code>なら<code>true</code>を返す。","誤差を許容して<code>a &gt; b</code>なら<code>true</code>を返す。","三角形の内接円","円と直線の位置関係","円と線分の位置関係","2つの円の位置関係","直線と線分の位置関係","2つの線分の位置関係","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","2つの直線が直交していれば<code>true</code>を返す。","2つの直線が平行していれば<code>true</code>を返す。","誤差を許容して<code>a &lt;= b</code>なら<code>true</code>を返す。","誤差を許容して<code>a &lt; b</code>なら<code>true</code>を返す。","","誤差を許容して<code>a != b</code>なら<code>true</code>を返す。","誤差<code>eps</code>を設定して<code>Eps</code>を生成する。","始点と終点を設定した<code>Line</code>を返す。","中心<code>center</code>、半径<code>radius</code>の<code>Circle</code>を生成する","直行するベクトルを返す","線分と直交するベクトルを返す。","","点と多角形の位置関係","極座標形式で<code>Vector</code>を生成する","点<code>p</code>…","円の半径","直線を対象軸とした点<code>p</code>…","","点を通る円の接線","線分の終点","","","","","","","","","","","","","","","","","長さを<code>1</code>にしたベクトルを返す","線分方向の単位ベクトルを返す。","","","","","円と多角形の共通部分の面積を求める。","2つの円の共通部分の面積を求める","多角形の面積を求める","点と線分の位置関係","…","…","…","…","点が線分上にある。","","","<code>p0</code>から<code>p1</code>に向かう線分に対して、点<code>p2</code>…","<code>CLOCKWISE</code>ならば<code>true</code>を返す。","","","<code>COUNTER_CLOCKWISE</code>ならば<code>true</code>を返す。","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>ON_SEGMENT</code>ならば<code>true</code>を返す。","<code>ONLINE_BACK</code>ならば<code>true</code>を返す。","<code>ONLINE_FRONT</code>ならば<code>true</code>を返す。","","<code>ONLINE_BACK</code>または<code>COUNTER_CLOCKWISE</code>ならば<code>-1</code>…","","","","","三角形(△abc)の外接円を求める","","2つの円の共通接線を求める","多角形<code>ps</code>が凸多角形であれば<code>true</code>を返す。","凸多角形<code>ps</code>を直線<code>l</code>…","凸多角形の直径を求める","凸包の上半分か下半分かを指定する","下半分","上半分","","","","","凸包を求める","","Returns the argument unchanged.","上半分/下半分の凸包を求める","Calls <code>U::from(self)</code>.","","","","","","直線と点の距離を求める","線分と点の距離を求める","2つの線分間の距離を求める","三角形(△abc)の内接円を求める","直線と円が交わっている","円と直線の位置関係","直線が円の外側にある","直線が円に接している","","","","","<code>CROSSED</code>かを判定","","","Returns the argument unchanged.","円と直線の位置関係と交点を求める","Calls <code>U::from(self)</code>.","<code>OUTSIDE</code>かを判定","<code>TANGENT</code>かを判定","","","","","","線分が円の内部にある","円と線分の位置関係","線分が円と一つの交点をもつ","線分が円の外部にある","線分が円に接している","線分が円と二つの交点をもつ","","","","","","","Returns the argument unchanged.","<code>INSIDE</code>かを判定","円と線分の位置関係と交点を求める","Calls <code>U::from(self)</code>.","<code>ONE_CROSSPOINT</code>かを判定","<code>OUTSIDE</code>かを判定","<code>TANGENT</code>かを判定","","","","<code>TWO_CROSSPOINT</code>かを判定","","","…","…","一方の円がもう一方の円の内部にある","2つの円が交差している","2つの円の位置関係","一方の円がもう一方の円の外部にある","2つの円が同じである","","","<code>CIRCUMSCRIBED</code>かを判定","","","","","Returns the argument unchanged.","<code>INSCRIBED</code>かを判定","<code>INSIDE</code>かを判定","2つの円の位置関係と交点を求める","<code>INTERSECTED</code>かを判定","Calls <code>U::from(self)</code>.","2つの円の共通接線の個数を返す。但し、<code>SAME</code>…","<code>OUTSIDE</code>かを判定","<code>SAME</code>かを判定","","","","","","線分が直線と交差している","直線と線分の位置関係","線分が直線の左側にある","線分が直線上にある","線分が直線の右側にある","","","","","<code>CROSSED</code>かを判定","","","Returns the argument unchanged.","直線と線分の位置関係と交点を求める","Calls <code>U::from(self)</code>.","<code>LEFTSIDE</code>かを判定","<code>OVERLAPPED</code>かを判定","<code>RIGHTSIDE</code>かを判定","","","","","","2つの線分が交差している","2つの線分の位置関係","2つの線分が交差していない","2つの線分が重なっている","2つの線分が同一である","","","","","","","Returns the argument unchanged.","2つの線分の位置関係と交点を求める","<code>INTERSECTED</code>かを判定","Calls <code>U::from(self)</code>.","<code>NOT_INTERSECTED</code>かを判定","<code>OVERLAPPED</code>かを判定","<code>SAME</code>かを判定","","","","","","点が多角形の外部にある","点が多角形の内部にある","点が多角形上にある","点と多角形の位置関係","","","","","","<code>EXCLUSION</code>かを判定","","Returns the argument unchanged.","<code>INCLUSION</code>かを判定","Calls <code>U::from(self)</code>.","<code>ON_SEGMENT</code>かを判定","点と多角形の位置関係を求める","","","","","","点<code>p</code>を通る円<code>c</code>の接線を求める","有向辺をもつ。","…","グラフの辺","<code>Graph</code>にもたせる辺の満たすトレイト。","グラフ","無向辺をもつ。","辺の重みの型","有向グラフに辺を追加する。","無向グラフに辺を追加する。","関節点の列挙","負閉路を持つグラフの最短経路 (Bellman-Ford)","幅優先探索","二重頂点連結分解","二部グラフ判定","","","","","","","","","橋の列挙","中国人郵便配達問題","有向グラフ上の最小有向全域木を求める","","","","","","","","","","有向グラフの閉路検出","非負重み付き最短経路 (Dijkstra)","各頂点からの辺集合への参照を返す。","各頂点からの辺集合への可変参照を返す。","","(準)Eulerグラフの判定","","","","","","","辺の始点","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","辺の始点","Functional Graph","辺の番号など","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","グラフの頂点数が<code>0</code>ならば<code>true</code>を返す。","最小全域木 (Kruskal)","グラフの頂点数を返す。","","最大独立集合","頂点<code>i</code>の隣接辺へのイテレータを返す。","頂点<code>i</code>…","<code>from</code>から<code>to</code>への重さ<code>weight</code>、辺番号<code>index</code>…","頂点数が<code>size</code>の空の<code>Graph</code>を構築する。","最小全域木 (Prim)","…","逆辺","","強連結成分分解","辺の終点","","辺の終点","","","","","","","","","","","","","トポロジカルソート","巡回セールスマン問題","二重辺連結成分分解","","","","","","","","","全頂点間最短経路長","辺の重み","","辺の重み","","関節点の列挙","","負閉路を持つグラフの最短経路","幅優先探索で辺数が最小の経路を得る。","","二重頂点連結分解","…","橋の列挙","<strong>Time complexity</strong> $O(V^2 2^V)$","有向グラフ上の最小有向全域木を求める","…","…","有向グラフの閉路検出","<strong>Time complexity</strong> $O((E + V) \\\\log V)$","","有向グラフの(準)Eulerグラフの判定","無向グラフの(準)Eulerグラフ判定","有向グラフでの一筆書き","有向辺<code>e</code>を追加する。","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","頂点数<code>size</code>のグラフを用意する。","…","","","","","","無向グラフでの一筆書き","無向辺<code>e</code>を追加する。","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","頂点数<code>size</code>のグラフを用意する。","…","","","","","","<code>Loop</code>でも<code>Leaf</code>でもない頂点。","各頂点の出次数が<code>1</code>である、<code>n</code>頂点<code>n</code>…","<code>FunctionalGraph</code>を構築するための構造体。","連結成分","頂点の種類","入次数が<code>0</code>の頂点。","閉路を構成している頂点。","<code>from</code>から<code>to</code>への有向辺を追加する。","","","","","","","","","枝","<code>FunctionalGraph</code>を構築する。","…","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","頂点<code>i</code>…","頂点<code>i</code>の属する連結成分を返す。","すべての連結成分への参照を返す。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>Branch</code>ならば<code>true</code>を返す。","<code>Leaf</code>ならば<code>true</code>を返す。","<code>Loop</code>ならば<code>true</code>を返す。","頂点<code>i</code>の種類を返す。","葉","閉路","<code>n</code>頂点の空なグラフを用意する。","頂点<code>i</code>から辺を辿った次の頂点を返す。","","","","","","","","","","","","","","","","","","","Kruskal法","","par, chのどちらにも属さないノード","","","DFS木での子ノード","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","DFS木での親ノード","","","","","","","最大独立集合を求める","Prim法","<code>PseudoTree</code>の頂点の種類","閉路を構成する頂点。","閉路以外の頂点。","…","<code>PseudoTree</code>を構築するための構造体。","<code>u, v</code>間に無向辺を張る。","","","","","","","<code>PseudoTree</code>を構築する。","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>Loop</code>ならば<code>true</code>を返す。","頂点<code>i</code>の種類を返す。","頂点数<code>n</code>の空のグラフを用意する。","頂点<code>i</code>…","","","","","","","","","","","","","","強連結成分分解","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","グラフから<code>SCC</code>を構築する。","","","","","","トポロジカルソート","巡回セールスマン問題","二重辺連結成分分解","グラフの全頂点間の最短距離を管理する。","…","","","<code>from</code>から<code>to</code>への最短距離を返す。","Returns the argument unchanged.","負の閉路があれば<code>true</code>を返す。","Calls <code>U::from(self)</code>.","<code>WarshallFloyd&lt;T&gt;</code>を生成する。","…","","","","","","","下方向への1マス分の移動","…","移動方向","長方形型のマス目グリッドを扱う。","左方向への1マス分の移動","グリッド上の位置を表す。","右方向への1マス分の移動","上方向への1マス分の移動","","","","","","","","","","","","","","","","x方向の移動量","y方向の移動量","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","位置<code>p</code>の要素への参照を返す。","位置<code>p</code>の要素への可変参照を返す。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","…","…","","","","<code>Vec&lt;Vec&lt;T&gt;&gt;</code>などから<code>Grid</code>を構築する。","","","","","","","","","","","","","","","","","x方向の位置","y方向の位置","グリッドをグラフに変換する","<code>collect_vec</code>を提供する。","<code>cumsum</code>を提供する。","<code>join_str</code>を提供する。","<code>reject</code>を提供する。","<code>collect_vec</code>を提供する。","<code>.collect::&lt;Vec&lt;_&gt;&gt;()</code>と同じ。","<code>cumsum</code>を提供する。","累積和を返すイテレータ。","","","累積和を返すイテレータを生成する。","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","<code>join_str</code>を提供する。","要素を<code>String</code>に変換して、要素間に<code>s</code>…","<code>reject</code>を提供する。","<code>predicate</code>…","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","<code>predicate</code>…","","","","","mod 2","任意mod","mod 素数p","行列式 (mod 2)","ガウスの消去法 (mod 2)","逆行列 (mod 2)","行列 (mod 2)","mod 2上で行列式を求める","mod 2上で行列を掃き出し、ランクを求める。","mod 2上で逆行列を求める","行列 (mod 2)","","","","","Returns the argument unchanged.","<code>Bitset</code>の<code>Vec</code>から<code>MatrixMod2</code>を生成する","<code>i</code>行<code>j</code>列の成分を返す","","Calls <code>U::from(self)</code>.","","<code>h</code>行<code>w</code>列の<code>MatrixMod2</code>を生成","","行列の転置を得る","","","","","<code>h</code>×<code>w</code>行列","正方行列","<code>h</code>×<code>w</code>行列","","","","","","","","Returns the argument unchanged.","<code>Vec&lt;Vec&lt;u32&gt;&gt;</code>から<code>Matrix&lt;Modulo&gt;</code>を作る。","<code>i</code>行<code>j</code>列の要素への可変参照を返す。","行列の行数を返す。","","Calls <code>U::from(self)</code>.","","","","<code>h</code>×<code>w</code>の零行列を作る。","","","","<code>w</code>×<code>h</code>の転置行列を作る。","","","","","行列の列数を返す。","正方行列","","","","","","","","Returns the argument unchanged.","","<code>i</code>行<code>j</code>列の要素への可変参照を返す。","","Calls <code>U::from(self)</code>.","","","","<code>size</code>×<code>size</code>の零行列を作る。","行列の<code>p</code>乗を求める。","行列の行数(列数)を返す。","愚直に行列積を求める。","","","","","行列の転置を求める。","","","","<code>size</code>×<code>size</code>の単位行列を作る。","","行列式 (mod 素数)","逆行列 (mod 素数)","素数mod p上での行列式を求める。","素数mod p上での逆行列を求める。","<code>chmax!</code>, <code>chmin!</code>","<code>hashset!</code>, <code>btreeset!</code>, <code>hashmap!</code>, <code>btreemap!</code>","<code>for_loop!</code>","<code>get_time!</code>","<code>impl_algebra!</code>","<code>impl_ops!</code>","<code>get!</code>, <code>input!</code>","<code>max!</code>, <code>min!</code>","<code>mul_vec!</code>","<code>rec!</code>","<code>sort_with!</code>","<code>timer!</code>","<code>trait_alias!</code>","二部マッチング","二部マッチング (Hopcroft-Karp)","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","ベル数$B(n, n)$のテーブル","","二項係数","畳み込み","互いに素な数を数える。","中国剰余定理","約数列挙","","拡張ユークリッドの互除法","階乗","a!の素因数pの個数を求める。","素因数分解","Garner’s algorithm","最大公約数・最小公倍数","一次合同方程式を解く。","mod mでの演算","完全順列の個数を列挙する。","多項式の多点評価","","","$\\\\mathbb{F}_p$上の多項式","多項式$f(x)$に対して、$f(x + …","素数判定","原始根","$\\\\sum_{i=0}^{n-1} \\\\lfloor \\\\frac{ai+b}{m} \\\\rfloor$","$\\\\sum_{i=0}^{\\\\infty} r^ii^d$","$a \\\\uparrow \\\\uparrow b \\\\pmod m$","トーシェント関数","トーシェント関数の総和","ベル数$B(0, 0)$~$B(n, n)$を求める。","","二項係数$_nC_k \\\\pmod m$を計算する。","二項係数$_nC_k …","","","","","$_nC_k \\\\pmod{p^q}$を計算する。","$_nC_k \\\\pmod m$を計算する。","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","素数$p$に対して$\\\\pmod{p^q}$で<code>ExtLucas</code>…","$\\\\pmod m$で<code>BinomialCoefficient</code>を用意する。","","","","","","","","","","","$\\\\mathtt{a_{i \\\\land j}} = \\\\sum \\\\mathtt{f_{i}} * \\\\mathtt{g_…","$\\\\mathtt{a_{\\\\gcd (i, j)}} = \\\\sum \\\\mathtt{f_{i}} * \\\\mathtt{g…","$\\\\mathtt{a_{i \\\\lor j}} = \\\\sum \\\\mathtt{f_{i}} * \\\\mathtt{g_…","$\\\\mathtt{a_{i \\\\oplus j}} = \\\\sum \\\\mathtt{f_{i}} * \\\\mathtt{g_…","高速Möbius変換","$\\\\mathtt{a_k} = \\\\sum_{\\\\mathtt{i \\\\lor j = k, i \\\\land j = …","高速Ζ変換","$\\\\mathtt{a_{i \\\\land j}} = \\\\sum \\\\mathtt{f_{i}} * \\\\mathtt{g_…","$\\\\mathtt{a_{\\\\gcd (i, j)}} = \\\\sum \\\\mathtt{f_{i}} * \\\\mathtt{g…","$\\\\mathtt{a_{i \\\\lor j}} = \\\\sum \\\\mathtt{f_{i}} * \\\\mathtt{g_…","$\\\\mathtt{a_{i \\\\oplus j}} = \\\\sum \\\\mathtt{f_{i}} * \\\\mathtt{g_…","$\\\\mathtt{f_j} = \\\\sum_{\\\\mathtt{i \\\\subseteq j}} …","$\\\\mathtt{f_j} = \\\\sum_{\\\\mathtt{i \\\\supseteq j}} …","$\\\\mathtt{a_k} = \\\\sum_{\\\\mathtt{i \\\\lor j = k, i \\\\land j = …","$\\\\mathtt{F_j} = \\\\sum_{\\\\mathtt{i \\\\subseteq j}} …","$\\\\mathtt{F_j} = \\\\sum_{\\\\mathtt{i \\\\supseteq j}} …","<code>n</code>以下の自然数で、<code>m</code>…","","","約数の個数を数える","約数を列挙する","<code>enumerate_quotients</code>の結果","","","","","1以上N以下の自然数xについて<code>floor(N/x)</code>…","","","Returns the argument unchanged.","<code>x</code>の最小値","Calls <code>U::from(self)</code>.","<code>floor(N/x)</code>の値","<code>x</code>の最大値","","","","","","拡張ユークリッドの互除法","有限体上での階乗の計算を行う構造体。","ベル数","","ベルヌーイ数","","","","カタラン数","","","","n個からk個とりだす組み合わせの個数 (${}_n …","nの階乗","","Returns the argument unchanged.","n個から重複を許してk個選ぶ場合の数 (${}_n …","Calls <code>U::from(self)</code>.","nの階乗の逆元","<strong>Time complexity</strong> $O(n)$","n個からk個とりだす順列の個数 (${}_n \\\\mathrm{ …","","","","","","ベル数","計算結果の型","ベル数$B(n, k)$を計算する。","ベルヌーイ数","計算結果の型","ベルヌーイ数$B_0 \\\\ldots B_n$を計算する。","カタラン数","計算結果の型","カタラン数$C_n$を計算する。","a!の素因数pの個数を求める。","前計算による素因数分解","試し割り素因数分解","前計算による素因数分解","","","<code>n</code>の素因数を列挙する。","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>n</code>以下の非負整数を素因数分解できる…","","","","","試し割り素因数分解","","最大公約数・最小公倍数","","最大公約数を求める。","最大公約数と最小公倍数を求める。","最小公倍数を求める。","ax + b = 0 (mod m) を満たすxを求める。","0,1,..,nの素数mod pでの逆元を列挙する。","mod mでの逆元","素数mod pでの逆元","aˣ = b (mod m)を満たすxを求める。","xᵖ (mod m)を求める。","x² = a (mod p)を満たすxを一つ求める。","0,1,..,nの素数mod pでの逆元を列挙する。","mod mでの逆元","素数mod pでの逆元","aˣ = b (mod m)を満たすxを求める。","xᵖ (mod m)を求める。","x² = a (mod p)を満たすxを一つ求める。","長さ<code>0</code>から<code>n</code>…","多項式の多点評価","<code>u16</code>同士のNimber productを求める。","<code>u32</code>同士のNimber productを求める。","<code>u64</code>同士のNimber productを求める。","<code>u8</code>同士のNimber productを求める。","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","$\\\\mathbb{F}_p$上の多項式","多項式の演算を扱う。","多項式<code>a</code>と多項式<code>b</code>の和を返す。","多項式<code>a</code>に多項式<code>b</code>を足す。","","","","","","","$x^i$の係数を得る。","定数項のみをもつ多項式を生成する。","多項式の次数を返す。","多項式<code>a</code>の多項式<code>b</code>による商と剰余を返す。","","多項式に値<code>p</code>を代入した結果を求める。","","Returns the argument unchanged.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","多項式<code>a</code>と多項式<code>b</code>の積を返す。","多項式<code>a</code>に多項式<code>b</code>を掛ける。","<code>NTT&lt;P&gt;</code>を基に<code>PolynomialOperator&lt;P&gt;</code>を生成する。","多項式<code>a</code>の<code>k</code>倍を返す。","","多項式<code>a</code>の2乗を返す。","多項式<code>a</code>と多項式<code>b</code>の差を返す。","多項式<code>a</code>から多項式<code>b</code>を引く。","","","","","","","","","","零多項式を得る。","多項式 <code>p</code> = $f(x) = a_0 + a_1x + \\\\cdots + …","素数判定","Eratosthenesの篩","<code>value</code>が素数ならば<code>true</code>を返す。","Miller-Rabin素数判定法","","Eratosthenesの篩","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","<code>size</code>までの自然数の素数判定ができる…","","","","","","Miller-Rabin素数判定法","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","原始根","$\\\\sum_{i=0}^{n-1} \\\\lfloor \\\\frac{ai+b}{m} \\\\rfloor$","$\\\\sum_{i=0}^{\\\\infty} r^ii^d$","$a \\\\uparrow \\\\uparrow b \\\\pmod m$を求める。","<code>n</code>と互いに素である自然数の個数を求める。","<code>n</code>…","トーシェント関数の総和","","閉区間","6面サイコロ","","括弧列の構文解析","…","両端の点を含む閉区間を扱う。","","","","","","閉区間の終了地点","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","…","<code>ClosedInterval&lt;T&gt;</code>を生成する","閉区間の開始地点","","","","","","6面サイコロ","後ろの面","","","下の面","","","","","Returns the argument unchanged.","前の面","Calls <code>U::from(self)</code>.","左の面","<code>Dice&lt;T&gt;</code>を生成する。","右の面","…","…","…","…","…","…","","上の面","","","","","括弧列が対応が取れているかを調べる","","対応のある括弧列","括弧列のパースの結果","括弧以外","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","括弧列をパースする。","","","","","","","","","","","閉じ括弧","括弧の内部のパースの結果","開き括弧","<code>MulGraph</code>の辺","頂点倍加グラフ","<code>from</code>から<code>to</code>への有向辺を張る。","<code>u</code>,<code>v</code>間に双方向に辺を張る。","","","","","","","","","","頂点倍加グラフ上でのDijkstra法","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","頂点<code>cur</code>…","始点<code>from</code>、終点<code>to</code>、重さ<code>weight</code>…","空のグラフを作る。","","","","","","","","","","","","","","Dijkstra法","四則演算ができる型","コンパイル時にmod Mが決まるModInt","有限体","実行時にmod Mが決まるModInt","Montgomery乗算","正の無限大、負の無限大をもつ数","加法と乗法の単位元を定める。","","有理数","全順序を実装した<code>f64</code>","","四則演算ができる型","<code>M</code>で剰余をとる構造体。","<code>ConstModInt&lt;M&gt;</code>を生成するための構造体。","","","<code>ConstModInt&lt;M&gt;</code>の代数的構造","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","<code>ConstModInt&lt;M&gt;</code>を生成する。","","<code>One</code>と<code>Zero</code>を実装する。","","","","","","","","","","","","","内部の値を取り出す。","","","","","","有限体の元の型","有限体","有限体の元","","","<code>a/b</code>を生成する。","<code>i64</code>から生成する。","<code>u64</code>から生成する。","<code>modulo</code>を法として剰余をとる構造体。","<code>ModInt</code>を生成するための構造体。","","","<code>ModInt</code>の代数的構造","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","<code>modulo</code>を法とする<code>ModIntBuilder</code>を生成する。","<code>value</code>を値にもち、<code>modulo</code>を法とする<code>ModInt</code>…","","","","","","","","","","","","","内部の値を取り出す。","","","<code>mod m</code>上の乗法","<code>mod m</code>上の加法","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","<code>m</code>を法とした<code>SumModM</code>を生成する。","<code>m</code>を法とした<code>ProdModM</code>を生成する。","","","","","","","","","","","","","<code>modulo</code>を法として剰余をとる構造体。","<code>Montgomery</code>を生成するための構造体。","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","<code>modulo</code>を法とする<code>MontgomeryBuilder</code>を生成する。","","","","","","","","","","","","内部の値を取り出す。","","","正の無限大","負の無限大","正の無限大、負の無限大をもつ数","有限の値","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>self</code>が<code>Inf</code>かを判定する。","<code>self</code>が<code>NegInf</code>かを判定する。","<code>self</code>が<code>Value(T)</code>かを判定する。","","","","","","","","<code>self</code>が<code>Value</code>ならばその中身を取り出す。","","乗算についての単位元をもつ。","加算についての単位元をもつ。","乗法の単位元を返す。","加法の単位元を返す。","乗法の逆元","<code>pow</code>の結果の型","<code>inv</code>の結果の型","累乗","<code>self</code>の乗法の逆元を求める。","<code>self</code>の<code>p</code>乗を求める。","有理数","","","","","","","","分母を返す","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","<code>numerator / denominator</code>を表す有理数を生成する","分子を返す","","","","","","","","","全順序を実装した<code>f64</code>","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","<code>One</code>と<code>Zero</code>を実装する。","","","","","","","","","","浮動小数点型","整数型","符号付きの数値型","非負の数値型","LL(1)構文解析","構文解析用の入力文字列","LL(1)構文解析器","規則: $\\\\mathtt{state} \\\\rightarrow \\\\alpha $ …","規則: $\\\\mathtt{state} \\\\rightarrow \\\\varepsilon$ …","","","","","","","一文字だけ消費する。","現在の文字が<code>e</code>…","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>str</code>から<code>Input&lt;char&gt;</code>を構築する。","<code>LL1Parser</code>を生成する。","<code>state</code>を開始状態として、<code>input</code>…","現在の文字を返す。","","","","","","","","","","","根付き木を構築する","","非根付き木を構築する","始点、終点、重み、番号をもつ木の辺","","木のノード","辺の重みの型","Auxiliary Tree","","","","","","","","","","","","","重心列挙","重心分解","子ノードへの辺","","","","","","","","Tree depth query","Euler tour","","","","","","辺の始点を返す。","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","始点","重軽分解","辺の番号","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","木の頂点数が<code>0</code>ならば<code>true</code>を返す。","最小共通祖先","木の頂点数を返す。","隣接辺を列挙するイテレータを返す。","隣接辺の個数を返す。","頂点数<code>size</code>の<code>TreeBuilder</code>を生成する。","頂点数<code>size</code>の<code>TreeBuilder</code>を生成する。","","<code>i</code>番目の頂点の<code>TreeNode</code>への参照を返す。","各頂点の<code>TreeNode</code>…","親ノードへの辺","全方位木DP","逆辺を返す。","","木に根があれば根を返す。","","根付き木に変換","辺の終点を返す。","","終点","","","","木DP","","","","","","","","","","","","","","","","","","","","","","辺の重みを返す。","","重み","Auxiliary Tree","","","頂点集合<code>vs</code>からAuxiliaryTreeを構築する。","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>AuxiliaryTree</code>を生成する。","","","","","木の重心を列挙する","重心分解","<code>CentroidDecomposition</code>の頂点ノード","","","","","子の頂点列","","","深さ","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","木<code>tree</code>を重心分解する。","重心分解後の頂点列への参照を返す。","親の頂点","部分木の大きさ","","","","","","","","","","…","頂点<code>i</code>の<code>k</code>個遡った祖先の頂点を返す。","","","頂点<code>i</code>から深さ<code>d</code>…","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","頂点<code>i</code>に対応する区間を返す。","根を<code>root</code>とする<code>tree</code>を基に、<code>TreeDepthQuery</code>…","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>root</code>を根として<code>EulerTour</code>を構築する。","頂点<code>i</code>に対応する番号を返す。","頂点<code>i</code>の部分木に対応する範囲を返す。","","","","","重軽分解","","","","","","Returns the argument unchanged.","<strong>Time complexity</strong> $O(1)$","<strong>Time complexity</strong> $O(1)$","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(\\\\log n)$","<strong>Time complexity</strong> $O(n)$","<strong>Time complexity</strong> $O(1)$","<strong>Time complexity</strong> $O(\\\\log n)$","演算は可換性を仮定する。","<strong>Time complexity</strong> $O(1)$","<strong>Time complexity</strong> $O(1)$","","","","","","ダブリングによる最小共通祖先","<code>a</code>の<code>n</code>個上の祖先を求める。","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","…","<code>a</code>と<code>b</code>の最小共通祖先を求める。","<strong>Time complexity</strong> $O(n \\\\log n)$","","","","","全方位木DP","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>RerootingDP</code>を構築する。","<code>tree</code>上で、全方位DPを実行する。","","","","","","","木DP","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>TreeDP</code>を構築する。","<code>root</code>を根にして、<code>tree</code>上でDPを実行する。","","","","","木の任意の2頂点の距離の最大値を求める。","…","…","…","$\\\\sum \\\\sum f(a_i, a_j)$の形の問題","2要素の差の絶対値の総和","2要素の最大値の総和","2要素の積の総和","区間積の総和","区間和の総和","区間XORの総和","2要素の和の総和","2要素のXORの総和","2要素の差の絶対値の総和","2要素の最大値の総和","2要素の積の総和","区間積の総和","区間和の総和","区間XORの総和","2要素の和の総和","2要素のXORの総和","","高速な標準入出力","","","","","","","<code>usize</code>を用いた集合表現","","","","高速な標準入出力","","","","Returns the argument unchanged.","1バイトだけ読み出す。","Calls <code>U::from(self)</code>.","<code>FastIO</code>を生成する。","1バイトだけ先読みする。","文字列を<code>Vec&lt;char&gt;</code>として読み出す。","<code>f64</code>型の数値を読み出す。","<code>i32</code>型の数値を読み出す。","<code>i64</code>型の数値を読み出す。","<code>isize</code>型の数値を読み出す。","<code>u64</code>型の数値を読み出す。","<code>u64</code>型の数値を読み出す。","<code>usize</code>型の数値を読み出す。","<code>is_ascii_whitespace</code>が<code>true</code>である間を読み飛ばす。","","","","","<code>s</code>を標準出力に書き込む。","<code>s</code>と改行文字を標準出力に書き込む。","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","タプルの<code>Vec</code>を<code>Vec</code>のタプルに変換する。","","<code>usize</code>のビット数個の要素をもつ集合を表す。","","","","","","","","","<code>i</code>が集合に含まれているかを判定する。","","<code>self</code>から<code>rhs</code>を引いた差集合を返す。","","<code>0</code>から<code>n</code>までを要素に含む集合を得る。","<code>i</code>が集合に含まれていなければ、<code>i</code>…","","Returns the argument unchanged.","","","2つの集合の共通部分を返す。","Calls <code>U::from(self)</code>.","集合が空かを判定する。","集合の大きさを返す。","","<code>i</code>を削除した集合を返す。","<code>i</code>を追加した集合を返す。","","2つの集合の対象差を返す。","","","","","2つの集合の和集合を返す。","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,118,118,118,118,118,118,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,0,34,34,34,35,34,35,34,35,34,35,34,35,34,35,34,35,35,34,35,35,35,35,34,35,34,35,34,35,34,35,34,35,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,0,41,42,41,42,41,42,41,42,41,41,42,41,42,41,42,41,42,42,41,42,41,41,41,42,41,41,42,41,42,41,42,41,42,41,42,0,0,43,44,43,44,43,44,43,44,43,44,43,44,43,44,43,44,44,43,44,43,44,44,43,44,43,44,43,44,43,44,43,44,0,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,0,0,0,0,0,38,0,0,0,0,0,0,0,0,37,61,39,289,0,0,0,52,54,52,54,52,54,55,52,54,55,52,54,55,52,54,55,52,54,55,52,54,55,52,54,55,55,55,52,54,55,55,55,55,55,52,54,55,52,52,54,54,55,52,54,55,52,54,55,52,54,55,0,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,0,0,0,0,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,0,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,0,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,68,68,0,68,68,0,68,68,68,68,68,68,68,68,68,68,290,290,0,0,70,71,70,71,70,70,71,70,71,70,71,71,70,70,71,70,71,71,71,70,70,71,71,70,71,70,71,70,71,70,71,70,0,74,74,74,74,74,0,74,74,74,74,74,74,74,74,74,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,76,76,76,76,76,76,76,76,0,76,76,76,76,76,76,0,78,78,78,78,78,78,78,78,78,78,78,0,80,80,80,80,80,80,80,80,80,80,80,0,81,81,81,81,81,81,81,81,81,81,81,0,0,0,82,82,82,82,82,82,82,82,82,82,82,82,82,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,84,84,84,84,84,84,84,84,84,84,0,0,0,0,0,0,0,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,0,0,0,87,89,87,89,87,89,87,89,87,87,89,87,87,89,87,89,87,89,87,89,0,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,0,0,0,0,92,92,92,92,92,92,92,92,92,92,0,93,93,93,93,93,93,93,93,93,93,93,0,0,0,0,0,94,94,94,94,94,94,94,94,94,94,0,94,94,94,94,94,0,95,95,95,95,95,95,95,95,95,95,95,95,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,98,96,97,98,96,97,96,98,98,98,96,97,98,98,96,97,97,97,96,97,98,97,98,96,97,98,96,97,98,96,97,98,96,97,0,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,101,0,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,0,0,106,106,0,104,106,104,106,104,106,104,106,104,106,106,104,106,104,106,104,104,104,106,104,106,104,106,104,106,104,106,104,0,0,0,108,108,109,108,109,108,109,109,109,109,108,109,109,108,109,108,109,108,109,108,109,108,109,108,108,109,0,0,0,110,110,111,110,111,110,111,111,111,111,110,111,111,110,111,110,111,110,111,110,111,110,111,110,110,111,0,0,113,113,113,113,113,113,113,113,113,113,0,0,116,116,116,116,116,116,116,116,116,116,116,116,116,0,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,0,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,0,120,120,120,120,120,120,120,120,120,120,120,120,0,0,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,0,0,125,125,125,125,125,125,125,125,125,125,125,125,125,125,0,0,126,126,127,126,127,126,126,127,126,127,126,127,127,126,127,126,127,126,126,127,126,127,126,127,126,127,127,126,127,0,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,0,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,0,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,0,131,131,131,131,131,131,131,131,131,131,131,131,0,0,133,133,133,133,133,133,133,133,133,133,133,133,0,0,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,0,0,139,139,0,137,137,137,139,137,139,139,139,139,139,137,139,137,139,137,137,139,137,139,137,139,137,139,137,139,0,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,0,0,141,142,141,142,141,142,141,142,142,142,142,141,142,141,142,142,142,142,142,142,142,142,142,142,141,142,141,142,141,142,141,142,141,141,142,0,144,144,144,144,144,144,144,144,144,144,0,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,0,0,147,146,147,146,146,146,146,147,147,146,146,147,146,147,146,147,147,147,147,146,147,146,146,147,146,147,146,147,146,147,146,0,0,148,148,149,148,149,148,149,148,149,149,148,148,148,149,149,148,149,148,149,148,149,148,149,0,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,0,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,0,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,0,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,0,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,0,0,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,0,0,157,158,157,158,157,157,157,157,157,158,157,158,157,157,158,157,158,157,158,157,158,157,158,157,0,159,159,159,159,159,159,159,159,159,159,159,159,159,159,0,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,0,0,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,0,163,163,163,163,163,163,163,163,163,163,163,163,163,0,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,0,0,166,166,166,166,166,166,166,166,166,166,166,0,0,168,168,168,168,168,168,168,168,168,168,168,0,0,169,170,169,170,169,169,169,169,169,170,170,169,170,169,169,169,170,169,170,169,170,169,170,170,169,0,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,0,173,173,173,173,173,173,173,173,173,173,0,174,174,174,174,174,174,174,174,174,174,0,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,0,176,176,0,0,178,176,178,176,176,176,178,178,176,178,176,178,176,178,176,178,176,178,176,178,178,176,0,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,0,0,0,0,291,292,293,0,294,295,294,291,292,293,295,0,0,180,180,181,180,181,181,181,181,181,181,180,181,180,181,180,180,180,181,180,181,180,181,180,181,181,180,181,0,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,0,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,230,0,230,0,0,230,230,0,230,230,0,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,0,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,0,186,186,186,186,186,186,186,186,186,186,186,186,186,186,0,0,0,0,187,188,187,187,187,187,0,0,0,189,187,188,190,189,187,188,190,0,190,0,189,187,188,190,189,187,188,190,0,0,0,0,0,0,187,188,187,188,190,188,0,0,0,187,187,188,189,187,188,190,187,188,190,189,187,188,190,188,189,189,0,0,0,0,0,0,189,187,188,190,188,188,189,189,187,189,189,188,190,187,188,189,0,187,188,190,188,187,0,188,189,187,188,190,189,187,188,190,189,187,188,190,189,187,188,190,187,188,189,187,188,190,0,0,0,0,192,192,192,192,192,192,192,0,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,0,0,0,0,0,0,0,193,193,193,193,193,193,0,193,193,0,193,193,193,193,193,193,0,0,0,0,194,0,194,194,194,194,194,194,194,194,194,194,0,194,194,194,194,194,194,194,194,195,0,195,195,195,195,195,195,195,195,195,195,195,195,0,195,195,195,195,195,195,195,195,195,195,196,196,196,196,0,196,196,196,196,196,196,196,196,196,196,196,196,0,196,196,196,196,196,196,196,196,196,196,197,0,197,197,197,197,197,197,197,197,197,197,197,0,197,197,197,197,197,197,197,197,197,198,0,198,198,198,198,198,198,198,198,198,198,0,198,198,198,198,198,198,198,198,198,198,199,199,199,0,199,199,199,199,199,199,199,199,199,199,199,0,199,199,199,199,199,0,0,0,0,0,0,0,201,202,202,0,0,0,0,0,204,200,203,202,204,200,203,202,0,0,0,204,200,203,202,204,200,203,202,0,0,0,202,202,0,0,202,202,204,200,203,202,201,204,204,200,203,202,204,0,204,204,200,203,202,202,0,202,0,0,202,202,204,202,0,0,201,204,0,201,204,204,204,200,203,202,204,200,203,202,204,200,203,202,0,0,0,204,200,203,202,204,200,203,202,0,201,204,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,209,209,209,209,209,209,209,209,209,209,209,209,209,209,0,210,210,210,210,210,210,210,210,210,210,210,210,210,210,213,0,0,0,0,213,213,211,211,212,213,214,211,212,213,214,214,211,212,213,214,213,214,214,213,213,214,211,212,213,214,212,212,212,211,212,213,214,213,213,213,212,214,214,211,212,213,214,211,212,213,214,211,212,213,214,211,212,213,214,211,212,213,214,0,0,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,0,0,0,217,217,0,0,215,215,216,217,215,216,217,215,217,217,217,217,215,216,217,215,216,217,217,216,215,216,217,215,216,217,215,216,217,215,216,217,215,216,217,0,218,218,218,218,218,218,218,218,218,218,218,0,0,0,0,219,219,219,219,219,219,219,219,219,219,219,219,219,0,0,220,220,0,0,220,0,220,220,220,221,220,222,221,220,222,221,220,222,221,220,222,221,220,220,220,221,220,221,220,222,221,220,222,222,222,221,220,222,222,222,221,221,220,222,0,221,220,222,221,220,222,221,220,222,221,220,222,221,220,222,221,221,0,0,0,0,0,0,296,0,0,224,224,297,224,224,224,224,224,224,224,224,0,298,0,0,225,225,225,225,225,225,299,225,225,225,225,0,0,0,0,0,0,0,0,0,0,0,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,0,0,0,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,0,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,231,231,231,231,231,231,231,231,231,231,0,0,232,232,233,232,233,233,233,233,232,233,232,232,233,232,232,233,232,233,232,233,232,233,232,233,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,235,234,235,234,235,234,235,234,235,234,235,234,235,234,235,234,235,234,235,234,235,234,235,234,235,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,236,236,236,0,236,236,236,236,236,236,236,236,236,236,236,236,0,0,0,237,0,237,237,237,0,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,0,300,300,0,301,301,0,302,302,0,0,0,0,238,238,238,238,238,238,238,238,238,238,0,0,0,303,303,303,303,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,241,241,241,241,241,241,241,241,241,241,0,0,240,240,240,239,240,239,239,239,239,239,239,240,239,239,239,240,239,239,239,240,239,240,239,239,240,240,240,240,239,240,240,240,239,240,239,240,239,240,239,240,239,239,0,0,0,304,0,0,0,242,242,242,242,242,242,242,242,242,242,0,0,243,243,243,243,243,243,243,243,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,0,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,0,0,247,0,247,246,247,246,247,246,247,246,247,246,246,247,246,247,246,247,0,246,247,246,247,246,247,246,247,246,247,305,305,305,0,0,248,248,249,248,249,248,249,248,249,248,248,0,249,248,249,248,249,249,248,248,249,248,249,249,248,249,248,249,248,249,248,249,248,249,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,0,252,50,252,50,252,50,252,50,252,50,50,50,252,50,50,50,252,252,50,50,50,252,252,252,50,50,50,50,50,50,50,0,50,50,50,252,50,50,252,50,252,50,252,50,50,252,50,50,0,0,227,0,0,0,0,227,227,227,0,0,253,253,0,254,253,254,253,254,253,254,253,253,253,254,253,254,253,253,254,254,253,254,254,254,253,253,253,253,253,254,253,253,253,253,254,253,253,254,253,254,253,254,253,253,254,253,0,0,255,256,255,256,255,256,255,256,255,256,255,256,255,256,255,256,255,256,255,256,255,255,256,255,256,255,256,255,256,255,256,255,256,255,256,0,0,257,257,258,257,258,257,258,257,258,257,257,257,258,257,258,258,258,257,258,258,258,257,257,257,257,258,257,257,257,258,257,258,257,258,257,258,257,257,258,257,208,208,0,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,0,0,18,5,0,306,307,0,307,306,0,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,0,261,261,261,261,261,261,261,261,261,261,261,261,261,261,261,261,261,261,0,261,261,261,261,261,261,261,261,261,0,0,0,0,0,0,0,262,262,263,262,263,262,263,263,263,263,262,263,263,262,263,262,263,262,262,263,263,263,262,263,262,263,262,263,262,0,0,0,0,0,0,0,266,0,267,269,270,271,268,267,269,270,271,268,267,269,0,0,271,270,271,268,270,271,268,271,0,0,267,269,270,271,268,266,267,269,270,270,271,268,270,0,270,267,269,270,271,268,268,0,268,271,271,267,269,270,268,268,271,0,266,270,268,0,0,266,270,270,270,271,268,0,267,269,270,271,268,267,269,270,271,268,267,269,270,271,268,0,267,269,270,271,268,266,270,270,0,273,273,273,273,273,273,273,273,273,273,0,0,0,275,274,275,274,274,274,274,274,275,274,275,274,275,275,274,274,274,275,274,275,274,275,274,275,274,0,276,276,276,276,276,276,276,276,276,276,276,276,0,277,277,277,277,277,277,277,277,277,277,277,0,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,0,279,279,279,279,279,279,279,279,279,279,279,279,0,280,280,280,280,280,280,280,280,280,280,0,0,0,281,281,281,281,281,281,281,281,281,281,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,0,308,0,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,285,0,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,0,0,309,0,309,0,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,0,288,288,288,288,288,288,288,288,288,288,288,288,288,288,0,310],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[]],[[]],[[]],[[]],0,[[]],[[]],[[[3,[2,2]]],[[3,[2,2]]]],[[]],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]],1]],[[],[[3,[9,9]]]],[[[3,[10,10]],[3,[10,10]]],11],[[[3,[12,12]],13],14],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]]]],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]]]],[[]],[[]],[[],3],[[]],[[],15],[[],15],[[],16],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]]]],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]]]],[[]],0,[[]],[[]],[[[17,[2]]],[[17,[2]]]],[[]],[[],[[17,[9]]]],[[[17,[10]],[17,[10]]],11],[[[17,[12]],13],14],[[]],[[[17,[[0,[18,5,19]]]]]],[[]],[[],17],[[[17,[[0,[4,6,19]]]]]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[20,[2,2]]],[[20,[2,2]]]],[[]],[[[20,[[0,[4,6,5,19,[8,[[0,[4,6,5,18,19,[8,[7]]]]]]]],[0,[4,6,5,18,19,[8,[7]]]]]],1]],[[],[[20,[9,9]]]],[[[20,[10,10]],[20,[10,10]]],11],[[[20,[12,12]],13],14],[[[20,[[0,[4,6,5,19,[8,[[0,[4,6,5,18,19,[8,[7]]]]]]]],[0,[4,6,5,18,19,[8,[7]]]]]]]],[[[20,[[0,[4,6,5,19,[8,[[0,[4,6,5,18,19,[8,[7]]]]]]]],[0,[4,6,5,18,19,[8,[7]]]]]]]],[[]],[[]],[[],20],[[]],[[],15],[[],15],[[],16],[[[20,[[0,[4,6,5,19,[8,[[0,[4,6,5,18,19,[8,[7]]]]]]]],[0,[4,6,5,18,19,[8,[7]]]]]]]],[[[20,[[0,[4,6,5,19,[8,[[0,[4,6,5,18,19,[8,[7]]]]]]]],[0,[4,6,5,18,19,[8,[7]]]]]]]],[[]],0,[[]],[[]],[[[21,[2]]],[[21,[2]]]],[[]],[[],[[21,[9]]]],[[[21,[10]],[21,[10]]],11],[[[21,[12]],13],14],[[]],[[[21,[1]]]],[[[21,[7]]]],[[[21,[22]]]],[[[21,[23]]]],[[[21,[24]]]],[[[21,[25]]]],[[]],[[],21],[[[21,[25]]]],[[[21,[1]]]],[[[21,[23]]]],[[[21,[7]]]],[[[21,[24]]]],[[[21,[22]]]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[26,[2]]],[[26,[2]]]],[[]],[[],[[26,[9]]]],[[[26,[10]],[26,[10]]],11],[[[26,[12]],13],14],[[]],[[[26,[1]]]],[[[26,[24]]]],[[[26,[22]]]],[[[26,[25]]]],[[[26,[23]]]],[[[26,[7]]]],[[]],[[],26],[[[26,[1]]]],[[[26,[24]]]],[[[26,[7]]]],[[[26,[25]]]],[[[26,[22]]]],[[[26,[23]]]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[27,[2]]],[[27,[2]]]],[[]],[[],[[27,[9]]]],[[[27,[10]],[27,[10]]],11],[[[27,[12]],13],14],[[]],[[[27,[1]]]],[[[27,[22]]]],[[[27,[23]]]],[[[27,[25]]]],[[[27,[28]]]],[[[27,[29]]]],[[[27,[7]]]],[[[27,[30]]]],[[[27,[24]]]],[[[27,[31]]]],[[[27,[32]]]],[[[27,[33]]]],[[]],[[[27,[23]]]],[[[27,[31]]]],[[[27,[32]]]],[[[27,[1]]]],[[[27,[25]]]],[[[27,[7]]]],[[[27,[24]]]],[[[27,[29]]]],[[[27,[30]]]],[[[27,[22]]]],[[[27,[28]]]],[[[27,[33]]]],[[],27],[[[27,[30]]]],[[[27,[24]]]],[[[27,[33]]]],[[[27,[23]]]],[[[27,[28]]]],[[[27,[32]]]],[[[27,[31]]]],[[[27,[29]]]],[[[27,[22]]]],[[[27,[1]]]],[[[27,[7]]]],[[[27,[25]]]],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[34,34],[35,35],[[]],[[]],[[34,34],11],[[35,35],11],[[34,13],14],[[35,13],14],[[]],[[]],[35],[[]],[[]],[35],[1,35],[35],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,[[]],[[]],[[[36,[2]]],[[36,[2]]]],[[]],[[],[[36,[9]]]],[[[36,[10]],[36,[10]]],11],[[[36,[12]],13],14],[[]],[[[36,[37]]]],[[]],[38,[[36,[38]]]],[[[36,[39]]]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[40,[2]]],[[40,[2]]]],[[]],[[],[[40,[9]]]],[[[40,[10]],[40,[10]]],11],[[[40,[12]],13],14],[[]],[[[40,[31]]]],[[[40,[29]]]],[[[40,[32]]]],[[[40,[22]]]],[[[40,[23]]]],[[[40,[25]]]],[[[40,[28]]]],[[[40,[24]]]],[[[40,[1]]]],[[[40,[7]]]],[[[40,[30]]]],[[[40,[33]]]],[[]],[[],40],[[[40,[28]]]],[[[40,[7]]]],[[[40,[33]]]],[[[40,[1]]]],[[[40,[25]]]],[[[40,[30]]]],[[[40,[22]]]],[[[40,[32]]]],[[[40,[31]]]],[[[40,[23]]]],[[[40,[29]]]],[[[40,[24]]]],[[]],[[],15],[[],15],[[],16],[[]],0,0,[[]],[[]],[[]],[[]],[41,41],[42,42],[[]],[[]],0,[[],41],[[],42],[[41,41],11],[[42,42],11],[[41,13],14],[[42,13],14],[[]],[[]],[42],[[]],[[]],0,0,[11,41],[42],0,[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[[43,[2]]],[[43,[2]]]],[[[44,[2]]],[[44,[2]]]],[[]],[[]],[[],[[43,[9]]]],[[],[[44,[9]]]],[[[43,[10]],[43,[10]]],11],[[[44,[10]],[44,[10]]],11],[[[43,[12]],13],14],[[[44,[12]],13],14],[[]],[[]],[44],[[]],[[]],[19,[[43,[19]]]],[[],44],[[[44,[[0,[19,45,4]]]]]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,[[]],[[]],[[[46,[2]]],[[46,[2]]]],[[]],[[],[[46,[9]]]],[[[46,[10]],[46,[10]]],11],[[[46,[12]],13],14],[[]],[[[46,[25]]]],[[[46,[31]]]],[[[46,[22]]]],[[[46,[30]]]],[[[46,[29]]]],[[[46,[24]]]],[[[46,[28]]]],[[[46,[7]]]],[[[46,[33]]]],[[[46,[32]]]],[[[46,[1]]]],[[[46,[23]]]],[[]],[[],46],[[[46,[25]]]],[[[46,[33]]]],[[[46,[32]]]],[[[46,[29]]]],[[[46,[30]]]],[[[46,[1]]]],[[[46,[24]]]],[[[46,[7]]]],[[[46,[31]]]],[[[46,[23]]]],[[[46,[22]]]],[[[46,[28]]]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[47,[2]]],[[47,[2]]]],[[]],[[],[[47,[9]]]],[[[47,[10]],[47,[10]]],11],[[[47,[12]],13],14],[[]],[[[47,[24]]]],[[[47,[30]]]],[[[47,[31]]]],[[[47,[48]]]],[[[47,[1]]]],[[[47,[33]]]],[[[47,[32]]]],[[[47,[49]]]],[[[47,[28]]]],[[[47,[22]]]],[[[47,[25]]]],[[[47,[29]]]],[[[47,[23]]]],[[[47,[50]]]],[[[47,[7]]]],[[]],[[],47],[[[47,[30]]]],[[[47,[29]]]],[[[47,[50]]]],[[[47,[32]]]],[[[47,[48]]]],[[[47,[1]]]],[[[47,[49]]]],[[[47,[22]]]],[[[47,[24]]]],[[[47,[33]]]],[[[47,[25]]]],[[[47,[28]]]],[[[47,[23]]]],[[[47,[31]]]],[[[47,[7]]]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[51,[2]]],[[51,[2]]]],[[]],[[],[[51,[9]]]],[[[51,[10]],[51,[10]]],11],[[[51,[12]],13],14],[[]],[[[51,[24]]]],[[[51,[49]]]],[[[51,[32]]]],[[[51,[48]]]],[[[51,[23]]]],[[[51,[28]]]],[[[51,[1]]]],[[[51,[29]]]],[[[51,[50]]]],[[[51,[31]]]],[[[51,[30]]]],[[[51,[25]]]],[[[51,[22]]]],[[[51,[33]]]],[[[51,[7]]]],[[]],[[[51,[48]]]],[[[51,[33]]]],[[[51,[31]]]],[[[51,[29]]]],[[[51,[30]]]],[[[51,[32]]]],[[[51,[50]]]],[[[51,[49]]]],[[[51,[28]]]],[[],51],[[[51,[30]]]],[[[51,[48]]]],[[[51,[22]]]],[[[51,[23]]]],[[[51,[29]]]],[[[51,[49]]]],[[[51,[1]]]],[[[51,[24]]]],[[[51,[28]]]],[[[51,[32]]]],[[[51,[25]]]],[[[51,[31]]]],[[[51,[7]]]],[[[51,[33]]]],[[[51,[50]]]],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[7],0,0,0,[[52,[53,[2]]],[[53,[2]]]],[[54,[53,[2]]],[[53,[2]]]],[52],[54],[[]],[[]],[[]],[[]],[[]],[[]],[52,52],[54,54],[[[55,[2]]],[[55,[2]]]],[[]],[[]],[[]],[[52,52],11],[[54,54],11],[[[55,[10]],[55,[10]]],11],[[52,13],14],[[54,13],14],[[[55,[12]],13],14],[[]],[[]],[[]],[[[55,[54]]]],[[[55,[52]]]],[[]],[[]],[[]],[[[55,[54]]]],[1,55],[[[55,[52]]]],[[[55,[54]]]],[[]],[[]],[[]],[[[53,[1]]],[[15,[52]]]],[[],15],[[],15],[[[53,[1]]],[[15,[54]]]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[]],[[]],[[]],0,[[]],[[]],[56,56],[[]],[[],56],[[56,56],11],[[56,13],14],[[]],[56],[[]],[56],[56],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[57,[2,2]]],[[57,[2,2]]]],[[[58,[2,2,2]]],[[58,[2,2,2]]]],[[[59,[2,2,2,2]]],[[59,[2,2,2,2]]]],[[[60,[2,2,2,2,2]]],[[60,[2,2,2,2,2]]]],[[]],[[]],[[]],[[]],[[],[[57,[9,9]]]],[[],[[58,[9,9,9]]]],[[],[[59,[9,9,9,9]]]],[[],[[60,[9,9,9,9,9]]]],[[[57,[10,10]],[57,[10,10]]],11],[[[58,[10,10,10]],[58,[10,10,10]]],11],[[[59,[10,10,10,10]],[59,[10,10,10,10]]],11],[[[60,[10,10,10,10,10]],[60,[10,10,10,10,10]]],11],[[[57,[12,12]],13],14],[[[58,[12,12,12]],13],14],[[[59,[12,12,12,12]],13],14],[[[60,[12,12,12,12,12]],13],14],[[]],[[]],[[]],[[]],[[[57,[37,37]]]],[[[58,[37,37,37]]]],[[[59,[37,37,37,37]]]],[[[60,[37,37,37,37,37]]]],[[]],[[]],[[]],[[]],[[[57,[61,61]]]],[[[58,[61,61,61]]]],[[[59,[61,61,61,61]]]],[[[60,[61,61,61,61,61]]]],[[[57,[39,39]]]],[[[58,[39,39,39]]]],[[[59,[39,39,39,39]]]],[[[60,[39,39,39,39,39]]]],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[]],0,[[]],[[]],[[[62,[2]]],[[62,[2]]]],[[]],[[],[[62,[9]]]],[[[62,[10]],[62,[10]]],11],[[[62,[12]],13],14],[[]],[62],[[]],[[],62],[62],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[63,[2,2]]],[[63,[2,2]]]],[[]],[[[63,[[0,[4,5,[8,[[0,[6,[8,[7]]]]]]]],[0,[6,[8,[7]]]]]],1]],[[],[[63,[9,9]]]],[[[63,[10,10]],[63,[10,10]]],11],[[[63,[12,12]],13],14],[[[63,[[0,[4,5,[8,[[0,[6,[8,[7]]]]]]]],[0,[6,[8,[7]]]]]]]],[[[63,[[0,[4,5,[8,[[0,[6,[8,[7]]]]]]]],[0,[6,[8,[7]]]]]]]],[[]],[[]],[[],63],[[]],[[],15],[[],15],[[],16],[[[63,[[0,[4,5,[8,[[0,[6,[8,[7]]]]]]]],[0,[6,[8,[7]]]]]]]],[[[63,[[0,[4,5,[8,[[0,[6,[8,[7]]]]]]]],[0,[6,[8,[7]]]]]]]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[45],[45,1],[45,1],0,0,0,0,[[]],[[]],[[[0,[19,64,4,65,66,[8,[25]]]],[0,[19,64,4,65,66,[8,[25]]]],67],[[68,[[0,[19,64,4,65,66,[8,[25]]]]]]]],[[[68,[2]]],[[68,[2]]]],[[]],[[[68,[12]],13],14],[[]],[[]],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,[[[70,[[0,[45,69]]]],[0,[45,69]]]],[[]],[[]],[[]],[[]],[[[70,[[0,[45,69]]]]],[[71,[[0,[45,69]]]]]],[[[71,[2]]],[[71,[2]]]],[[[70,[2]]],[[70,[2]]]],[[]],[[]],[[[71,[[0,[45,69]]]],72],73],[[[71,[[0,[45,69]]]],72],73],[[],[[70,[9]]]],[[70,72]],[[]],[[]],[[[71,[[0,[45,69]]]],1],[[0,[45,69]]]],[[[71,[[0,[45,69]]]],[0,[45,69]]],1],[[]],[[]],[[],[[70,[[0,[45,69]]]]]],[[[71,[[0,[45,69]]]]],1],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,[[]],[[]],[74,74],[[]],0,[[[0,[19,69]],67],74],[[74,74],11],[[74,13],14],[[]],[[]],0,[[]],[[],15],[[],15],[[],16],[[]],[[],1],0,0,0,0,0,0,0,[23,73],[23,73],[[23,23],73],[23,73],[[23,23],73],[[23,23],73],[[23,23],73],[[1,75]],0,0,0,[[]],[[]],[76,76],[[]],[[76,76],11],[[76,13],14],[[]],[[48,48,76,1,67],48],[[]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[78,[[0,[19,77,5,4,65]]]]],[[53,[[0,[19,77,5,4,65]]]]]],[[]],[[]],[1,[[78,[[0,[19,77,5,4,65]]]]]],[[],15],[[],15],[[],16],[[[78,[[0,[19,77,5,4,65]]]],[79,[1]],[0,[19,77,5,4,65]]]],[[]],0,[[]],[[]],[[[80,[[0,[19,77,5,4,65]]]]],[[53,[[53,[[0,[19,77,5,4,65]]]]]]]],[[]],[[]],[[1,1],[[80,[[0,[19,77,5,4,65]]]]]],[[],15],[[],15],[[],16],[[[80,[[0,[19,77,5,4,65]]]],[79,[1]],[79,[1]],[0,[19,77,5,4,65]]]],[[]],0,[[]],[[]],[[[81,[[0,[19,5,18,4,65,6]]]]],[[53,[[0,[19,5,18,4,65,6]]]]]],[[]],[[]],[[1,[0,[19,5,18,4,65,6]]],[[81,[[0,[19,5,18,4,65,6]]]]]],[[],15],[[],15],[[],16],[[[81,[[0,[19,5,18,4,65,6]]]],[79,[1]],[0,[19,5,18,4,65,6]]]],[[]],[[],[[53,[1]]]],[[],7],0,[[]],[[]],[[[82,[2]]],[[82,[2]]]],[[]],[[[82,[12]],13],14],[[]],[[]],[[[82,[10]]],[[53,[1]]]],[[[53,[10]]],[[82,[10]]]],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,[1,[[0,[19,45,4,6,5,[8,[1]]]]]],[[[0,[19,4,45,5]]],[[0,[19,4,45,5]]]],[7,1],[1,[[0,[19,45,4,5]]]],[1,[[0,[19,45,4,5]]]],[[],[[53,[[0,[19,10]]]]]],[[],[[53,[1]]]],[[],83],[[],[[53,[1]]]],[[],83],[[[0,[19,10]]],1],[[]],[1],[1],[[[53,[[0,[45,19]]]],[53,[[0,[45,19]]]]],[[53,[[0,[45,19]]]]]],0,[[84,1,1]],[[]],[[]],[[]],[[]],[[1,[85,[75]],[85,[75]],[85,[75]],[85,[75]],[85,[75]]],84],[84],[[],15],[[],15],[[],16],[[]],[[1,1,67],53],[7,[[53,[7]]]],[[1,1,75,75,75],[[53,[1]]]],[[],11],[[[53,[[0,[45,19]]]]],73],[[],11],0,[[]],[[]],[86,86],[[]],[[]],[[86,1,7]],[[86,1,1,7]],[[86,1,1,7]],[[86,1,7]],[[86,1,1]],[[]],[[86,1]],[[86,1]],[1,86],[[86,1,7]],[[86,1,1,7]],[[86,1,7]],[[86,1,1,7]],[86,[[83,[33]]]],[[]],[[],15],[[],15],[[],16],[[]],[[],53],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[87,88],7],[[89,[79,[1]]],7],[[87,88],89],[[]],[[]],[[1,7,7],87],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,[[]],[[]],[90,90],[[]],[[90,13],14],[[]],[[90,1]],[[]],[90,[[53,[1]]]],[88,90],[[]],[90],[[],15],[[],15],[[],16],[[]],[[1,75,67,75,75]],[1,[[53,[[0,[45,19]]]]]],[1,[[53,[[0,[45,19]]]]]],0,[[]],[[]],[[]],[[]],[[[53,[[0,[91,69]]]]],[[92,[[0,[91,69]]]]]],[[[92,[[0,[91,69]]]],[79,[1]],[0,[91,69]]],1],[[],15],[[],15],[[],16],[[]],0,[[93,[79,[1]]]],[[]],[[]],[[]],[[]],[[],93],[93,53],[[],15],[[],15],[[],16],[[]],0,0,[[1,1],[[53,[[0,[19,[8,[1]],4]]]]]],[[1,1],[[53,[11]]]],0,0,0,[[]],[[]],[94,94],[[]],[[94,94],11],[[94,13],14],[[]],[[]],[[48,48,94,1,67],48],[[]],[[],15],[[],15],[[],16],[[]],0,[[95,32,32]],[[95,32,32]],[[]],[[]],[[]],[[]],[1,95],[[95,32,32]],[95,[[83,[[53,[11]]]]]],[[],15],[[],15],[[],16],[[]],[[],[[53,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[96,88]],[[]],[[]],[[]],[[]],[[]],[[]],[96,97],[[98,99],[[83,[98]]]],[98,[[83,[98]]]],[[]],[[]],[[]],[98,1],[[]],[[]],[[]],[97,1],[[97,88,75]],[[],96],[[97,1],98],[98,73],[97,98],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[]],[[]],[[]],0,[[]],[[]],[100,100],[[]],[[100,7],1],[[100,7],[[83,[1]]]],[[100,13],14],[[]],[[100,7],1],[[]],[100,11],[100,1],[[100,7],[[83,[7]]]],[[100,7],[[83,[7]]]],[1,100],[[]],[[],15],[[],15],[[],16],[[]],0,0,[[101,101],23],[[101,101]],[[101,101]],[[101,101]],[[101,101]],[[101,101]],[[101,101]],[[]],[[]],[101,101],[[]],[101,23],[101,23],[[101,1]],[[101,13],14],[[101,13],14],[[[53,[11]]],101],[[]],[[]],[101,11],[101,1],[1,101],[[101,101]],[[101,1,11]],[[101,1],11],[[]],[[],102],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,[[[104,[103]],[105,[103]]]],[[]],[[]],[[]],[[]],[106,106],[[[104,[2]]],[[104,[2]]]],[[]],[[]],[[106,106],11],[[106,13],14],[[[104,[12]],13],14],[[]],[[]],[[]],[[]],[106,[[104,[103]]]],[[[104,[103]],103],103],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,0,0,[[[108,[107]],1]],[[]],[[]],[[]],[[]],[[[108,[107]]],[[109,[107]]]],[[[109,[[0,[2,107]]]]],[[109,[[0,[2,107]]]]]],[[]],[[[109,[[0,[12,107]]]],13],14],[[[109,[107]],[79,[1]]]],[[]],[[]],[[[109,[107]],1]],[[]],[[]],[[1,107],[[108,[107]]]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[[108,[107]],1]],[[]],[[]],0,0,0,[[[110,[107]],1,1]],[[]],[[]],[[]],[[]],[[[110,[107]]],[[111,[107]]]],[[[111,[[0,[2,107]]]]],[[111,[[0,[2,107]]]]]],[[]],[[[111,[[0,[12,107]]]],13],14],[[[111,[107]],[79,[1]],[79,[1]]]],[[]],[[]],[[[111,[107]]]],[[]],[[]],[[1,1,107],[[110,[107]]]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[[110,[107]],1,1]],[[]],[[]],0,0,[[]],[[]],[[[113,[112]],[114,[1]]],83],[[]],[[]],[[53,112],[[113,[112]]]],[[],15],[[],15],[[],16],[[]],0,0,[[]],[[]],[[]],[[[116,[115]]]],[[[116,[115]],1]],[[]],[[1,115],[[116,[115]]]],[[[116,[115]]],53],[[],15],[[],15],[[],16],[[[116,[115]],[114,[1]]]],[[]],0,[[]],[[]],[[[117,[[0,[2,115]]]]],[[117,[[0,[2,115]]]]]],[[]],[[[117,[[0,[12,115]]]],13],14],[[]],[[[117,[115]],1]],[[]],[115,[[117,[115]]]],[[]],[[],15],[[],15],[[],16],[[[117,[115]],[79,[1]]]],[[]],0,[[]],[[]],[[[119,[[0,[2,118]]]]],[[119,[[0,[2,118]]]]]],[[]],[[[119,[[0,[12,118]]]],13],14],[[[119,[[0,[118,19]]]],[79,[1]]]],[[]],[[]],[[[0,[118,19]]],[[119,[[0,[118,19]]]]]],[[]],[[],15],[[],15],[[],16],[[[119,[[0,[118,19]]]],[79,[1]]]],[[]],0,[[[120,[115]],1]],[[]],[[]],[[[120,[[0,[12,115]]]],13],14],[[[120,[115]],[79,[1]]]],[[]],[[]],[115,[[120,[115]]]],[[],15],[[],15],[[],16],[[]],0,0,[[]],[[]],[[[122,[[0,[2,121]]]]],[[122,[[0,[2,121]]]]]],[[]],[[],[[122,[[0,[9,121]]]]]],[[[122,[121]],[79,[1]]]],[[[122,[121]],[123,[1]]]],[[]],[[]],[[1,121],[[122,[121]]]],[[]],[[],15],[[],15],[[],16],[[[122,[121]],1]],[[]],0,0,[[[125,[124]],1,124]],[[]],[[]],[[[125,[124]],[79,[1]]],124],[[[125,[124]],[123,[1]]],124],[[]],[[]],[[[125,[[0,[124,45]]]],[0,[124,45]]],1],[1,[[125,[124]]]],[[[125,[124]],1,124]],[[],15],[[],15],[[],16],[[]],0,0,[[126,33,33]],[[]],[[]],[[]],[[]],[[126,19],[[127,[19]]]],[126,126],[[[127,[2]]],[[127,[2]]]],[[]],[[]],[[],126],[[[127,[[0,[19,4,65]]]],[79,[33]],[79,[33]]],[[0,[19,4,65]]]],[[[127,[[0,[19,4,65]]]],[123,[33]],[123,[33]]],[[0,[19,4,65]]]],[[]],[[]],[[]],[[]],[[],126],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[[127,[[0,[19,4,65]]]],33,33,[0,[19,4,65]]]],[[]],[[]],0,[[[128,[112]]],83],[[]],[[]],[[[128,[112]]],83],[[]],[[[128,[112]]],83],[[]],[[[128,[112]]],11],[[[128,[112]]],1],[112,[[128,[112]]]],[[[128,[112]]],83],[[[128,[112]]],83],[[[128,[112]]]],[[[128,[112]]]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[129,129],[[]],[[129,33],11],[[],129],[[129,13],14],[[]],[[129,33]],[[129,33],83],[[]],[[129,33],33],[[],129],[[129,33]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[130,[2]]],[[130,[2]]]],[[]],[[],[[130,[9]]]],[[[130,[12]],13],14],[[]],[[]],[[[130,[45]]],11],[[[130,[45]]],1],[[[130,[45]]],[[83,[45]]]],[[[130,[45]]],[[83,[45]]]],[[],[[130,[45]]]],[[[130,[45]]],[[83,[45]]]],[[[130,[45]]],[[83,[45]]]],[[[130,[45]],45]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[131,[[0,[118,19]]]],[114,[1]]]],[[]],[[]],[[1,[0,[118,19]]],[[131,[[0,[118,19]]]]]],[[53,[0,[118,19]]],[[131,[[0,[118,19]]]]]],[[],15],[[],15],[[],16],[[[131,[[0,[118,19]]]],[114,[1]]]],[[]],0,0,[[]],[[]],[[[133,[132]],[114,[1]]],132],[[]],[[[133,[132]],[53,[132]]]],[[]],[[1,[53,[132]]],[[133,[132]]]],[[],15],[[],15],[[],16],[[[133,[132]],[114,[1]],132]],[[]],0,0,[[[135,[134]],134]],[[]],[[]],[[[135,[2]]],[[135,[2]]]],[[]],[[],[[135,[9]]]],[[[135,[12]],13],14],[[]],[[]],[[[135,[134]]],11],[[[135,[134]]],1],[[[135,[134]],[135,[134]]]],[[],[[135,[134]]]],[[[135,[134]]],[[83,[134]]]],[[[135,[134]]],[[83,[134]]]],[[[135,[134]],134]],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,[[[137,[136]],[105,[136]]]],[[[137,[136]],[105,[136]],[138,[136]]]],[[]],[[]],[[]],[[]],[139,139],[[]],[[139,139],11],[[139,13],14],[[]],[[]],[[]],[[]],[[[53,[136]],139],[[137,[136]]]],[[[137,[136]],136],[[83,[136]]]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,[[]],[[]],[[[140,[[0,[115,19]]]],1,1]],[[[140,[[0,[115,19]]]],1]],[[[140,[[0,[115,19]]]],1]],[[[140,[[0,[115,19]]]],1,1]],[[]],[[[140,[[0,[115,19]]]],1]],[[]],[[[140,[[0,[115,19]]]],1,1]],[[[0,[115,19]],1],[[140,[[0,[115,19]]]]]],[[[140,[[0,[115,19]]]],1]],[[],15],[[],15],[[],16],[[[140,[[0,[115,19]]]],1]],[[]],0,0,[[]],[[]],[[]],[[]],[[[141,[2]]],[[141,[2]]]],[[[142,[2]]],[[142,[2]]]],[[]],[[]],[[142,1,1],11],[[],[[142,[9]]]],[[142,1],1],[[]],[[]],[[]],[[]],[[142,1],73],[[142,1],1],[[],142],[[142,1],[[83,[1]]]],[[142,1],[[83,[1]]]],[142],[[142,1],73],[[142,1]],[[142,1]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],0,[[]],[[]],0,[[]],[[]],[[]],[[]],[[[53,[[0,[19,2,5,4,143,64,45]]]]],[[144,[[0,[19,2,5,4,143,64,45]]]]]],[[[144,[[0,[19,2,5,4,143,64,45]]]],[114,[1]],[0,[19,2,5,4,143,64,45]]]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[145,[2]]],[[145,[2]]]],[[]],[[[145,[[0,[45,69,2]]]],[0,[45,69,2]]],11],[[[145,[[0,[45,69,2]]]],[0,[45,69,2]]],1],[[],[[145,[9]]]],[[[145,[[0,[45,69,2]]]]],[[83,[[0,[45,69,2]]]]]],[[[145,[12]],13],14],[[]],[[[145,[[0,[45,69,2]]]],[0,[45,69,2]]]],[[]],[[[145,[[0,[45,69,2]]]]],11],[[[145,[[0,[45,69,2]]]]],[[83,[[0,[45,69,2]]]]]],[[[145,[[0,[45,69,2]]]]],1],[[],[[145,[[0,[45,69,2]]]]]],[[[145,[[0,[45,69,2]]]]],[[83,[[0,[45,69,2]]]]]],[[[145,[[0,[45,69,2]]]]],[[83,[[0,[45,69,2]]]]]],[[[145,[[0,[45,69,2]]]],[0,[45,69,2]]],11],[[]],[[],15],[[],15],[[],16],[[]],0,0,[[]],[[]],[[]],[[]],[146,73],[146,1],[[],146],[147,146],[[]],[[]],[146,1],[[]],[[]],[147,1],[146,32],[88,147],[[147,1],[[83,[146]]]],[[147,1],[[83,[146]]]],[147,146],[146,[[83,[146]]]],[[147,99]],[146,73],[146,[[83,[146]]]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,0,[[148,1],149],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[149,1,1],11],[148,149],[[148,1,1]],[1,148],[[149,1],1],[[149,1],1],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,[[]],[[]],[[[150,[2]]],[[150,[2]]]],[[]],[[[53,[2]]],[[150,[2]]]],[[]],[[[150,[2]],1],[[151,[2]]]],[[]],[[1,2],[[150,[2]]]],[[[150,[2]],1,2],[[150,[2]]]],[[]],[[],15],[[],15],[[],16],[[]],0,[152,83],[[]],[[]],[[],[[152,[9]]]],[[[152,[12]],13],14],[[]],[152,83],[[]],[152,11],[152,1],[[],152],[152,[[83,[152]]]],[152,152],[[],15],[[],15],[[],16],[[]],0,[[[153,[[0,[115,2]]]],1],[[153,[[0,[115,2]]]]]],[[]],[[]],[[[153,[[0,[2,115]]]]],[[153,[[0,[2,115]]]]]],[[]],[[[153,[[0,[12,115]]]],13],14],[[[153,[[0,[115,2]]]],[114,[1]]]],[[]],[[53,[0,[115,2]]],[[153,[[0,[115,2]]]]]],[[]],[[1,[0,[115,2]]],[[153,[[0,[115,2]]]]]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[154,[2]]],[[154,[2]]]],[[]],[[],[[154,[9]]]],[[[154,[12]],13],14],[[]],[[]],[154,73],[[],154],[154,83],[154,[[83,[154]]]],[154,154],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[155,[[0,[5,4,65,19]]]]],1],[[[155,[[0,[5,4,65,19]]]],1,1],[[83,[[0,[5,4,65,19]]]]]],[[]],[[[155,[[0,[5,4,65,19]]]]],[[53,[[53,[1]]]]]],[[]],[[[155,[[0,[5,4,65,19]]]],1,1],11],[[[155,[[0,[5,4,65,19]]]],1,1,[0,[5,4,65,19]]],1],[1,[[155,[[0,[5,4,65,19]]]]]],[[[155,[[0,[5,4,65,19]]]],1],[[0,[5,4,65,19]]]],[[[155,[[0,[5,4,65,19]]]],1],1],[[[155,[[0,[5,4,65,19]]]],1],1],[[],15],[[],15],[[],16],[[]],0,0,[[]],[[]],[[156,23],11],[[],156],[[156,23],11],[[156,23]],[[]],[[156,23],11],[[156,23]],[[]],[156,11],[156,1],[156,[[83,[23]]]],[[156,23],[[83,[23]]]],[156,[[83,[23]]]],[[156,23],[[83,[23]]]],[[],156],[[],15],[[],15],[[],16],[[]],0,0,[[[157,[[0,[19,45]]]],[0,[19,45]],[0,[19,45]]]],[[]],[[]],[[]],[[]],[[[157,[[0,[19,45]]]]],[[158,[[0,[19,45]]]]]],[[[157,[2]]],[[157,[2]]]],[[]],[[],[[157,[9]]]],[[]],[[]],[[]],[[]],[[],[[157,[[0,[19,45]]]]]],[[[158,[[0,[19,45]]]]],53],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,[[]],[[]],[[]],[[]],[[159,1,1],11],[[159,1,1],1],[1,159],[159,11],[[159,1],1],[[159,1],1],[[],15],[[],15],[[],16],[[]],0,[[[160,[2]]]],[[[160,[2]],1,2]],[[]],[[]],[[[160,[2]]],[[160,[2]]]],[[]],[[],[[160,[9]]]],[[[160,[2]]],[[83,[2]]]],[[[160,[12]],13],14],[[]],[53,160],[[160,1]],[[]],[[[160,[2]]],11],[[[160,[2]]],[[83,[2]]]],[[[160,[2]]],1],[[],[[160,[2]]]],[[[160,[2]]],[[83,[2]]]],[[[160,[2]],2]],[[[160,[2]]],11],[[]],[[],15],[[],15],[[],16],[[]],0,0,[[[161,[115]],1]],[[]],[[]],[[[161,[[0,[2,115]]]]],[[161,[[0,[2,115]]]]]],[[]],[[[161,[115]],[114,[1]]]],[[]],[[[161,[115]],1]],[[]],[[1,115],[[161,[115]]]],[[]],[[],15],[[],15],[[],16],[[[161,[115]],1]],[[]],0,[[[163,[[0,[115,162]]]],1,1]],[[]],[[]],[[[163,[[0,[115,162]]]],[79,[1]],[79,[1]]]],[[]],[[[163,[[0,[115,162]]]],1,1]],[[]],[[1,1,[0,[115,162]]],[[163,[[0,[115,162]]]]]],[[],15],[[],15],[[],16],[[[163,[[0,[115,162]]]],1,1]],[[]],0,[[164,[114,[1]],33]],[[]],[[]],[[164,[114,[1]],33]],[[164,[114,[1]],33]],[164,164],[[]],[[164,13],14],[[]],[[]],[[164,[114,[1]]],33],[[164,[114,[1]]],33],[1,164],[[[53,[33]]],164],[[164,[114,[1]]],33],[[]],[[],15],[[],15],[[],16],[[]],0,0,[[]],[[]],[[]],[[[166,[165]],1],165],[[]],[1,[[166,[165]]]],[[],15],[[],15],[[],16],[[[166,[165]],[114,[1]],[105,[165]]]],[[]],0,0,[[]],[[]],[[[168,[167]],[114,[1]]],167],[[]],[[]],[1,[[168,[167]]]],[[],15],[[],15],[[],16],[[[168,[167]],[114,[1]],[105,[167]]]],[[]],0,0,[[169,33,33]],[[]],[[]],[[]],[[]],[[169,[0,[115,19]]],[[170,[[0,[115,19]]]]]],[169,169],[[]],[[],169],[[[170,[115]],[79,[33]],[79,[33]]]],[[]],[[]],[[]],[[]],[[],169],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[[170,[115]],33,33]],[[]],[[]],0,[[]],[[]],[[[171,[2]]],[[171,[2]]]],[[]],[[],[[171,[9]]]],[[[171,[12]],13],14],[[]],[[]],[[[171,[45]]],11],[[[171,[45]]],1],[[[171,[45]],[171,[45]]]],[[],[[171,[45]]]],[[[171,[45]]],[[83,[45]]]],[[[171,[45]]],[[83,[45]]]],[[[171,[45]],45]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[173,[[0,[112,172]]]],[114,[1]]],83],[[]],[[]],[[53,[0,[112,172]]],[[173,[[0,[112,172]]]]]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[174,[[0,[112,172]]]],[79,[1]],[79,[1]]],83],[[]],[[]],[[[53,[53]],[0,[112,172]]],[[174,[[0,[112,172]]]]]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[175,[115]]]],[[[175,[[0,[115,19]]]],[79,[1]]]],[[[175,[[0,[115,19]]]],75]],[[]],[[[175,[[0,[115,19]]]],1],83],[[[175,[[0,[115,19]]]],1]],[[]],[[[175,[[0,[115,19]]]]],11],[[[175,[[0,[115,19]]]]],1],[[[175,[[0,[115,19]]]],[175,[[0,[115,19]]]]]],[[[175,[[0,[115,19]]]],[175,[[0,[115,19]]]]]],[[[0,[115,19]]],[[175,[[0,[115,19]]]]]],[[[175,[[0,[115,19]]]]],83],[[[175,[[0,[115,19]]]]],83],[[[175,[[0,[115,19]]]]]],[[[175,[[0,[115,19]]]]]],[[[175,[[0,[115,19]]]],1],83],[[[175,[[0,[115,19]]]],[79,[1]]]],[[[175,[[0,[115,19]]]],1]],[[[0,[115,19]]],[[175,[[0,[115,19]]]]]],[[[175,[[0,[115,19]]]],1]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[176,176],[[]],[[[178,[177]],[114,[1]]],[[83,[177]]]],[[]],[[]],[[]],[[]],[[1,176],[[178,[177]]]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[[178,[177]],[114,[1]],177]],[[]],[[]],0,[[179,1],7],[[]],[[]],[179,179],[[]],[[179,[79,[1]],11],1],[[]],[[]],[179,11],[179,1],[[[53,[11]]],179],[[179,1,11],1],[[179,1,11],[[83,[1]]]],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,0,[[[180,[[0,[19,91,69]]]],72,75,75,75]],[[]],[[]],[[]],[[]],[[[181,[[0,[19,91,69]]]]],73],[[[181,[[0,[19,91,69]]]]],73],[[[181,[2,2]]],[[181,[2,2]]]],[[]],[[[181,[12,12]],13],14],[[]],[[]],[[]],[[]],[[],[[180,[[0,[19,91,69]]]]]],[[[180,[[0,[19,91,69]]]]],[[181,[[0,[19,91,69]]]]]],[[[180,[[0,[19,91,69]]]]],[[181,[[0,[19,91,69]]]]]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],0,[[]],[[]],0,[[]],[[]],[182,1],[[]],[182,[[53,[[53,[1]]]]]],[[]],[[182,1,1],11],[[182,1,1],1],[1,182],[[182,1],1],[[182,1],1],[[],15],[[],15],[[],16],[[182,1],83],[[]],[[1,53,[85,[67]]],182],0,[[183,1],7],[[]],[[]],[183,183],[[]],[[183,[114,[1]],7],1],[[]],[[]],[[183,[114,[1]]],[[83,[7]]]],[[183,[114,[1]]],[[83,[7]]]],[[[53,[7]]],183],[[183,[0,[[114,[1]],2]],7],[[83,[7]]]],[[183,[0,[[114,[1]],2]],7],[[83,[7]]]],[[183,[114,[1]],1],[[83,[7]]]],[[183,[0,[[114,[1]],2]],7,7],1],[[183,1,7],1],[[183,1,7],[[83,[1]]]],[[]],[[],15],[[],15],[[],16],[[]],0,0,[[1,1]],0,0,[1,53],[[1,1]],0,[1],[[]],0,[[184,1,1]],[[]],[[]],[184,184],[[]],[[]],[[184,1],53],[[]],[[184,1,1]],[1,184],[184],[[]],[[],15],[[],15],[[],16],[[]],0,[[185,1,1]],[[]],[[]],[185,185],[[]],[[]],[[185,1],53],[[]],[[185,1,1]],[1,185],[185],[[]],[[],15],[[],15],[[],16],[[]],0,[[186,1,1,7,33]],[[]],[[]],[186,186],[[]],[[]],[[]],[[186,1,1,7],[[15,[33]]]],[1,186],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,[187,48],[188,48],[187,48],[[187,187],187],[[187,187],48],[[187,187],48],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[189,189],[187,187],[188,188],[190,190],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[187,187],48],[[188,188],48],[[],187],[[],188],[[],190],[188,187],0,0,0,[[187,48],187],[[187,187],48],[[188,188],48],[[189,48,48],11],[[187,187,189],11],[[188,188,189],11],[[190,190,189],11],[[187,13],14],[[188,13],14],[[190,13],14],[[]],[[]],[[]],[[]],0,[[189,48,48],11],[[189,48,48],11],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[188,188,189],11],[[188,188,189],11],[[189,48,48],11],[[189,48,48],11],[[187,48],187],[[189,48,48],11],[48,189],[[187,187],188],[[187,48],190],[187,187],[188,187],[[189,48,48],[[83,[191]]]],0,[[48,48],187],[[188,187],187],0,[[188,187],187],[[187,187],187],0,0,[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[187,187],[188,187],[[]],[[]],[[]],[[]],[[190,189],48],[[190,190,189],48],[[],48],0,0,0,0,0,0,[[]],[[]],[[187,187,187,189],192],[192,11],[192,192],[[]],[192,11],[[192,192],11],[[192,13],14],[[]],[[]],[192,11],[192,11],[192,11],[[]],[192,28],[[],15],[[],15],[[],16],[[]],[[187,187,187],190],[[[53,[187]],189],83],[[190,190,189],[[53,[187]]]],[189,11],[[188,189]],[[],48],0,0,0,[[]],[[]],[193,193],[[]],[[[53,[187]],189],[[53,[187]]]],[[193,193],11],[[]],[[[53,[187]],193,189],[[53,[187]]]],[[]],[[]],[[],15],[[],15],[[],16],[[]],[[188,187],48],[[188,187],48],[[188,188],48],[[187,187,187],190],0,0,0,0,[[]],[[]],[194,194],[[]],[194,11],[[194,194],11],[[194,13],14],[[]],[[190,188,189]],[[]],[194,11],[194,11],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,0,[[]],[[]],[195,195],[[]],[[195,195],11],[[195,13],14],[[]],[195,11],[[190,188,189]],[[]],[195,11],[195,11],[195,11],[[]],[[],15],[[],15],[195,11],[[],16],[[]],0,0,0,0,0,0,0,[[]],[[]],[196,11],[196,196],[[]],[[196,196],11],[[196,13],14],[[]],[196,11],[196,11],[[190,190,189]],[196,11],[[]],[196,[[83,[23]]]],[196,11],[196,11],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,[[]],[[]],[197,197],[[]],[197,11],[[197,197],11],[[197,13],14],[[]],[[188,188,189]],[[]],[197,11],[197,11],[197,11],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,[[]],[[]],[198,198],[[]],[[198,198],11],[[198,13],14],[[]],[[188,188,189]],[198,11],[[]],[198,11],[198,11],[198,11],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,[[]],[[]],[199,199],[[]],[[199,199],11],[199,11],[[199,13],14],[[]],[199,11],[[]],[199,11],[[187,189],199],[[]],[[],15],[[],15],[[],16],[[]],[[190,187,189],[[53,[187]]]],0,0,0,0,0,0,0,[[[202,[200,[0,[201,2]]]],[0,[201,2]]]],[[[202,[203,[0,[201,2]]]],[0,[201,2]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[204,[2,2]]],[[204,[2,2]]]],[200,200],[203,203],[[[202,[2,2]]],[[202,[2,2]]]],[[]],[[]],[[]],[[]],0,0,0,[202],[202],0,0,[[[202,[200,[0,[201,2]]]],72]],[[[202,[203,[0,[201,2]]]],72]],[[[204,[12,12]],13],14],[[200,13],14],[[203,13],14],[[[202,[12,12]],13],14],[[],1],[[]],[[[204,[2]]],1],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[202,11],0,[202,1],0,0,[[202,1],[[0,[73,205]]]],[[202,1],[[0,[73,205]]]],[[1,1],204],[1,[[202,[206,[0,[201,2]]]]]],0,0,[[]],[[[204,[2]]],[[204,[2]]]],0,[[],1],[[[204,[2]]],1],0,[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],0,0,0,[[],16],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[]],0,[[]],[[[204,[2]]]],0,0,[207,[[53,[1]]]],0,[[[202,[206,201]],1],[[53,[208]]]],[[[202,[206,201]],72],[[53,[83]]]],0,[207,53],[[[202,[203,201]]],[[53,[83]]]],[207,53],[[[202,[203,201]]]],[[[202,[200,201]],1],[[53,[201]]]],0,[[[202,[200,201]],1],[[83,[[53,[201]]]]]],[[[202,[206,201]]],[[83,[[53,[201]]]]]],[[[202,[206,201]]],[[53,[83]]]],[[[202,[203,201]]],53],0,0,0,[[[209,[[0,[201,2]]]],[0,[201,2]]]],[[]],[[]],[[[209,[[0,[2,201]]]]],[[209,[[0,[2,201]]]]]],[[]],[[]],[[]],[1,[[209,[[0,[201,2]]]]]],[[[209,[[0,[201,2]]]]],83],[[]],[[],15],[[],15],[[],16],[[]],0,[[[210,[[0,[201,2]]]],[0,[201,2]]]],[[]],[[]],[[[210,[[0,[2,201]]]]],[[210,[[0,[2,201]]]]]],[[]],[[]],[[]],[1,[[210,[[0,[201,2]]]]]],[[[210,[[0,[201,2]]]]],83],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,0,0,[[211,1,1]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[211,212],[[212,1],73],[213,213],[214,214],[[]],[[]],[[],214],[[213,213],11],[[213,13],14],[[214,13],14],[[]],[[]],[[]],[[]],[[212,1],1],[[212,1],214],[212],[[]],[[]],[[]],[[]],[213,11],[213,11],[213,11],[[212,1],213],0,0,[1,211],[[212,1],1],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[]],[[[202,[203,201]]],[[83,[[53,[201]]]]]],0,0,[[]],[[]],0,[207,207],[[]],[[207,13],14],[[]],[[]],0,[[[202,[203,201]]],207],0,0,0,[[]],[[],15],[[],15],[[],16],[[]],[[[202,[203,201]]],[[53,[1]]]],[[[202,[203,201]]],[[83,[[53,[201]]]]]],0,0,0,0,0,[[215,1,1]],[[]],[[]],[[]],[[]],[[]],[[]],[215,216],[217,217],[[]],[[217,217],11],[[217,13],14],[[]],[[]],[[]],[[]],[[]],[[]],[217,11],[[216,1],217],[1,215],[[216,1],1],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[]],[[]],[[]],0,[[]],[[]],[[]],[218,[[53,[[53,[1]]]]]],[[]],[[[202,[200,201]]],218],[218,[[53,[1]]]],[[],15],[[],15],[[],16],[[]],[[[202,[200,201]]],[[83,[[53,[1]]]]]],[[[202,[200,201]],1],83],[207,[[53,[[53,[1]]]]]],0,[[[219,[[0,[19,45,4,5]]]],1,1,[0,[19,45,4,5]]]],[[]],[[]],[[[219,[[0,[19,45,4,5]]]],1,1],[[83,[[0,[19,45,4,5]]]]]],[[]],[[[219,[[0,[19,45,4,5]]]]],11],[[]],[[[202,[206,201]]],[[219,[[0,[19,45,4,5]]]]]],[[[219,[[0,[19,45,4,5]]]]],[[83,[[53,[[53,[[83,[[0,[19,45,4,5]]]]]]]]]]]],[[],15],[[],15],[[],16],[[]],0,[[[202,[206,201]],1,1,1],[[53,[83]]]],0,0,0,0,0,0,0,0,[[220,220],220],[[]],[[]],[[]],[[]],[[]],[[]],[221,221],[220,220],[[[222,[2]]],[[222,[2]]]],[[]],[[]],[[]],[[],221],[[],220],0,0,[[221,221],11],[[220,220],11],[[221,13],14],[[220,13],14],[[[222,[12]],13],14],[[]],[[]],[[]],[[222,221]],[[222,221]],[[]],[[]],[[]],[222,73],[222,73],[[221,220,1,1],[[83,[221]]]],[[1,1],221],[[32,32],220],[72,222],0,[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[]],[[]],[[]],0,0,[[1,1,67,67],[[202,[200,[204,[2]]]]]],0,0,0,0,0,[223,53],0,0,[[]],[[]],[[223,19,75],[[224,[223,19,75]]]],[[]],[[]],[[]],[[[224,[73,19,75]]],83],[[],15],[[],15],[[],16],[[]],0,[[223,88],102],0,0,[[]],[[]],[[]],[[]],[[]],[[[225,[73,75]]],83],[[223,75],[[225,[223,75]]]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,0,0,[[[53,[101]]],7],[[[53,[101]]]],[[[53,[101]]],[[83,[[53,[101]]]]]],0,[[]],[[]],[226,226],[[]],[[]],[[[53,[101]]],226],[[226,1,1],[[83,[23]]]],[[226,1]],[[]],[[226,226]],[[1,1],226],[[]],[226,226],[[],15],[[],15],[[],16],[[]],0,0,0,[[[228,[227]],[228,[227]]],[[228,[227]]]],[[[228,[227]],[228,[227]]]],[[]],[[]],[[[228,[[0,[2,227]]]]],[[228,[[0,[2,227]]]]]],[[]],[[[228,[[0,[10,227]]]],[228,[[0,[10,227]]]]],11],[[]],[[[53,[[53,[23]]]],227],[[228,[227]]]],[[[228,[227]],1,1],83],[[[228,[227]]],1],[[[228,[227]],1]],[[]],[[[228,[227]],[228,[227]]],[[228,[227]]]],[[[228,[227]],[228,[227]]]],[[[228,[227]]],[[228,[227]]]],[[1,1,227],[[228,[227]]]],[[[228,[227]],[228,[227]]],[[228,[227]]]],[[[228,[227]],[228,[227]]]],[[]],[[[228,[227]]],[[228,[227]]]],[[],15],[[],15],[[],16],[[]],[[[228,[227]]],1],0,[[[229,[227]],[229,[227]]],[[229,[227]]]],[[[229,[227]],[229,[227]]]],[[]],[[]],[[[229,[[0,[2,227]]]]],[[229,[[0,[2,227]]]]]],[[]],[[[229,[[0,[10,227]]]],[229,[[0,[10,227]]]]],11],[[]],[[[53,[[53,[23]]]],227],[[229,[227]]]],[[[229,[227]],1,1],83],[[[229,[227]],1]],[[]],[[[229,[227]],[229,[227]]],[[229,[227]]]],[[[229,[227]],[229,[227]]]],[[[229,[227]]],[[229,[227]]]],[[1,227],[[229,[227]]]],[[[229,[227]],7],[[229,[227]]]],[[[229,[227]]],1],[[[229,[227]],[229,[227]]],[[229,[227]]]],[[[229,[227]],[229,[227]]],[[229,[227]]]],[[[229,[227]],[229,[227]]],[[229,[227]]]],[[[229,[227]],[229,[227]]]],[[]],[[[229,[227]]],[[229,[227]]]],[[],15],[[],15],[[],16],[[1,227],[[229,[227]]]],[[]],0,0,[[[53,[[53,[7]]]],7],7],[[[53,[[53,[7]]]],7],[[83,[[53,[[53,[7]]]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[231,[230]],1,1]],[[]],[[]],[[]],[[]],[[[231,[230]]],7],[[1,1],[[231,[230]]]],[[],15],[[],15],[[],16],[[]],0,0,[[232,1,1]],[[]],[[]],[[]],[[]],[233,233],[[]],[[233,13],14],[[]],[[]],[232,53],[[]],[[]],[232,23],[[1,1],232],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,227],[[53,[53]]]],[[[53,[23]],227],53],0,0,[[]],[[]],[[]],[[]],[[234,7,7],7],[[235,7,7],7],[234,234],[235,235],[[]],[[]],[[]],[[]],[[]],[[]],[[7,7],234],[7,235],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,0,0,0,0,0,0,[[[53,[[0,[19,4,65,6]]]],[53,[[0,[19,4,65,6]]]]],[[53,[[0,[19,4,65,6]]]]]],[[[53,[[0,[19,4,65,6]]]],[53,[[0,[19,4,65,6]]]]],[[53,[[0,[19,4,65,6]]]]]],[[[53,[[0,[19,4,65,6]]]],[53,[[0,[19,4,65,6]]]]],[[53,[[0,[19,4,65,6]]]]]],[[53,53,227],53],[[]],[[]],[[[53,[[0,[19,9,4,65,6]]]],[53,[[0,[19,9,4,65,6]]]]],[[53,[[0,[19,9,4,65,6]]]]]],[[]],[[]],[[7,7],7],[[],83],[[],83],[7,7],[7,[[53,[7]]]],0,[[]],[[]],[236,236],[[]],[7,[[53,[236]]]],[[236,236],11],[[236,13],14],[[]],0,[[]],0,0,[[]],[[],15],[[],15],[[],16],[[]],[[7,7]],0,0,[[[237,[227]],1,1]],0,[[[237,[227]],1],53],[[]],[[]],0,[[[237,[227]],1]],[[[237,[[0,[2,227]]]]],[[237,[[0,[2,227]]]]]],[[]],[[[237,[227]],1,1]],[[[237,[227]],1]],[[[237,[[0,[12,227]]]],13],14],[[]],[[[237,[227]],1,1]],[[]],[[[237,[227]],1]],[[1,227],[[237,[227]]]],[[[237,[227]],1,1]],[[]],[[],15],[[],15],[[],16],[[]],0,0,[[1,1]],0,0,[1,53],0,0,[1],[[7,7],7],0,0,0,[[]],[[]],[[238,1],[[53,[1]]]],[[]],[[]],[1,238],[[],15],[[],15],[[],16],[[]],[7,53],[[[53,[7]],[53,[7]],7],7],0,0,[[]],[[]],[[]],[[33,33,7],[[83,[33]]]],0,0,0,0,0,0,[[1,7],[[53,[7]]]],[[7,7],[[83,[7]]]],[[7,7],7],[[7,7,7],[[83,[7]]]],[[7,7,7],7],[[7,7],[[83,[7]]]],[[1,7],[[53,[7]]]],[[239,[53,[50]],240],[[53,[50]]]],[[24,24],24],[[23,23],23],[[7,7],7],[[25,25],25],0,[[]],[[]],[[241,[53,[50]],[53,[50]]],[[53,[50]]]],[[]],[[]],[[23,1],241],[[],15],[[],15],[[],16],[[]],0,0,[[240,239,239],239],[[240,239,239]],[[]],[[]],[[]],[[]],[239,239],[[]],[[239,1],50],[50,239],[239,[[83,[1]]]],[[240,239,239]],[[239,239],11],[[239,50],50],[[239,13],14],[[]],[[[53,[50]]],239],[[]],[[239,1],239],[[]],[[]],[[240,239,1],239],[239,11],[239,1],[[240,239,239],239],[[240,239,239]],[241,240],[[240,239,50],239],[239],[[240,239],239],[[240,239,239],239],[[240,239,239]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],[[],239],[[[53,[50]],50,241],[[53,[50]]]],0,0,[[],11],0,0,0,[[]],[[]],[[]],[[]],[[242,1],11],[1,242],[[],15],[[],15],[[],16],[[]],0,0,[[]],[[]],[[]],[[]],[[243,7],11],[[],15],[[],15],[[],16],[[]],[7,[[83,[7]]]],[[7,7,7,7],7],[[7,7,7],7],[[7,7,7],7],[7,7],[1,[[53,[7]]]],[[7,227]],0,0,0,0,0,[7],0,[[]],[[]],[[[244,[2]]],[[244,[2]]]],[[]],[[],[[244,[9]]]],0,[[[244,[10]],[244,[10]]],11],[[[244,[12]],13],14],[[]],[[]],[[[244,[[0,[45,10,19]]]],[244,[[0,[45,10,19]]]]],[[15,[[244,[[0,[45,10,19]]]]]]]],[[],244],0,[[]],[[],15],[[],15],[[],16],[[]],0,0,[[]],[[]],0,[[[245,[2]]],[[245,[2]]]],[[]],[[[245,[10]],[245,[10]]],11],[[[245,[12]],13],14],[[]],0,[[]],0,[[2,2,2,2,2,2],[[245,[2]]]],0,[[[245,[2]]],[[245,[2]]]],[[[245,[2]]],[[245,[2]]]],[[[245,[2]]],[[245,[2]]]],[[[245,[2]]],[[245,[2]]]],[[[245,[2]]],[[245,[2]]]],[[[245,[2]]],[[245,[2]]]],[[]],0,[[],15],[[],15],[[],16],[[]],[[72,[0,[19,69]],[0,[19,69]]],11],0,0,0,0,[[]],[[]],[[]],[[]],[[[246,[2]]],[[246,[2]]]],[[[247,[2]]],[[247,[2]]]],[[]],[[]],0,[[[246,[12]],13],14],[[[247,[12]],13],14],[[]],[[]],[[]],[[]],[[72,[0,[19,69,12]],[0,[19,69,12]]],[[83,[[246,[[0,[19,69,12]]]]]]]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,0,0,0,0,[[[248,[[0,[91,69,19]],19]],[0,[91,69,19]],[0,[91,69,19]],19]],[[[248,[[0,[91,69,19]],19]],[0,[91,69,19]],[0,[91,69,19]],19]],[[]],[[]],[[]],[[]],[[[249,[2,2]]],[[249,[2,2]]]],[[[248,[2,2]]],[[248,[2,2]]]],[[]],[[]],[[],[[248,[9,9]]]],0,[[[249,[12,12]],13],14],[[[248,[12,12]],13],14],[[]],[[]],0,[[]],[[]],[[[248,[[0,[91,69,19]],19]],[0,[91,69,19]]],73],[[],249],[[],[[248,[[0,[91,69,19]],19]]]],0,[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,0,[[[248,[[0,[91,69,19,45]],[0,[19,45,5,4,250]]]]],[[251,[[0,[91,69,19,45]],[0,[19,45,5,4,250]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[50,50]],[[50,50]],0,[[]],[[]],[[]],[[]],[252,252],[50,50],[[]],[[]],[[],252],[[],50],[[50,50]],[[50,50]],[[252,252],11],[[50,50],11],[[50,13],14],[[50,13],14],[[252,33,33]],[[]],[[]],[7,50],[1,50],[[252,33]],[[252,7]],[[]],[[]],[50,50],[[50,50]],[[50,50]],[50],[23,50],[[],50],0,[[50,7],50],[[50,50]],[[50,50]],[[]],[[]],[[],102],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[50,23],[[]],[[]],[[],50],0,0,0,0,0,0,0,[[33,33]],[33],[7],0,0,[[253,253]],[[253,253]],0,[[]],[[]],[[]],[[]],[254,254],[253,253],[[]],[[]],[[253,253]],[[253,253]],[[254,254],11],[[253,253],11],[[254,13],14],[[253,13],14],[[253,13],14],[[254,33,33]],[[]],[[]],[[254,33]],[[254,7]],[[]],[[]],[253],[[253,253]],[[253,253]],[253,253],[23,254],[[23,23],253],[[253,7]],[[253,253]],[[253,253]],[[]],[[]],[[],102],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[253,23],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[255,255],[256,256],[[]],[[]],[[],255],[[],256],[[255,255],11],[[256,256],11],[[255,13],14],[[256,13],14],[[]],[[]],[255],[256],[[]],[[]],[255],[23,255],[23,256],[255],[256],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,0,[[257,257]],[[257,257]],[[]],[[]],[[]],[[]],[258,258],[257,257],[[]],[[]],[[257,257]],[[257,257]],[[258,258],11],[[257,257],11],[[258,13],14],[[258,33,33]],[[]],[[]],[[258,33]],[[258,7]],[[]],[[]],[257],[[257,257]],[[257,257]],[23,258],[[257,7]],[[257,257]],[[257,257]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[257,23],[[]],[[]],0,0,0,0,[[[208,[4]],[208,[4]]],[[208,[4]]]],[[]],[[]],[[[208,[2]]],[[208,[2]]]],[[]],[[[208,[45]],[208,[45]]],191],[[[208,[10]],[208,[10]]],11],[[[208,[12]],13],14],[[]],[[]],[[[208,[19]]],11],[[[208,[19]]],11],[[[208,[19]]],11],[[[208,[259]]],[[208,[259]]]],[[[208,[64]],[208,[64]]],[[83,[191]]]],[[[208,[65]],[208,[65]]],[[208,[65]]]],[[]],[[],15],[[],15],[[],16],[[[208,[19]]],19],[[]],0,0,[[]],[[]],0,0,0,0,[[]],[7],0,[[260,260]],[[260,260]],[[]],[[]],[260,260],[[]],[[260,260],191],[260,33],[[260,260]],[[260,260]],[[260,260],11],[[260,13],14],[33,260],[[]],[[]],[[260,260]],[[260,260]],[260],[[33,33],260],[260,33],[[260,260],[[83,[191]]]],[[260,260]],[[260,260]],[[]],[[],15],[[],15],[[],16],[[]],0,[[261,261]],[[261,261]],[[]],[[]],[261,261],[[]],[[261,261],191],[[],261],[[261,261]],[[261,261]],[[261,261],11],[[261,13],14],[[]],[[]],[[261,261]],[[261,261]],[261],[[],261],0,[[261,261],[[83,[191]]]],[[261,261]],[[261,261]],[[]],[[],15],[[],15],[[],16],[[]],[[],261],0,0,0,0,0,0,0,[[[262,[[0,[19,69,91]],[0,[19,69]]]],[0,[19,69,91]],67,67]],[[[262,[[0,[19,69,91]],[0,[19,69]]]],[0,[19,69,91]],67]],[[]],[[]],[[]],[[]],[[[263,[2]]],[[263,[2]]]],[[]],[[[263,[[0,[19,69]]]]],[[83,[[0,[19,69]]]]]],[[[263,[[0,[19,69]]]],[0,[19,69]]],[[83,[[0,[19,69]]]]]],[[],[[262,[9,9,9]]]],[[[263,[12]],13],14],[[]],[[]],[[]],[[]],[88,[[263,[99]]]],[[],[[262,[[0,[19,69,91]],[0,[19,69]]]]]],[[[262,[[0,[19,69,91]],[0,[19,69]]]],[0,[19,69,91]],[263,[[0,[19,69]]]]],83],[[[263,[[0,[19,69]]]]],[[83,[[0,[19,69]]]]]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],[[264,[79,[[0,[265,64,2]]]]],[[79,[[0,[265,64,2]]]]]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[267,[[0,[266,2]]]]],[[268,[[0,[266,2]]]]]],[[[269,[[0,[266,2]]]]],[[268,[[0,[266,2]]]]]],0,0,0,[[[270,[2,2]]],[[270,[2,2]]]],[[[271,[2]]],[[271,[2]]]],[[[268,[2]]],[[268,[2]]]],[[]],[[]],[[]],[[],[[271,[9]]]],0,0,[[[267,[[0,[266,2]]]],72]],[[[269,[[0,[266,2]]]],72]],[[[270,[12,12]],13],14],[[[271,[12]],13],14],[[[268,[12]],13],14],[[],1],[[]],[[]],[[[270,[2]]],1],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[268,11],0,[268,1],[[[271,[266]]],272],[[[271,[266]]],1],[1,[[267,[[0,[266,2]]]]]],[[1,1],[[269,[[0,[266,2]]]]]],[[1,1],270],[[268,1],271],[268,73],0,0,[[]],[[[270,[2]]],[[270,[2]]]],[268,[[83,[1]]]],0,0,[[],1],[[[270,[2]]],1],0,[[]],[[]],[[]],0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],0,[[]],[[]],[[]],[[]],[[]],[[]],[[[270,[2]]]],0,0,[[]],[[]],[[273,[53,[1]],67],[[53,[1]]]],[[]],[[]],[[[268,[266]],1],273],[[],15],[[],15],[[],16],[[]],[[[268,[266]]],[[53,[1]]]],0,0,[[]],[[]],[[]],[[]],0,[274,274],[[]],0,[[]],[[]],[[]],[[]],[[[268,[266]]],275],[275],0,0,[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,[[276,1,1],[[83,[1]]]],[[]],[[]],[[276,1,1],83],[[]],[[]],[[276,1]],[[[268,[266]],1],276],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[]],[[]],[[[268,[266]],1],277],[[277,1],1],[[277,1]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[278,278],[[]],[[278,13],14],[[]],[[278,1,1],[[83,[1]]]],[[278,1],1],[[]],[[278,1,1],1],[[[268,[266]],1],278],[[278,1],[[83,[1]]]],[[278,1,1],53],[[278,1,1],53],[[278,1]],[[278,1]],[[]],[[],15],[[],15],[[],16],[[]],0,[[279,1,1],[[83,[1]]]],[[]],[[]],[[]],[[]],[[279,1,1,1],[[83,[1]]]],[[279,1,1],1],[[[268,[266]],1],279],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[]],[[]],[[2,[85,[67]],[85,[67]],[85,[67]]],[[280,[19,2,2]]]],[[[280,[19,2,2]],[268,[266]]],[[53,[2]]]],[[],15],[[],15],[[],16],[[]],[[[268,[266]],1]],[[[268,[266]],1],[[15,[88]]]],0,[[]],[[]],[[]],[[]],[[2,[85,[67]],[85,[67]],[85,[67]]],[[281,[19,2,2]]]],[[[281,[19,2,2]],[268,[266]],1],[[53,[2]]]],[[],15],[[],15],[[],16],[[]],[[[268,[266]]]],[[[268,[266]],1],53],[[[268,[266]]],53],[[[268,[266]],1,1],[[53,[1]]]],0,0,0,0,0,0,0,0,0,[[[53,[33]]],33],[[[53,[33]]],33],[[[53,[[0,[19,6,143,5]]]]],[[0,[19,6,143,5]]]],[[[53,[[0,[19,6,5,4,143]]]]],[[0,[19,6,5,4,143]]]],[[[53,[33]]],33],[[[53,[7]]],22],[[[53,[[0,[19,4,5]]]]],[[0,[19,4,5]]]],[[[53,[7]]],22],0,0,0,0,0,0,0,0,0,0,0,[7,23],0,[[]],[[]],[282],[[]],[282,[[83,[25]]]],[[]],[[],282],[282,[[83,[25]]]],[282,[[53,[99]]]],[282,48],[282,28],[282,33],[282,32],[282,23],[282,7],[282,1],[282],[[],15],[[],15],[[],16],[[]],[[282,283]],[[282,283]],0,[284,11],0,0,[[[105,[[0,[4,6,19]]]],[0,[4,6,19]]],[[0,[4,6,19]]]],0,[[]],[[]],[[[105,[2]]],[[105,[2]]]],[[]],[[[105,[12]],13],14],[[]],[[]],[[[105,[[0,[65,6,19]]]],[0,[65,6,19]]],[[105,[[0,[65,6,19]]]]]],[[]],[[],15],[[],15],[[],16],[[]],0,0,[[]],[[]],[285,285],[[]],[[285,285],191],[[],285],[[285,285],11],[[285,13],14],[[]],[[285,286]],[[]],[285,11],[[285,285],[[83,[191]]]],[[]],[[],15],[[],15],[[],16],[[]],[[[114,[1]],1,1]],[[1,1,1,1]],0,0,[[]],0,[[287,287]],[[287,287]],[[287,287]],[[]],[[]],[287,287],[[]],[[287,287],191],[[287,1],11],[[],287],[[287,287],287],[[287,287],11],[1,287],[[287,1],287],[[287,13],14],[[]],[[[53,[1]]],287],[[287,286]],[[287,287],287],[[]],[287,11],[287,1],[[287,287],[[83,[191]]]],[[287,1],287],[[287,1],287],[[287,287]],[[287,287],287],[[]],[[],15],[[],15],[[],16],[[287,287],287],[[]],0,[[]],[[]],[288,288],[[]],[[288,13],14],[[]],[288,7],[[]],[[],288],[[]],[[],15],[[],15],[[],16],[[]],0,[[88,88],88]],"c":[],"p":[[15,"usize"],[8,"Clone"],[3,"AddSum"],[8,"Add"],[8,"Zero"],[8,"Mul"],[15,"u64"],[8,"From"],[8,"Default"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[3,"Affine"],[8,"One"],[8,"Copy"],[3,"AffineSum"],[3,"BitAnd"],[15,"u128"],[15,"u32"],[15,"u16"],[15,"u8"],[3,"BitOr"],[3,"BitXor"],[15,"i32"],[15,"i8"],[15,"i16"],[15,"i128"],[15,"isize"],[15,"i64"],[4,"DihedralValue"],[3,"Dihedral"],[3,"Dual"],[8,"Identity"],[8,"Set"],[8,"BinaryOp"],[3,"Max"],[3,"MaxContiguousValue"],[3,"MaxContiguous"],[3,"MaxPartialSumValue"],[3,"MaxPartialSum"],[8,"Ord"],[3,"Min"],[3,"Prod"],[15,"f64"],[15,"f32"],[3,"ConstModInt"],[3,"Sum"],[3,"Transformation"],[3,"Vec"],[3,"Permutation"],[3,"Composition"],[3,"Trivial"],[3,"Tuple2"],[3,"Tuple3"],[3,"Tuple4"],[3,"Tuple5"],[8,"Inverse"],[3,"Update"],[3,"UpdateSum"],[8,"PartialOrd"],[8,"Sub"],[8,"Div"],[8,"Fn"],[4,"SearchResult"],[8,"Eq"],[3,"CompressorBuilder"],[3,"Compressor"],[8,"IntoIterator"],[8,"Iterator"],[3,"Rho"],[8,"FnMut"],[4,"Convex"],[8,"Signed"],[3,"Imos1D"],[3,"Range"],[3,"Imos2D"],[3,"ImosGeo"],[3,"KMP"],[4,"Option"],[3,"Mo"],[3,"Box"],[3,"PSP"],[3,"RollingHash"],[15,"str"],[3,"Table"],[3,"SuffixArray"],[8,"Hash"],[3,"StaticRangeFreqQuery"],[3,"StaticRangeInversionsQuery"],[4,"Convex"],[3,"TwoSat"],[3,"AhoCorasickBuilder"],[3,"AhoCorasick"],[3,"Node"],[15,"char"],[3,"BinaryTrie"],[3,"Bitset"],[3,"String"],[8,"Elem"],[3,"ConvexHullTrick"],[3,"Linear"],[4,"Mode"],[8,"Group"],[3,"CumulativeSum1DBuilder"],[3,"CumulativeSum1D"],[3,"CumulativeSum2DBuilder"],[3,"CumulativeSum2D"],[8,"Semigroup"],[3,"DisjointSparseTable"],[8,"RangeBounds"],[8,"Monoid"],[3,"DualSegtree"],[3,"DynamicDualSegtree"],[8,"Action"],[3,"DynamicLazySegtree"],[3,"DynamicSegtree"],[8,"AbelianGroup"],[3,"FenwickTree"],[3,"RangeTo"],[8,"Elem"],[3,"FenwickTreeAdd"],[3,"FenwickOnFenwickBuilder"],[3,"FenwickOnFenwick"],[3,"FoldableDeque"],[3,"IntegerSet"],[3,"IntervalHeap"],[3,"LazySegtree"],[8,"Elem"],[3,"LazySegtreeCoeff"],[8,"Elem"],[3,"LazySkewHeap"],[8,"Elem"],[3,"LiChaoTree"],[3,"RangeInclusive"],[4,"Mode"],[3,"LinkCutTree"],[3,"Node"],[3,"LinkedListPool"],[8,"AddAssign"],[3,"MergeSortTree"],[3,"MultiSet"],[3,"Node"],[3,"PalindromicTree"],[3,"PartiallyPersistentUnionFind"],[3,"At"],[3,"PersistentArray"],[3,"Rc"],[3,"PersistentQueue"],[3,"PersistentSegtree"],[3,"PersistentStack"],[3,"PotentialUnionFind"],[3,"QwordTree"],[3,"RangeSearchTreeBuilder"],[3,"RangeSearchTree"],[3,"RollbackableUnionFind"],[3,"RollbackableVec"],[3,"Segtree"],[8,"Commutative"],[3,"Segtree2D"],[3,"SegtreeBeats"],[8,"Elem"],[3,"SegtreeLinearAdd"],[8,"Elem"],[3,"SegtreeLinearAddRangeSum"],[3,"SegtreeOnSegtreeBuilder"],[3,"SegtreeOnSegtree"],[3,"SkewHeap"],[8,"Idempotence"],[3,"SparseTable"],[3,"SparseTable2D"],[3,"SplayTree"],[4,"Mode"],[8,"Elem"],[3,"StarrySkyTree"],[3,"SuccinctDict"],[3,"Trie"],[3,"TrieNode"],[3,"UnionFind"],[3,"WaveletMatrix"],[3,"Dinic"],[3,"FordFulkerson"],[3,"MinCostFlow"],[3,"Vector"],[3,"Line"],[3,"Eps"],[3,"Circle"],[4,"Ordering"],[4,"CCW"],[4,"Hull"],[4,"IntersectCircleLine"],[4,"IntersectCircleSegment"],[4,"IntersectCircles"],[4,"IntersectLineSegment"],[4,"IntersectSegments"],[4,"PointPolygon"],[3,"Directed"],[8,"EdgeTrait"],[3,"Graph"],[3,"Undirected"],[3,"Edge"],[8,"ExactSizeIterator"],[8,"Direction"],[3,"Lowlink"],[4,"NumInf"],[3,"DirectedEulerianTrail"],[3,"UndirectedEulerianTrail"],[3,"FunctionalGraphBuilder"],[3,"FunctionalGraph"],[4,"Kind"],[3,"Group"],[3,"PseudoTreeBuilder"],[3,"PseudoTree"],[4,"Kind"],[3,"SCC"],[3,"WarshallFloyd"],[3,"Dir"],[3,"Position"],[3,"Grid"],[8,"Sized"],[3,"_CumSum"],[3,"_Reject"],[3,"MatrixMod2"],[8,"FF"],[3,"Matrix"],[3,"SquareMatrix"],[8,"MaxFlow"],[3,"BipartiteMatching"],[3,"HopcroftKarp"],[3,"Edge"],[3,"ExtLucas"],[3,"BinomialCoefficient"],[3,"Quotient"],[3,"FactorialTable"],[3,"FactorizeSieve"],[3,"Polynomial"],[3,"PolynomialOperator"],[3,"NTT"],[3,"EratosthenesSieve"],[3,"MillerRabin"],[3,"ClosedInterval"],[3,"Dice"],[3,"ParseResult"],[4,"Elem"],[3,"MulGraph"],[3,"Edge"],[8,"Unsigned"],[3,"HashMap"],[3,"ConstModIntBuilder"],[3,"ModInt"],[3,"ModIntBuilder"],[3,"SumModM"],[3,"ProdModM"],[3,"Montgomery"],[3,"MontgomeryBuilder"],[8,"Neg"],[3,"Rational"],[3,"Totalf64"],[3,"LL1Parser"],[3,"Input"],[8,"Rng"],[8,"SampleUniform"],[8,"TreeEdgeTrait"],[3,"TreeBuilder"],[3,"Tree"],[3,"RootedTreeBuilder"],[3,"TreeEdge"],[3,"TreeNode"],[8,"DoubleEndedIterator"],[3,"AuxiliaryTree"],[3,"Node"],[3,"CentroidDecomposition"],[3,"TreeDepthQuery"],[3,"EulerTour"],[3,"HLD"],[3,"DoublingLCA"],[3,"RerootingDP"],[3,"TreeDP"],[3,"FastIO"],[8,"Display"],[8,"FnOnce"],[3,"NullableUsize"],[8,"Hasher"],[3,"UsizeSet"],[3,"XorShift"],[8,"Times"],[13,"NgOk"],[8,"Foldable"],[8,"Foldable2D"],[8,"Indexable"],[8,"Assignable"],[8,"Updatable"],[8,"CollectVec"],[8,"CumSum"],[8,"JoinStr"],[8,"Reject"],[8,"BellNumber"],[8,"BernoulliNumber"],[8,"CatalanNumber"],[8,"GcdLcm"],[8,"CheckPrime"],[13,"Paren"],[8,"Pow"],[8,"Inv"],[8,"IsNoneOr"],[8,"Transpose"],[8,"YesNo"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
