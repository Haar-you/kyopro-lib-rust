var searchIndex = JSON.parse('{\
"haar_lib":{"doc":"Rust GitHub last commit","t":"AAOOOOAAOAOOAAOOOOAAAAAOOAOAOOAOOAAAAAAAAAAAAAAAAAAAAAAAIQQKKKKKDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIIIIIIIIIIQIIKKKLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFNNNELLFLLLLLLMMDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLMFLLLLMLLLLLFAAAAAAAFFFFFFFENNLLLLLLLFLLLLLLDLLLLLLLLLLLDLLLLLLLLLLLFFDLLLLLLLLLLLLLLAAAAAFFFFFFFFFFFFFFFDLLLLLLLLLLLFFFFFDLLLLLLLLLLLLLLLLLLLLLLLLFDDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLFFFDLLLLLLLLLLDLLLLLLLLLLLAAFFENNLLLLLLLLFLLLLLDLLLLLLLLLLLLLFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADLLLLLLLLLLLLLLLLLLLLSDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDINNELLLLLLLLLLLLLLLLLLLLLLLLLLLLDDCLLLLLLLLLLLLLLLLLLLLLLLLLLDDCLLLLLLLLLLLLLLLLLLLLLLLLLLDCLLLLLLLLLLDCCLLLLLLLLLLLLLDLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLDLLLLLLLLLLLLCDLLLLLLLLLLLLLLLLIDLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLIDLLLLLLLLLLLLIDLLLLLLLLLLLLLLLLLLLLLIDNNELLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLDLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLRDLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLCDLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLIDLLLLLLLLLLLIDLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLINNEDLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLIIIIQQQIQQKKKKKDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLQIKAAKKAKKDLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLDDDDLLLLLLAAALLLLLLLLAMALLLLLLLLAAAAAALLLLLLAAALLLLLLLLLLLLLLMLLAAAAAALLLLLLLLLLLLLLLLALLMLLAMLLLLLLLLLLLLLLLLLLLLLLFFFENNNNNLLFLLLLLLLLLLLLLLLLLFFFFFFENNLLLLFLLFLLLLLLFFFFNENNLLLLLLLLFLLLLLLLLNENNNNLLLLLLLLFLLLLLLLLLLNNNNENNLLLLLLLLLLFLLLLLLLLLLNENNNLLLLLLLLFLLLLLLLLLNENNNLLLLLLLFLLLLLLLLLLNNNELLLLLLLLLLLFLLLLLFDIDIDDQLLAAAAALLLLLLLLAAALLLLLLLLAAAMAALLLLLLKLLLLLMAMLLLLLALAALLAAKLAKLMLLLLLLLLLLLLAAALLLLLLLLAKLMAFCFFCFFFFFAFFFFAADLLLLLLLLLLLLLLDLLLLLLLLLLLLLLNDDENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFDMLLMLLLLLMLMMMLLLLLFFDDLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLFFFFIFSSDDSDSSLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLMMFAAAILDILLLLLLLLLLLILAAAAAAAFFFDLLLLLLLLLLLLLLLLLAADLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAFFAAAAAAAAAAAAAAAADLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFDDLLLLLLLLLLLLLLLLLLLLLLLLLLAAAAAAAFFFFFFFFFFFFDLLLLFLLLMLMMLLLLLFDALALLLALLLLLLLLLLLLLLLLLFAADLLLLLLLLLLFIQKKKFFAAAAAAFFFFFFFFFFFFDLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFAADLLLLLLLLLLIKFFFFFFAAAADLLLLLMLLLLLLMLLLLLDMLLMLLLLLMLMLMLLLLLLLMLLLLFENDNLLLLLLLLMLLLLLLFLLLLLLLLLLMMMAAAAAAAAAIDDLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIIQQQIKKKKKDDLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNENLLLLLLLLLLLLLLLLLLLLLLIIKKDLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLALLLLLLLLLIIIIFDDDDIDQLLLLLLLLLLLLAMLLLLLLLAALLLLLKLLLLLLMAMLLLLLLALLLLLLLLMAKLLAAKLMLLLALLLLLLLLLLLLLLLALLLLLKLMFDLLLLLLLLLLLLDLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLDLLLLLLLLLLFFDLLLLLLLLLLFFFFAAAAAAAAAFFFFFFFFAAAAAAAAAAFDLLLLLLLLLLLLLLLLLLLLLLLDMLMLLLLLLLLLLLLLSDLLLLLLLLLLLLLLLLLLFFQIKDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLIK","n":["algebra","algo","btreemap","btreeset","chmax","chmin","ds","flow","for_loop","geom","get","get_time","graph","grid","hashmap","hashset","impl_algebra","input","iter","linalg","macros","matching","math","max","min","misc","mul_vec","num","rec","sort_with","testtools","timer","trait_alias","traits","tree","typical","utils","action","add_sum","affine","affine_sum","bitand","bitor","bitxor","dihedral","dual","max","min","prod","sum","traits","transform","trivial","tuple","update","update_sum","Action","Lazy","Output","convert","fold","fold_id","update","update_id","AddSum","borrow","borrow_mut","clone","clone_into","convert","default","eq","fmt","fold","fold_id","from","into","new","to_owned","try_from","try_into","type_id","update","update_id","vzip","Affine","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","AffineSum","borrow","borrow_mut","clone","clone_into","convert","default","eq","fmt","fold","fold_id","from","into","new","to_owned","try_from","try_into","type_id","update","update_id","vzip","BitAnd","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","into","new","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","BitOr","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","into","new","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","BitXor","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","id","id","id","id","id","id","into","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","new","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","Dihedral","DihedralValue","R","S","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","id","into","into","inv","new","op","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Dual","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","Max","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","id","id","id","id","id","id","into","new","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","Min","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","id","id","id","id","id","id","into","new","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","Prod","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","id","id","id","id","id","id","id","id","into","new","op","op","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","Sum","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","id","id","id","id","id","id","id","id","into","inv","inv","inv","inv","inv","inv","inv","inv","new","op","op","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","AbelianGroup","AbelianMonoid","AlgeStruct","Associative","BinaryOp","Commutative","Group","Idempotence","Identity","Inverse","Monoid","Output","Semigroup","Times","id","inv","op","times","Composition","Permutation","Transformation","apply","apply","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","from","from","from","id","id","into","into","into","into_inner","into_inner","inv","new","op","op","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Trivial","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","into","inv","op","to_owned","try_from","try_into","type_id","vzip","Tuple2","Tuple3","Tuple4","Tuple5","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","default","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","id","id","id","id","into","into","into","into","inv","inv","inv","inv","op","op","op","op","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","Update","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","UpdateSum","borrow","borrow_mut","clone","clone_into","convert","default","eq","fmt","fold","fold_id","from","into","new","to_owned","try_from","try_into","type_id","update","update_id","vzip","bsearch","bsearch_f","compressor","cycle_finding","edit_distance","enumerate_bitset","golden_search","imos_1d","imos_2d","interval_scheduling","inversion_number","kmp","knapsack","lcs","lis","majority_vote","manacher","max_partial_sum","max_rect","merge","mo","num_subseq","parallel_binary_search","permutation","psp","rle","rolling_hash","sa","shakutori","sliding_window","static_range_freq_query","static_range_inversions_query","subset_sum","ternary_search","two_sat","zalgo","equal_range","lower_bound","upper_bound","AllNg","AllOk","NgOk","SearchResult","borrow","borrow_mut","bsearch_ng_ok","from","into","try_from","try_into","type_id","vzip","ng","ok","Compressor","CompressorBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","compress","decompress","default","extend","from","from","get","index","into","into","new","size","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Rho","borrow","borrow_mut","clone","clone_into","cycle","cycle_finding","eq","fmt","from","into","tail","to_owned","try_from","try_into","type_id","vzip","edit_distance","gray_code","subset_asc","subset_between","subset_desc","subset_size_k","superset_asc","superset_desc","gray_code","subset_asc","subset_between","subset_desc","subset_size_k","super_asc","superset_desc","Convex","Downwards","Upwards","borrow","borrow_mut","clone","clone_into","eq","fmt","from","golden_search","into","to_owned","try_from","try_into","type_id","vzip","Imos1D","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","update","vzip","Imos2D","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","update","vzip","interval_scheduling","inversion_number","KMP","borrow","borrow_mut","clone","clone_into","fmt","from","into","matches","new","to_owned","try_from","try_into","type_id","vzip","limited","small_quantity","small_value","small_weight","unlimited","knapsack_limited","knapsack_small_quantity","knapsack_small_value","knapsack_small_weight","knapsack_unlimited","lcs","lis","majority_vote","manacher","max_partial_sum","max_rect","max_rect_in_histogram","inplace_merge","inplace_merge_by","merge","Mo","add","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","num_subseq","parallel_binary_search","next_permutation","permutations","prev_permutation","PSP","borrow","borrow_mut","clone","clone_into","from","gain_if_blue","gain_if_both_blue","gain_if_both_red","gain_if_red","if_red_then_must_be_red","into","must_be_blue","must_be_red","new","penalty_if_blue","penalty_if_different","penalty_if_red","penalty_if_red_blue","solve","to_owned","try_from","try_into","type_id","vzip","rle","RollingHash","Table","borrow","borrow","borrow_mut","borrow_mut","from","from","hash","hash","hash_table","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","SuffixArray","borrow","borrow_mut","clone","clone_into","fmt","from","index","into","lcp_array","new","to_owned","to_slice","try_from","try_into","type_id","vzip","shakutori","sliding_maximum","sliding_minimum","StaticRangeFreqQuery","borrow","borrow_mut","from","into","new","query","try_from","try_into","type_id","vzip","StaticRangeInversionsQuery","add_query","borrow","borrow_mut","from","into","new","solve","try_from","try_into","type_id","vzip","count","limited","subset_sum","subset_sum_limited","Convex","Downwards","Upwards","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","ternary_search","to_owned","try_from","try_into","type_id","vzip","TwoSat","add_if","add_or","borrow","borrow_mut","from","into","new","not_coexist","solve","try_from","try_into","type_id","vzip","zalgo","binary_trie","bitset","cht","cumulative_sum_1d","cumulative_sum_2d","disjoint_sparse_table","dual_segtree","dynamic_dual_segtree","dynamic_lazy_segtree","dynamic_segtree","fenwick","fenwick_add","fenwick_on_fenwick","foldable_deque","integer_set","interval_heap","lazy_segtree","lazy_segtree_coeff","lazy_skew_heap","li_chao","link_cut_tree","linked_list","merge_sort_tree","multiset","palindromic_tree","partially_persistent_unionfind","persistent_array","persistent_queue","persistent_segtree","persistent_stack","potential_unionfind","qword_tree","range_search_tree","rollbackable_unionfind","rollbackable_vector","segtree","segtree_2d","segtree_beats","segtree_linear_add","segtree_linear_add_range_sum","segtree_on_segtree","skew_heap","sparse_table","splay_tree","starry_sky_tree","succinct_dict","traits","unionfind","wavelet_matrix","BinaryTrie","borrow","borrow_mut","clone","clone_into","count","erase","fmt","from","insert","into","is_empty","len","max","min","new","to_owned","try_from","try_into","type_id","vzip","B_SIZE","Bitset","and_count_ones","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","count_ones","count_zeros","flip","fmt","fmt","from","from","into","len","new","same_size_xor_assign","set","test","to_owned","to_string","try_from","try_into","type_id","vzip","ConvexHullTrick","Elem","Max","Min","Mode","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","from","from","into","into","new","query","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","CumulativeSum1D","CumulativeSum1DBuilder","Group","assign","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","fmt","fold","from","from","index","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","CumulativeSum2D","CumulativeSum2DBuilder","Group","assign","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","fmt","fold_2d","from","from","index","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","DisjointSparseTable","Semigroup","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","vzip","DualSegtree","Monoid","Updatable","borrow","borrow_mut","from","from_vec","get","into","new","to_vec","try_from","try_into","type_id","update","vzip","DynamicDualSegtree","borrow","borrow_mut","clone","clone_into","fmt","from","get","into","new","to_owned","try_from","try_into","type_id","update","vzip","DynamicLazySegtree","borrow","borrow_mut","clone","clone_into","fmt","fold","from","into","new","to_owned","try_from","try_into","type_id","update","vzip","DynamicSegtree","assign","borrow","borrow_mut","fmt","fold","from","into","new","try_from","try_into","type_id","vzip","AbelianGroup","FenwickTree","borrow","borrow_mut","clone","clone_into","default","fold","fold_to","from","into","new","to_owned","try_from","try_into","type_id","update","vzip","Elem","FenwickTreeAdd","add","borrow","borrow_mut","fold","fold_to","from","into","new","sub","try_from","try_into","type_id","vzip","FenwickOnFenwick","FenwickOnFenwickBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","default","fold_2d","fold_to_2d","from","from","into","into","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","FoldableDeque","back","borrow","borrow_mut","fold","from","front","into","is_empty","len","new","pop_back","pop_front","push_back","push_front","try_from","try_into","type_id","vzip","IntegerSet","borrow","borrow_mut","clone","clone_into","contains","default","fmt","from","insert","interval","into","mex","new","remove","to_owned","try_from","try_into","type_id","vzip","IntervalHeap","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","max","min","new","pop_max","pop_min","push","to_owned","try_from","try_into","type_id","vzip","LazySegtree","borrow","borrow_mut","fold","from","into","new","new_with_vec","try_from","try_into","type_id","update","vzip","Elem","LazySegtreeCoeff","borrow","borrow_mut","fold","from","init_with_vec","into","new","try_from","try_into","type_id","update","vzip","Elem","LazySkewHeap","add","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","meld","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","Elem","LiChaoTree","Max","Min","Mode","add_line","add_segment","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","from","from","into","into","new","query","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","LinkCutTree","borrow","borrow_mut","cut","evert","expose","fold","from","get","into","link","new","set","try_from","try_into","type_id","update","vzip","LinkedListPool","Node","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","concat","default","first_of","from","from","into","into","iter","last_of","new","next_of","prev_of","push","riter","split_after","split_before","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value","vzip","vzip","MergeSortTree","borrow","borrow_mut","from","into","new","sum_count_le","try_from","try_into","type_id","vzip","MultiSet","borrow","borrow_mut","clone","clone_into","contains","count","default","first","fmt","from","insert","into","is_empty","last","len","new","pop_first","pop_last","remove","to_owned","try_from","try_into","type_id","vzip","Node","PalindromicTree","borrow","borrow","borrow_mut","borrow_mut","count","default","from","from","index","into","into","len","length","new","node_from_strpos","node_of","parent_of","suffix_link_of","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","At","PartiallyPersistentUnionFind","at","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","is_same","latest","merge","new","root_of","size_of","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","PersistentArray","borrow","borrow_mut","clone","clone_into","from","from","get","into","new","set","to_owned","try_from","try_into","type_id","vzip","PersistentQueue","back","borrow","borrow_mut","default","fmt","from","front","into","is_empty","len","new","pop","push","try_from","try_into","type_id","vzip","PersistentSegtree","assign","borrow","borrow_mut","clone","clone_into","fmt","fold","from","from_vec","into","new","to_owned","try_from","try_into","type_id","vzip","PersistentStack","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","iter","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","PotentialUnionFind","borrow","borrow_mut","count_groups","diff","from","get_groups","into","is_same","merge","new","potential_of","root_of","size_of","try_from","try_into","type_id","vzip","MAX","QwordTree","borrow","borrow_mut","contains","default","erase","erase_unchecked","from","insert","insert_unchecked","into","is_empty","len","max","max_le","min","min_ge","new","try_from","try_into","type_id","vzip","RangeSearchTree","RangeSearchTreeBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","default","from","from","into","into","new","search","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","RollbackableUnionFind","borrow","borrow_mut","from","into","is_same","merge","new","rollback","root_of","size_of","try_from","try_into","type_id","vzip","RollbackableVec","as_slice","assign","borrow","borrow_mut","clone","clone_into","default","first","fmt","from","from","index","into","is_empty","last","len","new","pop","push","rollback","to_owned","try_from","try_into","type_id","vzip","Monoid","Segtree","assign","borrow","borrow_mut","clone","clone_into","fold","from","index","into","new","to_owned","try_from","try_into","type_id","update","vzip","Segtree2D","assign","borrow","borrow_mut","fold_2d","from","get","into","new","try_from","try_into","type_id","update","vzip","SegtreeBeats","add","borrow","borrow_mut","chmax","chmin","clone","clone_into","fmt","from","into","max","min","new","new_with_vec","sum","to_owned","try_from","try_into","type_id","vzip","Elem","SegtreeLinearAdd","borrow","borrow_mut","from","get","into","new","try_from","try_into","type_id","update","vzip","Elem","SegtreeLinearAddRangeSum","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","update","vzip","SegtreeOnSegtree","SegtreeOnSegtreeBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","default","fold_2d","from","from","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","SkewHeap","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","meld","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","SparseTable","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","vzip","SplayTree","borrow","borrow_mut","drop","fold","for_each","from","get","insert","into","is_empty","len","merge_left","merge_right","new","pop_first","pop_last","push_first","push_last","remove","reverse","set","singleton","split","try_from","try_into","type_id","vzip","Elem","Max","Min","Mode","StarrySkyTree","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fold","from","from","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","SuccinctDict","access","borrow","borrow_mut","clone","clone_into","count","from","into","is_empty","len","new","rank","select","to_owned","try_from","try_into","type_id","vzip","Assignable","Foldable","Foldable2D","Indexable","Output","Output","Output","Updatable","Value","Value","assign","fold","fold","get","update","UnionFind","borrow","borrow_mut","count_groups","from","get_groups","into","is_same","merge","new","root_of","size_of","try_from","try_into","type_id","value_of","vzip","with_values","WaveletMatrix","access","borrow","borrow_mut","clone","clone_into","count","from","into","maximum","minimum","new","next_value","prev_value","quantile","range_freq","rank","select","to_owned","try_from","try_into","type_id","vzip","Cap","MaxFlow","add_edge","dinic","ford_fulkerson","get_edges","max_flow","min_cost_flow","new","reset","Dinic","add_edge","borrow","borrow_mut","clone","clone_into","from","get_edges","into","max_flow","new","reset","to_owned","try_from","try_into","type_id","vzip","FordFulkerson","add_edge","borrow","borrow_mut","clone","clone_into","from","get_edges","into","max_flow","new","reset","to_owned","try_from","try_into","type_id","vzip","MinCostFlow","add_edge","borrow","borrow_mut","clone","clone_into","from","into","min_cost_flow","new","to_owned","try_from","try_into","type_id","vzip","Circle","Eps","Line","Vector","abs","abs","abs_sq","add","angle","angle_diff","area_intersection_circle_polygon","area_intersection_circles","area_polygon","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ccw","center","circumcircle","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","closest_pair","common_tangent_circles","convex","convex_cut","convex_diameter","convex_hull","cross","cross","default","default","default","diff","dist_line_point","dist_segment_point","dist_segments","div","dot","dot","eq","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","ge","gt","incircle","intersect_circle_line","intersect_circle_segment","intersect_circles","intersect_line_segment","intersect_segments","into","into","into","into","is_orthogonal","is_parallel","le","lt","mul","ne","new","new","new","normal","normal","partial_cmp","point_in_polygon","polar","projection","radius","reflection","sub","tangent_circle","to","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unit","unit","vzip","vzip","vzip","vzip","area_intersection_circle_polygon","area_intersection_circles","area_polygon","CCW","CLOCKWISE","COUNTER_CLOCKWISE","ONLINE_BACK","ONLINE_FRONT","ON_SEGMENT","borrow","borrow_mut","ccw","clockwise","clone","clone_into","counter_clockwise","eq","fmt","from","into","on_segment","online_back","online_front","to_owned","to_value","try_from","try_into","type_id","vzip","circumcircle","closest_pair","common_tangent_circles","is_convex","convex_cut","convex_diameter","Hull","Lower","Upper","borrow","borrow_mut","clone","clone_into","convex_hull","eq","from","half_hull","into","to_owned","try_from","try_into","type_id","vzip","dist_line_point","dist_segment_point","dist_segments","incircle","CROSSED","IntersectCircleLine","OUTSIDE","TANGENT","borrow","borrow_mut","clone","clone_into","crossed","eq","fmt","from","intersect_circle_line","into","outside","tangent","to_owned","try_from","try_into","type_id","vzip","INSIDE","IntersectCircleSegment","ONE_CROSSPOINT","OUTSIDE","TANGENT","TWO_CROSSPOINTS","borrow","borrow_mut","clone","clone_into","eq","fmt","from","inside","intersect_circle_segment","into","one_crosspoint","outside","tangent","to_owned","try_from","try_into","two_crosspoints","type_id","vzip","CIRCUMSCRIBED","INSCRIBED","INSIDE","INTERSECTED","IntersectCircles","OUTSIDE","SAME","borrow","borrow_mut","circumscribed","clone","clone_into","eq","fmt","from","inscribed","inside","intersect_circles","intersected","into","num_common_tangent","outside","same","to_owned","try_from","try_into","type_id","vzip","CROSSED","IntersectLineSegment","LEFTSIDE","OVERLAPPED","RIGHTSIDE","borrow","borrow_mut","clone","clone_into","crossed","eq","fmt","from","intersect_line_segment","into","leftside","overlapped","rightside","to_owned","try_from","try_into","type_id","vzip","INTERSECTED","IntersectSegments","NOT_INTERSECTED","OVERLAPPED","SAME","borrow","borrow_mut","clone","clone_into","eq","fmt","from","intersect_segments","intersected","into","not_intersected","overlapped","same","to_owned","try_from","try_into","type_id","vzip","EXCLUSION","INCLUSION","ON_SEGMENT","PointPolygon","borrow","borrow_mut","clone","clone_into","eq","exclusion","fmt","from","inclusion","into","on_segment","point_in_polygon","to_owned","try_from","try_into","type_id","vzip","tangent_circle","Directed","Direction","Edge","EdgeTrait","Graph","Undirected","Weight","add","add","articulation_points","bellman_ford","bfs","biconnected","bipartite","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bridges","chinese_postman","chu_liu_edmonds","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cycle","detect_cycle","dijkstra","edges","enumerate_triangles","eulerian","extend","extend","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","functional_graph","index","into","into","into","into","is_empty","kruskal","len","lowlink","max_independent_set","new","new","prim","pseudo_tree","rev","rev","scc","to","to","to","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tsort","tsp","two_edge","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","warshall_floyd","weight","weight","weight","yen","articulation_points","NumInf","bellman_ford","bfs","Lowlink","biconnected","check_bipartite","bridges","chinese_postman_problem","chu_liu_edmonds","directed_shortest","directed_shortest_cycle","detect_cycle","dijkstra","enumerate_triangles","directed","undirected","DirectedEulerianTrail","add_edge","borrow","borrow_mut","clone","clone_into","from","into","new","solve","to_owned","try_from","try_into","type_id","vzip","UndirectedEulerianTrail","add_edge","borrow","borrow_mut","clone","clone_into","from","into","new","solve","to_owned","try_from","try_into","type_id","vzip","Branch","FunctionalGraph","FunctionalGraphBuilder","Kind","Leaf","Loop","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","clone","clone_into","eq","fmt","from","from","from","grp_index_of","into","into","into","kind_of","loops","new","next_of","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","kruskal","Lowlink","back","borrow","borrow_mut","ch","clone","clone_into","fmt","from","into","low","new","ord","par","size","to_owned","try_from","try_into","type_id","vzip","max_independent_set","prim","PseudoTree","PseudoTreeBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","from","from","group_of","into","into","is_in_loop","new","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","SCC","borrow","borrow_mut","from","groups","into","new","to_vec","try_from","try_into","type_id","vzip","tsort","tsp","two_edge_connected_components","warshall_floyd","Elem","yen_algorithm","D","DIR_4","Dir","Grid","L","Position","R","U","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","dx","dy","eq","eq","fmt","fmt","fmt","from","from","from","get","get_mut","into","into","into","iter","iter_mut","mov_strict","new","new","new","to_graph","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","x","y","grid_to_graph","collect","cumsum","join_str","CollectVec","collect_vec","CumSum","IterCumSum","borrow","borrow_mut","cumsum","from","into","into_iter","next","try_from","try_into","type_id","vzip","JoinStr","join_str","mod_2","mod_m","mod_p","determinant","gaussian_elim","inverse","matrix","determinant","gaussian_elim","inverse","MatrixMod2","borrow","borrow_mut","clone","clone_into","from","from_vec_bitset","get","index","into","mul","new","to_owned","transpose","try_from","try_into","type_id","vzip","matrix","square_matrix","Matrix","add","add_assign","borrow","borrow_mut","clone","clone_into","eq","from","from_vec_2d","get_mut","height","index","into","mul","mul_assign","neg","new","sub","sub_assign","to_owned","transpose","try_from","try_into","type_id","vzip","width","SquareMatrix","add","add_assign","borrow","borrow_mut","clone","clone_into","eq","from","from_vec","get_mut","index","into","mul","mul_assign","neg","new","pow","size","straight_mul","strassen_mul","sub","sub_assign","to_owned","transpose","try_from","try_into","type_id","unit","vzip","determinant","inverse","determinant","inverse","chmax","chmin","ds_macros","for_loop","get_time","impl_algebra","io","max","min","mul_vec","rec","sort_with","timer","trait_alias","bi_match","hopcroft_karp","BipartiteMatching","add_edge","borrow","borrow_mut","from","into","matching","new","try_from","try_into","type_id","vzip","Edge","HopcroftKarp","add_edge","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","from","from","get_matching","into","into","matching","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","bell_number","berlekamp_massey","binomial_coefficient","convolution","count_coprime","crt","divisor","enumerate_quotients","ext_gcd","factorial","factorial_prime_factor","factorize","gcd_lcm","linear_congruence","miller_rabin","mod_ops","montmort","multipoint_eval","nim_product","ntt","polynomial","polynomial_taylor_shift","prime_test","primitive_root","sum_floor_linear","sum_of_exponential_times_polynomial_limit","totient","totient_sum","bell_number_table","berlekamp_massey","BinomialCoefficient","ExtLucas","borrow","borrow","borrow_mut","borrow_mut","calc","calc","clone","clone","clone_into","clone_into","from","from","into","into","new","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","conv_and","conv_or","mobius_sub","mobius_super","subset_conv","zeta_sub","zeta_super","convolution_and","convolution_or","fast_mobius_subset","fast_mobius_superset","subset_convolution","fast_zeta_subset","fast_zeta_superset","count_coprime","crt","crt_vec","count_divisors","enumerate_divisors","Quotient","borrow","borrow_mut","clone","clone_into","enumerate_quotients","eq","fmt","from","from","into","q","to","to_owned","try_from","try_into","type_id","vzip","ext_gcd","FactorialTable","bell","bell_number","bernoulli","bernoulli_number","borrow","borrow_mut","catalan","catalan_number","clone","clone_into","comb","facto","fmt","from","h","into","inv_facto","new","perm","to_owned","try_from","try_into","type_id","vzip","factorial_prime_factor","sieve","trial","FactorizeSieve","borrow","borrow_mut","factorize","from","into","new","try_from","try_into","type_id","vzip","factorize","GcdLcm","Output","gcd","gcd_lcm","lcm","linear_congruence","miller_rabin","enum_inv","inv","inv_p","log","pow","sqrt","enumerate_mod_inv","mod_inv","mod_inv_p","mod_log","mod_pow","mod_sqrt","montmort","multipoint_eval","nim_product_16","nim_product_32","nim_product_64","nim_product_8","NTT","borrow","borrow_mut","convolve","from","into","new","try_from","try_into","type_id","vzip","Polynomial","PolynomialOperator","add","add_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","coeff_of","constant","deg","divmod","eq","eval","fmt","from","from","from","get_until","into","into","inv","is_empty","len","mul","mul_assign","new","scale","shrink","sq","sub","sub_assign","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","zero","polynomial_taylor_shift","eratosthenes","traits","EratosthenesSieve","borrow","borrow_mut","from","into","is_prime","new","try_from","try_into","type_id","vzip","CheckPrime","is_prime","primitive_root","sum_floor_linear","sum_of_exponential_times_polynomial_limit","totient","totient_table","totient_sum","closed_interval","dice","paren","parse_paren","ClosedInterval","borrow","borrow_mut","clone","clone_into","default","end","eq","fmt","from","into","merge","new","start","to_owned","try_from","try_into","type_id","vzip","Dice","back","borrow","borrow_mut","bottom","clone","clone_into","eq","fmt","from","front","into","left","new","right","rot_back","rot_clockwise","rot_counterclockwise","rot_front","rot_left","rot_right","to_owned","top","try_from","try_into","type_id","vzip","check_paren","Elem","Paren","ParseResult","Value","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","elems","fmt","fmt","from","from","into","into","parse_paren","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","close","inner","open","arithmetic","const_modint","ff","modint","num_inf","one_zero","rational","total_f64","traits","Arithmetic","ConstModInt","ConstModIntBuilder","add","add_assign","algebra","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","div","div_assign","eq","eq","fmt","fmt","frac","from","from","from_i64","from_u64","into","into","inv","mul","mul_assign","neg","new","one","one_zero","pow","sub","sub_assign","to_owned","to_owned","to_string","to_u32","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","zero","Prod","Sum","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","eq","eq","fmt","fmt","from","from","id","id","into","into","inv","op","op","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","FF","FFElem","Inv","Output","Output","Output","Pow","frac","from_i64","from_u64","inv","pow","ModInt","ModIntBuilder","add","add_assign","algebra","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","div","div_assign","eq","eq","fmt","fmt","fmt","frac","from","from","from_i64","from_u64","into","into","inv","mul","mul_assign","neg","new","new","pow","sub","sub_assign","to_owned","to_owned","to_string","to_u32","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Prod","Sum","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","eq","eq","fmt","fmt","from","from","id","id","into","into","inv","new","new","op","op","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Inf","NegInf","NumInf","Value","add","borrow","borrow_mut","clone","clone_into","cmp","eq","fmt","from","into","is_inf","is_neg_inf","is_value","neg","partial_cmp","sub","to_owned","try_from","try_into","type_id","unwrap","vzip","One","Zero","one","zero","Rational","add","add_assign","borrow","borrow_mut","clone","clone_into","cmp","denominator","div","div_assign","eq","fmt","from","from","into","mul","mul_assign","neg","new","numerator","partial_cmp","sub","sub_assign","to_owned","try_from","try_into","type_id","vzip","Totalf64","add","add_assign","borrow","borrow_mut","clone","clone_into","cmp","default","div","div_assign","eq","fmt","from","into","mul","mul_assign","neg","one","one_zero","partial_cmp","sub","sub_assign","to_owned","try_from","try_into","type_id","vzip","zero","Float","Int","Signed","Unsigned","rand_range","RootedTreeBuilder","Tree","TreeBuilder","TreeEdge","TreeEdgeTrait","TreeNode","Weight","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","centroid","children","clone","clone","clone","clone_into","clone_into","clone_into","default","depth_query","euler_tour","extend","extend","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hld","index","into","into","into","into","into","is_empty","lca","len","neighbors","neighbors_size","new","new","new","nodes","nodes_iter","parent","rerooting","rev","rev","root","rooted_isomorphism","rooting","to","to","to","to_owned","to_owned","to_owned","tree_dp","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","utils","vzip","vzip","vzip","vzip","vzip","weight","weight","weight","centroids","TreeDepthQuery","ancestor","borrow","borrow_mut","children_query","from","into","me_query","new","try_from","try_into","type_id","vzip","EulerTour","borrow","borrow_mut","from","into","new","point_query","subtree_query","try_from","try_into","type_id","vzip","HLD","borrow","borrow_mut","clone","clone_into","fmt","from","get_id","into","lca","new","parent","path_query_edge","path_query_vertex","subtree_query_edge","subtree_query_vertex","to_owned","try_from","try_into","type_id","vzip","DoublingLCA","ancestor","borrow","borrow_mut","from","into","jump","lca","new","try_from","try_into","type_id","vzip","RerootingDP","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","rooted_isomorphism","rooting","TreeDP","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","tree_diameter","tree_distance","tree_height","tree_path","double_sigma","difference","max","prod","range_prod","range_sum","range_xor","sum","xor","sum_of_sum_of_difference","sum_of_sum_of_max","sum_of_sum_of_prod","sum_of_sum_of_range_prod","sum_of_sum_of_range_sum","sum_of_sum_of_range_xor","sum_of_sum_of_sum","sum_of_sum_of_xor","bits","fastio","linear","nullable_usize","range","swap","transpose","usize_set","xor_shift","yesno","highest_one","FastIO","borrow","borrow_mut","drop","from","getc","into","new","peek","read_chars","read_f64","read_i32","read_i64","read_isize","read_u32","read_u64","read_usize","skip","try_from","try_into","type_id","vzip","write","writeln","Linear","a","apply","b","borrow","borrow_mut","clone","clone_into","fmt","from","into","mov_x","to_owned","try_from","try_into","type_id","vzip","NULL","NullableUsize","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","hash","into","is_null","partial_cmp","to_owned","try_from","try_into","type_id","vzip","range_bounds_to_range","swap_vv","Output","Transpose","transpose","UsizeSet","bitand","bitor","bitxor","borrow","borrow_mut","clone","clone_into","cmp","contains","default","difference","eq","fill","flip","fmt","from","from","hash","intersection","into","is_empty","len","partial_cmp","reset","set","sub","symmetric_difference","to_owned","try_from","try_into","type_id","union","vzip","XorShift","borrow","borrow_mut","clone","clone_into","fmt","from","gen","into","new","to_owned","try_from","try_into","type_id","vzip","YesNo","yesno"],"q":[[0,"haar_lib"],[37,"haar_lib::algebra"],[56,"haar_lib::algebra::action"],[64,"haar_lib::algebra::add_sum"],[85,"haar_lib::algebra::affine"],[103,"haar_lib::algebra::affine_sum"],[124,"haar_lib::algebra::bitand"],[152,"haar_lib::algebra::bitor"],[180,"haar_lib::algebra::bitxor"],[232,"haar_lib::algebra::dihedral"],[266,"haar_lib::algebra::dual"],[284,"haar_lib::algebra::max"],[324,"haar_lib::algebra::min"],[364,"haar_lib::algebra::prod"],[408,"haar_lib::algebra::sum"],[460,"haar_lib::algebra::traits"],[478,"haar_lib::algebra::transform"],[532,"haar_lib::algebra::trivial"],[550,"haar_lib::algebra::tuple"],[622,"haar_lib::algebra::update"],[640,"haar_lib::algebra::update_sum"],[661,"haar_lib::algo"],[697,"haar_lib::algo::bsearch"],[700,"haar_lib::algo::bsearch_f"],[713,"haar_lib::algo::bsearch_f::SearchResult"],[715,"haar_lib::algo::compressor"],[749,"haar_lib::algo::cycle_finding"],[766,"haar_lib::algo::edit_distance"],[767,"haar_lib::algo::enumerate_bitset"],[774,"haar_lib::algo::enumerate_bitset::gray_code"],[775,"haar_lib::algo::enumerate_bitset::subset_asc"],[776,"haar_lib::algo::enumerate_bitset::subset_between"],[777,"haar_lib::algo::enumerate_bitset::subset_desc"],[778,"haar_lib::algo::enumerate_bitset::subset_size_k"],[779,"haar_lib::algo::enumerate_bitset::superset_asc"],[780,"haar_lib::algo::enumerate_bitset::superset_desc"],[781,"haar_lib::algo::golden_search"],[798,"haar_lib::algo::imos_1d"],[810,"haar_lib::algo::imos_2d"],[822,"haar_lib::algo::interval_scheduling"],[823,"haar_lib::algo::inversion_number"],[824,"haar_lib::algo::kmp"],[839,"haar_lib::algo::knapsack"],[844,"haar_lib::algo::knapsack::limited"],[845,"haar_lib::algo::knapsack::small_quantity"],[846,"haar_lib::algo::knapsack::small_value"],[847,"haar_lib::algo::knapsack::small_weight"],[848,"haar_lib::algo::knapsack::unlimited"],[849,"haar_lib::algo::lcs"],[850,"haar_lib::algo::lis"],[851,"haar_lib::algo::majority_vote"],[852,"haar_lib::algo::manacher"],[853,"haar_lib::algo::max_partial_sum"],[854,"haar_lib::algo::max_rect"],[856,"haar_lib::algo::merge"],[859,"haar_lib::algo::mo"],[871,"haar_lib::algo::num_subseq"],[872,"haar_lib::algo::parallel_binary_search"],[873,"haar_lib::algo::permutation"],[876,"haar_lib::algo::psp"],[901,"haar_lib::algo::rle"],[902,"haar_lib::algo::rolling_hash"],[924,"haar_lib::algo::sa"],[941,"haar_lib::algo::shakutori"],[942,"haar_lib::algo::sliding_window"],[944,"haar_lib::algo::static_range_freq_query"],[955,"haar_lib::algo::static_range_inversions_query"],[967,"haar_lib::algo::subset_sum"],[969,"haar_lib::algo::subset_sum::count"],[970,"haar_lib::algo::subset_sum::limited"],[971,"haar_lib::algo::ternary_search"],[988,"haar_lib::algo::two_sat"],[1002,"haar_lib::algo::zalgo"],[1003,"haar_lib::ds"],[1052,"haar_lib::ds::binary_trie"],[1073,"haar_lib::ds::bitset"],[1105,"haar_lib::ds::cht"],[1138,"haar_lib::ds::cumulative_sum_1d"],[1167,"haar_lib::ds::cumulative_sum_2d"],[1196,"haar_lib::ds::disjoint_sparse_table"],[1208,"haar_lib::ds::dual_segtree"],[1224,"haar_lib::ds::dynamic_dual_segtree"],[1240,"haar_lib::ds::dynamic_lazy_segtree"],[1256,"haar_lib::ds::dynamic_segtree"],[1269,"haar_lib::ds::fenwick"],[1287,"haar_lib::ds::fenwick_add"],[1302,"haar_lib::ds::fenwick_on_fenwick"],[1333,"haar_lib::ds::foldable_deque"],[1352,"haar_lib::ds::integer_set"],[1372,"haar_lib::ds::interval_heap"],[1394,"haar_lib::ds::lazy_segtree"],[1407,"haar_lib::ds::lazy_segtree_coeff"],[1421,"haar_lib::ds::lazy_skew_heap"],[1444,"haar_lib::ds::li_chao"],[1474,"haar_lib::ds::link_cut_tree"],[1492,"haar_lib::ds::linked_list"],[1529,"haar_lib::ds::merge_sort_tree"],[1540,"haar_lib::ds::multiset"],[1565,"haar_lib::ds::palindromic_tree"],[1593,"haar_lib::ds::partially_persistent_unionfind"],[1618,"haar_lib::ds::persistent_array"],[1634,"haar_lib::ds::persistent_queue"],[1652,"haar_lib::ds::persistent_segtree"],[1669,"haar_lib::ds::persistent_stack"],[1688,"haar_lib::ds::potential_unionfind"],[1706,"haar_lib::ds::qword_tree"],[1729,"haar_lib::ds::range_search_tree"],[1755,"haar_lib::ds::rollbackable_unionfind"],[1770,"haar_lib::ds::rollbackable_vector"],[1796,"haar_lib::ds::segtree"],[1814,"haar_lib::ds::segtree_2d"],[1828,"haar_lib::ds::segtree_beats"],[1849,"haar_lib::ds::segtree_linear_add"],[1862,"haar_lib::ds::segtree_linear_add_range_sum"],[1875,"haar_lib::ds::segtree_on_segtree"],[1902,"haar_lib::ds::skew_heap"],[1923,"haar_lib::ds::sparse_table"],[1934,"haar_lib::ds::splay_tree"],[1962,"haar_lib::ds::starry_sky_tree"],[1989,"haar_lib::ds::succinct_dict"],[2008,"haar_lib::ds::traits"],[2023,"haar_lib::ds::unionfind"],[2041,"haar_lib::ds::wavelet_matrix"],[2064,"haar_lib::flow"],[2074,"haar_lib::flow::dinic"],[2091,"haar_lib::flow::ford_fulkerson"],[2108,"haar_lib::flow::min_cost_flow"],[2123,"haar_lib::geom"],[2239,"haar_lib::geom::area_intersection_circle_polygon"],[2240,"haar_lib::geom::area_intersection_circles"],[2241,"haar_lib::geom::area_polygon"],[2242,"haar_lib::geom::ccw"],[2268,"haar_lib::geom::circumcircle"],[2269,"haar_lib::geom::closest_pair"],[2270,"haar_lib::geom::common_tangent_circles"],[2271,"haar_lib::geom::convex"],[2272,"haar_lib::geom::convex_cut"],[2273,"haar_lib::geom::convex_diameter"],[2274,"haar_lib::geom::convex_hull"],[2291,"haar_lib::geom::dist_line_point"],[2292,"haar_lib::geom::dist_segment_point"],[2293,"haar_lib::geom::dist_segments"],[2294,"haar_lib::geom::incircle"],[2295,"haar_lib::geom::intersect_circle_line"],[2316,"haar_lib::geom::intersect_circle_segment"],[2341,"haar_lib::geom::intersect_circles"],[2369,"haar_lib::geom::intersect_line_segment"],[2392,"haar_lib::geom::intersect_segments"],[2415,"haar_lib::geom::point_in_polygon"],[2436,"haar_lib::geom::tangent_circle"],[2437,"haar_lib::graph"],[2538,"haar_lib::graph::articulation_points"],[2539,"haar_lib::graph::bellman_ford"],[2541,"haar_lib::graph::bfs"],[2542,"haar_lib::graph::biconnected"],[2544,"haar_lib::graph::bipartite"],[2545,"haar_lib::graph::bridges"],[2546,"haar_lib::graph::chinese_postman"],[2547,"haar_lib::graph::chu_liu_edmonds"],[2548,"haar_lib::graph::cycle"],[2549,"haar_lib::graph::cycle::directed_shortest"],[2550,"haar_lib::graph::detect_cycle"],[2551,"haar_lib::graph::dijkstra"],[2552,"haar_lib::graph::enumerate_triangles"],[2553,"haar_lib::graph::eulerian"],[2555,"haar_lib::graph::eulerian::directed"],[2570,"haar_lib::graph::eulerian::undirected"],[2585,"haar_lib::graph::functional_graph"],[2627,"haar_lib::graph::kruskal"],[2628,"haar_lib::graph::lowlink"],[2648,"haar_lib::graph::max_independent_set"],[2649,"haar_lib::graph::prim"],[2650,"haar_lib::graph::pseudo_tree"],[2673,"haar_lib::graph::scc"],[2685,"haar_lib::graph::tsort"],[2686,"haar_lib::graph::tsp"],[2687,"haar_lib::graph::two_edge"],[2688,"haar_lib::graph::warshall_floyd"],[2689,"haar_lib::graph::yen"],[2691,"haar_lib::grid"],[2753,"haar_lib::grid::to_graph"],[2754,"haar_lib::iter"],[2757,"haar_lib::iter::collect"],[2759,"haar_lib::iter::cumsum"],[2772,"haar_lib::iter::join_str"],[2774,"haar_lib::linalg"],[2777,"haar_lib::linalg::mod_2"],[2781,"haar_lib::linalg::mod_2::determinant"],[2782,"haar_lib::linalg::mod_2::gaussian_elim"],[2783,"haar_lib::linalg::mod_2::inverse"],[2784,"haar_lib::linalg::mod_2::matrix"],[2802,"haar_lib::linalg::mod_m"],[2804,"haar_lib::linalg::mod_m::matrix"],[2831,"haar_lib::linalg::mod_m::square_matrix"],[2861,"haar_lib::linalg::mod_p"],[2863,"haar_lib::linalg::mod_p::determinant"],[2864,"haar_lib::linalg::mod_p::inverse"],[2865,"haar_lib::macros"],[2879,"haar_lib::matching"],[2881,"haar_lib::matching::bi_match"],[2893,"haar_lib::matching::hopcroft_karp"],[2919,"haar_lib::math"],[2947,"haar_lib::math::bell_number"],[2948,"haar_lib::math::berlekamp_massey"],[2949,"haar_lib::math::binomial_coefficient"],[2977,"haar_lib::math::convolution"],[2984,"haar_lib::math::convolution::conv_and"],[2985,"haar_lib::math::convolution::conv_or"],[2986,"haar_lib::math::convolution::mobius_sub"],[2987,"haar_lib::math::convolution::mobius_super"],[2988,"haar_lib::math::convolution::subset_conv"],[2989,"haar_lib::math::convolution::zeta_sub"],[2990,"haar_lib::math::convolution::zeta_super"],[2991,"haar_lib::math::count_coprime"],[2992,"haar_lib::math::crt"],[2994,"haar_lib::math::divisor"],[2996,"haar_lib::math::enumerate_quotients"],[3014,"haar_lib::math::ext_gcd"],[3015,"haar_lib::math::factorial"],[3040,"haar_lib::math::factorial_prime_factor"],[3041,"haar_lib::math::factorize"],[3043,"haar_lib::math::factorize::sieve"],[3054,"haar_lib::math::factorize::trial"],[3055,"haar_lib::math::gcd_lcm"],[3060,"haar_lib::math::linear_congruence"],[3061,"haar_lib::math::miller_rabin"],[3062,"haar_lib::math::mod_ops"],[3068,"haar_lib::math::mod_ops::enum_inv"],[3069,"haar_lib::math::mod_ops::inv"],[3070,"haar_lib::math::mod_ops::inv_p"],[3071,"haar_lib::math::mod_ops::log"],[3072,"haar_lib::math::mod_ops::pow"],[3073,"haar_lib::math::mod_ops::sqrt"],[3074,"haar_lib::math::montmort"],[3075,"haar_lib::math::multipoint_eval"],[3076,"haar_lib::math::nim_product"],[3080,"haar_lib::math::ntt"],[3091,"haar_lib::math::polynomial"],[3135,"haar_lib::math::polynomial_taylor_shift"],[3136,"haar_lib::math::prime_test"],[3138,"haar_lib::math::prime_test::eratosthenes"],[3149,"haar_lib::math::prime_test::traits"],[3151,"haar_lib::math::primitive_root"],[3152,"haar_lib::math::sum_floor_linear"],[3153,"haar_lib::math::sum_of_exponential_times_polynomial_limit"],[3154,"haar_lib::math::totient"],[3156,"haar_lib::math::totient_sum"],[3157,"haar_lib::misc"],[3161,"haar_lib::misc::closed_interval"],[3180,"haar_lib::misc::dice"],[3207,"haar_lib::misc::paren"],[3208,"haar_lib::misc::parse_paren"],[3238,"haar_lib::misc::parse_paren::Elem"],[3241,"haar_lib::num"],[3250,"haar_lib::num::arithmetic"],[3251,"haar_lib::num::const_modint"],[3302,"haar_lib::num::const_modint::algebra"],[3337,"haar_lib::num::ff"],[3349,"haar_lib::num::modint"],[3397,"haar_lib::num::modint::algebra"],[3434,"haar_lib::num::num_inf"],[3460,"haar_lib::num::one_zero"],[3464,"haar_lib::num::rational"],[3493,"haar_lib::num::total_f64"],[3522,"haar_lib::num::traits"],[3526,"haar_lib::testtools"],[3527,"haar_lib::tree"],[3625,"haar_lib::tree::centroid"],[3626,"haar_lib::tree::depth_query"],[3639,"haar_lib::tree::euler_tour"],[3651,"haar_lib::tree::hld"],[3672,"haar_lib::tree::lca"],[3685,"haar_lib::tree::rerooting"],[3696,"haar_lib::tree::rooted_isomorphism"],[3697,"haar_lib::tree::rooting"],[3698,"haar_lib::tree::tree_dp"],[3709,"haar_lib::tree::utils"],[3713,"haar_lib::typical"],[3714,"haar_lib::typical::double_sigma"],[3722,"haar_lib::typical::double_sigma::difference"],[3723,"haar_lib::typical::double_sigma::max"],[3724,"haar_lib::typical::double_sigma::prod"],[3725,"haar_lib::typical::double_sigma::range_prod"],[3726,"haar_lib::typical::double_sigma::range_sum"],[3727,"haar_lib::typical::double_sigma::range_xor"],[3728,"haar_lib::typical::double_sigma::sum"],[3729,"haar_lib::typical::double_sigma::xor"],[3730,"haar_lib::utils"],[3740,"haar_lib::utils::bits"],[3741,"haar_lib::utils::fastio"],[3765,"haar_lib::utils::linear"],[3782,"haar_lib::utils::nullable_usize"],[3802,"haar_lib::utils::range"],[3803,"haar_lib::utils::swap"],[3804,"haar_lib::utils::transpose"],[3807,"haar_lib::utils::usize_set"],[3841,"haar_lib::utils::xor_shift"],[3856,"haar_lib::utils::yesno"]],"d":["代数的構造","","","","","","データ構造","フロー問題","","幾何","","","グラフ一般に関するもの","","","","","","","線形代数","macro_exportされたmacro置き場","マッチング問題","数学","","","分類を放置しているもの","","","…","","","","","","木に関するもの","","便利そうなもの置き場","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Range Affine Range Sum用の代数構造","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>AffineSum&lt;T&gt;</code>を生成する。","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","二分探索","","座標圧縮","循環検出法","編集距離","","黄金分割探索","","","区間スケジューリング問題","転倒数","Knuth-Morris-Pratt法","ナップサック問題","最長共通部分列","最長増加部分列","Boyer-Moore majority vote algorithm","","最大連続部分和","","","Mo’s algorithm","相異なる部分列の総数","並列二分探索","","Project Selection Problem","Run Length Encoding","","Suffix Array","尺取り法","スライド最小値","配列に対する範囲頻度取得クエリ","範囲転倒数取得クエリ","部分和問題","三分探索","2-SAT","","lower_bound, upper_boundの組を求める。","x以上となる最小のindexを求める。","xを超える最小のindexを求める。","","","","","","","二分探索","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","<strong>Time complexity O(n log n)</strong>","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","<code>i</code>番目の値を返す。","<code>value</code>が何番目の値(0-index)かを返す。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","<code>cycle_finding</code>の結果","","","","","循環部の長さ","循環検出法","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","先頭の非循環部の長さ","","","","","","編集距離","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","<strong>Time complexity O(n)</strong>","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity O(n)</strong>","","","","<strong>Time complexity O(1)</strong>","","","","","<strong>Time complexity O(nm)</strong>","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity O(nm)</strong>","","","","<strong>Time complexity O(1)</strong>","","…","数列の転倒数を計算する。","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity O(|s|)</strong>","<strong>Time complexity O(|pat|)</strong>","","","","","","","","","","","個数制限付きナップサック問題","要素数が小さいナップサック問題","価値の総和が小さいナップサック問題","容量が小さいナップサック問題","個数制限無しナップサック問題","列a, bの最長共通部分列の一つを求める。","列の最長増加部分列の一つを求める。","Boyer-Moore majority vote algorithm","<strong>Time complexity O(|s|)</strong>","…","…","…","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","返り値<code>ret</code>に対して、<code>ret[i]</code>は<code>a[0..i]</code>…","","","","","Project Selection Problem","","","","","Returns the argument unchanged.","頂点iが青ならばcの利益を得る。","頂点iとjがともに青ならばcの利益を得る。","頂点iとjがともに赤ならばcの利益を得る。","頂点iが赤ならばcの利益を得る。","頂点iが赤ならば、頂点jも赤…","Calls <code>U::from(self)</code>.","頂点iは青でなければならない。","頂点iは赤でなければならない。","","頂点iが青ならばcの損失になる。","頂点iとjが異なる色ならばcの損失となる。","頂点iが赤ならばcの損失になる。","頂点iが赤かつ頂点jが青…","must be制約を破った場合、<code>None</code>…","","","","","","<strong>Time Complexity O(|a|)</strong>","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","尺取り法","","…","…","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time Complexity O(|a|)</strong>","<strong>Time Complexity O(log |a|)</strong>","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity O(n log n)</strong>","","","","","","","","部分和問題 …","…","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","a → b","a ∨ b","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity O(size)</strong>","¬(a ∧ b)","<strong>Time complexity O(size + E)</strong>","","","","","","","","Convex Hull Trick","1次元累積和","2次元累積和","半群の列の区間演算を行う(O(1))","","","動的遅延セグメント木","","","","","","Mexを求められるデータ構造","","","係数乗算付き区間加算区間総和遅延セグ木","遅延加算付き融合可能ヒープ","Li-Chao tree","Link-Cut Tree","連結リスト","Merge-sort Tree","","","部分永続UnionFind","永続配列","永続キュー","永続セグメントツリー","永続スタック","ポテンシャル付きUnionfind","64分木","領域内の点を列挙する","ロールバック可能Unionfind","ロールバック可能Vec","","","Segment Tree Beats","区間一次関数加算セグメントツリー","…","","融合可能ヒープ","冪等性と結合性をもつ列の区間取得(O(1))","Splay Tree","区間加算・区間Max(Min)","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","…","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","…","","","","","","","","","","","","","","","","","","","","","","","Time complexity O(1)","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Time Complexity O(1)","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","","<strong>Time complexity O(log n)</strong>","Calls <code>U::from(self)</code>.","<strong>Time complexity O(n)</strong>","","","","","<strong>Time complexity O(log n)</strong>","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","動的遅延セグメント木","","","","","","範囲<code>s..t</code>で計算を集約する。","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>DynamicLazySegtree&lt;A&gt;</code>を生成する。","","","","","範囲<code>s..t</code>を<code>value</code>で更新する。","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","使用する点を登録する。","","","","","","","","","","","Time Complexity $O(\\\\log ^ 2 n)$","Time Complexity $O(\\\\log ^ 2 n)$","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Time Complexity $O(\\\\log ^ 2 n)$","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","…","","","","","<code>x</code>を含むかを判定","","","Returns the argument unchanged.","<code>x</code>を追加する","<code>x</code>を含む半開区間を返す","Calls <code>U::from(self)</code>.","<code>self</code>に含まれない数のうち<code>x</code>以上で最小のもの","空の<code>IntegerSet</code>を生成","<code>x</code>を削除する","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Link-Cut Tree","","","頂点<code>i</code>と頂点<code>j</code>の間にある辺を削除する。","","","頂点<code>i</code>,<code>j</code>…","Returns the argument unchanged.","頂点<code>k</code>の値を返す。","Calls <code>U::from(self)</code>.","頂点<code>i</code>と頂点<code>j</code>の間に辺を張る。","<code>LinkCutTree&lt;M&gt;</code>を生成する。","頂点<code>k</code>の値を<code>x</code>に変更する。","","","","頂点<code>k</code>の値をモノイドの演算と値<code>x</code>…","","複数の連結リストをまとめたもの","連結リストの内部ノード","","","","","","","","","<code>prev</code>の後ろに<code>next</code>を接続する。","","<code>cur</code>が属する連結リストの先頭を返す。","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>cur</code>から<code>cur</code>…","<code>cur</code>が属する連結リストの末尾を返す。","<code>LinkedListPool</code>を生成する。","<code>cur</code>の次の要素","<code>cur</code>の前の要素","<code>value</code>…","<code>cur</code>から<code>cur</code>…","<code>cur</code>の後ろでリストを切断する。","<code>cur</code>の前でリストを切断する。","","","","","","","","","<code>Node</code>がもつ値","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity O(n log n)</strong>","<code>ub</code>以下の総和を求める","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","時刻tでの状態","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","最新時点の状態","","","","Complexity","","","","","","","","","","","","","","","Returns the argument unchanged.","<strong>Time complexity O(log n)</strong>","Calls <code>U::from(self)</code>.","<strong>Time complexity O(n)</strong>","<strong>Time complexity O(log n)</strong>","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","永続スタック","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","　0 ~ 16777215 (2²⁴ - 1) の値の集合を管理する","","","xを含むかどうかを判定する","","xを集合から削除する","Safety","Returns the argument unchanged.","xを集合に加える","Safety","Calls <code>U::from(self)</code>.","集合が空かどうかを判断する","集合に含まれている要素数を返す","最大値を返す","x以下で最大の値を返す","最小値を返す","x以上で最小の値を返す","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","ロールバック可能Unionfind","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>i</code>と<code>j</code>が同じ素集合に属するかを判定する","<code>i</code>の属する素集合と<code>j</code>…","<code>RollbackableUnionFind</code>を生成する","直前の<code>merge</code>操作を巻き戻す","<code>i</code>の属する素集合の根を返す","<code>i</code>の属する素集合の大きさを返す","","","","","","スライスを返す","","","","","","","先頭の要素を返す","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","末尾の要素を返す","","","","","","","","","","","","","<strong>Time complexity O(log n)</strong>","","","","","<strong>Time complexity O(log n)</strong>","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","<strong>Time complexity O(n)</strong>","","","","","<strong>Time complexity O(log n)</strong>","","","<strong>Time complexity O(log w log h)</strong>","","","<strong>Time complexity O(log w log h)</strong>","Returns the argument unchanged.","<strong>Time complexity O(1)</strong>","Calls <code>U::from(self)</code>.","<strong>Time complexity O(wh)</strong>","","","","<strong>Time complexity O(log w log h)</strong>","","Segment Tree Beats","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","<strong>Time complexity O(log n)</strong>","Calls <code>U::from(self)</code>.","<strong>Time complexity O(n)</strong>","","","","範囲<code>l..r</code>に一次関数<code>ax + b</code>の値を加算する。(<code>x</code>…","","","","","","<strong>Time complexity O(log n)</strong>","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity O(n)</strong>","","","","<strong>Time complexity O(log n)</strong>","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","<strong>Time complexity O(1)</strong>","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity O(n log n)</strong>","","","","","スプレーツリー","","","","<code>start..end</code>…","","Returns the argument unchanged.","<code>index</code>番目の要素の参照を返す","要素を<code>index</code>番目になるように挿入する","Calls <code>U::from(self)</code>.","スプレーツリーが要素を持たなければ<code>true</code>…","スプレーツリーの要素数を返す","左側にスプレーツリーを結合する","右側にスプレーツリーを結合する","モノイド<code>m</code>をもつ<code>SplayTree&lt;M&gt;</code>を生成","先頭の値を削除する","末尾の値を削除する","先頭に値を追加する","末尾に値を追加する","<code>index</code>番目の要素を削除して、値を返す","<code>start..end</code>の範囲を反転させる","<code>index</code>番目の要素を<code>value</code>に変更する","値<code>value</code>をもつノード一つのみからなる…","左側に<code>index</code>…","","","","","","","","","","","","","","","","<strong>Time complexity O(log n)</strong>","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<strong>Time complexity O(n)</strong>","","","","","","","","<strong>Time complexity O(log n)</strong>","","","","","","","","","[l, r) に含まれる<code>b</code>の個数","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","[0, index) に含まれる<code>b</code>の個数","nth(0-indexed)番目の<code>b</code>の位置","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","<code>index</code>番目の値を得る。","","","","","<code>range</code>に含まれる<code>value</code>の個数。","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>range</code>での最大値","<code>range</code>での最小値","","<code>range</code>で<code>lb</code>以上の最小値","<code>range</code>で<code>ub</code>未満の最大値","<code>range</code>でk(0-indexed)番目に小さい値。","<code>range</code>で<code>lb</code>以上<code>ub</code>未満の値の個数","[0, index)に含まれる<code>value</code>の個数。","<code>nth</code>(0-indexed)番目の<code>value</code>の位置。","","","","","","","","","最大流 (Dinic)","最大流 (Ford-Fulkerson)","","","最小費用流","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","円と多角形の共通部分の面積","2つの円の共通部分の面積","多角形の面積","","","","","","","","","点と線分の位置関係","","三角形の外接円","","","","","","","","","最近点対","2つの円の共通接線","凸多角形の判定","凸多角形の直線での切断","凸多角形の直径","凸包","","","","","","","直線と点の距離","線分と点の距離","2つの線分間の距離","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","三角形の内接円","円と直線の位置関係","円と線分の位置関係","2つの円の位置関係","直線と線分の位置関係","2つの線分の位置関係","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","点と多角形の位置関係","","","","","","点を通る円の接線","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","関節点の列挙","負閉路を持つグラフの最短経路 (Bellman-Ford)","","二重頂点連結分解","二部グラフ判定","","","","","","","","","橋の列挙","中国人郵便配達問題","有向グラフ上の最小有向全域木を求める","","","","","","","","","","有向グラフの閉路検出","非負重み付き最短経路 (Dijkstra)","","","(準)Eulerグラフの判定","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","最小全域木 (Kruskal)","","","最大独立集合","","","最小全域木 (Prim)","","","","強連結成分分解","","","","","","","","","","","","","","","","トポロジカルソート","巡回セールスマン問題","二重辺連結成分分解","","","","","","","","","全頂点間最短経路長","","","","","","","","","","","","橋の列挙","<strong>Time complexity O(V²2ⱽ)</strong>","有向グラフ上の最小有向全域木を求める","…","…","","<strong>Time complexity O((E + V) log V)</strong>","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","…","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Kruskal法","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","最大独立集合を求める","Prim法","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","<strong>Time complexity O(V + E)</strong>","","","","","","トポロジカルソート","","","<strong>Time complexity O(n³)</strong>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","グリッドをグラフに変換する","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","任意mod","mod 素数p","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","素数mod p上での行列式を求める。","素数mod p上での逆行列を求める。","","","","","","","","","","","","","","","二部マッチング","二部マッチング (Hopcroft-Karp)","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","中国剰余定理","約数列挙","","拡張ユークリッドの互除法","","a!の素因数pの個数を求める。","","最大公約数・最小公倍数","","","mod mでの演算","","","","","","","","原始根","∑{i=0 → n-1} ⌊(ai+b)/m⌋","∑{i=0 → ∞} rⁱiᵈ","トーシェント関数","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","約数の個数を数える","約数を列挙する","","","","","","1以上N以下の自然数xについて<code>floor(N/x)</code>…","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","n個からk個とりだす組み合わせの個数 (nCk)","nの階乗","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","nの階乗の逆元","<strong>Time complexity O(n)</strong>","n個からk個とりだす順列の個数 (nPk)","","","","","","a!の素因数pの個数を求める。","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","ax + b = 0 (mod m) を満たすxを求める。","","0,1,..,nの素数mod pでの逆元を列挙する。","mod mでの逆元","素数mod pでの逆元","aˣ = b (mod m)を満たすxを求める。","xᵖ (mod m)を求める。","x² = a (mod p)を満たすxを一つ求める。","0,1,..,nの素数mod pでの逆元を列挙する。","mod mでの逆元","素数mod pでの逆元","aˣ = b (mod m)を満たすxを求める。","xᵖ (mod m)を求める。","x² = a (mod p)を満たすxを一つ求める。","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","∑{i=0 → ∞} rⁱiᵈ","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","括弧列が対応が取れているかを調べる","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","正の無限大、負の無限大をもつ数","","有理数","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","乗算についての単位元をもつ","加算についての単位元をもつ","","","","","","","","","","","分母を返す","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","分子を返す","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","浮動小数点型","整数型","符号付きの数値型","非負の数値型","","","","","","","","","","","","","","","","","","","","","重心列挙","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","重軽分解","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","最小共通祖先","","","","","","","","","","全方位木DP","","","","","根付き木に変換","","","","","","","木DP","","","","","","","","","","","","","","","","","","","","","","","","","","Tree depth query","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","重軽分解","","","","","","Returns the argument unchanged.","<strong>Time complexity O(1)</strong>","Calls <code>U::from(self)</code>.","<strong>Time complexity O(log n)</strong>","<strong>Time complexity O(n)</strong>","<strong>Time complexity O(1)</strong>","<strong>Time complexity O(log n)</strong>","演算は可換性を仮定する。","<strong>Time complexity O(1)</strong>","<strong>Time complexity O(1)</strong>","","","","","","","<code>a</code>の<code>n</code>個上の祖先を求める。","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","…","<code>a</code>と<code>b</code>の最小共通祖先を求める。","<strong>Time complexity O(n log n)</strong>","","","","","全方位木DP","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","木DP","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","木の任意の2頂点の距離の最大値を求める。","…","…","…","","2要素の差の絶対値の総和","2要素の最大値の総和","2要素の積の総和","区間積の総和","区間和の総和","区間XORの総和","2要素の和の総和","2要素のXORの総和","2要素の差の絶対値の総和","2要素の最大値の総和","2要素の積の総和","区間積の総和","区間和の総和","区間XORの総和","2要素の和の総和","2要素のXORの総和","","","","","","","","<code>usize</code>を用いた集合表現","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,108,108,108,108,108,108,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,0,34,34,34,35,34,35,34,35,34,35,34,35,34,35,34,35,35,34,35,35,35,35,34,35,34,35,34,35,34,35,34,35,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,38,0,0,37,56,39,264,0,0,0,46,48,46,48,49,46,48,49,46,48,49,46,48,49,46,48,49,46,48,49,46,48,49,49,49,46,48,49,46,48,49,49,49,49,46,48,49,46,46,48,48,49,46,48,49,46,48,49,46,48,49,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,0,0,0,0,52,53,54,55,52,53,54,55,52,53,54,55,52,53,54,55,52,53,54,55,52,53,54,55,52,53,54,55,52,53,54,55,52,53,54,55,52,53,54,55,52,53,54,55,52,53,54,55,52,53,54,55,52,53,54,55,52,53,54,55,52,53,54,55,52,53,54,55,0,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,0,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,64,64,0,64,64,0,64,64,64,64,64,64,265,265,0,0,66,67,66,67,66,66,67,66,67,66,67,67,66,66,67,66,67,67,67,66,66,67,67,66,67,66,67,66,67,66,67,66,0,70,70,70,70,70,0,70,70,70,70,70,70,70,70,70,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,71,71,71,71,71,71,71,71,0,71,71,71,71,71,71,0,73,73,73,73,73,73,73,73,73,73,73,0,75,75,75,75,75,75,75,75,75,75,75,0,0,0,76,76,76,76,76,76,76,76,76,76,76,76,76,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,77,77,77,77,77,77,77,77,77,77,0,0,0,0,0,0,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,0,0,0,81,83,81,83,81,83,81,83,81,81,83,81,81,83,81,83,81,83,81,83,0,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,0,0,0,0,86,86,86,86,86,86,86,86,86,86,0,87,87,87,87,87,87,87,87,87,87,87,0,0,0,0,0,88,88,88,88,88,88,88,88,88,88,0,88,88,88,88,88,0,89,89,89,89,89,89,89,89,89,89,89,89,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,91,0,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,0,0,96,96,0,94,96,94,96,94,96,94,96,94,96,96,94,96,94,96,94,94,94,96,94,96,94,96,94,96,94,96,94,0,0,0,98,98,99,98,99,98,99,99,99,99,98,99,99,98,99,98,99,98,99,98,99,98,99,98,98,99,0,0,0,100,100,101,100,101,100,101,101,101,101,100,101,101,100,101,100,101,100,101,100,101,100,101,100,100,101,0,0,103,103,103,103,103,103,103,103,103,103,0,0,0,106,106,106,106,106,106,106,106,106,106,106,106,106,0,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,0,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,0,110,110,110,110,110,110,110,110,110,110,110,110,0,0,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,0,0,115,115,115,115,115,115,115,115,115,115,115,115,115,0,0,116,116,117,116,117,116,116,117,116,117,116,117,117,116,117,116,117,116,116,117,116,117,116,117,116,117,117,116,117,0,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,0,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,0,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,0,121,121,121,121,121,121,121,121,121,121,121,121,0,0,123,123,123,123,123,123,123,123,123,123,123,123,0,0,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,0,0,129,129,0,127,127,127,129,127,129,129,129,129,129,127,129,127,129,127,127,129,127,129,127,129,127,129,127,129,0,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,0,0,131,132,131,132,131,132,131,132,132,132,132,131,132,131,132,132,132,132,132,132,132,132,132,132,131,132,131,132,131,132,131,132,131,131,132,0,134,134,134,134,134,134,134,134,134,134,0,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,0,0,137,136,137,136,136,136,137,136,136,137,136,137,136,137,137,137,137,137,137,136,137,136,137,136,137,136,0,0,138,138,139,138,139,138,139,138,139,139,138,138,138,139,139,138,139,138,139,138,139,138,139,0,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,0,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,0,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,0,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,0,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,0,0,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,0,0,147,148,147,148,147,147,147,147,147,148,147,148,147,147,148,147,148,147,148,147,148,147,148,147,0,149,149,149,149,149,149,149,149,149,149,149,149,149,149,0,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,0,0,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,0,153,153,153,153,153,153,153,153,153,153,153,153,153,0,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,0,0,156,156,156,156,156,156,156,156,156,156,156,0,0,158,158,158,158,158,158,158,158,158,158,158,0,0,159,160,159,160,159,159,159,159,159,160,160,159,160,159,159,159,160,159,160,159,160,159,160,160,159,0,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,0,164,164,164,164,164,164,164,164,164,164,0,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,0,166,166,0,0,168,166,168,166,166,166,168,168,166,168,166,168,166,168,166,168,166,168,166,168,168,166,0,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,0,0,0,0,266,267,268,0,269,270,269,266,267,268,270,0,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,0,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,214,0,214,0,0,214,214,0,214,214,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,0,174,174,174,174,174,174,174,174,174,174,174,174,174,174,0,0,0,0,175,176,175,175,175,175,0,0,0,177,175,176,178,177,175,176,178,0,178,0,177,175,176,178,177,175,176,178,0,0,0,0,0,0,175,176,175,176,178,176,0,0,0,175,175,176,177,175,176,178,175,176,178,177,175,176,178,176,177,177,0,0,0,0,0,0,177,175,176,178,176,176,177,177,175,177,177,176,178,175,176,177,0,175,176,178,176,175,0,176,177,175,176,178,177,175,176,178,177,175,176,178,177,175,176,178,175,176,177,175,176,178,0,0,0,0,180,180,180,180,180,180,180,0,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,0,0,0,0,0,0,0,181,181,181,181,181,181,0,181,181,0,181,181,181,181,181,181,0,0,0,0,182,0,182,182,182,182,182,182,182,182,182,182,0,182,182,182,182,182,182,182,182,183,0,183,183,183,183,183,183,183,183,183,183,183,183,0,183,183,183,183,183,183,183,183,183,183,184,184,184,184,0,184,184,184,184,184,184,184,184,184,184,184,184,0,184,184,184,184,184,184,184,184,184,184,185,0,185,185,185,185,185,185,185,185,185,185,185,0,185,185,185,185,185,185,185,185,185,186,0,186,186,186,186,186,186,186,186,186,186,0,186,186,186,186,186,186,186,186,186,186,187,187,187,0,187,187,187,187,187,187,187,187,187,187,187,0,187,187,187,187,187,0,0,0,0,0,0,0,189,190,190,0,0,0,0,0,192,191,188,190,192,191,188,190,0,0,0,192,191,188,190,192,191,188,190,0,0,0,190,0,0,190,190,192,191,188,190,189,192,192,191,188,190,192,0,192,192,191,188,190,190,0,190,0,0,192,190,0,0,189,192,0,189,192,192,192,191,188,190,192,191,188,190,192,191,188,190,0,0,0,192,191,188,190,192,191,188,190,0,189,192,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,197,197,197,197,197,197,197,197,197,197,197,197,197,0,198,198,198,198,198,198,198,198,198,198,198,198,198,198,201,0,0,0,201,201,199,199,200,201,199,200,201,199,201,201,201,201,199,200,201,200,199,200,201,200,200,199,200,201,199,200,201,199,200,201,199,200,201,199,200,201,0,0,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,0,0,0,0,202,202,203,202,203,202,202,203,203,202,203,203,202,202,203,202,203,202,203,202,203,0,204,204,204,204,204,204,204,204,204,204,204,0,0,0,0,0,0,205,205,0,0,205,0,205,205,205,206,205,207,206,205,207,206,205,207,206,205,207,206,205,205,205,206,205,206,205,207,206,205,207,207,207,206,205,207,207,207,206,206,205,207,0,206,205,207,206,205,207,206,205,207,206,205,207,206,205,207,206,206,0,0,0,0,0,271,0,0,209,209,272,209,209,209,209,209,209,209,209,0,273,0,0,0,0,0,0,0,0,0,0,0,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,0,0,0,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,0,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,215,215,215,215,215,215,215,215,215,215,215,0,0,216,216,217,216,217,217,217,217,216,217,216,216,217,216,216,217,216,217,216,217,216,217,216,217,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,218,219,218,219,218,219,218,219,218,219,218,219,218,219,218,219,218,219,218,219,218,219,218,219,218,219,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,220,220,220,220,0,220,220,220,220,220,220,220,220,220,220,220,220,0,0,0,221,0,221,221,221,0,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,0,0,0,0,222,222,222,222,222,222,222,222,222,222,0,0,274,274,274,274,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,226,226,226,226,226,226,226,226,226,0,0,225,225,225,223,225,223,223,223,223,223,223,225,223,223,223,225,223,223,223,225,223,225,223,223,225,225,225,225,223,225,225,225,223,225,223,225,223,225,223,225,223,223,0,0,0,0,227,227,227,227,227,227,227,227,227,227,0,275,0,0,0,0,0,0,0,0,0,0,0,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,0,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,0,0,231,0,231,230,231,230,231,230,231,230,231,230,230,231,230,231,230,231,0,230,231,230,231,230,231,230,231,230,231,276,276,276,0,0,0,0,0,0,0,0,0,0,0,0,224,224,0,232,224,232,224,232,224,232,224,232,224,224,224,232,224,224,224,232,232,224,232,232,232,224,224,224,224,224,224,224,0,224,224,224,232,224,224,224,232,224,232,224,232,224,232,224,224,0,0,233,234,233,234,233,234,233,234,233,234,233,234,233,234,233,234,233,234,233,234,233,233,234,233,234,233,234,233,234,233,234,233,234,0,0,0,277,278,211,0,211,211,211,278,277,0,0,235,235,0,236,235,236,235,236,235,236,235,235,235,236,235,236,235,235,236,236,235,236,236,236,235,235,235,235,235,236,235,235,235,235,236,235,235,235,236,235,236,235,236,235,236,235,0,0,237,238,237,238,237,238,237,238,237,238,237,238,237,238,237,238,237,238,237,238,237,237,238,237,238,237,238,237,238,237,238,237,238,237,238,195,195,0,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,0,0,18,5,0,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,0,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,0,241,241,241,241,241,241,241,241,241,0,0,0,0,0,0,0,0,0,0,0,244,245,247,248,249,246,245,247,248,249,246,245,247,0,249,248,249,246,248,249,246,249,0,0,245,247,248,249,246,244,245,247,248,248,249,246,248,0,248,245,247,248,249,246,246,0,246,249,249,245,247,248,246,246,249,0,244,248,246,0,0,244,248,248,248,249,246,0,245,247,248,249,246,245,247,248,249,246,245,247,248,249,246,0,245,247,248,249,246,244,248,248,0,0,251,251,251,251,251,251,251,251,251,251,251,251,0,252,252,252,252,252,252,252,252,252,252,252,0,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,0,254,254,254,254,254,254,254,254,254,254,254,254,0,255,255,255,255,255,255,255,255,255,255,0,0,0,256,256,256,256,256,256,256,256,256,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,0,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,260,0,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,0,0,279,0,279,0,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,0,263,263,263,263,263,263,263,263,263,263,263,263,263,263,0,280],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[]],[[]],[[]],[[]],0,[[]],[[]],[[[3,[2,2]]],[[3,[2,2]]]],[[]],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]],1]],[[],[[3,[9,9]]]],[[[3,[10,10]],[3,[10,10]]],11],[[[3,[12,12]],13],14],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]]]],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]]]],[[]],[[]],[[],3],[[]],[[],15],[[],15],[[],16],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]]]],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]]]],[[]],0,[[]],[[]],[[[17,[2]]],[[17,[2]]]],[[]],[[],[[17,[9]]]],[[[17,[10]],[17,[10]]],11],[[[17,[12]],13],14],[[]],[[[17,[[0,[18,5,19]]]]]],[[]],[[],17],[[[17,[[0,[4,6,19]]]]]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[20,[2]]],[[20,[2]]]],[[]],[[[20,[[0,[4,6,5,18,19,[8,[1]]]]]],1]],[[],[[20,[9]]]],[[[20,[10]],[20,[10]]],11],[[[20,[12]],13],14],[[[20,[[0,[4,6,5,18,19,[8,[1]]]]]]]],[[[20,[[0,[4,6,5,18,19,[8,[1]]]]]]]],[[]],[[]],[[],20],[[]],[[],15],[[],15],[[],16],[[[20,[[0,[4,6,5,18,19,[8,[1]]]]]]]],[[[20,[[0,[4,6,5,18,19,[8,[1]]]]]]]],[[]],0,[[]],[[]],[[[21,[2]]],[[21,[2]]]],[[]],[[],[[21,[9]]]],[[[21,[10]],[21,[10]]],11],[[[21,[12]],13],14],[[]],[[[21,[7]]]],[[[21,[22]]]],[[[21,[23]]]],[[[21,[24]]]],[[[21,[25]]]],[[[21,[1]]]],[[]],[[],21],[[[21,[25]]]],[[[21,[7]]]],[[[21,[23]]]],[[[21,[22]]]],[[[21,[1]]]],[[[21,[24]]]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[26,[2]]],[[26,[2]]]],[[]],[[],[[26,[9]]]],[[[26,[10]],[26,[10]]],11],[[[26,[12]],13],14],[[]],[[[26,[24]]]],[[[26,[25]]]],[[[26,[1]]]],[[[26,[7]]]],[[[26,[22]]]],[[[26,[23]]]],[[]],[[],26],[[[26,[1]]]],[[[26,[25]]]],[[[26,[7]]]],[[[26,[22]]]],[[[26,[24]]]],[[[26,[23]]]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[27,[2]]],[[27,[2]]]],[[]],[[],[[27,[9]]]],[[[27,[10]],[27,[10]]],11],[[[27,[12]],13],14],[[]],[[[27,[22]]]],[[[27,[1]]]],[[[27,[28]]]],[[[27,[29]]]],[[[27,[30]]]],[[[27,[7]]]],[[[27,[31]]]],[[[27,[24]]]],[[[27,[25]]]],[[[27,[32]]]],[[[27,[23]]]],[[[27,[33]]]],[[]],[[[27,[24]]]],[[[27,[1]]]],[[[27,[22]]]],[[[27,[7]]]],[[[27,[30]]]],[[[27,[23]]]],[[[27,[33]]]],[[[27,[32]]]],[[[27,[28]]]],[[[27,[29]]]],[[[27,[25]]]],[[[27,[31]]]],[[],27],[[[27,[1]]]],[[[27,[22]]]],[[[27,[33]]]],[[[27,[31]]]],[[[27,[25]]]],[[[27,[24]]]],[[[27,[30]]]],[[[27,[29]]]],[[[27,[23]]]],[[[27,[28]]]],[[[27,[7]]]],[[[27,[32]]]],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[34,34],[35,35],[[]],[[]],[[34,34],11],[[35,35],11],[[34,13],14],[[35,13],14],[[]],[[]],[35],[[]],[[]],[35],[1,35],[35],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,[[]],[[]],[[[36,[2]]],[[36,[2]]]],[[]],[[],[[36,[9]]]],[[[36,[10]],[36,[10]]],11],[[[36,[12]],13],14],[[]],[[[36,[37]]]],[[]],[38,[[36,[38]]]],[[[36,[39]]]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[40,[2]]],[[40,[2]]]],[[]],[[],[[40,[9]]]],[[[40,[10]],[40,[10]]],11],[[[40,[12]],13],14],[[]],[[[40,[30]]]],[[[40,[32]]]],[[[40,[29]]]],[[[40,[7]]]],[[[40,[22]]]],[[[40,[23]]]],[[[40,[28]]]],[[[40,[1]]]],[[[40,[31]]]],[[[40,[25]]]],[[[40,[33]]]],[[[40,[24]]]],[[]],[[],40],[[[40,[25]]]],[[[40,[32]]]],[[[40,[7]]]],[[[40,[31]]]],[[[40,[29]]]],[[[40,[22]]]],[[[40,[1]]]],[[[40,[24]]]],[[[40,[23]]]],[[[40,[33]]]],[[[40,[30]]]],[[[40,[28]]]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[41,[2]]],[[41,[2]]]],[[]],[[],[[41,[9]]]],[[[41,[10]],[41,[10]]],11],[[[41,[12]],13],14],[[]],[[[41,[30]]]],[[[41,[28]]]],[[[41,[1]]]],[[[41,[31]]]],[[[41,[32]]]],[[[41,[23]]]],[[[41,[29]]]],[[[41,[22]]]],[[[41,[24]]]],[[[41,[25]]]],[[[41,[7]]]],[[[41,[33]]]],[[]],[[],41],[[[41,[25]]]],[[[41,[7]]]],[[[41,[32]]]],[[[41,[33]]]],[[[41,[22]]]],[[[41,[31]]]],[[[41,[30]]]],[[[41,[28]]]],[[[41,[29]]]],[[[41,[1]]]],[[[41,[23]]]],[[[41,[24]]]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[42,[2]]],[[42,[2]]]],[[]],[[],[[42,[9]]]],[[[42,[10]],[42,[10]]],11],[[[42,[12]],13],14],[[]],[[[42,[24]]]],[[[42,[28]]]],[[[42,[29]]]],[[[42,[33]]]],[[[42,[22]]]],[[[42,[7]]]],[[[42,[23]]]],[[[42,[43]]]],[[[42,[31]]]],[[[42,[25]]]],[[[42,[44]]]],[[[42,[32]]]],[[[42,[30]]]],[[[42,[1]]]],[[]],[[],42],[[[42,[33]]]],[[[42,[28]]]],[[[42,[29]]]],[[[42,[32]]]],[[[42,[44]]]],[[[42,[7]]]],[[[42,[25]]]],[[[42,[1]]]],[[[42,[43]]]],[[[42,[23]]]],[[[42,[31]]]],[[[42,[30]]]],[[[42,[22]]]],[[[42,[24]]]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[45,[2]]],[[45,[2]]]],[[]],[[],[[45,[9]]]],[[[45,[10]],[45,[10]]],11],[[[45,[12]],13],14],[[]],[[[45,[43]]]],[[[45,[22]]]],[[[45,[25]]]],[[[45,[1]]]],[[[45,[44]]]],[[[45,[33]]]],[[[45,[31]]]],[[[45,[32]]]],[[[45,[24]]]],[[[45,[7]]]],[[[45,[30]]]],[[[45,[23]]]],[[[45,[29]]]],[[[45,[28]]]],[[]],[[[45,[31]]]],[[[45,[43]]]],[[[45,[32]]]],[[[45,[30]]]],[[[45,[28]]]],[[[45,[44]]]],[[[45,[29]]]],[[[45,[33]]]],[[],45],[[[45,[28]]]],[[[45,[44]]]],[[[45,[33]]]],[[[45,[32]]]],[[[45,[29]]]],[[[45,[1]]]],[[[45,[7]]]],[[[45,[23]]]],[[[45,[25]]]],[[[45,[24]]]],[[[45,[22]]]],[[[45,[30]]]],[[[45,[31]]]],[[[45,[43]]]],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[7],0,0,0,[[46,[47,[2]]],[[47,[2]]]],[[48,[47,[2]]],[[47,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[46,46],[48,48],[[[49,[2]]],[[49,[2]]]],[[]],[[]],[[]],[[46,46],11],[[48,48],11],[[[49,[10]],[49,[10]]],11],[[46,13],14],[[48,13],14],[[[49,[12]],13],14],[[]],[[]],[[]],[[[49,[46]]]],[[[49,[48]]]],[[]],[[]],[[]],[46,[[47,[1]]]],[48,[[47,[1]]]],[[[49,[48]]]],[1,49],[[[49,[46]]]],[[[49,[48]]]],[[]],[[]],[[]],[[],15],[[[47,[1]]],[[50,[46]]]],[[[47,[1]]],[[50,[48]]]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[]],[[]],[[]],0,[[]],[[]],[51,51],[[]],[[],51],[[51,51],11],[[51,13],14],[[]],[51],[[]],[51],[51],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[52,[2,2]]],[[52,[2,2]]]],[[[53,[2,2,2]]],[[53,[2,2,2]]]],[[[54,[2,2,2,2]]],[[54,[2,2,2,2]]]],[[[55,[2,2,2,2,2]]],[[55,[2,2,2,2,2]]]],[[]],[[]],[[]],[[]],[[],[[52,[9,9]]]],[[],[[53,[9,9,9]]]],[[],[[54,[9,9,9,9]]]],[[],[[55,[9,9,9,9,9]]]],[[[52,[10,10]],[52,[10,10]]],11],[[[53,[10,10,10]],[53,[10,10,10]]],11],[[[54,[10,10,10,10]],[54,[10,10,10,10]]],11],[[[55,[10,10,10,10,10]],[55,[10,10,10,10,10]]],11],[[[52,[12,12]],13],14],[[[53,[12,12,12]],13],14],[[[54,[12,12,12,12]],13],14],[[[55,[12,12,12,12,12]],13],14],[[]],[[]],[[]],[[]],[[[52,[37,37]]]],[[[53,[37,37,37]]]],[[[54,[37,37,37,37]]]],[[[55,[37,37,37,37,37]]]],[[]],[[]],[[]],[[]],[[[52,[56,56]]]],[[[53,[56,56,56]]]],[[[54,[56,56,56,56]]]],[[[55,[56,56,56,56,56]]]],[[[52,[39,39]]]],[[[53,[39,39,39]]]],[[[54,[39,39,39,39]]]],[[[55,[39,39,39,39,39]]]],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[]],0,[[]],[[]],[[[57,[2]]],[[57,[2]]]],[[]],[[],[[57,[9]]]],[[[57,[10]],[57,[10]]],11],[[[57,[12]],13],14],[[]],[57],[[]],[[],57],[57],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[58,[2,2]]],[[58,[2,2]]]],[[]],[[[58,[[0,[4,5,[8,[[0,[6,[8,[7]]]]]]]],[0,[6,[8,[7]]]]]],1]],[[],[[58,[9,9]]]],[[[58,[10,10]],[58,[10,10]]],11],[[[58,[12,12]],13],14],[[[58,[[0,[4,5,[8,[[0,[6,[8,[7]]]]]]]],[0,[6,[8,[7]]]]]]]],[[[58,[[0,[4,5,[8,[[0,[6,[8,[7]]]]]]]],[0,[6,[8,[7]]]]]]]],[[]],[[]],[[],58],[[]],[[],15],[[],15],[[],16],[[[58,[[0,[4,5,[8,[[0,[6,[8,[7]]]]]]]],[0,[6,[8,[7]]]]]]]],[[[58,[[0,[4,5,[8,[[0,[6,[8,[7]]]]]]]],[0,[6,[8,[7]]]]]]]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[59],[59,1],[59,1],0,0,0,0,[[]],[[]],[[[0,[19,60,4,61,62,[8,[25]]]],[0,[19,60,4,61,62,[8,[25]]]],63],[[64,[[0,[19,60,4,61,62,[8,[25]]]]]]]],[[]],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,[[[66,[[0,[59,65]]]],[0,[59,65]]]],[[]],[[]],[[]],[[]],[[[66,[[0,[59,65]]]]],[[67,[[0,[59,65]]]]]],[[[67,[2]]],[[67,[2]]]],[[[66,[2]]],[[66,[2]]]],[[]],[[]],[[[67,[[0,[59,65]]]],68],69],[[[67,[[0,[59,65]]]],68],69],[[],[[66,[9]]]],[[[66,[[0,[59,65]]]],68]],[[]],[[]],[[[67,[[0,[59,65]]]],1],[[0,[59,65]]]],[[[67,[[0,[59,65]]]],[0,[59,65]]],1],[[]],[[]],[[],[[66,[[0,[59,65]]]]]],[[[67,[[0,[59,65]]]]],1],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,[[]],[[]],[70,70],[[]],0,[[[0,[19,65]],63],70],[[70,70],11],[[70,13],14],[[]],[[]],0,[[]],[[],15],[[],15],[[],16],[[]],[[],1],0,0,0,0,0,0,0,[23,69],[23,69],[[23,23],69],[23,69],[[23,23],69],[[23,23],69],[[23,23],69],0,0,0,[[]],[[]],[71,71],[[]],[[71,71],11],[[71,13],14],[[]],[[44,44,71,1,63],44],[[]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[73,[[0,[19,72,5,4,61]]]]],[[47,[[0,[19,72,5,4,61]]]]]],[[]],[[]],[1,[[73,[[0,[19,72,5,4,61]]]]]],[[],15],[[],15],[[],16],[[[73,[[0,[19,72,5,4,61]]]],[74,[1]],[0,[19,72,5,4,61]]]],[[]],0,[[]],[[]],[[[75,[[0,[19,72,5,4,61]]]]],[[47,[[47,[[0,[19,72,5,4,61]]]]]]]],[[]],[[]],[[1,1],[[75,[[0,[19,72,5,4,61]]]]]],[[],15],[[],15],[[],16],[[[75,[[0,[19,72,5,4,61]]]],[74,[1]],[74,[1]],[0,[19,72,5,4,61]]]],[[]],[[],[[47,[1]]]],[[],7],0,[[]],[[]],[[[76,[2]]],[[76,[2]]]],[[]],[[[76,[12]],13],14],[[]],[[]],[[[76,[10]]],[[47,[1]]]],[[[47,[10]]],[[76,[10]]]],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,[1,[[0,[9,[8,[1]],19,59,4,6]]]],[[[0,[9,19,4,59]]],[[0,[9,19,4,59]]]],[7,1],[1,[[0,[9,19,59,4]]]],[1,[[0,[9,19,59,4]]]],[[],[[47,[[0,[19,10]]]]]],[[],[[47,[1]]]],[[],50],[[],[[47,[1]]]],[[],50],[[[0,[19,10]]],1],[[]],[1],[1],[[[47,[[0,[59,19]]]],[47,[[0,[59,19]]]]],[[47,[[0,[59,19]]]]]],0,[[77,1,1]],[[]],[[]],[[]],[[]],[[1,1,[78,[63]],[78,[63]],[78,[63]],[78,[63]],[78,[63]]],77],[77],[[],15],[[],15],[[],16],[[]],[7,[[47,[7]]]],[[1,1,79,79,79],[[47,[1]]]],[[],11],[[[47,[[0,[59,19]]]]],69],[[],11],0,[[]],[[]],[80,80],[[]],[[]],[[80,1,7]],[[80,1,1,7]],[[80,1,1,7]],[[80,1,7]],[[80,1,1]],[[]],[[80,1]],[[80,1]],[1,80],[[80,1,7]],[[80,1,1,7]],[[80,1,7]],[[80,1,1,7]],[80,[[50,[30]]]],[[]],[[],15],[[],15],[[],16],[[]],[[],47],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[81,82],7],[[83,[74,[1]]],7],[[81,82],83],[[]],[[]],[[1,7,7],81],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,[[]],[[]],[84,84],[[]],[[84,13],14],[[]],[[84,1]],[[]],[84,[[47,[1]]]],[82,84],[[]],[84],[[],15],[[],15],[[],16],[[]],[[1,79,63,79,79]],[1,[[47,[[0,[59,19]]]]]],[1,[[47,[[0,[59,19]]]]]],0,[[]],[[]],[[]],[[]],[[[47,[[0,[85,65]]]]],[[86,[[0,[85,65]]]]]],[[[86,[[0,[85,65]]]],[74,[1]],[0,[85,65]]],1],[[],15],[[],15],[[],16],[[]],0,[[87,[74,[1]]]],[[]],[[]],[[]],[[]],[[],87],[87,[[47,[7]]]],[[],15],[[],15],[[],16],[[]],0,0,[[1,1],[[47,[[0,[19,[8,[1]],4]]]]]],[[1,1],[[47,[11]]]],0,0,0,[[]],[[]],[88,88],[[]],[[88,88],11],[[88,13],14],[[]],[[]],[[44,44,88,1,63],44],[[]],[[],15],[[],15],[[],16],[[]],0,[[89,33,33]],[[89,33,33]],[[]],[[]],[[]],[[]],[1,89],[[89,33,33]],[89,[[50,[[47,[11]]]]]],[[],15],[[],15],[[],16],[[]],[[],[[47,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[90,90],[[]],[[90,7],1],[[90,7],[[50,[1]]]],[[90,13],14],[[]],[[90,7],1],[[]],[90,11],[90,1],[[90,7],[[50,[7]]]],[[90,7],[[50,[7]]]],[1,90],[[]],[[],15],[[],15],[[],16],[[]],0,0,[[91,91],23],[[91,91]],[[91,91]],[[91,91]],[[91,91]],[[91,91]],[[91,91]],[[]],[[]],[91,91],[[]],[91,23],[91,23],[[91,1]],[[91,13],14],[[91,13],14],[[[47,[11]]],91],[[]],[[]],[91,1],[1,91],[[91,91]],[[91,1,11]],[[91,1],11],[[]],[[],92],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,[[[94,[93]],[95,[93]]]],[[]],[[]],[[]],[[]],[96,96],[[[94,[2]]],[[94,[2]]]],[[]],[[]],[[96,96],11],[[96,13],14],[[[94,[12]],13],14],[[]],[[]],[[]],[[]],[96,[[94,[93]]]],[[[94,[93]],93],93],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,0,0,[[[98,[97]],1,19]],[[]],[[]],[[]],[[]],[[[98,[97]]],[[99,[97]]]],[[[99,[[0,[2,97]]]]],[[99,[[0,[2,97]]]]]],[[]],[[[99,[[0,[12,97]]]],13],14],[[[99,[97]],[74,[1]]],19],[[]],[[]],[[[99,[97]],1]],[[]],[[]],[[1,97],[[98,[97]]]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[[98,[97]],1,19]],[[]],[[]],0,0,0,[[[100,[97]],1,1,19]],[[]],[[]],[[]],[[]],[[[100,[97]]],[[101,[97]]]],[[[101,[[0,[2,97]]]]],[[101,[[0,[2,97]]]]]],[[]],[[[101,[[0,[12,97]]]],13],14],[[[101,[97]],[74,[1]],[74,[1]]],19],[[]],[[]],[[[101,[97]]]],[[]],[[]],[[1,1,97],[[100,[97]]]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[[100,[97]],1,1,19]],[[]],[[]],0,0,[[]],[[]],[[[103,[102]],[104,[1]]],[[50,[2]]]],[[]],[[]],[[[47,[2]],102],[[103,[102]]]],[[],15],[[],15],[[],16],[[]],0,0,0,[[]],[[]],[[]],[[[106,[105]]]],[[[106,[105]],1],2],[[]],[[1,105],[[106,[105]]]],[[[106,[105]]],[[47,[2]]]],[[],15],[[],15],[[],16],[[[106,[105]],[104,[1]],2]],[[]],0,[[]],[[]],[[[107,[[0,[2,105]]]]],[[107,[[0,[2,105]]]]]],[[]],[[[107,[[0,[12,105]]]],13],14],[[]],[[[107,[105]],1],2],[[]],[105,[[107,[105]]]],[[]],[[],15],[[],15],[[],16],[[[107,[105]],[74,[1]],2]],[[]],0,[[]],[[]],[[[109,[[0,[2,108]]]]],[[109,[[0,[2,108]]]]]],[[]],[[[109,[[0,[12,108]]]],13],14],[[[109,[[0,[108,19]]]],[74,[1]]]],[[]],[[]],[[[0,[108,19]]],[[109,[[0,[108,19]]]]]],[[]],[[],15],[[],15],[[],16],[[[109,[[0,[108,19]]]],[74,[1]]]],[[]],0,[[[110,[105]],1,2]],[[]],[[]],[[[110,[[0,[12,105]]]],13],14],[[[110,[105]],[74,[1]]],2],[[]],[[]],[105,[[110,[105]]]],[[],15],[[],15],[[],16],[[]],0,0,[[]],[[]],[[[112,[[0,[2,111]]]]],[[112,[[0,[2,111]]]]]],[[]],[[],[[112,[[0,[9,111]]]]]],[[[112,[111]],[74,[1]]],2],[[[112,[111]],[113,[1]]],2],[[]],[[]],[[1,111],[[112,[111]]]],[[]],[[],15],[[],15],[[],16],[[[112,[111]],1,2]],[[]],0,0,[[[115,[114]],1,114]],[[]],[[]],[[[115,[114]],[74,[1]]],114],[[[115,[114]],[113,[1]]],114],[[]],[[]],[1,[[115,[114]]]],[[[115,[114]],1,114]],[[],15],[[],15],[[],16],[[]],0,0,[[116,30,30]],[[]],[[]],[[]],[[]],[[116,19],[[117,[19]]]],[116,116],[[[117,[2]]],[[117,[2]]]],[[]],[[]],[[],116],[[[117,[[0,[19,4,61]]]],[74,[30]],[74,[30]]],[[0,[19,4,61]]]],[[[117,[[0,[19,4,61]]]],[113,[30]],[113,[30]]],[[0,[19,4,61]]]],[[]],[[]],[[]],[[]],[[],116],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[[117,[[0,[19,4,61]]]],30,30,[0,[19,4,61]]]],[[]],[[]],0,[[[118,[102]]],[[50,[2]]]],[[]],[[]],[[[118,[102]]],[[50,[2]]]],[[]],[[[118,[102]]],[[50,[2]]]],[[]],[[[118,[102]]],11],[[[118,[102]]],1],[102,[[118,[102]]]],[[[118,[102]]],[[50,[2]]]],[[[118,[102]]],[[50,[2]]]],[[[118,[102]],2]],[[[118,[102]],2]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[119,119],[[]],[[119,7],11],[[],119],[[119,13],14],[[]],[[119,7]],[[119,7],50],[[]],[[119,7],7],[[],119],[[119,7]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[120,[2]]],[[120,[2]]]],[[]],[[],[[120,[9]]]],[[[120,[12]],13],14],[[]],[[]],[[[120,[59]]],11],[[[120,[59]]],1],[[[120,[59]]],[[50,[59]]]],[[[120,[59]]],[[50,[59]]]],[[],[[120,[59]]]],[[[120,[59]]],[[50,[59]]]],[[[120,[59]]],[[50,[59]]]],[[[120,[59]],59]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[121,[[0,[19,108]]]],[104,[1]]]],[[]],[[]],[[1,[0,[19,108]]],[[121,[[0,[19,108]]]]]],[[47,[0,[19,108]]],[[121,[[0,[19,108]]]]]],[[],15],[[],15],[[],16],[[[121,[[0,[19,108]]]],[104,[1]]]],[[]],0,0,[[]],[[]],[[[123,[122]],[104,[1]]],122],[[]],[[[123,[122]],[47,[122]]]],[[]],[[1,[47,[122]]],[[123,[122]]]],[[],15],[[],15],[[],16],[[[123,[122]],[104,[1]],122]],[[]],0,0,[[[125,[124]],124]],[[]],[[]],[[[125,[2]]],[[125,[2]]]],[[]],[[],[[125,[9]]]],[[[125,[12]],13],14],[[]],[[]],[[[125,[124]]],11],[[[125,[124]]],1],[[[125,[124]],[125,[124]]]],[[],[[125,[124]]]],[[[125,[124]]],[[50,[124]]]],[[[125,[124]]],[[50,[124]]]],[[[125,[124]],124]],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,[[[127,[126]],[95,[126]]]],[[[127,[126]],[95,[126]],[128,[126]]]],[[]],[[]],[[]],[[]],[129,129],[[]],[[129,129],11],[[129,13],14],[[]],[[]],[[]],[[]],[[[47,[126]],129],[[127,[126]]]],[[[127,[126]],126],[[50,[126]]]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,[[]],[[]],[[[130,[[0,[105,19]]]],1,1]],[[[130,[[0,[105,19]]]],1]],[[[130,[[0,[105,19]]]],1]],[[[130,[[0,[105,19]]]],1,1],2],[[]],[[[130,[[0,[105,19]]]],1],2],[[]],[[[130,[[0,[105,19]]]],1,1]],[[[0,[105,19]],1],[[130,[[0,[105,19]]]]]],[[[130,[[0,[105,19]]]],1,2]],[[],15],[[],15],[[],16],[[[130,[[0,[105,19]]]],1,2]],[[]],0,0,[[]],[[]],[[]],[[]],[[[131,[2]]],[[131,[2]]]],[[[132,[2]]],[[132,[2]]]],[[]],[[]],[[132,1,1],11],[[],[[132,[9]]]],[[132,1],1],[[]],[[]],[[]],[[]],[[132,1],69],[[132,1],1],[[],132],[[132,1],[[50,[1]]]],[[132,1],[[50,[1]]]],[132],[[132,1],69],[[132,1]],[[132,1]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],0,[[]],[[]],0,[[]],[[]],[[]],[[]],[[[47,[[0,[19,2,5,4,133,60,59]]]]],[[134,[[0,[19,2,5,4,133,60,59]]]]]],[[[134,[[0,[19,2,5,4,133,60,59]]]],[104,[1]],[0,[19,2,5,4,133,60,59]]]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[135,[2]]],[[135,[2]]]],[[]],[[[135,[[0,[59,65,2]]]],[0,[59,65,2]]],11],[[[135,[[0,[59,65,2]]]],[0,[59,65,2]]],1],[[],[[135,[9]]]],[[[135,[[0,[59,65,2]]]]],[[50,[[0,[59,65,2]]]]]],[[[135,[12]],13],14],[[]],[[[135,[[0,[59,65,2]]]],[0,[59,65,2]]]],[[]],[[[135,[[0,[59,65,2]]]]],11],[[[135,[[0,[59,65,2]]]]],[[50,[[0,[59,65,2]]]]]],[[[135,[[0,[59,65,2]]]]],1],[[],[[135,[[0,[59,65,2]]]]]],[[[135,[[0,[59,65,2]]]]],[[50,[[0,[59,65,2]]]]]],[[[135,[[0,[59,65,2]]]]],[[50,[[0,[59,65,2]]]]]],[[[135,[[0,[59,65,2]]]],[0,[59,65,2]]],11],[[]],[[],15],[[],15],[[],16],[[]],0,0,[[]],[[]],[[]],[[]],[136,1],[[],136],[[]],[[]],[136,1],[[]],[[]],[137,1],[136,33],[82,137],[[137,1],[[50,[136]]]],[[137,1],[[50,[136]]]],[[137,1],[[50,[136]]]],[[137,1],[[50,[136]]]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,0,[[138,1],139],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[139,1,1],11],[138,139],[[138,1,1]],[1,138],[[139,1],1],[[139,1],1],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,[[]],[[]],[[[140,[2]]],[[140,[2]]]],[[]],[[[47,[2]]],[[140,[2]]]],[[]],[[[140,[2]],1],[[141,[2]]]],[[]],[[1,2],[[140,[2]]]],[[[140,[2]],1,2],[[140,[2]]]],[[]],[[],15],[[],15],[[],16],[[]],0,[142,50],[[]],[[]],[[],[[142,[9]]]],[[[142,[12]],13],14],[[]],[142,50],[[]],[142,11],[142,1],[[],142],[142,[[50,[142]]]],[142,142],[[],15],[[],15],[[],16],[[]],0,[[[143,[[0,[105,2]]]],1,2],[[143,[[0,[105,2]]]]]],[[]],[[]],[[[143,[[0,[2,105]]]]],[[143,[[0,[2,105]]]]]],[[]],[[[143,[[0,[12,105]]]],13],14],[[[143,[[0,[105,2]]]],[104,[1]]],2],[[]],[[[47,[2]],[0,[105,2]]],[[143,[[0,[105,2]]]]]],[[]],[[1,[0,[105,2]]],[[143,[[0,[105,2]]]]]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[144,[2]]],[[144,[2]]]],[[]],[[],[[144,[9]]]],[[[144,[12]],13],14],[[]],[[]],[144,69],[[],144],[144,50],[144,[[50,[144]]]],[144,144],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[145,[[0,[5,4,61,19]]]]],1],[[[145,[[0,[5,4,61,19]]]],1,1],[[50,[[0,[5,4,61,19]]]]]],[[]],[[[145,[[0,[5,4,61,19]]]]],[[47,[[47,[1]]]]]],[[]],[[[145,[[0,[5,4,61,19]]]],1,1],11],[[[145,[[0,[5,4,61,19]]]],1,1,[0,[5,4,61,19]]],1],[1,[[145,[[0,[5,4,61,19]]]]]],[[[145,[[0,[5,4,61,19]]]],1],[[0,[5,4,61,19]]]],[[[145,[[0,[5,4,61,19]]]],1],1],[[[145,[[0,[5,4,61,19]]]],1],1],[[],15],[[],15],[[],16],[[]],0,0,[[]],[[]],[[146,23],11],[[],146],[[146,23],11],[[146,23]],[[]],[[146,23],11],[[146,23]],[[]],[146,11],[146,1],[146,[[50,[23]]]],[[146,23],[[50,[23]]]],[146,[[50,[23]]]],[[146,23],[[50,[23]]]],[[],146],[[],15],[[],15],[[],16],[[]],0,0,[[[147,[[0,[19,59]]]],[0,[19,59]],[0,[19,59]]]],[[]],[[]],[[]],[[]],[[[147,[[0,[19,59]]]]],[[148,[[0,[19,59]]]]]],[[[147,[2]]],[[147,[2]]]],[[]],[[],[[147,[9]]]],[[]],[[]],[[]],[[]],[[],[[147,[[0,[19,59]]]]]],[[[148,[[0,[19,59]]]]],47],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,[[]],[[]],[[]],[[]],[[149,1,1],11],[[149,1,1],1],[1,149],[149,11],[[149,1],1],[[149,1],1],[[],15],[[],15],[[],16],[[]],0,[[[150,[2]]]],[[[150,[2]],1,2]],[[]],[[]],[[[150,[2]]],[[150,[2]]]],[[]],[[],[[150,[9]]]],[[[150,[2]]],[[50,[2]]]],[[[150,[12]],13],14],[[]],[47,150],[[150,1]],[[]],[[[150,[2]]],11],[[[150,[2]]],[[50,[2]]]],[[[150,[2]]],1],[[],[[150,[2]]]],[[[150,[2]]],[[50,[2]]]],[[[150,[2]],2]],[[[150,[2]]],11],[[]],[[],15],[[],15],[[],16],[[]],0,0,[[[151,[105]],1,2]],[[]],[[]],[[[151,[[0,[2,105]]]]],[[151,[[0,[2,105]]]]]],[[]],[[[151,[105]],[104,[1]]],2],[[]],[[[151,[105]],1]],[[]],[[1,105],[[151,[105]]]],[[]],[[],15],[[],15],[[],16],[[[151,[105]],1,2]],[[]],0,[[[153,[[0,[105,152]]]],1,1,2]],[[]],[[]],[[[153,[[0,[105,152]]]],[74,[1]],[74,[1]]],2],[[]],[[[153,[[0,[105,152]]]],1,1],2],[[]],[[1,1,[0,[105,152]]],[[153,[[0,[105,152]]]]]],[[],15],[[],15],[[],16],[[[153,[[0,[105,152]]]],1,1,2]],[[]],0,[[154,[104,[1]],30]],[[]],[[]],[[154,[104,[1]],30]],[[154,[104,[1]],30]],[154,154],[[]],[[154,13],14],[[]],[[]],[[154,[104,[1]]],30],[[154,[104,[1]]],30],[1,154],[[[47,[30]]],154],[[154,[104,[1]]],30],[[]],[[],15],[[],15],[[],16],[[]],0,0,[[]],[[]],[[]],[[[156,[155]],1],155],[[]],[1,[[156,[155]]]],[[],15],[[],15],[[],16],[[[156,[155]],[104,[1]],[95,[155]]]],[[]],0,0,[[]],[[]],[[[158,[157]],[104,[1]]],157],[[]],[[]],[1,[[158,[157]]]],[[],15],[[],15],[[],16],[[[158,[157]],[104,[1]],[95,[157]]]],[[]],0,0,[[159,30,30]],[[]],[[]],[[]],[[]],[[159,[0,[105,2]]],[[160,[[0,[105,2]]]]]],[159,159],[[]],[[],159],[[[160,[105]],[74,[30]],[74,[30]]],2],[[]],[[]],[[]],[[]],[[],159],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[[160,[105]],30,30,2]],[[]],[[]],0,[[]],[[]],[[[161,[2]]],[[161,[2]]]],[[]],[[],[[161,[9]]]],[[[161,[12]],13],14],[[]],[[]],[[[161,[59]]],11],[[[161,[59]]],1],[[[161,[59]],[161,[59]]]],[[],[[161,[59]]]],[[[161,[59]]],[[50,[59]]]],[[[161,[59]]],[[50,[59]]]],[[[161,[59]],59]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[164,[[0,[39,162,163]]]],[104,[1]]],[[50,[[0,[2,9]]]]]],[[]],[[]],[[[47,[[0,[2,9]]]],[0,[39,162,163]]],[[164,[[0,[39,162,163]]]]]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[165,[105]]]],[[[165,[[0,[105,19]]]],[74,[1]]],2],[[[165,[[0,[105,19]]]],79]],[[]],[[[165,[[0,[105,19]]]],1],[[50,[2]]]],[[[165,[[0,[105,19]]]],1,2]],[[]],[[[165,[[0,[105,19]]]]],11],[[[165,[[0,[105,19]]]]],1],[[[165,[[0,[105,19]]]],[165,[[0,[105,19]]]]]],[[[165,[[0,[105,19]]]],[165,[[0,[105,19]]]]]],[[[0,[105,19]]],[[165,[[0,[105,19]]]]]],[[[165,[[0,[105,19]]]]],[[50,[2]]]],[[[165,[[0,[105,19]]]]],[[50,[2]]]],[[[165,[[0,[105,19]]]],2]],[[[165,[[0,[105,19]]]],2]],[[[165,[[0,[105,19]]]],1],[[50,[2]]]],[[[165,[[0,[105,19]]]],[74,[1]]]],[[[165,[[0,[105,19]]]],1,2]],[[[0,[105,19]],2],[[165,[[0,[105,19]]]]]],[[[165,[[0,[105,19]]]],1]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[166,166],[[]],[[[168,[167]],[104,[1]]],[[50,[167]]]],[[]],[[]],[[]],[[]],[[1,166],[[168,[167]]]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[[168,[167]],[104,[1]],167]],[[]],[[]],0,[[169,1],7],[[]],[[]],[169,169],[[]],[[169,[74,[1]],11],1],[[]],[[]],[169,11],[169,1],[[[47,[11]]],169],[[169,1,11],1],[[169,1,11],[[50,[1]]]],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[170,1],[[]],[170,[[47,[[47,[1]]]]]],[[]],[[170,1,1],11],[[170,1,1],1],[1,170],[[170,1],1],[[170,1],1],[[],15],[[],15],[[],16],[[170,1],50],[[]],[[1,47,[78,[63]]],170],0,[[171,1],7],[[]],[[]],[171,171],[[]],[[171,[104,[1]],7],1],[[]],[[]],[[171,[104,[1]]],[[50,[7]]]],[[171,[104,[1]]],[[50,[7]]]],[[[47,[7]]],171],[[171,[0,[[104,[1]],2]],7],[[50,[7]]]],[[171,[0,[[104,[1]],2]],7],[[50,[7]]]],[[171,[104,[1]],1],[[50,[7]]]],[[171,[0,[[104,[1]],2]],7,7],1],[[171,1,7],1],[[171,1,7],[[50,[1]]]],[[]],[[],15],[[],15],[[],16],[[]],0,0,[[1,1]],0,0,[1,47],[[1,1]],0,[1],[[]],0,[[172,1,1]],[[]],[[]],[172,172],[[]],[[]],[[172,1],47],[[]],[[172,1,1]],[1,172],[172],[[]],[[],15],[[],15],[[],16],[[]],0,[[173,1,1]],[[]],[[]],[173,173],[[]],[[]],[[173,1],47],[[]],[[173,1,1]],[1,173],[173],[[]],[[],15],[[],15],[[],16],[[]],0,[[174,1,1,7,30]],[[]],[[]],[174,174],[[]],[[]],[[]],[[174,1,1,7],[[15,[30]]]],[1,174],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,[175,44],[176,44],[175,44],[[175,175],175],[[175,175],44],[[175,175],44],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[177,177],[175,175],[176,176],[178,178],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[175,175],44],[[176,176],44],[[],175],[[],176],[[],178],[176,175],0,0,0,[[175,44],175],[[175,175],44],[[176,176],44],[[177,44,44],11],[[175,175,177],11],[[176,176,177],11],[[178,178,177],11],[[175,13],14],[[176,13],14],[[178,13],14],[[]],[[]],[[]],[[]],0,[[177,44,44],11],[[177,44,44],11],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[176,176,177],11],[[176,176,177],11],[[177,44,44],11],[[177,44,44],11],[[175,44],175],[[177,44,44],11],[44,177],[[175,175],176],[[175,44],178],[175,175],[176,175],[[177,44,44],[[50,[179]]]],0,[[44,44],175],[[176,175],175],0,[[176,175],175],[[175,175],175],0,0,[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[175,175],[176,175],[[]],[[]],[[]],[[]],[[178,177],44],[[178,178,177],44],[[],44],0,0,0,0,0,0,[[]],[[]],[[175,175,175,177],180],[180,11],[180,180],[[]],[180,11],[[180,180],11],[[180,13],14],[[]],[[]],[180,11],[180,11],[180,11],[[]],[180,32],[[],15],[[],15],[[],16],[[]],[[175,175,175],178],[[[47,[175]],177],50],[[178,178,177],[[47,[175]]]],[177,11],[[176,177]],[[],44],0,0,0,[[]],[[]],[181,181],[[]],[[[47,[175]],177],[[47,[175]]]],[[181,181],11],[[]],[[[47,[175]],181,177],[[47,[175]]]],[[]],[[]],[[],15],[[],15],[[],16],[[]],[[176,175],44],[[176,175],44],[[176,176],44],[[175,175,175],178],0,0,0,0,[[]],[[]],[182,182],[[]],[182,11],[[182,182],11],[[182,13],14],[[]],[[178,176,177]],[[]],[182,11],[182,11],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,0,[[]],[[]],[183,183],[[]],[[183,183],11],[[183,13],14],[[]],[183,11],[[178,176,177]],[[]],[183,11],[183,11],[183,11],[[]],[[],15],[[],15],[183,11],[[],16],[[]],0,0,0,0,0,0,0,[[]],[[]],[184,11],[184,184],[[]],[[184,184],11],[[184,13],14],[[]],[184,11],[184,11],[[178,178,177]],[184,11],[[]],[184,[[50,[23]]]],[184,11],[184,11],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,[[]],[[]],[185,185],[[]],[185,11],[[185,185],11],[[185,13],14],[[]],[[176,176,177]],[[]],[185,11],[185,11],[185,11],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,[[]],[[]],[186,186],[[]],[[186,186],11],[[186,13],14],[[]],[[176,176,177]],[186,11],[[]],[186,11],[186,11],[186,11],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,[[]],[[]],[187,187],[[]],[[187,187],11],[187,11],[[187,13],14],[[]],[187,11],[[]],[187,11],[[175,177],187],[[]],[[],15],[[],15],[[],16],[[]],[[178,175,177],[[47,[175]]]],0,0,0,0,0,0,0,[[[190,[188,[0,[189,2]]]],[0,[189,2]]]],[[[190,[191,[0,[189,2]]]],[0,[189,2]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[192,[2,2]]],[[192,[2,2]]]],[191,191],[188,188],[[[190,[2,2]]],[[190,[2,2]]]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[[190,[188,[0,[189,2]]]],68]],[[[190,[191,[0,[189,2]]]],68]],[[[192,[12,12]],13],14],[[191,13],14],[[188,13],14],[[[190,[12,12]],13],14],[[],1],[[[192,[2]]],1],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[190,11],0,[190,1],0,0,[[1,1],192],[1,[[190,[193,[0,[189,2]]]]]],0,0,[[]],[[[192,[2]]],[[192,[2]]]],0,[[],1],[[[192,[2]]],1],0,[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],0,0,0,[[],16],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[]],0,[[]],[[[192,[2]]]],0,0,[194,[[47,[1]]]],0,[[[190,[193,189]],1],[[47,[[195,[[0,[19,59,9,4]]]]]]]],[[[190,[193,189]],68],[[47,[[50,[1]]]]]],0,[194,47],[[[190,[188,189]]],[[47,[50]]]],[194,47],[[[190,[188,189]]],[[0,[19,59,4,5]]]],[[[190,[191,189]],1],[[47,[189]]]],0,[[[190,[191,189]],1],[[50,[[47,[189]]]]]],[[[190,[193,189]]],[[50,[[47,[189]]]]]],[[[190,[193,189]]],[[47,[[50,[[0,[4,19,59,5,196]]]]]]]],[[[190,[188,189]]],47],0,0,0,[[[197,[[0,[189,2]]]],[0,[189,2]]]],[[]],[[]],[[[197,[[0,[2,189]]]]],[[197,[[0,[2,189]]]]]],[[]],[[]],[[]],[1,[[197,[[0,[189,2]]]]]],[[[197,[[0,[189,2]]]]],50],[[]],[[],15],[[],15],[[],16],[[]],0,[[[198,[[0,[189,2]]]],[0,[189,2]]]],[[]],[[]],[[[198,[[0,[2,189]]]]],[[198,[[0,[2,189]]]]]],[[]],[[]],[[]],[1,[[198,[[0,[189,2]]]]]],[[[198,[[0,[189,2]]]]],50],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,0,[[199,1,1]],[[]],[[]],[[]],[[]],[[]],[[]],[199,200],[201,201],[[]],[[201,201],11],[[201,13],14],[[]],[[]],[[]],[[200,1],1],[[]],[[]],[[]],[[200,1],201],[200,[[47,[[47,[1]]]]]],[1,199],[[200,1],1],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[[190,[188,189]]],[[50,[[47,[189]]]]]],0,0,[[]],[[]],0,[194,194],[[]],[[194,13],14],[[]],[[]],0,[[[190,[188,189]]],194],0,0,0,[[]],[[],15],[[],15],[[],16],[[]],[[[190,[188,189]]],[[47,[1]]]],[[[190,[188,189]]],[[50,[[47,[189]]]]]],0,0,[[202,1,1]],[[]],[[]],[[]],[[]],[202,203],[[]],[[]],[[203,1],1],[[]],[[]],[[203,1],11],[1,202],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,[[]],[[]],[[]],[204,[[47,[[47,[1]]]]]],[[]],[[[190,[191,189]]],204],[204,[[47,[1]]]],[[],15],[[],15],[[],16],[[]],[[[190,[191,189]]],[[50,[[47,[1]]]]]],[[[190,[191,189]],1],[[50,[[0,[19,59,4]]]]]],[194,[[47,[[47,[1]]]]]],[[[190,[193,189]]],[[50,[[47,[[47,[[50,[[0,[19,59,4,5]]]]]]]]]]]],0,[[[190,[193,189]],1,1,1],[[47,[50]]]],0,0,0,0,0,0,0,0,[[205,205],205],[[]],[[]],[[]],[[]],[[]],[[]],[206,206],[205,205],[[[207,[2]]],[[207,[2]]]],[[]],[[]],[[]],[[],206],[[],205],0,0,[[206,206],11],[[205,205],11],[[206,13],14],[[205,13],14],[[[207,[12]],13],14],[[]],[[]],[[]],[[207,206]],[[207,206]],[[]],[[]],[[]],[207,69],[207,69],[[206,205,1,1],[[50,[206]]]],[[1,1],206],[[33,33],205],[68,207],0,[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[]],[[]],[[]],0,0,[[1,1,63,63],[[190,[191,[192,[2]]]]]],0,0,0,0,[208,47],0,0,[[]],[[]],[[208,19,79],[[209,[208,19,79]]]],[[]],[[]],[[]],[[[209,[69,19,79]]],50],[[],15],[[],15],[[],16],[[]],0,[[208,82],92],0,0,0,0,0,0,0,[[[47,[91]]],7],[[[47,[91]]]],[[[47,[91]]],[[50,[[47,[91]]]]]],0,[[]],[[]],[210,210],[[]],[[]],[[[47,[91]]],210],[[210,1,1],[[50,[23]]]],[[210,1]],[[]],[[210,210]],[[1,1],210],[[]],[210,210],[[],15],[[],15],[[],16],[[]],0,0,0,[[[212,[211]],[212,[211]]],[[212,[211]]]],[[[212,[211]],[212,[211]]]],[[]],[[]],[[[212,[[0,[2,211]]]]],[[212,[[0,[2,211]]]]]],[[]],[[[212,[[0,[10,211]]]],[212,[[0,[10,211]]]]],11],[[]],[[[47,[[47,[23]]]],211],[[212,[211]]]],[[[212,[211]],1,1],50],[[[212,[211]]],1],[[[212,[211]],1]],[[]],[[[212,[211]],[212,[211]]],[[212,[211]]]],[[[212,[211]],[212,[211]]]],[[[212,[211]]],[[212,[211]]]],[[1,1,211],[[212,[211]]]],[[[212,[211]],[212,[211]]],[[212,[211]]]],[[[212,[211]],[212,[211]]]],[[]],[[[212,[211]]],[[212,[211]]]],[[],15],[[],15],[[],16],[[]],[[[212,[211]]],1],0,[[[213,[211]],[213,[211]]],[[213,[211]]]],[[[213,[211]],[213,[211]]]],[[]],[[]],[[[213,[[0,[2,211]]]]],[[213,[[0,[2,211]]]]]],[[]],[[[213,[[0,[10,211]]]],[213,[[0,[10,211]]]]],11],[[]],[[[47,[[47,[23]]]],211],[[213,[211]]]],[[[213,[211]],1,1],50],[[[213,[211]],1]],[[]],[[[213,[211]],[213,[211]]],[[213,[211]]]],[[[213,[211]],[213,[211]]]],[[[213,[211]]],[[213,[211]]]],[[1,211],[[213,[211]]]],[[[213,[211]],7],[[213,[211]]]],[[[213,[211]]],1],[[[213,[211]],[213,[211]]],[[213,[211]]]],[[[213,[211]],[213,[211]]],[[213,[211]]]],[[[213,[211]],[213,[211]]],[[213,[211]]]],[[[213,[211]],[213,[211]]]],[[]],[[[213,[211]]],[[213,[211]]]],[[],15],[[],15],[[],16],[[1,211],[[213,[211]]]],[[]],0,0,[[[47,[[47,[7]]]],7],7],[[[47,[[47,[7]]]],7],[[50,[[47,[[47,[7]]]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[215,[214]],1,1]],[[]],[[]],[[]],[[]],[[[215,[214]]],7],[[1,1],[[215,[214]]]],[[],15],[[],15],[[],16],[[]],0,0,[[216,1,1]],[[]],[[]],[[]],[[]],[217,217],[[]],[[217,13],14],[[]],[[]],[216,47],[[]],[[]],[216,23],[[1,1],216],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,211],[[47,[47]]]],[[[47,[23]],211],47],0,0,[[]],[[]],[[]],[[]],[[218,7,7],7],[[219,7,7],7],[218,218],[219,219],[[]],[[]],[[]],[[]],[[]],[[]],[[7,7],218],[7,219],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,0,0,0,0,0,0,[[[47,[[0,[19,4,61,6]]]],[47,[[0,[19,4,61,6]]]]],[[47,[[0,[19,4,61,6]]]]]],[[[47,[[0,[19,4,61,6]]]],[47,[[0,[19,4,61,6]]]]],[[47,[[0,[19,4,61,6]]]]]],[[]],[[]],[[[47,[[0,[19,9,4,61,6]]]],[47,[[0,[19,9,4,61,6]]]]],[[47,[[0,[19,9,4,61,6]]]]]],[[]],[[]],[[7,7],7],[[],50],[[],50],[7,7],[7,[[47,[7]]]],0,[[]],[[]],[220,220],[[]],[7,[[47,[220]]]],[[220,220],11],[[220,13],14],[[]],0,[[]],0,0,[[]],[[],15],[[],15],[[],16],[[]],[[7,7]],0,0,[[[221,[211]],1,1]],0,[[[221,[211]],1],47],[[]],[[]],0,[[[221,[211]],1]],[[[221,[[0,[2,211]]]]],[[221,[[0,[2,211]]]]]],[[]],[[[221,[211]],1,1]],[[[221,[211]],1]],[[[221,[[0,[12,211]]]],13],14],[[]],[[[221,[211]],1,1]],[[]],[[[221,[211]],1]],[[1,211],[[221,[211]]]],[[[221,[211]],1,1]],[[]],[[],15],[[],15],[[],16],[[]],[[7,7],7],0,0,0,[[]],[[]],[[222,1],[[47,[1]]]],[[]],[[]],[1,222],[[],15],[[],15],[[],16],[[]],[7,47],0,0,[[]],[[]],[[]],[[30,30,7],[[50,[30]]]],[7,11],0,0,0,0,0,0,[[1,7],[[47,[7]]]],[[7,7],[[50,[7]]]],[[7,7],7],[[7,7,7],[[50,[7]]]],[[7,7,7],7],[[7,7],[[50,[7]]]],[[1,7],[[47,[7]]]],[[223,[47,[224]],225],[[47,[224]]]],[[24,24],24],[[23,23],23],[[7,7],7],[[25,25],25],0,[[]],[[]],[[226,[47,[224]],[47,[224]]],[[47,[224]]]],[[]],[[]],[[23,1],226],[[],15],[[],15],[[],16],[[]],0,0,[[225,223,223],223],[[225,223,223]],[[]],[[]],[[]],[[]],[223,223],[[]],[[223,1],224],[224,223],[223,[[50,[1]]]],[[225,223,223]],[[223,223],11],[[223,224],224],[[223,13],14],[[]],[[]],[[[47,[224]]],223],[[223,1],223],[[]],[[]],[[225,223,1],223],[223,11],[223,1],[[225,223,223],223],[[225,223,223]],[226,225],[[225,223,224],223],[223],[[225,223],223],[[225,223,223],223],[[225,223,223]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],[[],223],[[[47,[224]],224,226],[[47,[224]]]],0,0,0,[[]],[[]],[[]],[[]],[[227,1],11],[1,227],[[],15],[[],15],[[],16],[[]],0,[[],11],[7,[[50,[7]]]],[[7,7,7,7],7],[[7,7,7],7],[7,7],[1,[[47,[7]]]],[[7,7],7],0,0,0,0,0,[[]],[[]],[[[228,[2]]],[[228,[2]]]],[[]],[[],[[228,[9]]]],0,[[[228,[10]],[228,[10]]],11],[[[228,[12]],13],14],[[]],[[]],[[[228,[[0,[59,10,19]]]],[228,[[0,[59,10,19]]]]],[[15,[[228,[[0,[59,10,19]]]]]]]],[[],228],0,[[]],[[],15],[[],15],[[],16],[[]],0,0,[[]],[[]],0,[[[229,[2]]],[[229,[2]]]],[[]],[[[229,[10]],[229,[10]]],11],[[[229,[12]],13],14],[[]],0,[[]],0,[[2,2,2,2,2,2],[[229,[2]]]],0,[[[229,[2]]],[[229,[2]]]],[[[229,[2]]],[[229,[2]]]],[[[229,[2]]],[[229,[2]]]],[[[229,[2]]],[[229,[2]]]],[[[229,[2]]],[[229,[2]]]],[[[229,[2]]],[[229,[2]]]],[[]],0,[[],15],[[],15],[[],16],[[]],[[68,[0,[19,65]],[0,[19,65]]],11],0,0,0,0,[[]],[[]],[[]],[[]],[[[230,[2]]],[[230,[2]]]],[[[231,[2]]],[[231,[2]]]],[[]],[[]],0,[[[230,[12]],13],14],[[[231,[12]],13],14],[[]],[[]],[[]],[[]],[[68,[0,[19,65,12]],[0,[19,65,12]]],[[50,[[230,[[0,[19,65,12]]]]]]]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[224,224],224],[[224,224]],0,[[]],[[]],[[]],[[]],[232,232],[224,224],[[]],[[]],[[],232],[[],224],[[224,224],224],[[224,224]],[[232,232],11],[[224,224],11],[[224,13],14],[[224,13],14],[[232,30,30]],[[]],[[]],[[232,30]],[[232,7]],[[]],[[]],[224,224],[[224,224],224],[[224,224]],[224,224],[23,224],[[],224],0,[[224,7],224],[[224,224],224],[[224,224]],[[]],[[]],[[],92],[224,23],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],[[],224],0,0,[[]],[[]],[[]],[[]],[233,233],[234,234],[[]],[[]],[[],233],[[],234],[[233,233],11],[[234,234],11],[[233,13],14],[[234,13],14],[[]],[[]],[233],[234],[[]],[[]],[233],[233],[234],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,0,0,0,0,0,0,[[30,30]],[30],[7],[[]],[7],0,0,[[235,235],235],[[235,235]],0,[[]],[[]],[[]],[[]],[236,236],[235,235],[[]],[[]],[[235,235],235],[[235,235]],[[236,236],11],[[235,235],11],[[236,13],14],[[235,13],14],[[235,13],14],[[236,30,30]],[[]],[[]],[[236,30]],[[236,7]],[[]],[[]],[235],[[235,235],235],[[235,235]],[235,235],[23,236],[[23,23],235],[[235,7]],[[235,235],235],[[235,235]],[[]],[[]],[[],92],[235,23],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[237,237],[238,238],[[]],[[]],[[],237],[[],238],[[237,237],11],[[238,238],11],[[237,13],14],[[238,13],14],[[]],[[]],[237],[238],[[]],[[]],[237],[23,237],[23,238],[237],[238],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,0,0,0,[[[195,[4]],[195,[4]]],[[195,[4]]]],[[]],[[]],[[[195,[2]]],[[195,[2]]]],[[]],[[[195,[59]],[195,[59]]],179],[[[195,[10]],[195,[10]]],11],[[[195,[12]],13],14],[[]],[[]],[[[195,[19]]],11],[[[195,[19]]],11],[[[195,[19]]],11],[[[195,[239]]],[[195,[239]]]],[[[195,[60]],[195,[60]]],[[50,[179]]]],[[[195,[61]],[195,[61]]],[[195,[61]]]],[[]],[[],15],[[],15],[[],16],[[[195,[19]]],19],[[]],0,0,[[]],[[]],0,[[240,240],240],[[240,240]],[[]],[[]],[240,240],[[]],[[240,240],179],[240,30],[[240,240],240],[[240,240]],[[240,240],11],[[240,13],14],[30,240],[[]],[[]],[[240,240],240],[[240,240]],[240,240],[[30,30],240],[240,30],[[240,240],[[50,[179]]]],[[240,240],240],[[240,240]],[[]],[[],15],[[],15],[[],16],[[]],0,[[241,241]],[[241,241]],[[]],[[]],[241,241],[[]],[[241,241],179],[[],241],[[241,241]],[[241,241]],[[241,241],11],[[241,13],14],[[]],[[]],[[241,241]],[[241,241]],[241],[[],241],0,[[241,241],[[50,[179]]]],[[241,241]],[[241,241]],[[]],[[],15],[[],15],[[],16],[[]],[[],241],0,0,0,0,[[242,[74,[[0,[243,60,2]]]]],[[74,[[0,[243,60,2]]]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[245,[[0,[244,2]]]]],[[246,[[0,[244,2]]]]]],[[[247,[[0,[244,2]]]]],[[246,[[0,[244,2]]]]]],0,0,[[[248,[2,2]]],[[248,[2,2]]]],[[[249,[2]]],[[249,[2]]]],[[[246,[2]]],[[246,[2]]]],[[]],[[]],[[]],[[],[[249,[9]]]],0,0,[[[245,[[0,[244,2]]]],68]],[[[247,[[0,[244,2]]]],68]],[[[248,[12,12]],13],14],[[[249,[12]],13],14],[[[246,[12]],13],14],[[],1],[[]],[[]],[[]],[[[248,[2]]],1],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[246,11],0,[246,1],[[[249,[244]]],250],[[[249,[244]]],1],[1,[[245,[[0,[244,2]]]]]],[[1,1],[[247,[[0,[244,2]]]]]],[[1,1],248],[[246,1],249],[246,69],0,0,[[]],[[[248,[2]]],[[248,[2]]]],[246,[[50,[1]]]],0,0,[[],1],[[[248,[2]]],1],0,[[]],[[]],[[]],0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],0,[[]],[[]],[[]],[[]],[[]],[[]],[[[248,[2]]]],0,[[[246,[244]]],[[47,[1]]]],0,[[251,1,1],[[50,[1]]]],[[]],[[]],[[251,1,1],50],[[]],[[]],[[251,1]],[[[246,[244]],1],251],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[]],[[]],[[[246,[244]],1],252],[[252,1],1],[[252,1]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[253,253],[[]],[[253,13],14],[[]],[[253,1],1],[[]],[[253,1,1],1],[[[246,[244]],1],253],[[253,1],[[50,[1]]]],[[253,1,1],47],[[253,1,1],47],[[253,1]],[[253,1]],[[]],[[],15],[[],15],[[],16],[[]],0,[[254,1,1],[[50,[1]]]],[[]],[[]],[[]],[[]],[[254,1,1,1],[[50,[1]]]],[[254,1,1],1],[[[246,[244]],1],254],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[]],[[]],[[2,[78,[63]],[78,[63]],[78,[63]]],[[255,[19,2,2]]]],[[[255,[19,2,2]],[246,[244]]],[[47,[2]]]],[[],15],[[],15],[[],16],[[]],[[[246,[244]],1]],[[[246,[244]],1],[[15,[82]]]],0,[[]],[[]],[[]],[[]],[[2,[78,[63]],[78,[63]],[78,[63]]],[[256,[19,2,2]]]],[[[256,[19,2,2]],[246,[244]],1],[[47,[2]]]],[[],15],[[],15],[[],16],[[]],[[[246,[244]]]],[[[246,[244]],1],[[47,[[0,[4,19,9]]]]]],[[[246,[244]]],47],[[[246,[244]],1,1],[[47,[1]]]],0,0,0,0,0,0,0,0,0,[[[47,[30]]],30],[[[47,[30]]],30],[[[47,[[0,[19,6,133,5]]]]],[[0,[19,6,133,5]]]],[[[47,[[0,[19,6,5,4,133]]]]],[[0,[19,6,5,4,133]]]],[[[47,[30]]],30],[[[47,[7]]],22],[[[47,[[0,[19,4,5]]]]],[[0,[19,4,5]]]],[[[47,[7]]],22],0,0,0,0,0,0,0,0,0,0,[7,23],0,[[]],[[]],[257],[[]],[257,[[50,[25]]]],[[]],[[],257],[257,[[50,[25]]]],[257,[[47,[258]]]],[257,44],[257,32],[257,30],[257,33],[257,23],[257,7],[257,1],[257],[[],15],[[],15],[[],16],[[]],[[257,259]],[[257,259]],0,0,[[[95,[[0,[4,6,19]]]],[0,[4,6,19]]],[[0,[4,6,19]]]],0,[[]],[[]],[[[95,[2]]],[[95,[2]]]],[[]],[[[95,[12]],13],14],[[]],[[]],[[[95,[[0,[61,6,19]]]],[0,[61,6,19]]],[[95,[[0,[61,6,19]]]]]],[[]],[[],15],[[],15],[[],16],[[]],0,0,[[]],[[]],[260,260],[[]],[[260,260],179],[[],260],[[260,260],11],[[260,13],14],[[]],[[260,261]],[[]],[260,11],[[260,260],[[50,[179]]]],[[]],[[],15],[[],15],[[],16],[[]],[[[104,[1]],1,1]],[[1,1,1,1]],0,0,[[]],0,[[262,262]],[[262,262]],[[262,262]],[[]],[[]],[262,262],[[]],[[262,262],179],[[262,1],11],[[],262],[[262,262],262],[[262,262],11],[1,262],[[262,1],262],[[262,13],14],[[]],[[[47,[1]]],262],[[262,261]],[[262,262],262],[[]],[262,11],[262,1],[[262,262],[[50,[179]]]],[[262,1],262],[[262,1],262],[[262,262]],[[262,262],262],[[]],[[],15],[[],15],[[],16],[[262,262],262],[[]],0,[[]],[[]],[263,263],[[]],[[263,13],14],[[]],[263,7],[[]],[[],263],[[]],[[],15],[[],15],[[],16],[[]],0,[[82,82],82]],"c":[],"p":[[15,"usize"],[8,"Clone"],[3,"AddSum"],[8,"Add"],[8,"Zero"],[8,"Mul"],[15,"u64"],[8,"From"],[8,"Default"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[3,"Affine"],[8,"One"],[8,"Copy"],[3,"AffineSum"],[3,"BitAnd"],[15,"u128"],[15,"u32"],[15,"u16"],[15,"u8"],[3,"BitOr"],[3,"BitXor"],[15,"i8"],[15,"i16"],[15,"i64"],[15,"i128"],[15,"i32"],[15,"isize"],[4,"DihedralValue"],[3,"Dihedral"],[3,"Dual"],[8,"Identity"],[8,"AlgeStruct"],[8,"BinaryOp"],[3,"Max"],[3,"Min"],[3,"Prod"],[15,"f32"],[15,"f64"],[3,"Sum"],[3,"Transformation"],[3,"Vec"],[3,"Permutation"],[3,"Composition"],[4,"Option"],[3,"Trivial"],[3,"Tuple2"],[3,"Tuple3"],[3,"Tuple4"],[3,"Tuple5"],[8,"Inverse"],[3,"Update"],[3,"UpdateSum"],[8,"Ord"],[8,"PartialOrd"],[8,"Sub"],[8,"Div"],[8,"Fn"],[4,"SearchResult"],[8,"Eq"],[3,"CompressorBuilder"],[3,"Compressor"],[8,"IntoIterator"],[8,"Iterator"],[3,"Rho"],[4,"Convex"],[8,"Signed"],[3,"Imos1D"],[3,"Range"],[3,"Imos2D"],[3,"KMP"],[3,"Mo"],[3,"Box"],[8,"FnMut"],[3,"PSP"],[3,"RollingHash"],[15,"str"],[3,"Table"],[3,"SuffixArray"],[8,"Hash"],[3,"StaticRangeFreqQuery"],[3,"StaticRangeInversionsQuery"],[4,"Convex"],[3,"TwoSat"],[3,"BinaryTrie"],[3,"Bitset"],[3,"String"],[8,"Elem"],[3,"ConvexHullTrick"],[3,"Linear"],[4,"Mode"],[8,"Group"],[3,"CumulativeSum1DBuilder"],[3,"CumulativeSum1D"],[3,"CumulativeSum2DBuilder"],[3,"CumulativeSum2D"],[8,"Semigroup"],[3,"DisjointSparseTable"],[8,"RangeBounds"],[8,"Monoid"],[3,"DualSegtree"],[3,"DynamicDualSegtree"],[8,"Action"],[3,"DynamicLazySegtree"],[3,"DynamicSegtree"],[8,"AbelianGroup"],[3,"FenwickTree"],[3,"RangeTo"],[8,"Elem"],[3,"FenwickTreeAdd"],[3,"FenwickOnFenwickBuilder"],[3,"FenwickOnFenwick"],[3,"FoldableDeque"],[3,"IntegerSet"],[3,"IntervalHeap"],[3,"LazySegtree"],[8,"Elem"],[3,"LazySegtreeCoeff"],[8,"Elem"],[3,"LazySkewHeap"],[8,"Elem"],[3,"LiChaoTree"],[3,"RangeInclusive"],[4,"Mode"],[3,"LinkCutTree"],[3,"Node"],[3,"LinkedListPool"],[8,"AddAssign"],[3,"MergeSortTree"],[3,"MultiSet"],[3,"Node"],[3,"PalindromicTree"],[3,"PartiallyPersistentUnionFind"],[3,"At"],[3,"PersistentArray"],[3,"Rc"],[3,"PersistentQueue"],[3,"PersistentSegtree"],[3,"PersistentStack"],[3,"PotentialUnionFind"],[3,"QwordTree"],[3,"RangeSearchTreeBuilder"],[3,"RangeSearchTree"],[3,"RollbackableUnionFind"],[3,"RollbackableVec"],[3,"Segtree"],[8,"Commutative"],[3,"Segtree2D"],[3,"SegtreeBeats"],[8,"Elem"],[3,"SegtreeLinearAdd"],[8,"Elem"],[3,"SegtreeLinearAddRangeSum"],[3,"SegtreeOnSegtreeBuilder"],[3,"SegtreeOnSegtree"],[3,"SkewHeap"],[8,"Associative"],[8,"Idempotence"],[3,"SparseTable"],[3,"SplayTree"],[4,"Mode"],[8,"Elem"],[3,"StarrySkyTree"],[3,"SuccinctDict"],[3,"UnionFind"],[3,"WaveletMatrix"],[3,"Dinic"],[3,"FordFulkerson"],[3,"MinCostFlow"],[3,"Vector"],[3,"Line"],[3,"Eps"],[3,"Circle"],[4,"Ordering"],[4,"CCW"],[4,"Hull"],[4,"IntersectCircleLine"],[4,"IntersectCircleSegment"],[4,"IntersectCircles"],[4,"IntersectLineSegment"],[4,"IntersectSegments"],[4,"PointPolygon"],[3,"Undirected"],[8,"EdgeTrait"],[3,"Graph"],[3,"Directed"],[3,"Edge"],[8,"Direction"],[3,"Lowlink"],[4,"NumInf"],[8,"Unsigned"],[3,"DirectedEulerianTrail"],[3,"UndirectedEulerianTrail"],[3,"FunctionalGraphBuilder"],[3,"FunctionalGraph"],[4,"Kind"],[3,"PseudoTreeBuilder"],[3,"PseudoTree"],[3,"SCC"],[3,"Dir"],[3,"Position"],[3,"Grid"],[8,"Sized"],[3,"CumSum"],[3,"MatrixMod2"],[8,"FF"],[3,"Matrix"],[3,"SquareMatrix"],[8,"MaxFlow"],[3,"BipartiteMatching"],[3,"HopcroftKarp"],[3,"Edge"],[3,"ExtLucas"],[3,"BinomialCoefficient"],[3,"Quotient"],[3,"FactorialTable"],[3,"FactorizeSieve"],[3,"Polynomial"],[3,"ConstModInt"],[3,"PolynomialOperator"],[3,"NTT"],[3,"EratosthenesSieve"],[3,"ClosedInterval"],[3,"Dice"],[3,"ParseResult"],[4,"Elem"],[3,"ConstModIntBuilder"],[3,"Sum"],[3,"Prod"],[3,"ModInt"],[3,"ModIntBuilder"],[3,"Sum"],[3,"Prod"],[8,"Neg"],[3,"Rational"],[3,"Totalf64"],[8,"Rng"],[8,"SampleUniform"],[8,"TreeEdgeTrait"],[3,"TreeBuilder"],[3,"Tree"],[3,"RootedTreeBuilder"],[3,"TreeEdge"],[3,"TreeNode"],[8,"DoubleEndedIterator"],[3,"TreeDepthQuery"],[3,"EulerTour"],[3,"HLD"],[3,"DoublingLCA"],[3,"RerootingDP"],[3,"TreeDP"],[3,"FastIO"],[15,"char"],[8,"Display"],[3,"NullableUsize"],[8,"Hasher"],[3,"UsizeSet"],[3,"XorShift"],[8,"Times"],[13,"NgOk"],[8,"Foldable"],[8,"Foldable2D"],[8,"Indexable"],[8,"Assignable"],[8,"Updatable"],[8,"CollectVec"],[8,"IterCumSum"],[8,"JoinStr"],[8,"GcdLcm"],[8,"CheckPrime"],[13,"Paren"],[8,"Pow"],[8,"Inv"],[8,"Transpose"],[8,"YesNo"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
