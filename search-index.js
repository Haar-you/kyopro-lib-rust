var searchIndex = JSON.parse('{\
"haar_lib":{"doc":"Rust GitHub last commit","t":"AAOOOOAAOAOOAAOOOOAAAAOOAOAOOAOOAAAAAAAAAAAAAAAAAAAIQQKKKKKDLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIIIIIIIIIIIQILKKKDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFNNNELLFLLLLLLMMDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFAAAAAAAFFFFFFFDLLLLLLLLLLLDLLLLLLLLLLLFFDLLLLLLLLLLLLLLAAAAAFFFFFFFFFFFFFFFDLLLLLLLLLLLFFFFFDLLLLLLLLLLLLLLLLLLLLLLLLFDDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLFFDLLLLLLLLLLDLLLLLLLLLLLAAFFDLLLLLLLLLLLLLFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDINNELLLLLLLLLLLLLLLLLLLLLLLLLLLLDDCLLLLLLLLLLLLLLLLLLLLLLLLLLDDCLLLLLLLLLLLLLLLLLLLLLLLLLLDCLLLLLLLLLLDCCLLLLLLLLLLLLLDLLLLLLLLLLLLLLLDLLLLLLLLLLLLCDLLLLLLLLLLLLLLLLIDLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLIDLLLLLLLLLLLLIDLLLLLLLLLLLLLLLLLLLLLIDNNELLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLRDLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLCDLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLIDLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLINNEDLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLIIIIQQQIQQKKKKKDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLQIKAAKKAKKDLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLDDDDLLLLLLAAALLLLLLLLAMALLLLLLLLAAAAAALLLLLLAAALLLLLLLLLLLLLLMLLAAAAAALLLLLLLLLLLLLLLLALLMLLAMLLLLLLLLLLLLLLLLLLLLLLFFFENNNNNLLFLLLLLLLLLLLLLLLLLFFFFFFENNLLLLFLLFLLLLLLFFFFNENNLLLLLLLLFLLLLLLLLNENNNNLLLLLLLLFLLLLLLLLLLNNNNENNLLLLLLLLLLFLLLLLLLLLLNENNNLLLLLLLLFLLLLLLLLLNENNNLLLLLLLFLLLLLLLLLLNNNELLLLLLLLLLLFLLLLLFDIDIDDQLLAAAAALLLLLLLLAAALLLLLLLLAAAMAALLLLLLKLLLLLMAMLLLLLALAALLAAKLAKLMLLLLLLLLLLLLAAALLLLLLLLAKLMAFCFFCFFFFFAFFFFAADLLLLLLLLLLLLLLDLLLLLLLLLLLLLLNDDENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFDMLLMLLLLLMLMMMLLLLLFFDLLLMMLFLLLLDLLLLLLLLLLLFFFFIFSSDDSDSSLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLMMFAAAAAAAFFFFFDLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAAAAAAAAAAAAAAADLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFDDLLLLLLLLLLLLLLLLLLLLLLLLLLAAAAAAAFFFFFFFFFFFFDLLLLFLLLMLMMLLLLLFDALALLLALLLLLLLLLLLLLLLLLFAADLLLLLLLLLLFIQKKKFFAAAAAAFFFFFFFFFFFFDLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFAADLLLLLLLLLLIKFDLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFAAAADLLLLLMLLLLLLMLLLLLDMLLMLLLLLMLMLMLLLLLLLMLLLLFENDNLLLLLLLLMLLLLLLFLLLLLLLLLLMMMAAAAAAADDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLIIIQQQIKKKKKDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNENLLLLLLLLLLLLLLLLLLLLLLIQQIKKDLLLLLLLLLLLLLLLLLLALLLLLLLLLIIIIFDDDDIDQLLLLLLLLLLLLAMLLLLLLLAALLLLLKLLLLLLMAMLLLLLLALLLLLLLMAKLLAAKLMLLLALLLLLLLLLLLLLLLALLLLLKLMFDLLLLLLLLLLLLDLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLDLLLLLLLLLLFFDLLLLLLLLLLFFFFAAAAAAAAAAFDLLLLLLLLLLLLLLLLLLLLLLLIKDMLMLLLLLLLLLLLLLSDLLLLLLLLLLLLLLLLLLFFQIKDLLLLLLLLLLLLLLIK","n":["algebra","algo","btreemap","btreeset","chmax","chmin","ds","flow","for_loop","geom","get","get_time","graph","grid","hashmap","hashset","impl_algebra","input","linalg","macros","matching","math","max","min","misc","mul_vec","num","rec","sort_with","testtools","timer","trait_alias","traits","tree","utils","action","add_sum","affine","bitand","bitor","bitxor","dihedral","dual","max","min","prod","sum","traits","transform","update","update_sum","Action","FType","UType","convert","fold","fold_id","update","update_id","AddSum","borrow","borrow_mut","clone","clone_into","convert","default","fold","fold_id","from","into","new","to_owned","try_from","try_into","type_id","update","update_id","vzip","Affine","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","BitAnd","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","into","new","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","BitOr","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","into","new","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","BitXor","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","id","id","id","id","id","id","into","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","new","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","Dihedral","DihedralValue","R","S","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","id","into","into","inv","new","op","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Dual","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","Max","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","id","id","id","id","id","id","into","new","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","Min","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","id","id","id","id","id","id","into","new","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","Prod","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","id","id","id","id","id","id","id","id","into","new","op","op","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","Sum","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","id","id","id","id","id","id","id","id","into","inv","inv","inv","inv","inv","inv","inv","inv","new","op","op","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","AbelianGroup","AbelianMonoid","AlgeStruct","Associative","BinaryOp","Commutative","Exponential","Group","Idempotence","Identity","Inverse","Monoid","Output","Semigroup","exp","id","inv","op","Composition","Permutation","Transformation","apply","apply","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","from","from","from","id","id","into","into","into","into_inner","into_inner","inv","new","op","op","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Update","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","UpdateSum","borrow","borrow_mut","clone","clone_into","convert","default","fold","fold_id","from","into","new","to_owned","try_from","try_into","type_id","update","update_id","vzip","bsearch","bsearch_f","compressor","edit_distance","enumerate_bitset","imos_1d","imos_2d","interval_scheduling","inversion_number","kmp","knapsack","lcs","lis","majority_vote","manacher","max_partial_sum","max_rect","merge","mo","num_subseq","parallel_binary_search","permutation","psp","rle","rolling_hash","sa","sliding_window","static_range_freq_query","static_range_inversions_query","subset_sum","two_sat","zalgo","equal_range","lower_bound","upper_bound","AllNg","AllOk","NgOk","SearchResult","borrow","borrow_mut","bsearch_ng_ok","from","into","try_from","try_into","type_id","vzip","ng","ok","Compressor","CompressorBuilder","add","add_vec","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","compress","decompress","default","from","from","get","index","into","into","new","size","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","edit_distance","gray_code","subset_asc","subset_between","subset_desc","subset_size_k","superset_asc","superset_desc","gray_code","subset_asc","subset_between","subset_desc","subset_size_k","super_asc","superset_desc","Imos1D","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","update","vzip","Imos2D","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","update","vzip","interval_scheduling","inversion_number","KMP","borrow","borrow_mut","clone","clone_into","fmt","from","into","matches","new","to_owned","try_from","try_into","type_id","vzip","limited","small_quantity","small_value","small_weight","unlimited","knapsack_limited","knapsack_small_quantity","knapsack_small_value","knapsack_small_weight","knapsack_unlimited","lcs","lis","majority_vote","manacher","max_partial_sum","max_rect","max_rect_in_histogram","inplace_merge","inplace_merge_by","merge","Mo","add","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","num_subseq","parallel_binary_search","next_permutation","permutations","prev_permutation","PSP","borrow","borrow_mut","clone","clone_into","from","gain_if_blue","gain_if_both_blue","gain_if_both_red","gain_if_red","if_red_then_must_be_red","into","must_be_blue","must_be_red","new","penalty_if_blue","penalty_if_different","penalty_if_red","penalty_if_red_blue","solve","to_owned","try_from","try_into","type_id","vzip","rle","RollingHash","Table","borrow","borrow","borrow_mut","borrow_mut","from","from","hash","hash","hash_table","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","SuffixArray","borrow","borrow_mut","clone","clone_into","fmt","from","index","into","lcp_array","new","to_owned","to_slice","try_from","try_into","type_id","vzip","sliding_maximum","sliding_minimum","StaticRangeFreqQuery","borrow","borrow_mut","from","into","new","query","try_from","try_into","type_id","vzip","StaticRangeInversionsQuery","add_query","borrow","borrow_mut","from","into","new","solve","try_from","try_into","type_id","vzip","count","limited","subset_sum","subset_sum_limited","TwoSat","add_if","add_or","borrow","borrow_mut","from","into","new","not_coexist","solve","try_from","try_into","type_id","vzip","zalgo","binary_trie","bitset","cht","cumulative_sum_1d","cumulative_sum_2d","disjoint_sparse_table","dual_segtree","dynamic_dual_segtree","dynamic_segtree","fenwick","fenwick_add","fenwick_on_fenwick","foldable_deque","interval_heap","lazy_segtree","lazy_segtree_coeff","lazy_skew_heap","li_chao","multiset","palindromic_tree","partially_persistent_unionfind","persistent_array","persistent_queue","persistent_stack","potential_unionfind","qword_tree","range_search_tree","rollbackable_vector","segtree","segtree_beats","segtree_linear_add","segtree_on_segtree","skew_heap","sparse_table","starry_sky_tree","succinct_dict","traits","unionfind","wavelet_matrix","BinaryTrie","borrow","borrow_mut","clone","clone_into","count","erase","fmt","from","insert","into","is_empty","len","max","min","new","to_owned","try_from","try_into","type_id","vzip","Bitset","and_count_ones","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","count_ones","count_zeros","flip","fmt","fmt","from","into","len","new","same_size_xor_assign","set","test","to_owned","to_string","try_from","try_into","type_id","vzip","ConvexHullTrick","Elem","Max","Min","Mode","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","from","from","into","into","new","query","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","CumulativeSum1D","CumulativeSum1DBuilder","Group","assign","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","fmt","fold","from","from","index","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","CumulativeSum2D","CumulativeSum2DBuilder","Group","assign","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","fmt","fold_2d","from","from","index","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","DisjointSparseTable","Semigroup","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","vzip","DualSegtree","Monoid","Updatable","borrow","borrow_mut","from","from_vec","get","into","new","to_vec","try_from","try_into","type_id","update","vzip","DynamicDualSegtree","borrow","borrow_mut","clone","clone_into","fmt","from","get","into","new","to_owned","try_from","try_into","type_id","update","vzip","DynamicSegtree","assign","borrow","borrow_mut","fmt","fold","from","into","new","try_from","try_into","type_id","vzip","AbelianGroup","FenwickTree","borrow","borrow_mut","clone","clone_into","default","fold","fold_to","from","into","new","to_owned","try_from","try_into","type_id","update","vzip","Elem","FenwickTreeAdd","add","borrow","borrow_mut","fold","fold_to","from","into","new","sub","try_from","try_into","type_id","vzip","FenwickOnFenwick","FenwickOnFenwickBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","default","fold_2d","fold_to_2d","from","from","into","into","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","FoldableDeque","back","borrow","borrow_mut","fold","from","front","into","is_empty","len","new","pop_back","pop_front","push_back","push_front","try_from","try_into","type_id","vzip","IntervalHeap","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","max","min","new","pop_max","pop_min","push","to_owned","try_from","try_into","type_id","vzip","LazySegtree","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","update","vzip","Elem","LazySegtreeCoeff","borrow","borrow_mut","fold","from","init_with_vec","into","new","try_from","try_into","type_id","update","vzip","Elem","LazySkewHeap","add","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","meld","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","Elem","LiChaoTree","Max","Min","Mode","add_line","add_segment","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","from","from","into","into","new","query","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","MultiSet","borrow","borrow_mut","clone","clone_into","contains","count","default","first","fmt","from","insert","into","is_empty","last","len","new","pop_first","pop_last","remove","to_owned","try_from","try_into","type_id","vzip","Node","PalindromicTree","borrow","borrow","borrow_mut","borrow_mut","count","default","from","from","get_from_strpos","get_node","index","into","into","len","length","new","parent_of","suffix_link_of","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","At","PartiallyPersistentUnionFind","at","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","is_same","latest","merge","new","root_of","size_of","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","PersistentArray","borrow","borrow_mut","from","get","into","new","set","try_from","try_into","type_id","vzip","PersistentQueue","back","borrow","borrow_mut","default","fmt","from","front","into","is_empty","len","new","pop","push","try_from","try_into","type_id","vzip","PersistentStack","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","iter","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","PotentialUnionFind","borrow","borrow_mut","count_groups","diff","from","get_groups","into","is_same","merge","new","potential_of","root_of","size_of","try_from","try_into","type_id","vzip","MAX","QwordTree","borrow","borrow_mut","contains","default","erase","erase_unchecked","from","insert","insert_unchecked","into","is_empty","len","max","max_le","min","min_ge","new","try_from","try_into","type_id","vzip","RangeSearchTree","RangeSearchTreeBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","default","from","from","into","into","new","search","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","RollbackableVec","assign","borrow","borrow_mut","clone","clone_into","default","fmt","from","from","index","into","is_empty","len","new","pop","push","rollback","to_owned","try_from","try_into","type_id","vzip","Monoid","Segtree","assign","borrow","borrow_mut","clone","clone_into","fold","from","index","into","new","to_owned","try_from","try_into","type_id","update","vzip","SegtreeBeats","add","borrow","borrow_mut","chmax","chmin","clone","clone_into","fmt","from","get_max","get_min","get_sum","into","new","new_with_vec","to_owned","try_from","try_into","type_id","vzip","Elem","SegtreeLinearAdd","borrow","borrow_mut","from","get","into","new","try_from","try_into","type_id","update","vzip","SegtreeOnSegtree","SegtreeOnSegtreeBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","default","fold_2d","from","from","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","SkewHeap","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","meld","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","SparseTable","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","vzip","Elem","Max","Min","Mode","StarrySkyTree","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fold","from","from","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","SuccinctDict","access","borrow","borrow_mut","clone","clone_into","count","from","into","is_empty","len","new","rank","select","to_owned","try_from","try_into","type_id","vzip","Assignable","Foldable","Foldable2D","Indexable","Output","Output","Output","Updatable","Value","Value","assign","fold","fold","get","update","UnionFind","borrow","borrow_mut","count_groups","from","get_groups","into","is_same","merge","new","new_with_values","root_of","size_of","try_from","try_into","type_id","value_of","vzip","WaveletMatrix","access","borrow","borrow_mut","clone","clone_into","count","from","into","maximum","minimum","new","next_value","prev_value","quantile","range_freq","rank","select","to_owned","try_from","try_into","type_id","vzip","Cap","MaxFlow","add_edge","dinic","ford_fulkerson","get_edges","max_flow","min_cost_flow","new","reset","Dinic","add_edge","borrow","borrow_mut","clone","clone_into","from","get_edges","into","max_flow","new","reset","to_owned","try_from","try_into","type_id","vzip","FordFulkerson","add_edge","borrow","borrow_mut","clone","clone_into","from","get_edges","into","max_flow","new","reset","to_owned","try_from","try_into","type_id","vzip","MinCostFlow","add_edge","borrow","borrow_mut","clone","clone_into","from","into","min_cost_flow","new","to_owned","try_from","try_into","type_id","vzip","Circle","Eps","Line","Vector","abs","abs","abs_sq","add","angle","angle_diff","area_intersection_circle_polygon","area_intersection_circles","area_polygon","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ccw","center","circumcircle","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","closest_pair","common_tangent_circles","convex","convex_cut","convex_diameter","convex_hull","cross","cross","default","default","default","diff","dist_line_point","dist_segment_point","dist_segments","div","dot","dot","eq","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","ge","gt","incircle","intersect_circle_line","intersect_circle_segment","intersect_circles","intersect_line_segment","intersect_segments","into","into","into","into","is_orthogonal","is_parallel","le","lt","mul","ne","new","new","new","normal","normal","partial_cmp","point_in_polygon","polar","projection","radius","reflection","sub","tangent_circle","to","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unit","unit","vzip","vzip","vzip","vzip","area_intersection_circle_polygon","area_intersection_circles","area_polygon","CCW","CLOCKWISE","COUNTER_CLOCKWISE","ONLINE_BACK","ONLINE_FRONT","ON_SEGMENT","borrow","borrow_mut","ccw","clockwise","clone","clone_into","counter_clockwise","eq","fmt","from","into","on_segment","online_back","online_front","to_owned","to_value","try_from","try_into","type_id","vzip","circumcircle","closest_pair","common_tangent_circles","is_convex","convex_cut","convex_diameter","Hull","Lower","Upper","borrow","borrow_mut","clone","clone_into","convex_hull","eq","from","half_hull","into","to_owned","try_from","try_into","type_id","vzip","dist_line_point","dist_segment_point","dist_segments","incircle","CROSSED","IntersectCircleLine","OUTSIDE","TANGENT","borrow","borrow_mut","clone","clone_into","crossed","eq","fmt","from","intersect_circle_line","into","outside","tangent","to_owned","try_from","try_into","type_id","vzip","INSIDE","IntersectCircleSegment","ONE_CROSSPOINT","OUTSIDE","TANGENT","TWO_CROSSPOINTS","borrow","borrow_mut","clone","clone_into","eq","fmt","from","inside","intersect_circle_segment","into","one_crosspoint","outside","tangent","to_owned","try_from","try_into","two_crosspoints","type_id","vzip","CIRCUMSCRIBED","INSCRIBED","INSIDE","INTERSECTED","IntersectCircles","OUTSIDE","SAME","borrow","borrow_mut","circumscribed","clone","clone_into","eq","fmt","from","inscribed","inside","intersect_circles","intersected","into","num_common_tangent","outside","same","to_owned","try_from","try_into","type_id","vzip","CROSSED","IntersectLineSegment","LEFTSIDE","OVERLAPPED","RIGHTSIDE","borrow","borrow_mut","clone","clone_into","crossed","eq","fmt","from","intersect_line_segment","into","leftside","overlapped","rightside","to_owned","try_from","try_into","type_id","vzip","INTERSECTED","IntersectSegments","NOT_INTERSECTED","OVERLAPPED","SAME","borrow","borrow_mut","clone","clone_into","eq","fmt","from","intersect_segments","intersected","into","not_intersected","overlapped","same","to_owned","try_from","try_into","type_id","vzip","EXCLUSION","INCLUSION","ON_SEGMENT","PointPolygon","borrow","borrow_mut","clone","clone_into","eq","exclusion","fmt","from","inclusion","into","on_segment","point_in_polygon","to_owned","try_from","try_into","type_id","vzip","tangent_circle","Directed","Direction","Edge","EdgeTrait","Graph","Undirected","Weight","add","add","articulation_points","bellman_ford","bfs","biconnected","bipartite","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bridges","chinese_postman","chu_liu_edmonds","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cycle","detect_cycle","dijkstra","edges","enumerate_triangles","eulerian","extend","extend","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","functional_graph","index","into","into","into","into","is_empty","kruskal","len","lowlink","max_independent_set","new","new","prim","pseudo_tree","rev","rev","scc","to","to","to","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tsort","tsp","two_edge","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","warshall_floyd","weight","weight","weight","yen","articulation_points","NumInf","bellman_ford","bfs","Lowlink","biconnected","check_bipartite","bridges","chinese_postman_problem","chu_liu_edmonds","directed_shortest","directed_shortest_cycle","detect_cycle","dijkstra","enumerate_triangles","directed","undirected","DirectedEulerianTrail","add_edge","borrow","borrow_mut","clone","clone_into","from","into","new","solve","to_owned","try_from","try_into","type_id","vzip","UndirectedEulerianTrail","add_edge","borrow","borrow_mut","clone","clone_into","from","into","new","solve","to_owned","try_from","try_into","type_id","vzip","Branch","FunctionalGraph","FunctionalGraphBuilder","Kind","Leaf","Loop","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","clone","clone_into","eq","fmt","from","from","from","grp_index_of","into","into","into","kind_of","loops","new","next_of","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","kruskal","Lowlink","back","borrow","borrow_mut","ch","clone","clone_into","fmt","from","into","low","new","ord","par","size","to_owned","try_from","try_into","type_id","vzip","max_independent_set","prim","PseudoTree","borrow","borrow_mut","from","group","in_loop","into","pseudo_tree","try_from","try_into","type_id","vzip","SCC","borrow","borrow_mut","from","groups","into","new","to_vec","try_from","try_into","type_id","vzip","tsort","tsp","two_edge_connected_components","warshall_floyd","Elem","yen_algorithm","D","DIR_4","Dir","Grid","L","Position","R","U","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","dx","dy","eq","eq","fmt","fmt","fmt","from","from","from","get","get_mut","into","into","into","iter","iter_mut","mov_strict","new","new","new","to_graph","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","x","y","grid_to_graph","determinant_mod_2","determinant_p","gaussian_elim_mod_2","inverse_mod_2","inverse_p","matrix","square_matrix","determinant_mod_2","determinant_p","gaussian_elim_mod_2","inverse_mod_2","inverse_p","Matrix","add","add_assign","borrow","borrow_mut","clone","clone_into","eq","from","from_vec","get_mut","height","index","into","mul","mul_assign","neg","new","sub","sub_assign","to_owned","transpose","try_from","try_into","type_id","vzip","width","SquareMatrix","add","add_assign","borrow","borrow_mut","clone","clone_into","eq","from","from_vec","get_mut","index","into","mul","mul_assign","neg","new","pow","size","straight_mul","strassen_mul","sub","sub_assign","to_owned","transpose","try_from","try_into","type_id","unit","vzip","chmax","chmin","ds_macros","for_loop","get_time","impl_algebra","io","max","min","mul_vec","rec","sort_with","timer","trait_alias","bi_match","hopcroft_karp","BipartiteMatching","add_edge","borrow","borrow_mut","from","into","matching","new","try_from","try_into","type_id","vzip","Edge","HopcroftKarp","add_edge","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","from","from","get_matching","into","into","matching","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","bell_number","berlekamp_massey","binomial_coefficient","convolution","count_coprime","crt","divisor","enumerate_quotients","ext_gcd","factorial","factorial_prime_factor","factorize","gcd_lcm","linear_congruence","miller_rabin","mod_ops","montmort","multipoint_eval","nim_product","ntt","polynomial","polynomial_taylor_shift","prime_test","primitive_root","rational","sum_floor_linear","sum_of_exponential_times_polynomial_limit","totient","totient_sum","bell_number_table","berlekamp_massey","BinomialCoefficient","ExtLucas","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","from","from","get","get","into","into","new","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","conv_and","conv_or","mobius_sub","mobius_super","subset_conv","zeta_sub","zeta_super","convolution_and","convolution_or","fast_mobius_subset","fast_mobius_superset","subset_convolution","fast_zeta_subset","fast_zeta_superset","count_coprime","crt","crt_vec","count_divisors","enumerate_divisors","Quotient","borrow","borrow_mut","clone","clone_into","enumerate_quotients","eq","fmt","from","from","into","q","to","to_owned","try_from","try_into","type_id","vzip","ext_gcd","FactorialTable","bell","bell_number","bernoulli","bernoulli_number","borrow","borrow_mut","catalan","catalan_number","clone","clone_into","comb","facto","fmt","from","h","into","inv_facto","new","perm","to_owned","try_from","try_into","type_id","vzip","factorial_prime_factor","sieve","trial","FactorizeSieve","borrow","borrow_mut","factorize","from","into","new","try_from","try_into","type_id","vzip","factorize","GcdLcm","Output","gcd","gcd_lcm","lcm","linear_congruence","miller_rabin","enum_inv","inv","inv_p","log","pow","sqrt","enumerate_mod_inv","mod_inv","mod_inv_p","mod_log","mod_pow","mod_sqrt","montmort","multipoint_eval","nim_product_16","nim_product_32","nim_product_64","nim_product_8","NTT","borrow","borrow_mut","convolve","from","into","new","try_from","try_into","type_id","vzip","Polynomial","PolynomialOperator","add","add_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","coeff_of","constant","deg","divmod","eq","eval","fmt","from","from","from_vec","get_to","into","into","inv","is_empty","len","mul","mul_assign","new","scale","shrink","sq","sub","sub_assign","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","zero","polynomial_taylor_shift","eratosthenes","traits","EratosthenesSieve","borrow","borrow_mut","from","into","is_prime","new","try_from","try_into","type_id","vzip","CheckPrime","is_prime","primitive_root","Rational","add","add_assign","borrow","borrow_mut","clone","clone_into","div","div_assign","eq","fmt","from","from","into","mul","mul_assign","neg","new","partial_cmp","sub","sub_assign","to_owned","try_from","try_into","type_id","vzip","sum_floor_linear","sum_of_exponential_times_polynomial_limit","totient","totient_table","totient_sum","closed_interval","dice","paren","parse_paren","ClosedInterval","borrow","borrow_mut","clone","clone_into","default","end","eq","fmt","from","into","merge","new","start","to_owned","try_from","try_into","type_id","vzip","Dice","back","borrow","borrow_mut","bottom","clone","clone_into","eq","fmt","from","front","into","left","new","right","rot_back","rot_clockwise","rot_counterclockwise","rot_front","rot_left","rot_right","to_owned","top","try_from","try_into","type_id","vzip","check_paren","Elem","Paren","ParseResult","Value","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","elems","fmt","fmt","from","from","into","into","parse_paren","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","close","inner","open","const_modint","ff","modint","num_inf","one_zero","total_f64","traits","ConstModInt","ConstModIntBuilder","add","add_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","div","div_assign","eq","eq","fmt","fmt","frac","from","from","from_i64","from_u64","into","into","inv","mul","mul_assign","neg","new","new","one","one_zero","pow","sub","sub_assign","to_owned","to_owned","to_string","to_u32","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","zero","FF","FFElem","Inv","Output","Output","Output","Pow","frac","from_i64","from_u64","inv","pow","ModInt","ModIntBuilder","add","add_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","div","div_assign","eq","eq","fmt","fmt","fmt","frac","from","from","from_i64","from_u64","into","into","inv","mul","mul_assign","neg","new","new","pow","sub","sub_assign","to_owned","to_owned","to_string","to_u32","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Inf","NegInf","NumInf","Value","add","borrow","borrow_mut","clone","clone_into","cmp","eq","fmt","from","into","is_inf","is_neg_inf","is_value","neg","partial_cmp","sub","to_owned","try_from","try_into","type_id","unwrap","vzip","One","Output","Output","Zero","one","zero","Totalf64","add","add_assign","borrow","borrow_mut","clone","clone_into","cmp","default","div","div_assign","eq","fmt","from","into","mul","mul_assign","neg","one","one_zero","partial_cmp","sub","sub_assign","to_owned","try_from","try_into","type_id","vzip","zero","Float","Int","Signed","Unsigned","rand_range","RootedTreeBuilder","Tree","TreeBuilder","TreeEdge","TreeEdgeTrait","TreeNode","Weight","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","centroid","children","clone","clone","clone","clone_into","clone_into","clone_into","default","depth_query","euler_tour","extend","extend","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hld","index","into","into","into","into","into","is_empty","lca","len","neighbors","neighbors_size","new","new","new","nodes_iter","parent","rerooting","rev","rev","root","rooted_isomorphism","rooting","to","to","to","to_owned","to_owned","to_owned","tree_dp","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","utils","vzip","vzip","vzip","vzip","vzip","weight","weight","weight","centroids","TreeDepthQuery","ancestor","borrow","borrow_mut","children_query","from","into","me_query","new","try_from","try_into","type_id","vzip","EulerTour","borrow","borrow_mut","from","into","new","point_query","subtree_query","try_from","try_into","type_id","vzip","HLD","borrow","borrow_mut","clone","clone_into","fmt","from","get_id","into","lca","new","parent","path_query_edge","path_query_vertex","subtree_query_edge","subtree_query_vertex","to_owned","try_from","try_into","type_id","vzip","DoublingLCA","ancestor","borrow","borrow_mut","from","get_lca","into","jump","new","try_from","try_into","type_id","vzip","RerootingDP","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","rooted_isomorphism","rooting","TreeDP","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","tree_diameter","tree_distance","tree_height","tree_path","bits","fastio","join_str","linear","nullable_usize","range","swap","transpose","xor_shift","yesno","highest_one","FastIO","borrow","borrow_mut","drop","from","getc","into","new","peek","read_chars","read_f64","read_i32","read_i64","read_isize","read_u32","read_u64","read_usize","skip","try_from","try_into","type_id","vzip","write","writeln","JoinStr","join_str","Linear","a","apply","b","borrow","borrow_mut","clone","clone_into","fmt","from","into","mov_x","to_owned","try_from","try_into","type_id","vzip","NULL","NullableUsize","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","hash","into","is_null","partial_cmp","to_owned","try_from","try_into","type_id","vzip","range_bounds_to_range","swap_vv","Output","Transpose","transpose","XorShift","borrow","borrow_mut","clone","clone_into","fmt","from","gen","into","new","to_owned","try_from","try_into","type_id","vzip","YesNo","yesno"],"q":[[0,"haar_lib"],[35,"haar_lib::algebra"],[51,"haar_lib::algebra::action"],[59,"haar_lib::algebra::add_sum"],[78,"haar_lib::algebra::affine"],[96,"haar_lib::algebra::bitand"],[124,"haar_lib::algebra::bitor"],[152,"haar_lib::algebra::bitxor"],[204,"haar_lib::algebra::dihedral"],[238,"haar_lib::algebra::dual"],[256,"haar_lib::algebra::max"],[296,"haar_lib::algebra::min"],[336,"haar_lib::algebra::prod"],[380,"haar_lib::algebra::sum"],[432,"haar_lib::algebra::traits"],[450,"haar_lib::algebra::transform"],[504,"haar_lib::algebra::update"],[522,"haar_lib::algebra::update_sum"],[541,"haar_lib::algo"],[573,"haar_lib::algo::bsearch"],[576,"haar_lib::algo::bsearch_f"],[589,"haar_lib::algo::bsearch_f::SearchResult"],[591,"haar_lib::algo::compressor"],[625,"haar_lib::algo::edit_distance"],[626,"haar_lib::algo::enumerate_bitset"],[633,"haar_lib::algo::enumerate_bitset::gray_code"],[634,"haar_lib::algo::enumerate_bitset::subset_asc"],[635,"haar_lib::algo::enumerate_bitset::subset_between"],[636,"haar_lib::algo::enumerate_bitset::subset_desc"],[637,"haar_lib::algo::enumerate_bitset::subset_size_k"],[638,"haar_lib::algo::enumerate_bitset::superset_asc"],[639,"haar_lib::algo::enumerate_bitset::superset_desc"],[640,"haar_lib::algo::imos_1d"],[652,"haar_lib::algo::imos_2d"],[664,"haar_lib::algo::interval_scheduling"],[665,"haar_lib::algo::inversion_number"],[666,"haar_lib::algo::kmp"],[681,"haar_lib::algo::knapsack"],[686,"haar_lib::algo::knapsack::limited"],[687,"haar_lib::algo::knapsack::small_quantity"],[688,"haar_lib::algo::knapsack::small_value"],[689,"haar_lib::algo::knapsack::small_weight"],[690,"haar_lib::algo::knapsack::unlimited"],[691,"haar_lib::algo::lcs"],[692,"haar_lib::algo::lis"],[693,"haar_lib::algo::majority_vote"],[694,"haar_lib::algo::manacher"],[695,"haar_lib::algo::max_partial_sum"],[696,"haar_lib::algo::max_rect"],[698,"haar_lib::algo::merge"],[701,"haar_lib::algo::mo"],[713,"haar_lib::algo::num_subseq"],[714,"haar_lib::algo::parallel_binary_search"],[715,"haar_lib::algo::permutation"],[718,"haar_lib::algo::psp"],[743,"haar_lib::algo::rle"],[744,"haar_lib::algo::rolling_hash"],[766,"haar_lib::algo::sa"],[783,"haar_lib::algo::sliding_window"],[785,"haar_lib::algo::static_range_freq_query"],[796,"haar_lib::algo::static_range_inversions_query"],[808,"haar_lib::algo::subset_sum"],[810,"haar_lib::algo::subset_sum::count"],[811,"haar_lib::algo::subset_sum::limited"],[812,"haar_lib::algo::two_sat"],[826,"haar_lib::algo::zalgo"],[827,"haar_lib::ds"],[866,"haar_lib::ds::binary_trie"],[887,"haar_lib::ds::bitset"],[917,"haar_lib::ds::cht"],[950,"haar_lib::ds::cumulative_sum_1d"],[979,"haar_lib::ds::cumulative_sum_2d"],[1008,"haar_lib::ds::disjoint_sparse_table"],[1020,"haar_lib::ds::dual_segtree"],[1036,"haar_lib::ds::dynamic_dual_segtree"],[1052,"haar_lib::ds::dynamic_segtree"],[1065,"haar_lib::ds::fenwick"],[1083,"haar_lib::ds::fenwick_add"],[1098,"haar_lib::ds::fenwick_on_fenwick"],[1129,"haar_lib::ds::foldable_deque"],[1148,"haar_lib::ds::interval_heap"],[1170,"haar_lib::ds::lazy_segtree"],[1182,"haar_lib::ds::lazy_segtree_coeff"],[1196,"haar_lib::ds::lazy_skew_heap"],[1219,"haar_lib::ds::li_chao"],[1249,"haar_lib::ds::multiset"],[1274,"haar_lib::ds::palindromic_tree"],[1302,"haar_lib::ds::partially_persistent_unionfind"],[1327,"haar_lib::ds::persistent_array"],[1339,"haar_lib::ds::persistent_queue"],[1357,"haar_lib::ds::persistent_stack"],[1376,"haar_lib::ds::potential_unionfind"],[1394,"haar_lib::ds::qword_tree"],[1417,"haar_lib::ds::range_search_tree"],[1443,"haar_lib::ds::rollbackable_vector"],[1466,"haar_lib::ds::segtree"],[1484,"haar_lib::ds::segtree_beats"],[1505,"haar_lib::ds::segtree_linear_add"],[1518,"haar_lib::ds::segtree_on_segtree"],[1545,"haar_lib::ds::skew_heap"],[1566,"haar_lib::ds::sparse_table"],[1577,"haar_lib::ds::starry_sky_tree"],[1604,"haar_lib::ds::succinct_dict"],[1623,"haar_lib::ds::traits"],[1638,"haar_lib::ds::unionfind"],[1656,"haar_lib::ds::wavelet_matrix"],[1679,"haar_lib::flow"],[1689,"haar_lib::flow::dinic"],[1706,"haar_lib::flow::ford_fulkerson"],[1723,"haar_lib::flow::min_cost_flow"],[1738,"haar_lib::geom"],[1854,"haar_lib::geom::area_intersection_circle_polygon"],[1855,"haar_lib::geom::area_intersection_circles"],[1856,"haar_lib::geom::area_polygon"],[1857,"haar_lib::geom::ccw"],[1883,"haar_lib::geom::circumcircle"],[1884,"haar_lib::geom::closest_pair"],[1885,"haar_lib::geom::common_tangent_circles"],[1886,"haar_lib::geom::convex"],[1887,"haar_lib::geom::convex_cut"],[1888,"haar_lib::geom::convex_diameter"],[1889,"haar_lib::geom::convex_hull"],[1906,"haar_lib::geom::dist_line_point"],[1907,"haar_lib::geom::dist_segment_point"],[1908,"haar_lib::geom::dist_segments"],[1909,"haar_lib::geom::incircle"],[1910,"haar_lib::geom::intersect_circle_line"],[1931,"haar_lib::geom::intersect_circle_segment"],[1956,"haar_lib::geom::intersect_circles"],[1984,"haar_lib::geom::intersect_line_segment"],[2007,"haar_lib::geom::intersect_segments"],[2030,"haar_lib::geom::point_in_polygon"],[2051,"haar_lib::geom::tangent_circle"],[2052,"haar_lib::graph"],[2153,"haar_lib::graph::articulation_points"],[2154,"haar_lib::graph::bellman_ford"],[2156,"haar_lib::graph::bfs"],[2157,"haar_lib::graph::biconnected"],[2159,"haar_lib::graph::bipartite"],[2160,"haar_lib::graph::bridges"],[2161,"haar_lib::graph::chinese_postman"],[2162,"haar_lib::graph::chu_liu_edmonds"],[2163,"haar_lib::graph::cycle"],[2164,"haar_lib::graph::cycle::directed_shortest"],[2165,"haar_lib::graph::detect_cycle"],[2166,"haar_lib::graph::dijkstra"],[2167,"haar_lib::graph::enumerate_triangles"],[2168,"haar_lib::graph::eulerian"],[2170,"haar_lib::graph::eulerian::directed"],[2185,"haar_lib::graph::eulerian::undirected"],[2200,"haar_lib::graph::functional_graph"],[2242,"haar_lib::graph::kruskal"],[2243,"haar_lib::graph::lowlink"],[2263,"haar_lib::graph::max_independent_set"],[2264,"haar_lib::graph::prim"],[2265,"haar_lib::graph::pseudo_tree"],[2277,"haar_lib::graph::scc"],[2289,"haar_lib::graph::tsort"],[2290,"haar_lib::graph::tsp"],[2291,"haar_lib::graph::two_edge"],[2292,"haar_lib::graph::warshall_floyd"],[2293,"haar_lib::graph::yen"],[2295,"haar_lib::grid"],[2357,"haar_lib::grid::to_graph"],[2358,"haar_lib::linalg"],[2365,"haar_lib::linalg::determinant_mod_2"],[2366,"haar_lib::linalg::determinant_p"],[2367,"haar_lib::linalg::gaussian_elim_mod_2"],[2368,"haar_lib::linalg::inverse_mod_2"],[2369,"haar_lib::linalg::inverse_p"],[2370,"haar_lib::linalg::matrix"],[2397,"haar_lib::linalg::square_matrix"],[2427,"haar_lib::macros"],[2441,"haar_lib::matching"],[2443,"haar_lib::matching::bi_match"],[2455,"haar_lib::matching::hopcroft_karp"],[2481,"haar_lib::math"],[2510,"haar_lib::math::bell_number"],[2511,"haar_lib::math::berlekamp_massey"],[2512,"haar_lib::math::binomial_coefficient"],[2540,"haar_lib::math::convolution"],[2547,"haar_lib::math::convolution::conv_and"],[2548,"haar_lib::math::convolution::conv_or"],[2549,"haar_lib::math::convolution::mobius_sub"],[2550,"haar_lib::math::convolution::mobius_super"],[2551,"haar_lib::math::convolution::subset_conv"],[2552,"haar_lib::math::convolution::zeta_sub"],[2553,"haar_lib::math::convolution::zeta_super"],[2554,"haar_lib::math::count_coprime"],[2555,"haar_lib::math::crt"],[2557,"haar_lib::math::divisor"],[2559,"haar_lib::math::enumerate_quotients"],[2577,"haar_lib::math::ext_gcd"],[2578,"haar_lib::math::factorial"],[2603,"haar_lib::math::factorial_prime_factor"],[2604,"haar_lib::math::factorize"],[2606,"haar_lib::math::factorize::sieve"],[2617,"haar_lib::math::factorize::trial"],[2618,"haar_lib::math::gcd_lcm"],[2623,"haar_lib::math::linear_congruence"],[2624,"haar_lib::math::miller_rabin"],[2625,"haar_lib::math::mod_ops"],[2631,"haar_lib::math::mod_ops::enum_inv"],[2632,"haar_lib::math::mod_ops::inv"],[2633,"haar_lib::math::mod_ops::inv_p"],[2634,"haar_lib::math::mod_ops::log"],[2635,"haar_lib::math::mod_ops::pow"],[2636,"haar_lib::math::mod_ops::sqrt"],[2637,"haar_lib::math::montmort"],[2638,"haar_lib::math::multipoint_eval"],[2639,"haar_lib::math::nim_product"],[2643,"haar_lib::math::ntt"],[2654,"haar_lib::math::polynomial"],[2698,"haar_lib::math::polynomial_taylor_shift"],[2699,"haar_lib::math::prime_test"],[2701,"haar_lib::math::prime_test::eratosthenes"],[2712,"haar_lib::math::prime_test::traits"],[2714,"haar_lib::math::primitive_root"],[2715,"haar_lib::math::rational"],[2741,"haar_lib::math::sum_floor_linear"],[2742,"haar_lib::math::sum_of_exponential_times_polynomial_limit"],[2743,"haar_lib::math::totient"],[2745,"haar_lib::math::totient_sum"],[2746,"haar_lib::misc"],[2750,"haar_lib::misc::closed_interval"],[2769,"haar_lib::misc::dice"],[2796,"haar_lib::misc::paren"],[2797,"haar_lib::misc::parse_paren"],[2827,"haar_lib::misc::parse_paren::Elem"],[2830,"haar_lib::num"],[2837,"haar_lib::num::const_modint"],[2888,"haar_lib::num::ff"],[2900,"haar_lib::num::modint"],[2947,"haar_lib::num::num_inf"],[2973,"haar_lib::num::one_zero"],[2979,"haar_lib::num::total_f64"],[3008,"haar_lib::num::traits"],[3012,"haar_lib::testtools"],[3013,"haar_lib::tree"],[3110,"haar_lib::tree::centroid"],[3111,"haar_lib::tree::depth_query"],[3124,"haar_lib::tree::euler_tour"],[3136,"haar_lib::tree::hld"],[3157,"haar_lib::tree::lca"],[3170,"haar_lib::tree::rerooting"],[3181,"haar_lib::tree::rooted_isomorphism"],[3182,"haar_lib::tree::rooting"],[3183,"haar_lib::tree::tree_dp"],[3194,"haar_lib::tree::utils"],[3198,"haar_lib::utils"],[3208,"haar_lib::utils::bits"],[3209,"haar_lib::utils::fastio"],[3233,"haar_lib::utils::join_str"],[3235,"haar_lib::utils::linear"],[3252,"haar_lib::utils::nullable_usize"],[3272,"haar_lib::utils::range"],[3273,"haar_lib::utils::swap"],[3274,"haar_lib::utils::transpose"],[3277,"haar_lib::utils::xor_shift"],[3292,"haar_lib::utils::yesno"]],"d":["代数的構造","","","","","","データ構造","フロー問題","","幾何","","","グラフ一般に関するもの","","","","","","線形代数","macro_exportされたmacro置き場","マッチング問題","数学","","","分類を放置しているもの","","","…","","","","","","木に関するもの","便利そうなもの置き場","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","二分探索","","座標圧縮","","","","","区間スケジューリング問題","転倒数","Knuth-Morris-Pratt法","ナップサック問題","最長共通部分列","最長増加部分列","Boyer-Moore majority vote algorithm","","最大連続部分和","","","","相異なる部分列の総数","並列二分探索","","Project Selection Problem","Run Length Encoding","","","スライド最小値","配列に対する範囲頻度取得クエリ","範囲転倒数取得クエリ","部分和問題","","","lower_bound, upper_boundの組を求める。","x以上となる最小のindexを求める。","xを超える最小のindexを求める。","","","","","","","二分探索","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","<code>i</code>番目の値を返す。","<code>value</code>が何番目の値(0-index)かを返す。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","…","数列の転倒数を計算する。","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","個数制限付きナップサック問題","要素数が小さいナップサック問題","価値の総和が小さいナップサック問題","容量が小さいナップサック問題","個数制限無しナップサック問題","列a, bの最長共通部分列の一つを求める。","列の最長増加部分列の一つを求める。","","","…","…","…","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","返り値<code>ret</code>に対して、<code>ret[i]</code>は<code>a[0..i]</code>…","","","","","Project Selection Problem","","","","","Returns the argument unchanged.","頂点iが青ならばcの利益を得る。","頂点iとjがともに青ならばcの利益を得る。","頂点iとjがともに赤ならばcの利益を得る。","頂点iが赤ならばcの利益を得る。","頂点iが赤ならば、頂点jも赤…","Calls <code>U::from(self)</code>.","頂点iは青でなければならない。","頂点iは赤でなければならない。","","頂点iが青ならばcの損失になる。","頂点iとjが異なる色ならばcの損失となる。","頂点iが赤ならばcの損失になる。","頂点iが赤かつ頂点jが青…","must be制約を破った場合、<code>None</code>…","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","…","…","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Time Complexity $O(|a|)$","Time Complexity $O(log |a|)$","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","部分和問題 …","…","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Convex Hull Trick","1次元累積和","2次元累積和","半群の列の区間演算を行う(O(1))","","","","","","","","","","係数乗算付き区間加算区間総和遅延セグ木","遅延加算付き融合可能ヒープ","Li-Chao tree","","","部分永続UnionFind","永続配列","永続キュー","永続スタック","ポテンシャル付きUnionfind","64分木","領域内の点を列挙する","ロールバック可能Vec","","","区間一次関数加算セグメントツリー","","融合可能ヒープ","冪等性と結合性をもつ列の区間取得(O(1))","区間加算・区間Max(Min)","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","…","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","…","","","","","","","","","","","","","","","","","","","","","","","Time complexity O(1)","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Time Complexity O(1)","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","使用する点を登録する。","","","","","","","","","","","Time Complexity $O(\\\\log ^ 2 n)$","Time Complexity $O(\\\\log ^ 2 n)$","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Time Complexity $O(\\\\log ^ 2 n)$","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","時刻tでの状態","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","最新時点の状態","","","","Complexity","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","永続スタック","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","　0 ~ 16777215 ($2^24 - 1$) の値の集合を管理する","","","xを含むかどうかを判定する","","xを集合から削除する","Safety","Returns the argument unchanged.","xを集合に加える","Safety","Calls <code>U::from(self)</code>.","集合が空かどうかを判断する","集合に含まれている要素数を返す","最大値を返す","x以下で最大の値を返す","最小値を返す","x以上で最小の値を返す","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","範囲<code>l..r</code>に一次関数<code>ax + b</code>の値を加算する。(<code>x</code>…","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","[l, r) に含まれる<code>b</code>の個数","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","[0, index) に含まれる<code>b</code>の個数","nth(0-indexed)番目の<code>b</code>の位置","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","<code>index</code>番目の値を得る。","","","","","<code>range</code>に含まれる<code>value</code>の個数。","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>range</code>での最大値","<code>range</code>での最小値","","<code>range</code>で<code>lb</code>以上の最小値","<code>range</code>で<code>ub</code>未満の最大値","<code>range</code>でk(0-indexed)番目に小さい値。","<code>range</code>で<code>lb</code>以上<code>ub</code>未満の値の個数","[0, index)に含まれる<code>value</code>の個数。","<code>nth</code>(0-indexed)番目の<code>value</code>の位置。","","","","","","","","","最大流 (Dinic)","最大流 (Ford-Fulkerson)","","","最小費用流","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","円と多角形の共通部分の面積","2つの円の共通部分の面積","多角形の面積","","","","","","","","","点と線分の位置関係","","三角形の外接円","","","","","","","","","最近点対","2つの円の共通接線","凸多角形の判定","凸多角形の直線での切断","凸多角形の直径","凸包","","","","","","","直線と点の距離","線分と点の距離","2つの線分間の距離","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","三角形の内接円","円と直線の位置関係","円と線分の位置関係","2つの円の位置関係","直線と線分の位置関係","2つの線分の位置関係","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","点と多角形の位置関係","","","","","","点を通る円の接線","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","関節点の列挙","負閉路を持つグラフの最短経路 (Bellman-Ford)","","二重頂点連結分解","二部グラフ判定","","","","","","","","","橋の列挙","中国人郵便配達問題","有向グラフ上の最小有向全域木を求める","","","","","","","","","","有向グラフの閉路検出","非負重み付き最短経路 (Dijkstra)","","","(準)Eulerグラフの判定","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","最小全域木 (Kruskal)","","","最大独立集合","","","最小全域木 (Prim)","","","","強連結成分分解","","","","","","","","","","","","","","","","トポロジカルソート","巡回セールスマン問題","二重辺連結成分分解","","","","","","","","","全頂点間最短経路長","","","","","","","","","","","","橋の列挙","Time complexity O(V ^ 2 * 2 ^ V)","有向グラフ上の最小有向全域木を求める","…","…","","Time complexity O((E + V) log V)","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","…","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","最大独立集合を求める","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Time complexity O(N)","","","Time complexity O(n ^ 3)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","グリッドをグラフに変換する","","","","","","","","","素数mod p上での行列式を求める。 $O(n^3)$","","","素数mod p上での逆行列を求める。 $O(n^3)$","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","二部マッチング","二部マッチング (Hopcroft-Karp)","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","中国剰余定理","約数列挙","","拡張ユークリッドの互除法","","$a!$の素因数pの個数を求める。","","最大公約数・最小公倍数","","","mod mでの演算","","","","","","","","原始根","有理数","$\\\\sum_{i=0}^{n-1} \\\\lfloor \\\\frac{ai+b}{m} \\\\rfloor$","$\\\\sum_{i=0}^{\\\\infty} r^ii^d$","トーシェント関数","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Time complexity O(sqrt n)","Time complexity O(sqrt n)","","","","","","1以上N以下の自然数xについて<code>floor(N/x)</code>…","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","n個からk個とりだす組み合わせの個数 (nCk)","nの階乗","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","nの階乗の逆元","Time complexity O(n)","n個からk個とりだす順列の個数 (nPk)","","","","","","$a!$の素因数pの個数を求める。","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","ax + b = 0 (mod m) を満たすxを求める。","","0,1,..,nの素数mod pでの逆元を列挙する。","mod mでの逆元","素数mod pでの逆元","$a^x = b \\\\bmod m$を満たすxを求める。","$x^p \\\\bmod m$を求める。","$x^2 = a \\\\bmod p$を満たすxを一つ求める。","0,1,..,nの素数mod pでの逆元を列挙する。","mod mでの逆元","素数mod pでの逆元","$a^x = b \\\\bmod m$を満たすxを求める。","$x^p \\\\bmod m$を求める。","$x^2 = a \\\\bmod p$を満たすxを一つ求める。","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","$\\\\sum_{i=0}^{\\\\infty} r^ii^d$","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","括弧列が対応が取れているかを調べる","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","正の無限大、負の無限大をもつ数","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","乗算についての単位元をもつ","","","加算についての単位元をもつ","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","浮動小数点型","整数型","符号付きの数値型","非負の数値型","","","","","","","","","","","","","","","","","","","","","重心列挙","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","重軽分解","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","最小共通祖先","","","","","","","","","全方位木DP","","","","","根付き木に変換","","","","","","","木DP","","","","","","","","","","","","","","","","","","","","","","","","","","Tree depth query","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","重軽分解","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","演算は可換性を仮定する。","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","…","","","","","","全方位木DP","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","木の任意の2頂点の距離の最大値を求める。","…","…","…","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,107,107,107,107,107,107,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,0,33,33,33,34,33,34,33,34,33,34,33,34,33,34,33,34,34,33,34,34,34,34,33,34,33,34,33,34,33,34,33,34,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,0,0,0,0,0,0,0,0,0,0,37,0,230,36,231,38,0,0,0,45,47,45,47,48,45,47,48,45,47,48,45,47,48,45,47,48,45,47,48,45,47,48,48,48,45,47,48,45,47,48,48,48,48,45,47,48,45,45,47,47,48,45,47,48,45,47,48,45,47,48,0,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,57,57,0,57,57,0,57,57,57,57,57,57,232,232,0,0,59,59,61,59,61,59,59,61,59,61,59,61,61,59,61,59,61,61,61,59,59,61,61,59,61,59,61,59,61,59,61,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,64,64,64,64,64,64,64,64,64,64,0,66,66,66,66,66,66,66,66,66,66,66,0,0,0,67,67,67,67,67,67,67,67,67,67,67,67,67,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,68,68,68,68,68,68,68,68,68,68,0,0,0,0,0,0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,0,0,0,72,74,72,74,72,74,72,74,72,72,74,72,72,74,72,74,72,74,72,74,0,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,0,0,0,77,77,77,77,77,77,77,77,77,77,0,78,78,78,78,78,78,78,78,78,78,78,0,0,0,0,0,79,79,79,79,79,79,79,79,79,79,79,79,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,0,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,0,0,86,86,0,84,86,84,86,84,86,84,86,84,86,86,84,86,84,86,84,84,84,86,84,86,84,86,84,86,84,86,84,0,0,0,88,88,89,88,89,88,89,89,89,89,88,89,89,88,89,88,89,88,89,88,89,88,89,88,88,89,0,0,0,90,90,91,90,91,90,91,91,91,91,90,91,91,90,91,90,91,90,91,90,91,90,91,90,90,91,0,0,93,93,93,93,93,93,93,93,93,93,0,0,0,95,95,95,95,95,95,95,95,95,95,95,95,95,0,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,0,97,97,97,97,97,97,97,97,97,97,97,97,0,0,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,0,0,102,102,102,102,102,102,102,102,102,102,102,102,102,0,0,103,103,104,103,104,103,103,104,103,104,103,104,104,103,104,103,104,103,103,104,103,104,103,104,103,104,104,103,104,0,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,0,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,0,108,108,108,108,108,108,108,108,108,108,108,0,0,110,110,110,110,110,110,110,110,110,110,110,110,0,0,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,0,0,116,116,0,114,114,114,116,114,116,116,116,116,116,114,116,114,116,114,114,116,114,116,114,116,114,116,114,116,0,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,0,0,119,118,119,118,118,118,119,118,119,119,118,119,118,119,118,119,119,119,119,118,119,118,119,118,119,118,0,0,120,120,121,120,121,120,121,120,121,121,120,120,120,121,121,120,121,120,121,120,121,120,121,0,122,122,122,122,122,122,122,122,122,122,122,0,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,0,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,0,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,0,0,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,0,0,127,128,127,128,127,127,127,127,127,128,127,128,127,127,128,127,128,127,128,127,128,127,128,127,0,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,0,0,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,0,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,0,0,134,134,134,134,134,134,134,134,134,134,134,0,0,135,136,135,136,135,135,135,135,135,136,136,135,136,135,135,135,136,135,136,135,136,135,136,136,135,0,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,0,140,140,140,140,140,140,140,140,140,140,0,141,141,0,0,143,141,143,141,141,141,143,143,141,143,141,143,141,143,141,143,141,143,141,143,143,141,0,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,0,0,0,0,233,234,235,0,236,237,236,233,234,235,237,0,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,0,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,185,0,185,0,0,185,185,0,185,185,0,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,0,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,0,149,149,149,149,149,149,149,149,149,149,149,149,149,149,0,0,0,0,150,151,150,150,150,150,0,0,0,152,150,151,153,152,150,151,153,0,153,0,152,150,151,153,152,150,151,153,0,0,0,0,0,0,150,151,150,151,153,151,0,0,0,150,150,151,152,150,151,153,150,151,153,152,150,151,153,151,152,152,0,0,0,0,0,0,152,150,151,153,151,151,152,152,150,152,152,151,153,150,151,152,0,150,151,153,151,150,0,151,152,150,151,153,152,150,151,153,152,150,151,153,152,150,151,153,150,151,152,150,151,153,0,0,0,0,155,155,155,155,155,155,155,0,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,0,0,0,0,0,0,0,156,156,156,156,156,156,0,156,156,0,156,156,156,156,156,156,0,0,0,0,157,0,157,157,157,157,157,157,157,157,157,157,0,157,157,157,157,157,157,157,157,158,0,158,158,158,158,158,158,158,158,158,158,158,158,0,158,158,158,158,158,158,158,158,158,158,159,159,159,159,0,159,159,159,159,159,159,159,159,159,159,159,159,0,159,159,159,159,159,159,159,159,159,159,160,0,160,160,160,160,160,160,160,160,160,160,160,0,160,160,160,160,160,160,160,160,160,161,0,161,161,161,161,161,161,161,161,161,161,0,161,161,161,161,161,161,161,161,161,161,162,162,162,0,162,162,162,162,162,162,162,162,162,162,162,0,162,162,162,162,162,0,0,0,0,0,0,0,164,165,165,0,0,0,0,0,167,163,166,165,167,163,166,165,0,0,0,167,163,166,165,167,163,166,165,0,0,0,165,0,0,165,165,167,163,166,165,164,167,167,163,166,165,167,0,167,167,163,166,165,165,0,165,0,0,167,165,0,0,164,167,0,164,167,167,167,163,166,165,167,163,166,165,167,163,166,165,0,0,0,167,163,166,165,167,163,166,165,0,164,167,167,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,173,173,173,173,173,173,173,173,173,173,173,173,173,173,176,0,0,0,176,176,174,174,175,176,174,175,176,174,176,176,176,176,174,175,176,175,174,175,176,175,175,174,175,176,174,175,176,174,175,176,174,175,176,174,175,176,0,0,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,0,0,0,177,177,177,177,177,177,0,177,177,177,177,0,178,178,178,178,178,178,178,178,178,178,178,0,0,0,0,0,0,179,179,0,0,179,0,179,179,179,180,179,181,180,179,181,180,179,181,180,179,181,180,179,179,179,180,179,180,179,181,180,179,181,181,181,180,179,181,181,181,180,180,179,181,0,180,179,181,180,179,181,180,179,181,180,179,181,180,179,181,180,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,0,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,186,186,186,186,186,186,186,186,186,186,0,0,187,187,188,187,188,188,188,188,187,188,187,187,188,187,187,188,187,188,187,188,187,188,187,188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,189,190,189,190,189,190,189,190,189,190,189,190,189,190,189,190,189,190,189,190,189,190,189,190,189,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,191,191,191,0,191,191,191,191,191,191,191,191,191,191,191,191,0,0,0,192,0,192,192,192,0,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,0,0,0,0,193,193,193,193,193,193,193,193,193,193,0,0,238,238,238,238,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,197,197,197,197,197,197,197,197,197,0,0,196,196,196,194,196,194,194,194,194,194,194,196,194,194,194,196,194,194,194,196,194,196,194,194,196,196,196,196,194,196,196,196,194,196,194,196,194,196,194,196,194,194,0,0,0,0,198,198,198,198,198,198,198,198,198,198,0,239,0,0,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,0,0,0,0,0,0,0,0,0,0,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,0,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,0,0,203,0,203,202,203,202,203,202,203,202,203,202,202,203,202,203,202,203,0,202,203,202,203,202,203,202,203,202,203,240,240,240,0,0,0,0,0,0,0,0,0,195,195,204,195,204,195,204,195,204,195,204,195,195,195,204,195,195,195,204,204,195,204,204,204,195,195,195,195,195,204,195,195,0,195,195,195,204,195,195,195,204,195,204,195,204,195,204,195,195,0,0,0,241,242,182,0,182,182,182,242,241,0,0,205,205,206,205,206,205,206,205,206,205,205,205,206,205,206,205,205,206,206,205,206,206,206,205,205,205,205,205,206,205,205,205,205,206,205,205,205,206,205,206,205,206,205,206,205,170,170,0,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,0,18,17,0,17,18,0,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,0,208,208,208,208,208,208,208,208,208,0,0,0,0,0,0,0,0,0,0,0,211,212,214,215,216,213,212,214,215,216,213,212,214,0,216,215,216,213,215,216,213,216,0,0,212,214,215,216,213,211,212,214,215,215,216,213,215,0,215,212,214,215,216,213,213,0,213,216,216,212,214,215,213,216,0,211,215,213,0,0,211,215,215,215,216,213,0,212,214,215,216,213,212,214,215,216,213,212,214,215,216,213,0,212,214,215,216,213,211,215,215,0,0,218,218,218,218,218,218,218,218,218,218,218,218,0,219,219,219,219,219,219,219,219,219,219,219,0,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,0,221,221,221,221,221,221,221,221,221,221,221,221,0,222,222,222,222,222,222,222,222,222,222,0,0,0,223,223,223,223,223,223,223,223,223,223,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,0,243,0,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,227,0,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,0,0,244,0,244,0,229,229,229,229,229,229,229,229,229,229,229,229,229,229,0,245],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[]],[[]],[[]],[[]],0,[[]],[[]],[[[3,[2,2]]],[[3,[2,2]]]],[[]],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]],[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]],1],[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]]]],[[],[[3,[5,5]]]],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]],[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]]],[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]]]],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]]],[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]]]],[[]],[[]],[[],3],[[]],[[],9],[[],9],[[],10],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]],[0,[4,6,5,[8,[7]]]],[0,[4,6,5,[8,[7]]]]],[[0,[4,6,5,[8,[7]]]]]],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]]],[[0,[4,6,5,[8,[7]]]]]],[[]],0,[[]],[[]],[[[11,[2]]],[[11,[2]]]],[[]],[[],[[11,[5]]]],[[[11,[12]],[11,[12]]],13],[[[11,[14]],15],16],[[]],[[[11,[[0,[17,18,19]]]]]],[[]],[[],11],[[[11,[[0,[4,6,19]]]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[20,[2]]],[[20,[2]]]],[[]],[[],[[20,[5]]]],[[[20,[12]],[20,[12]]],13],[[[20,[14]],15],16],[[]],[[[20,[7]]]],[[[20,[21]]]],[[[20,[22]]]],[[[20,[23]]]],[[[20,[24]]]],[[[20,[1]]]],[[]],[[],20],[[[20,[23]]]],[[[20,[24]]]],[[[20,[1]]]],[[[20,[22]]]],[[[20,[7]]]],[[[20,[21]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[25,[2]]],[[25,[2]]]],[[]],[[],[[25,[5]]]],[[[25,[12]],[25,[12]]],13],[[[25,[14]],15],16],[[]],[[[25,[22]]]],[[[25,[1]]]],[[[25,[24]]]],[[[25,[23]]]],[[[25,[21]]]],[[[25,[7]]]],[[]],[[],25],[[[25,[1]]]],[[[25,[22]]]],[[[25,[24]]]],[[[25,[21]]]],[[[25,[7]]]],[[[25,[23]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[26,[2]]],[[26,[2]]]],[[]],[[],[[26,[5]]]],[[[26,[12]],[26,[12]]],13],[[[26,[14]],15],16],[[]],[[[26,[1]]]],[[[26,[27]]]],[[[26,[28]]]],[[[26,[22]]]],[[[26,[29]]]],[[[26,[30]]]],[[[26,[31]]]],[[[26,[32]]]],[[[26,[7]]]],[[[26,[21]]]],[[[26,[23]]]],[[[26,[24]]]],[[]],[[[26,[32]]]],[[[26,[29]]]],[[[26,[21]]]],[[[26,[27]]]],[[[26,[7]]]],[[[26,[22]]]],[[[26,[31]]]],[[[26,[24]]]],[[[26,[1]]]],[[[26,[23]]]],[[[26,[28]]]],[[[26,[30]]]],[[],26],[[[26,[27]]]],[[[26,[30]]]],[[[26,[29]]]],[[[26,[23]]]],[[[26,[24]]]],[[[26,[28]]]],[[[26,[22]]]],[[[26,[1]]]],[[[26,[21]]]],[[[26,[7]]]],[[[26,[31]]]],[[[26,[32]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[33,33],[34,34],[[]],[[]],[[33,33],13],[[34,34],13],[[33,15],16],[[34,15],16],[[]],[[]],[34],[[]],[[]],[34],[1,34],[34],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,[[]],[[]],[[[35,[2]]],[[35,[2]]]],[[]],[[],[[35,[5]]]],[[[35,[12]],[35,[12]]],13],[[[35,[14]],15],16],[[]],[[[35,[36]]]],[[]],[37,[[35,[37]]]],[[[35,[38]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[39,[2]]],[[39,[2]]]],[[]],[[],[[39,[5]]]],[[[39,[12]],[39,[12]]],13],[[[39,[14]],15],16],[[]],[[[39,[27]]]],[[[39,[32]]]],[[[39,[21]]]],[[[39,[22]]]],[[[39,[24]]]],[[[39,[1]]]],[[[39,[23]]]],[[[39,[28]]]],[[[39,[31]]]],[[[39,[29]]]],[[[39,[7]]]],[[[39,[30]]]],[[]],[[],39],[[[39,[22]]]],[[[39,[27]]]],[[[39,[31]]]],[[[39,[21]]]],[[[39,[24]]]],[[[39,[30]]]],[[[39,[32]]]],[[[39,[28]]]],[[[39,[23]]]],[[[39,[7]]]],[[[39,[29]]]],[[[39,[1]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[40,[2]]],[[40,[2]]]],[[]],[[],[[40,[5]]]],[[[40,[12]],[40,[12]]],13],[[[40,[14]],15],16],[[]],[[[40,[24]]]],[[[40,[23]]]],[[[40,[7]]]],[[[40,[31]]]],[[[40,[22]]]],[[[40,[1]]]],[[[40,[28]]]],[[[40,[30]]]],[[[40,[32]]]],[[[40,[27]]]],[[[40,[29]]]],[[[40,[21]]]],[[]],[[],40],[[[40,[23]]]],[[[40,[24]]]],[[[40,[7]]]],[[[40,[27]]]],[[[40,[21]]]],[[[40,[31]]]],[[[40,[30]]]],[[[40,[22]]]],[[[40,[29]]]],[[[40,[28]]]],[[[40,[32]]]],[[[40,[1]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[41,[2]]],[[41,[2]]]],[[]],[[],[[41,[5]]]],[[[41,[12]],[41,[12]]],13],[[[41,[14]],15],16],[[]],[[[41,[32]]]],[[[41,[42]]]],[[[41,[24]]]],[[[41,[23]]]],[[[41,[28]]]],[[[41,[43]]]],[[[41,[22]]]],[[[41,[1]]]],[[[41,[31]]]],[[[41,[7]]]],[[[41,[30]]]],[[[41,[27]]]],[[[41,[21]]]],[[[41,[29]]]],[[]],[[],41],[[[41,[29]]]],[[[41,[27]]]],[[[41,[31]]]],[[[41,[32]]]],[[[41,[28]]]],[[[41,[42]]]],[[[41,[24]]]],[[[41,[21]]]],[[[41,[30]]]],[[[41,[22]]]],[[[41,[1]]]],[[[41,[7]]]],[[[41,[23]]]],[[[41,[43]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[44,[2]]],[[44,[2]]]],[[]],[[],[[44,[5]]]],[[[44,[12]],[44,[12]]],13],[[[44,[14]],15],16],[[]],[[[44,[1]]]],[[[44,[31]]]],[[[44,[24]]]],[[[44,[42]]]],[[[44,[22]]]],[[[44,[28]]]],[[[44,[21]]]],[[[44,[29]]]],[[[44,[23]]]],[[[44,[32]]]],[[[44,[7]]]],[[[44,[43]]]],[[[44,[27]]]],[[[44,[30]]]],[[]],[[[44,[43]]]],[[[44,[30]]]],[[[44,[29]]]],[[[44,[27]]]],[[[44,[28]]]],[[[44,[31]]]],[[[44,[32]]]],[[[44,[42]]]],[[],44],[[[44,[24]]]],[[[44,[23]]]],[[[44,[21]]]],[[[44,[28]]]],[[[44,[27]]]],[[[44,[42]]]],[[[44,[31]]]],[[[44,[29]]]],[[[44,[32]]]],[[[44,[43]]]],[[[44,[22]]]],[[[44,[7]]]],[[[44,[30]]]],[[[44,[1]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[7],[[]],[[]],[[]],0,0,0,[[45,[46,[2]]],[[46,[2]]]],[[47,[46,[2]]],[[46,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[45,45],[47,47],[[[48,[2]]],[[48,[2]]]],[[]],[[]],[[]],[[45,45],13],[[47,47],13],[[[48,[12]],[48,[12]]],13],[[45,15],16],[[47,15],16],[[[48,[14]],15],16],[[]],[[]],[[]],[[[48,[47]]]],[[[48,[45]]]],[[]],[[]],[[]],[45,[[46,[1]]]],[47,[[46,[1]]]],[[[48,[47]]]],[1,48],[[[48,[47]]]],[[[48,[45]]]],[[]],[[]],[[]],[[[46,[1]]],[[49,[45]]]],[[],9],[[[46,[1]]],[[49,[47]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[]],[[]],[[]],0,[[]],[[]],[[[50,[2]]],[[50,[2]]]],[[]],[[],[[50,[5]]]],[[[50,[12]],[50,[12]]],13],[[[50,[14]],15],16],[[]],[50],[[]],[[],50],[50],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[51,[2,2]]],[[51,[2,2]]]],[[]],[[[51,[[0,[4,5,[8,[[0,[6,5,[8,[7]]]]]]]],[0,[6,5,[8,[7]]]]]],1]],[[],[[51,[5,5]]]],[[[51,[[0,[4,5,[8,[[0,[6,5,[8,[7]]]]]]]],[0,[6,5,[8,[7]]]]]]]],[[[51,[[0,[4,5,[8,[[0,[6,5,[8,[7]]]]]]]],[0,[6,5,[8,[7]]]]]]]],[[]],[[]],[[],51],[[]],[[],9],[[],9],[[],10],[[[51,[[0,[4,5,[8,[[0,[6,5,[8,[7]]]]]]]],[0,[6,5,[8,[7]]]]]]]],[[[51,[[0,[4,5,[8,[[0,[6,5,[8,[7]]]]]]]],[0,[6,5,[8,[7]]]]]]]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[52],[52,1],[52,1],0,0,0,0,[[]],[[]],[[[0,[19,53,4,54,55,[8,[21]]]],[0,[19,53,4,54,55,[8,[21]]]],56],[[57,[[0,[19,53,4,54,55,[8,[21]]]]]]]],[[]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,[[[59,[[0,[2,52,58]]]],[0,[2,52,58]]]],[[[59,[[0,[2,52,58]]]],60]],[[]],[[]],[[]],[[]],[[[59,[[0,[2,52,58]]]]],[[61,[[0,[2,52,58]]]]]],[[[61,[2]]],[[61,[2]]]],[[[59,[2]]],[[59,[2]]]],[[]],[[]],[[[61,[[0,[2,52,58]]]],60],62],[[[61,[[0,[2,52,58]]]],60],62],[[],[[59,[5]]]],[[]],[[]],[[[61,[[0,[2,52,58]]]],1],[[0,[2,52,58]]]],[[[61,[[0,[2,52,58]]]],[0,[2,52,58]]],1],[[]],[[]],[[],[[59,[[0,[2,52,58]]]]]],[[[61,[[0,[2,52,58]]]]],1],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],[[],1],0,0,0,0,0,0,0,[24,62],[24,62],[[24,24],62],[24,62],[[24,24],62],[[24,24],62],[[24,24],62],0,[[]],[[]],[[[64,[[0,[19,63,18,4,54]]]]],[[46,[[0,[19,63,18,4,54]]]]]],[[]],[[]],[1,[[64,[[0,[19,63,18,4,54]]]]]],[[],9],[[],9],[[],10],[[[64,[[0,[19,63,18,4,54]]]],[65,[1]],[0,[19,63,18,4,54]]]],[[]],0,[[]],[[]],[[[66,[[0,[19,63,18,4,54]]]]],[[46,[[46,[[0,[19,63,18,4,54]]]]]]]],[[]],[[]],[[1,1],[[66,[[0,[19,63,18,4,54]]]]]],[[],9],[[],9],[[],10],[[[66,[[0,[19,63,18,4,54]]]],[65,[1]],[65,[1]],[0,[19,63,18,4,54]]]],[[]],[[],[[46,[1]]]],[[],7],0,[[]],[[]],[[[67,[2]]],[[67,[2]]]],[[]],[[[67,[14]],15],16],[[]],[[]],[[[67,[[0,[12,2]]]]],[[46,[1]]]],[[[46,[[0,[12,2]]]]],[[67,[[0,[12,2]]]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,[1,[[0,[5,[8,[1]],19,52,4,6]]]],[[[0,[5,19,4,52]]],[[0,[5,19,4,52]]]],[7,1],[1,[[0,[5,19,52,4]]]],[1,[[0,[5,19,52,4]]]],[[],[[46,[[0,[19,12]]]]]],[[],[[46,[1]]]],[[],49],[[],[[46,[1]]]],[[],49],[[[0,[19,12]]],1],[[]],[1],[1],[[[46,[[0,[52,19]]]],[46,[[0,[52,19]]]]],[[46,[[0,[52,19]]]]]],0,[[68,1,1]],[[]],[[]],[[]],[[]],[[1,1,[69,[56]],[69,[56]],[69,[56]],[69,[56]],[69,[56]]],68],[68],[[],9],[[],9],[[],10],[[]],[7,[[46,[7]]]],[[1,1,70,70,70],[[46,[1]]]],[[],13],[[[46,[[0,[52,19]]]]],62],[[],13],0,[[]],[[]],[71,71],[[]],[[]],[[71,1,7]],[[71,1,1,7]],[[71,1,1,7]],[[71,1,7]],[[71,1,1]],[[]],[[71,1]],[[71,1]],[1,71],[[71,1,7]],[[71,1,1,7]],[[71,1,7]],[[71,1,1,7]],[71,[[49,[30]]]],[[]],[[],9],[[],9],[[],10],[[]],[[],46],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[72,73],7],[[74,[65,[1]]],7],[[72,73],74],[[]],[[]],[[1,7,7],72],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,[[]],[[]],[75,75],[[]],[[75,15],16],[[]],[[75,1]],[[]],[75,[[46,[1]]]],[73,75],[[]],[75],[[],9],[[],9],[[],10],[[]],[1,[[46,[[0,[52,19]]]]]],[1,[[46,[[0,[52,19]]]]]],0,[[]],[[]],[[]],[[]],[[[46,[[0,[76,58]]]]],[[77,[[0,[76,58]]]]]],[[[77,[[0,[76,58]]]],[65,[1]],[0,[76,58]]],1],[[],9],[[],9],[[],10],[[]],0,[[78,[65,[1]]]],[[]],[[]],[[]],[[]],[[],78],[78,[[46,[7]]]],[[],9],[[],9],[[],10],[[]],0,0,[[1,1],[[46,[[0,[19,[8,[1]],4]]]]]],[[1,1],[[46,[13]]]],0,[[79,32,32]],[[79,32,32]],[[]],[[]],[[]],[[]],[1,79],[[79,32,32]],[79,[[49,[[46,[13]]]]]],[[],9],[[],9],[[],10],[[]],[[],[[46,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[80,80],[[]],[[80,7],1],[[80,7],[[49,[1]]]],[[80,15],16],[[]],[[80,7],1],[[]],[80,13],[80,1],[[80,7],[[49,[7]]]],[[80,7],[[49,[7]]]],[1,80],[[]],[[],9],[[],9],[[],10],[[]],0,[[81,81],24],[[81,81]],[[81,81]],[[81,81]],[[81,81]],[[81,81]],[[81,81]],[[]],[[]],[81,81],[[]],[81,24],[81,24],[[81,1]],[[81,15],16],[[81,15],16],[[]],[[]],[81,1],[1,81],[[81,81]],[[81,1,13]],[[81,1],13],[[]],[[],82],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,[[[84,[83]],[85,[83]]]],[[]],[[]],[[]],[[]],[86,86],[[[84,[2]]],[[84,[2]]]],[[]],[[]],[[86,86],13],[[86,15],16],[[[84,[14]],15],16],[[]],[[]],[[]],[[]],[86,[[84,[83]]]],[[[84,[83]],83],83],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,[[[88,[87]],1,19]],[[]],[[]],[[]],[[]],[[[88,[87]]],[[89,[87]]]],[[[89,[[0,[2,87]]]]],[[89,[[0,[2,87]]]]]],[[]],[[[89,[[0,[14,87]]]],15],16],[[[89,[87]],[65,[1]]],19],[[]],[[]],[[[89,[87]],1]],[[]],[[]],[[1,87],[[88,[87]]]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[[88,[87]],1,19]],[[]],[[]],0,0,0,[[[90,[87]],1,1,19]],[[]],[[]],[[]],[[]],[[[90,[87]]],[[91,[87]]]],[[[91,[[0,[2,87]]]]],[[91,[[0,[2,87]]]]]],[[]],[[[91,[[0,[14,87]]]],15],16],[[[91,[87]],[65,[1]],[65,[1]]],19],[[]],[[]],[[[91,[87]]]],[[]],[[]],[[1,1,87],[[90,[87]]]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[[90,[87]],1,1,19]],[[]],[[]],0,0,[[]],[[]],[[[93,[92]],[65,[1]]],[[49,[2]]]],[[]],[[]],[[[46,[2]],92],[[93,[92]]]],[[],9],[[],9],[[],10],[[]],0,0,0,[[]],[[]],[[]],[[[95,[94]]]],[[[95,[94]],1],2],[[]],[[1,94],[[95,[94]]]],[[[95,[94]]],[[46,[2]]]],[[],9],[[],9],[[],10],[[[95,[94]],[65,[1]],2]],[[]],0,[[]],[[]],[[[96,[[0,[2,94]]]]],[[96,[[0,[2,94]]]]]],[[]],[[[96,[[0,[14,94]]]],15],16],[[]],[[[96,[94]],1],2],[[]],[94,[[96,[94]]]],[[]],[[],9],[[],9],[[],10],[[[96,[94]],[65,[1]],2]],[[]],0,[[[97,[94]],1,2]],[[]],[[]],[[[97,[[0,[14,94]]]],15],16],[[[97,[94]],[65,[1]]],2],[[]],[[]],[94,[[97,[94]]]],[[],9],[[],9],[[],10],[[]],0,0,[[]],[[]],[[[99,[[0,[2,98]]]]],[[99,[[0,[2,98]]]]]],[[]],[[],[[99,[[0,[5,98]]]]]],[[[99,[98]],[65,[1]]],2],[[[99,[98]],[100,[1]]],2],[[]],[[]],[[1,98],[[99,[98]]]],[[]],[[],9],[[],9],[[],10],[[[99,[98]],1,2]],[[]],0,0,[[[102,[101]],1,101]],[[]],[[]],[[[102,[101]],[65,[1]]],101],[[[102,[101]],[100,[1]]],101],[[]],[[]],[1,[[102,[101]]]],[[[102,[101]],1,101]],[[],9],[[],9],[[],10],[[]],0,0,[[103,30,30]],[[]],[[]],[[]],[[]],[[103,19],[[104,[19]]]],[103,103],[[[104,[2]]],[[104,[2]]]],[[]],[[]],[[],103],[[[104,[[0,[19,4,54]]]],[65,[30]],[65,[30]]],[[0,[19,4,54]]]],[[[104,[[0,[19,4,54]]]],[100,[30]],[100,[30]]],[[0,[19,4,54]]]],[[]],[[]],[[]],[[]],[[],103],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[[104,[[0,[19,4,54]]]],30,30,[0,[19,4,54]]]],[[]],[[]],0,[[[105,[92]]],[[49,[2]]]],[[]],[[]],[[[105,[92]]],[[49,[2]]]],[[]],[[[105,[92]]],[[49,[2]]]],[[]],[[[105,[92]]],13],[[[105,[92]]],1],[92,[[105,[92]]]],[[[105,[92]]],[[49,[2]]]],[[[105,[92]]],[[49,[2]]]],[[[105,[92]],2]],[[[105,[92]],2]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[106,[2]]],[[106,[2]]]],[[]],[[],[[106,[5]]]],[[[106,[14]],15],16],[[]],[[]],[[[106,[52]]],13],[[[106,[52]]],1],[[[106,[52]]],[[49,[52]]]],[[[106,[52]]],[[49,[52]]]],[[],[[106,[52]]]],[[[106,[52]]],[[49,[52]]]],[[[106,[52]]],[[49,[52]]]],[[[106,[52]],52]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[108,[[0,[2,58]],[0,[2,58]],[0,[2,107]]]],[65,[1]]],[[0,[2,58]]]],[[]],[[]],[[1,[0,[2,107]]],[[108,[[0,[2,58]],[0,[2,58]],[0,[2,107]]]]]],[[],9],[[],9],[[],10],[[[108,[[0,[2,58]],[0,[2,58]],[0,[2,107]]]],[65,[1]],[0,[2,58]]]],[[]],0,0,[[]],[[]],[[[110,[109]],[65,[1]]],109],[[]],[[[110,[109]],[46,[109]]]],[[]],[[1,[46,[109]]],[[110,[109]]]],[[],9],[[],9],[[],10],[[[110,[109]],[65,[1]],109]],[[]],0,0,[[[112,[111]],111]],[[]],[[]],[[[112,[2]]],[[112,[2]]]],[[]],[[],[[112,[5]]]],[[[112,[14]],15],16],[[]],[[]],[[[112,[111]]],13],[[[112,[111]]],1],[[[112,[111]],[112,[111]]]],[[],[[112,[111]]]],[[[112,[111]]],[[49,[111]]]],[[[112,[111]]],[[49,[111]]]],[[[112,[111]],111]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,[[[114,[113]],[85,[113]]]],[[[114,[113]],[85,[113]],[115,[113]]]],[[]],[[]],[[]],[[]],[116,116],[[]],[[116,116],13],[[116,15],16],[[]],[[]],[[]],[[]],[[[46,[113]],116],[[114,[113]]]],[[[114,[113]],113],[[49,[113]]]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,[[]],[[]],[[[117,[2]]],[[117,[2]]]],[[]],[[[117,[[0,[52,58,2]]]],[0,[52,58,2]]],13],[[[117,[[0,[52,58,2]]]],[0,[52,58,2]]],1],[[],[[117,[5]]]],[[[117,[[0,[52,58,2]]]]],[[49,[[0,[52,58,2]]]]]],[[[117,[14]],15],16],[[]],[[[117,[[0,[52,58,2]]]],[0,[52,58,2]]]],[[]],[[[117,[[0,[52,58,2]]]]],13],[[[117,[[0,[52,58,2]]]]],[[49,[[0,[52,58,2]]]]]],[[[117,[[0,[52,58,2]]]]],1],[[],[[117,[[0,[52,58,2]]]]]],[[[117,[[0,[52,58,2]]]]],[[49,[[0,[52,58,2]]]]]],[[[117,[[0,[52,58,2]]]]],[[49,[[0,[52,58,2]]]]]],[[[117,[[0,[52,58,2]]]],[0,[52,58,2]]],13],[[]],[[],9],[[],9],[[],10],[[]],0,0,[[]],[[]],[[]],[[]],[118,1],[[],118],[[]],[[]],[[119,1],[[49,[118]]]],[[119,1],[[49,[118]]]],[118,1],[[]],[[]],[119,1],[118,32],[73,119],[[119,1],[[49,[118]]]],[[119,1],[[49,[118]]]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,[[120,1],121],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[121,1,1],13],[120,121],[[120,1,1]],[1,120],[[121,1],1],[[121,1],1],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,[[]],[[]],[[]],[[[122,[2]],1],2],[[]],[[1,2],[[122,[2]]]],[[[122,[2]],1,2],[[122,[2]]]],[[],9],[[],9],[[],10],[[]],0,[123,49],[[]],[[]],[[],[[123,[5]]]],[[[123,[14]],15],16],[[]],[123,49],[[]],[123,13],[123,1],[[],123],[123,[[49,[123]]]],[123,123],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[124,[2]]],[[124,[2]]]],[[]],[[],[[124,[5]]]],[[[124,[14]],15],16],[[]],[[]],[124,62],[[],124],[124,49],[124,[[49,[124]]]],[124,124],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[125,[[0,[18,4,54,19]]]]],1],[[[125,[[0,[18,4,54,19]]]],1,1],[[49,[[0,[18,4,54,19]]]]]],[[]],[[[125,[[0,[18,4,54,19]]]]],[[46,[[46,[1]]]]]],[[]],[[[125,[[0,[18,4,54,19]]]],1,1],13],[[[125,[[0,[18,4,54,19]]]],1,1,[0,[18,4,54,19]]],1],[1,[[125,[[0,[18,4,54,19]]]]]],[[[125,[[0,[18,4,54,19]]]],1],[[0,[18,4,54,19]]]],[[[125,[[0,[18,4,54,19]]]],1],1],[[[125,[[0,[18,4,54,19]]]],1],1],[[],9],[[],9],[[],10],[[]],0,0,[[]],[[]],[[126,24],13],[[],126],[[126,24],13],[[126,24]],[[]],[[126,24],13],[[126,24]],[[]],[126,13],[126,1],[126,[[49,[24]]]],[[126,24],[[49,[24]]]],[126,[[49,[24]]]],[[126,24],[[49,[24]]]],[[],126],[[],9],[[],9],[[],10],[[]],0,0,[[[127,[[0,[19,52]]]],[0,[19,52]],[0,[19,52]]]],[[]],[[]],[[]],[[]],[[[127,[[0,[19,52]]]]],[[128,[[0,[19,52]]]]]],[[[127,[2]]],[[127,[2]]]],[[]],[[],[[127,[5]]]],[[]],[[]],[[]],[[]],[[],[[127,[[0,[19,52]]]]]],[[[128,[[0,[19,52]]]]],46],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,[[[129,[2]],1,2]],[[]],[[]],[[[129,[2]]],[[129,[2]]]],[[]],[[],[[129,[5]]]],[[[129,[14]],15],16],[[]],[46,129],[[129,1]],[[]],[[[129,[2]]],13],[[[129,[2]]],1],[[],[[129,[2]]]],[[[129,[2]]],[[49,[2]]]],[[[129,[2]],2]],[[[129,[2]]],13],[[]],[[],9],[[],9],[[],10],[[]],0,0,[[[130,[94]],1,2]],[[]],[[]],[[[130,[[0,[2,94]]]]],[[130,[[0,[2,94]]]]]],[[]],[[[130,[94]],[131,[1]]],2],[[]],[[[130,[94]],1]],[[]],[[1,94],[[130,[94]]]],[[]],[[],9],[[],9],[[],10],[[[130,[94]],1,2]],[[]],0,[[132,[65,[1]],30]],[[]],[[]],[[132,[65,[1]],30]],[[132,[65,[1]],30]],[132,132],[[]],[[132,15],16],[[]],[[132,[65,[1]]],30],[[132,[65,[1]]],30],[[132,[65,[1]]],30],[[]],[1,132],[[[46,[30]]],132],[[]],[[],9],[[],9],[[],10],[[]],0,0,[[]],[[]],[[]],[[[134,[133]],1],133],[[]],[1,[[134,[133]]]],[[],9],[[],9],[[],10],[[[134,[133]],[65,[1]],[85,[133]]]],[[]],0,0,[[135,30,30]],[[]],[[]],[[]],[[]],[[135,[0,[94,2]]],[[136,[[0,[94,2]]]]]],[135,135],[[]],[[],135],[[[136,[94]],[65,[30]],[65,[30]]],2],[[]],[[]],[[]],[[]],[[],135],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[[136,[94]],30,30,2]],[[]],[[]],0,[[]],[[]],[[[137,[2]]],[[137,[2]]]],[[]],[[],[[137,[5]]]],[[[137,[14]],15],16],[[]],[[]],[[[137,[52]]],13],[[[137,[52]]],1],[[[137,[52]],[137,[52]]]],[[],[[137,[52]]]],[[[137,[52]]],[[49,[52]]]],[[[137,[52]]],[[49,[52]]]],[[[137,[52]],52]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[140,[[0,[38,138,139]]]],[65,[1]]],[[49,[[0,[2,5]]]]]],[[]],[[]],[[[46,[[0,[2,5]]]],[0,[38,138,139]]],[[140,[[0,[38,138,139]]]]]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[141,141],[[]],[[[143,[142]],[65,[1]]],[[49,[142]]]],[[]],[[]],[[]],[[]],[[1,141],[[143,[142]]]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[[143,[142]],[65,[1]],142]],[[]],[[]],0,[[144,1],7],[[]],[[]],[144,144],[[]],[[144,[65,[1]],13],1],[[]],[[]],[144,13],[144,1],[[[46,[13]]],144],[[144,1,13],1],[[144,1,13],[[49,[1]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[145,1],[[]],[145,[[46,[[46,[1]]]]]],[[]],[[145,1,1],13],[[145,1,1],1],[1,145],[[1,46,[69,[56]]],145],[[145,1],1],[[145,1],1],[[],9],[[],9],[[],10],[[145,1],49],[[]],0,[[146,1],7],[[]],[[]],[146,146],[[]],[[146,[131,[1]],7],1],[[]],[[]],[[146,[131,[1]]],[[49,[7]]]],[[146,[131,[1]]],[[49,[7]]]],[[[46,[7]]],146],[[146,[0,[[131,[1]],2]],7],[[49,[7]]]],[[146,[0,[[131,[1]],2]],7],[[49,[7]]]],[[146,[131,[1]],1],[[49,[7]]]],[[146,[0,[[131,[1]],2]],7,7],1],[[146,1,7],1],[[146,1,7],[[49,[1]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,[[1,1]],0,0,[1,46],[[1,1]],0,[1],[[]],0,[[147,1,1]],[[]],[[]],[147,147],[[]],[[]],[[147,1],46],[[]],[[147,1,1]],[1,147],[147],[[]],[[],9],[[],9],[[],10],[[]],0,[[148,1,1]],[[]],[[]],[148,148],[[]],[[]],[[148,1],46],[[]],[[148,1,1]],[1,148],[148],[[]],[[],9],[[],9],[[],10],[[]],0,[[149,1,1,7,30]],[[]],[[]],[149,149],[[]],[[]],[[]],[[149,1,1,7],[[9,[30]]]],[1,149],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,[150,43],[151,43],[150,43],[[150,150],150],[[150,150],43],[[150,150],43],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[152,152],[150,150],[151,151],[153,153],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[150,150],43],[[151,151],43],[[],150],[[],151],[[],153],[151,150],0,0,0,[[150,43],150],[[150,150],43],[[151,151],43],[[152,43,43],13],[[150,150,152],13],[[151,151,152],13],[[153,153,152],13],[[150,15],16],[[151,15],16],[[153,15],16],[[]],[[]],[[]],[[]],0,[[152,43,43],13],[[152,43,43],13],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[151,151,152],13],[[151,151,152],13],[[152,43,43],13],[[152,43,43],13],[[150,43],150],[[152,43,43],13],[43,152],[[150,150],151],[[150,43],153],[150,150],[151,150],[[152,43,43],[[49,[154]]]],0,[[43,43],150],[[151,150],150],0,[[151,150],150],[[150,150],150],0,0,[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[],10],[150,150],[151,150],[[]],[[]],[[]],[[]],[[153,152],43],[[153,153,152],43],[[],43],0,0,0,0,0,0,[[]],[[]],[[150,150,150,152],155],[155,13],[155,155],[[]],[155,13],[[155,155],13],[[155,15],16],[[]],[[]],[155,13],[155,13],[155,13],[[]],[155,31],[[],9],[[],9],[[],10],[[]],[[150,150,150],153],[[[46,[150]],152],49],[[153,153,152],[[46,[150]]]],[152,13],[[151,152]],[[],43],0,0,0,[[]],[[]],[156,156],[[]],[[[46,[150]],152],[[46,[150]]]],[[156,156],13],[[]],[[[46,[150]],156,152],[[46,[150]]]],[[]],[[]],[[],9],[[],9],[[],10],[[]],[[151,150],43],[[151,150],43],[[151,151],43],[[150,150,150],153],0,0,0,0,[[]],[[]],[157,157],[[]],[157,13],[[157,157],13],[[157,15],16],[[]],[[153,151,152]],[[]],[157,13],[157,13],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,0,[[]],[[]],[158,158],[[]],[[158,158],13],[[158,15],16],[[]],[158,13],[[153,151,152]],[[]],[158,13],[158,13],[158,13],[[]],[[],9],[[],9],[158,13],[[],10],[[]],0,0,0,0,0,0,0,[[]],[[]],[159,13],[159,159],[[]],[[159,159],13],[[159,15],16],[[]],[159,13],[159,13],[[153,153,152]],[159,13],[[]],[159,[[49,[24]]]],[159,13],[159,13],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,[[]],[[]],[160,160],[[]],[160,13],[[160,160],13],[[160,15],16],[[]],[[151,151,152]],[[]],[160,13],[160,13],[160,13],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,[[]],[[]],[161,161],[[]],[[161,161],13],[[161,15],16],[[]],[[151,151,152]],[161,13],[[]],[161,13],[161,13],[161,13],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,[[]],[[]],[162,162],[[]],[[162,162],13],[162,13],[[162,15],16],[[]],[162,13],[[]],[162,13],[[150,152],162],[[]],[[],9],[[],9],[[],10],[[]],[[153,150,152],[[46,[150]]]],0,0,0,0,0,0,0,[[[165,[163,[0,[164,2]]]],[0,[164,2]]]],[[[165,[166,[0,[164,2]]]],[0,[164,2]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[167,[2,2]]],[[167,[2,2]]]],[163,163],[166,166],[[[165,[2,2]]],[[165,[2,2]]]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[[165,[163,[0,[164,2]]]],60]],[[[165,[166,[0,[164,2]]]],60]],[[[167,[14,14]],15],16],[[163,15],16],[[166,15],16],[[[165,[14,14]],15],16],[[],1],[[]],[[[167,[2]]],1],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[165,13],0,[165,1],0,0,[[1,1],167],[1,[[165,[168,[0,[164,2]]]]]],0,0,[[]],[[[167,[2]]],[[167,[2]]]],0,[[],1],[[[167,[2]]],1],0,[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,0,[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],0,[[]],[[[167,[2]]]],0,0,[169,[[46,[1]]]],0,[[[165,[168,164]],1],[[46,[[170,[[0,[19,52,5,4]]]]]]]],[[[165,[168,164]],60],[[46,[[49,[1]]]]]],0,[169,46],[[[165,[166,164]]],[[46,[49]]]],[169,46],[[[165,[166,164]]],[[0,[18,19,52,4]]]],[[[165,[163,164]],1],[[46,[164]]]],0,[[[165,[163,164]],1],[[49,[[46,[164]]]]]],[[[165,[168,164]]],[[49,[[46,[164]]]]]],[[[165,[168,164]]],[[46,[[49,[[0,[4,19,52,18,171]]]]]]]],[[[165,[166,164]]],46],0,0,0,[[[172,[[0,[164,2]]]],[0,[164,2]]]],[[]],[[]],[[[172,[[0,[2,164]]]]],[[172,[[0,[2,164]]]]]],[[]],[[]],[[]],[1,[[172,[[0,[164,2]]]]]],[[[172,[[0,[164,2]]]]],49],[[]],[[],9],[[],9],[[],10],[[]],0,[[[173,[[0,[164,2]]]],[0,[164,2]]]],[[]],[[]],[[[173,[[0,[2,164]]]]],[[173,[[0,[2,164]]]]]],[[]],[[]],[[]],[1,[[173,[[0,[164,2]]]]]],[[[173,[[0,[164,2]]]]],49],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,0,[[174,1,1]],[[]],[[]],[[]],[[]],[[]],[[]],[174,175],[176,176],[[]],[[176,176],13],[[176,15],16],[[]],[[]],[[]],[[175,1],1],[[]],[[]],[[]],[[175,1],176],[175,[[46,[[46,[1]]]]]],[1,174],[[175,1],1],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[[165,[166,[0,[2,164]]]]],[[46,[[0,[2,164]]]]]],0,0,[[]],[[]],0,[169,169],[[]],[[169,15],16],[[]],[[]],0,[[[165,[166,164]]],169],0,0,0,[[]],[[],9],[[],9],[[],10],[[]],[[[165,[166,164]]],[[46,[1]]]],[[[165,[166,164]]],[[46,[164]]]],0,[[]],[[]],[[]],0,0,[[]],[[[165,[166,164]]],177],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[]],[178,[[46,[[46,[1]]]]]],[[]],[[[165,[163,164]]],178],[178,[[46,[1]]]],[[],9],[[],9],[[],10],[[]],[[[165,[163,164]]],[[49,[[46,[1]]]]]],[[[165,[163,164]],1],[[49,[[0,[19,52,4]]]]]],[169,[[46,[[46,[1]]]]]],[[[165,[168,164]]],[[49,[[46,[[46,[[49,[[0,[4,19,52,18]]]]]]]]]]]],0,[[[165,[168,164]],1,1,1],[[46,[49]]]],0,0,0,0,0,0,0,0,[[179,179],179],[[]],[[]],[[]],[[]],[[]],[[]],[180,180],[179,179],[[[181,[2]]],[[181,[2]]]],[[]],[[]],[[]],[[],180],[[],179],0,0,[[180,180],13],[[179,179],13],[[180,15],16],[[179,15],16],[[[181,[14]],15],16],[[]],[[]],[[]],[[181,180]],[[181,180]],[[]],[[]],[[]],[181,62],[181,62],[[180,179,1,1],[[49,[180]]]],[[1,1],180],[[32,32],179],[60,181],0,[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[]],[[]],[[]],0,0,[[1,1,56,56],[[165,[163,[167,[2]]]]]],0,0,0,0,0,0,0,[[[46,[81]]],7],[[[46,[[46,[7]]]],7],7],[[[46,[81]]]],[[[46,[81]]],[[49,[[46,[81]]]]]],[[[46,[[46,[7]]]],7],[[49,[[46,[[46,[7]]]]]]]],0,[[[183,[182]],[183,[182]]],[[183,[182]]]],[[[183,[182]],[183,[182]]]],[[]],[[]],[[[183,[[0,[2,182]]]]],[[183,[[0,[2,182]]]]]],[[]],[[[183,[[0,[12,182]]]],[183,[[0,[12,182]]]]],13],[[]],[[[46,[[46,[24]]]],182],[[183,[182]]]],[[[183,[182]],1,1],49],[[[183,[182]]],1],[[[183,[182]],1]],[[]],[[[183,[182]],[183,[182]]],[[183,[182]]]],[[[183,[182]],[183,[182]]]],[[[183,[182]]],[[183,[182]]]],[[1,1,182],[[183,[182]]]],[[[183,[182]],[183,[182]]],[[183,[182]]]],[[[183,[182]],[183,[182]]]],[[]],[[[183,[182]]],[[183,[182]]]],[[],9],[[],9],[[],10],[[]],[[[183,[182]]],1],0,[[[184,[182]],[184,[182]]],[[184,[182]]]],[[[184,[182]],[184,[182]]]],[[]],[[]],[[[184,[[0,[2,182]]]]],[[184,[[0,[2,182]]]]]],[[]],[[[184,[[0,[12,182]]]],[184,[[0,[12,182]]]]],13],[[]],[[[46,[[46,[24]]]],182],[[184,[182]]]],[[[184,[182]],1,1],49],[[[184,[182]],1]],[[]],[[[184,[182]],[184,[182]]],[[184,[182]]]],[[[184,[182]],[184,[182]]]],[[[184,[182]]],[[184,[182]]]],[[1,182],[[184,[182]]]],[[[184,[182]],7],[[184,[182]]]],[[[184,[182]]],1],[[[184,[182]],[184,[182]]],[[184,[182]]]],[[[184,[182]],[184,[182]]],[[184,[182]]]],[[[184,[182]],[184,[182]]],[[184,[182]]]],[[[184,[182]],[184,[182]]]],[[]],[[[184,[182]]],[[184,[182]]]],[[],9],[[],9],[[],10],[[1,182],[[184,[182]]]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[186,[185]],1,1]],[[]],[[]],[[]],[[]],[[[186,[185]]],7],[[1,1],[[186,[185]]]],[[],9],[[],9],[[],10],[[]],0,0,[[187,1,1]],[[]],[[]],[[]],[[]],[188,188],[[]],[[188,15],16],[[]],[[]],[187,46],[[]],[[]],[187,24],[[1,1],187],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,182],[[46,[46]]]],[[[46,[24]],182],46],0,0,[[]],[[]],[[]],[[]],[189,189],[190,190],[[]],[[]],[[]],[[]],[[189,7,7],7],[[190,7,7],7],[[]],[[]],[[7,7],189],[7,190],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,0,0,0,0,[[[46,[[0,[19,4,54,6]]]],[46,[[0,[19,4,54,6]]]]],[[46,[[0,[19,4,54,6]]]]]],[[[46,[[0,[19,4,54,6]]]],[46,[[0,[19,4,54,6]]]]],[[46,[[0,[19,4,54,6]]]]]],[[]],[[]],[[[46,[[0,[19,5,4,54,6]]]],[46,[[0,[19,5,4,54,6]]]]],[[46,[[0,[19,5,4,54,6]]]]]],[[]],[[]],[[7,7],7],[[],49],[[],49],[7,7],[7,[[46,[7]]]],0,[[]],[[]],[191,191],[[]],[7,[[46,[191]]]],[[191,191],13],[[191,15],16],[[]],0,[[]],0,0,[[]],[[],9],[[],9],[[],10],[[]],[[7,7]],0,0,[[[192,[182]],1,1]],0,[[[192,[182]],1],46],[[]],[[]],0,[[[192,[182]],1]],[[[192,[[0,[2,182]]]]],[[192,[[0,[2,182]]]]]],[[]],[[[192,[182]],1,1]],[[[192,[182]],1]],[[[192,[[0,[14,182]]]],15],16],[[]],[[[192,[182]],1,1]],[[]],[[[192,[182]],1]],[[1,182],[[192,[182]]]],[[[192,[182]],1,1]],[[]],[[],9],[[],9],[[],10],[[]],[[7,7],7],0,0,0,[[]],[[]],[[193,1],[[46,[1]]]],[[]],[[]],[1,193],[[],9],[[],9],[[],10],[[]],[7,46],0,0,[[]],[[]],[[]],[[30,30,7],[[49,[30]]]],[7,13],0,0,0,0,0,0,[[1,7],[[46,[7]]]],[[7,7],[[49,[7]]]],[[7,7],7],[[7,7,7],[[49,[7]]]],[[7,7,7],7],[[7,7],[[49,[7]]]],[[1,7],[[46,[7]]]],[[194,[46,[195]],196],[[46,[195]]]],[[23,23],23],[[24,24],24],[[7,7],7],[[21,21],21],0,[[]],[[]],[[197,[46,[195]],[46,[195]]],[[46,[195]]]],[[]],[[]],[[24,1],197],[[],9],[[],9],[[],10],[[]],0,0,[[196,194,194],194],[[196,194,194]],[[]],[[]],[[]],[[]],[194,194],[[]],[[194,1],195],[195,194],[194,[[49,[1]]]],[[196,194,194]],[[194,194],13],[[194,195],195],[[194,15],16],[[]],[[]],[[[46,[195]]],194],[[194,1],194],[[]],[[]],[[196,194,1],194],[194,13],[194,1],[[196,194,194],194],[[196,194,194]],[197,196],[[196,194,195],194],[194],[[196,194],194],[[196,194,194],194],[[196,194,194]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],[[],194],[[[46,[195]],195,197],[[46,[195]]]],0,0,0,[[]],[[]],[[]],[[]],[[198,1],13],[1,198],[[],9],[[],9],[[],10],[[]],0,[[],13],[7,[[49,[7]]]],0,[[199,199],199],[[199,199]],[[]],[[]],[199,199],[[]],[[199,199],199],[[199,199]],[[199,199],13],[[199,15],16],[[]],[30,199],[[]],[[199,199],199],[[199,199]],[199,199],[[30,30],199],[[199,199],[[49,[154]]]],[[199,199],199],[[199,199]],[[]],[[],9],[[],9],[[],10],[[]],[[7,7,7,7],7],[[7,7,7],7],[7,7],[1,[[46,[7]]]],[[7,7],7],0,0,0,0,0,[[]],[[]],[[[200,[2]]],[[200,[2]]]],[[]],[[],[[200,[5]]]],0,[[[200,[12]],[200,[12]]],13],[[[200,[14]],15],16],[[]],[[]],[[[200,[[0,[52,12,19]]]],[200,[[0,[52,12,19]]]]],[[9,[[200,[[0,[52,12,19]]]]]]]],[[],200],0,[[]],[[],9],[[],9],[[],10],[[]],0,0,[[]],[[]],0,[[[201,[2]]],[[201,[2]]]],[[]],[[[201,[12]],[201,[12]]],13],[[[201,[14]],15],16],[[]],0,[[]],0,[[2,2,2,2,2,2],[[201,[2]]]],0,[[[201,[2]]],[[201,[2]]]],[[[201,[2]]],[[201,[2]]]],[[[201,[2]]],[[201,[2]]]],[[[201,[2]]],[[201,[2]]]],[[[201,[2]]],[[201,[2]]]],[[[201,[2]]],[[201,[2]]]],[[]],0,[[],9],[[],9],[[],10],[[]],[[60,[0,[19,58]],[0,[19,58]]],13],0,0,0,0,[[]],[[]],[[]],[[]],[[[202,[2]]],[[202,[2]]]],[[[203,[2]]],[[203,[2]]]],[[]],[[]],0,[[[202,[14]],15],16],[[[203,[14]],15],16],[[]],[[]],[[]],[[]],[[60,[0,[19,58,14]],[0,[19,58,14]]],[[49,[[202,[[0,[19,58,14]]]]]]]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[195,195],195],[[195,195]],[[]],[[]],[[]],[[]],[204,204],[195,195],[[]],[[]],[[],204],[[],195],[[195,195],195],[[195,195]],[[204,204],13],[[195,195],13],[[195,15],16],[[195,15],16],[[204,30,30]],[[]],[[]],[[204,30]],[[204,7]],[[]],[[]],[195,195],[[195,195],195],[[195,195]],[195,195],[[],204],[24,195],[[]],0,[[195,7],195],[[195,195],195],[[195,195]],[[]],[[]],[[],82],[195,24],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],[[]],0,0,0,0,0,0,0,[[30,30]],[30],[7],[[]],[7],0,0,[[205,205],205],[[205,205]],[[]],[[]],[[]],[[]],[206,206],[205,205],[[]],[[]],[[205,205],205],[[205,205]],[[206,206],13],[[205,205],13],[[206,15],16],[[205,15],16],[[205,15],16],[[206,30,30]],[[]],[[]],[[206,30]],[[206,7]],[[]],[[]],[205],[[205,205],205],[[205,205]],[205,205],[24,206],[[24,24],205],[[205,7]],[[205,205],205],[[205,205]],[[]],[[]],[[],82],[205,24],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,0,[[[170,[4]],[170,[4]]],[[170,[4]]]],[[]],[[]],[[[170,[2]]],[[170,[2]]]],[[]],[[[170,[52]],[170,[52]]],154],[[[170,[12]],[170,[12]]],13],[[[170,[14]],15],16],[[]],[[]],[[[170,[19]]],13],[[[170,[19]]],13],[[[170,[19]]],13],[[[170,[207]]],[[170,[207]]]],[[[170,[53]],[170,[53]]],[[49,[154]]]],[[[170,[54]],[170,[54]]],[[170,[54]]]],[[]],[[],9],[[],9],[[],10],[[[170,[19]]],19],[[]],0,0,0,0,[[]],[[]],0,[[208,208]],[[208,208]],[[]],[[]],[208,208],[[]],[[208,208],154],[[],208],[[208,208]],[[208,208]],[[208,208],13],[[208,15],16],[[]],[[]],[[208,208]],[[208,208]],[208],[[]],0,[[208,208],[[49,[154]]]],[[208,208]],[[208,208]],[[]],[[],9],[[],9],[[],10],[[]],[[]],0,0,0,0,[[209,[65,[[0,[210,53,2]]]]],[[65,[[0,[210,53,2]]]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[212,[[0,[211,2]]]]],[[213,[[0,[211,2]]]]]],[[[214,[[0,[211,2]]]]],[[213,[[0,[211,2]]]]]],0,0,[[[215,[2,2]]],[[215,[2,2]]]],[[[216,[2]]],[[216,[2]]]],[[[213,[2]]],[[213,[2]]]],[[]],[[]],[[]],[[],[[216,[5]]]],0,0,[[[212,[[0,[211,2]]]],60]],[[[214,[[0,[211,2]]]],60]],[[[215,[14,14]],15],16],[[[216,[14]],15],16],[[[213,[14]],15],16],[[],1],[[]],[[]],[[[215,[2]]],1],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[213,13],0,[213,1],[[[216,[211]]],217],[[[216,[211]]],1],[1,[[212,[[0,[211,2]]]]]],[[1,1],[[214,[[0,[211,2]]]]]],[[1,1],215],[213,62],0,0,[[]],[[[215,[2]]],[[215,[2]]]],[213,[[49,[1]]]],0,0,[[],1],[[[215,[2]]],1],0,[[]],[[]],[[]],0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[],10],[[],10],0,[[]],[[]],[[]],[[]],[[]],[[]],[[[215,[2]]]],0,[[[213,[211]]],[[46,[1]]]],0,[[218,1,1],[[49,[1]]]],[[]],[[]],[[218,1,1],49],[[]],[[]],[[218,1]],[[[213,[211]],1],218],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[]],[[]],[[[213,[211]],1],219],[[219,1],1],[[219,1]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[220,220],[[]],[[220,15],16],[[]],[[220,1],1],[[]],[[220,1,1],1],[[[213,[211]],1],220],[[220,1],[[49,[1]]]],[[220,1,1],46],[[220,1,1],46],[[220,1]],[[220,1]],[[]],[[],9],[[],9],[[],10],[[]],0,[[221,1,1],[[49,[1]]]],[[]],[[]],[[]],[[221,1,1],1],[[]],[[221,1,1,1],[[49,[1]]]],[[[213,[211]],1],221],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[]],[[]],[[2,[69,[56]],[69,[56]],[69,[56]]],[[222,[19,2]]]],[[[222,[19,2]],[213,[211]]],[[46,[2]]]],[[],9],[[],9],[[],10],[[]],[[[213,[211]],1]],[[[213,[211]],1],[[9,[73]]]],0,[[]],[[]],[[]],[[]],[[2,[69,[56]],[69,[56]],[69,[56]]],[[223,[19,2]]]],[[[223,[19,2]],[213,[211]],1],[[46,[2]]]],[[],9],[[],9],[[],10],[[]],[[[213,[211]]]],[[[213,[211]],1],[[46,[[0,[4,19,5]]]]]],[[[213,[211]]],46],[[[213,[211]],1,1],[[46,[1]]]],0,0,0,0,0,0,0,0,0,0,[7,24],0,[[]],[[]],[224],[[]],[224,[[49,[21]]]],[[]],[[],224],[224,[[49,[21]]]],[224,[[46,[225]]]],[224,43],[224,31],[224,30],[224,32],[224,24],[224,7],[224,1],[224],[[],9],[[],9],[[],10],[[]],[[224,226]],[[224,226]],0,[73,82],0,0,[[[85,[[0,[4,6,19]]]],[0,[4,6,19]]],[[0,[4,6,19]]]],0,[[]],[[]],[[[85,[2]]],[[85,[2]]]],[[]],[[[85,[14]],15],16],[[]],[[]],[[[85,[[0,[54,6,19]]]],[0,[54,6,19]]],[[85,[[0,[54,6,19]]]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,[[]],[[]],[227,227],[[]],[[227,227],154],[[],227],[[227,227],13],[[227,15],16],[[]],[[227,228]],[[]],[227,13],[[227,227],[[49,[154]]]],[[]],[[],9],[[],9],[[],10],[[]],[[[131,[1]],1,1]],[[1,1,1,1]],0,0,[[]],0,[[]],[[]],[229,229],[[]],[[229,15],16],[[]],[229,7],[[]],[[],229],[[]],[[],9],[[],9],[[],10],[[]],0,[[73,73],73]],"c":[],"p":[[15,"usize"],[8,"Clone"],[3,"AddSum"],[8,"Add"],[8,"Default"],[8,"Mul"],[15,"u64"],[8,"From"],[4,"Result"],[3,"TypeId"],[3,"Affine"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"One"],[8,"Zero"],[8,"Copy"],[3,"BitAnd"],[15,"u8"],[15,"u128"],[15,"u16"],[15,"u32"],[3,"BitOr"],[3,"BitXor"],[15,"i8"],[15,"i128"],[15,"i16"],[15,"i64"],[15,"i32"],[15,"isize"],[4,"DihedralValue"],[3,"Dihedral"],[3,"Dual"],[8,"Identity"],[8,"AlgeStruct"],[8,"BinaryOp"],[3,"Max"],[3,"Min"],[3,"Prod"],[15,"f32"],[15,"f64"],[3,"Sum"],[3,"Transformation"],[3,"Vec"],[3,"Permutation"],[3,"Composition"],[4,"Option"],[3,"Update"],[3,"UpdateSum"],[8,"Ord"],[8,"PartialOrd"],[8,"Sub"],[8,"Div"],[8,"Fn"],[4,"SearchResult"],[8,"Eq"],[3,"CompressorBuilder"],[8,"IntoIterator"],[3,"Compressor"],[8,"Iterator"],[8,"Signed"],[3,"Imos1D"],[3,"Range"],[3,"Imos2D"],[3,"KMP"],[3,"Mo"],[3,"Box"],[8,"FnMut"],[3,"PSP"],[3,"RollingHash"],[15,"str"],[3,"Table"],[3,"SuffixArray"],[8,"Hash"],[3,"StaticRangeFreqQuery"],[3,"StaticRangeInversionsQuery"],[3,"TwoSat"],[3,"BinaryTrie"],[3,"Bitset"],[3,"String"],[8,"Elem"],[3,"ConvexHullTrick"],[3,"Linear"],[4,"Mode"],[8,"Group"],[3,"CumulativeSum1DBuilder"],[3,"CumulativeSum1D"],[3,"CumulativeSum2DBuilder"],[3,"CumulativeSum2D"],[8,"Semigroup"],[3,"DisjointSparseTable"],[8,"Monoid"],[3,"DualSegtree"],[3,"DynamicDualSegtree"],[3,"DynamicSegtree"],[8,"AbelianGroup"],[3,"FenwickTree"],[3,"RangeTo"],[8,"Elem"],[3,"FenwickTreeAdd"],[3,"FenwickOnFenwickBuilder"],[3,"FenwickOnFenwick"],[3,"FoldableDeque"],[3,"IntervalHeap"],[8,"Action"],[3,"LazySegtree"],[8,"Elem"],[3,"LazySegtreeCoeff"],[8,"Elem"],[3,"LazySkewHeap"],[8,"Elem"],[3,"LiChaoTree"],[3,"RangeInclusive"],[4,"Mode"],[3,"MultiSet"],[3,"Node"],[3,"PalindromicTree"],[3,"PartiallyPersistentUnionFind"],[3,"At"],[3,"PersistentArray"],[3,"PersistentQueue"],[3,"PersistentStack"],[3,"PotentialUnionFind"],[3,"QwordTree"],[3,"RangeSearchTreeBuilder"],[3,"RangeSearchTree"],[3,"RollbackableVec"],[3,"Segtree"],[8,"RangeBounds"],[3,"SegtreeBeats"],[8,"Elem"],[3,"SegtreeLinearAdd"],[3,"SegtreeOnSegtreeBuilder"],[3,"SegtreeOnSegtree"],[3,"SkewHeap"],[8,"Associative"],[8,"Idempotence"],[3,"SparseTable"],[4,"Mode"],[8,"Elem"],[3,"StarrySkyTree"],[3,"SuccinctDict"],[3,"UnionFind"],[3,"WaveletMatrix"],[3,"Dinic"],[3,"FordFulkerson"],[3,"MinCostFlow"],[3,"Vector"],[3,"Line"],[3,"Eps"],[3,"Circle"],[4,"Ordering"],[4,"CCW"],[4,"Hull"],[4,"IntersectCircleLine"],[4,"IntersectCircleSegment"],[4,"IntersectCircles"],[4,"IntersectLineSegment"],[4,"IntersectSegments"],[4,"PointPolygon"],[3,"Directed"],[8,"EdgeTrait"],[3,"Graph"],[3,"Undirected"],[3,"Edge"],[8,"Direction"],[3,"Lowlink"],[4,"NumInf"],[8,"Unsigned"],[3,"DirectedEulerianTrail"],[3,"UndirectedEulerianTrail"],[3,"FunctionalGraphBuilder"],[3,"FunctionalGraph"],[4,"Kind"],[3,"PseudoTree"],[3,"SCC"],[3,"Dir"],[3,"Position"],[3,"Grid"],[8,"FF"],[3,"Matrix"],[3,"SquareMatrix"],[8,"MaxFlow"],[3,"BipartiteMatching"],[3,"HopcroftKarp"],[3,"Edge"],[3,"ExtLucas"],[3,"BinomialCoefficient"],[3,"Quotient"],[3,"FactorialTable"],[3,"FactorizeSieve"],[3,"Polynomial"],[3,"ConstModInt"],[3,"PolynomialOperator"],[3,"NTT"],[3,"EratosthenesSieve"],[3,"Rational"],[3,"ClosedInterval"],[3,"Dice"],[3,"ParseResult"],[4,"Elem"],[3,"ConstModIntBuilder"],[3,"ModInt"],[3,"ModIntBuilder"],[8,"Neg"],[3,"Totalf64"],[8,"Rng"],[8,"SampleUniform"],[8,"TreeEdgeTrait"],[3,"TreeBuilder"],[3,"Tree"],[3,"RootedTreeBuilder"],[3,"TreeEdge"],[3,"TreeNode"],[8,"DoubleEndedIterator"],[3,"TreeDepthQuery"],[3,"EulerTour"],[3,"HLD"],[3,"DoublingLCA"],[3,"RerootingDP"],[3,"TreeDP"],[3,"FastIO"],[15,"char"],[8,"Display"],[3,"NullableUsize"],[8,"Hasher"],[3,"XorShift"],[8,"Exponential"],[8,"Inverse"],[13,"NgOk"],[8,"Foldable"],[8,"Foldable2D"],[8,"Indexable"],[8,"Assignable"],[8,"Updatable"],[8,"GcdLcm"],[8,"CheckPrime"],[13,"Paren"],[8,"Pow"],[8,"Inv"],[8,"JoinStr"],[8,"Transpose"],[8,"YesNo"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
