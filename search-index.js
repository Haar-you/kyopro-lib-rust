var searchIndex = JSON.parse('{\
"haar_lib":{"doc":"Rust GitHub last commit","t":[0,0,14,14,14,14,0,14,14,0,14,14,0,0,14,14,14,0,0,14,14,0,14,14,14,14,0,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,16,16,10,10,10,10,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,16,16,8,10,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,8,8,8,8,8,8,16,8,10,10,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,0,0,0,0,0,0,5,5,5,5,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,0,0,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,2,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,2,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,2,2,11,11,11,11,11,11,11,11,11,11,3,2,2,11,11,11,11,11,11,11,11,11,11,11,11,11,3,2,2,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,2,2,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,2,11,11,11,11,11,11,11,11,11,11,11,8,2,3,2,11,11,11,11,11,11,11,11,11,11,11,11,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,2,2,3,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,2,3,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,8,2,13,13,4,3,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,8,16,16,16,8,16,16,10,10,10,10,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,3,8,3,3,10,11,11,11,11,10,11,11,11,11,11,11,0,0,0,10,11,11,11,11,11,11,11,11,11,0,12,0,11,11,11,11,11,11,11,11,0,0,0,0,0,0,10,11,11,11,11,11,11,11,11,0,0,0,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,0,0,0,0,0,0,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,0,11,11,12,11,10,11,10,11,10,11,11,11,11,10,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,4,13,13,13,13,13,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,4,13,13,11,11,11,11,5,11,11,5,11,11,11,11,11,11,5,5,5,5,13,4,13,13,11,11,11,11,11,11,11,5,11,11,11,11,11,11,13,4,13,13,13,13,11,11,11,11,11,11,11,5,11,11,11,11,11,11,13,13,13,13,4,13,13,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,13,4,13,13,13,11,11,11,11,11,11,11,5,11,11,11,11,11,11,13,4,13,13,13,11,11,11,11,11,11,11,5,11,11,11,11,11,11,13,13,13,4,11,11,11,11,11,11,11,11,5,11,11,11,11,11,5,3,8,3,8,3,3,16,11,11,0,0,0,0,0,0,11,11,11,11,11,11,11,11,0,0,0,11,11,11,11,11,11,11,11,0,0,0,0,12,0,0,11,11,0,11,11,11,11,0,10,11,11,11,11,11,12,0,12,11,11,11,11,11,0,11,0,0,0,11,11,0,0,10,11,0,10,11,12,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,11,11,11,11,11,11,11,11,0,10,11,12,5,2,5,5,3,11,11,11,11,11,11,11,11,11,11,11,2,5,5,5,5,5,0,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,8,10,10,10,10,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,3,12,11,11,12,11,11,11,11,11,12,11,12,12,12,11,11,11,11,11,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,3,11,11,11,12,12,11,5,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,18,18,3,18,3,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,12,12,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,3,11,11,11,11,5,11,11,11,12,11,12,12,11,11,11,11,11,5,3,0,11,0,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,0,3,11,11,11,11,11,11,11,11,11,11,5,0,0,0,3,2,2,2,2,2,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,2,2,3,8,2,2,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,8,8,8,16,16,16,8,10,10,10,8,16,10,10,10,0,0,0,0,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,0,0,3,11,11,11,11,11,11,11,11,11,11,8,10,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,0,0,3,12,11,11,12,11,11,11,11,11,12,11,12,11,12,11,11,11,11,11,11,11,12,11,11,11,11,5,5,3,3,8,3,16,11,11,11,11,11,11,0,12,11,11,11,11,11,11,0,0,11,11,11,11,11,10,11,11,11,11,12,0,12,11,11,11,11,0,11,11,11,11,11,12,12,0,10,11,0,0,10,11,12,11,11,11,0,11,11,11,11,11,11,11,11,11,0,11,11,11,10,11,12,5,3,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,5,5,3,11,11,11,11,11,11,11,11,11,11,5,5,5,5,0,0,0,0,0,0,0,0,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,16,8,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10],"n":["algebra","algo","btreemap","btreeset","chmax","chmin","ds","eps","for_loop","geom","get","get_time","graph","grid","hashmap","hashset","input","macros","math","max","min","misc","modulo","mul_vec","rec","sort_with","testtools","timer","trait_alias","tree","utils","action","add_sum","affine","bitxor","dihedral","dual","max","min","one_zero","prod","sum","traits","update","update_sum","Action","FType","UType","convert","fold","fold_id","update","update_id","AddSum","borrow","borrow_mut","clone","clone_into","convert","default","fold","fold_id","from","into","new","to_owned","try_from","try_into","type_id","update","update_id","vzip","Affine","borrow","borrow_mut","clone","clone_into","default","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","BitXor","borrow","borrow_mut","clone","clone_into","default","from","id","id","id","id","id","id","id","id","id","id","id","id","into","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","new","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","Dihedral","DihedralValue","R","S","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","fmt","from","from","id","into","into","inv","new","op","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Dual","borrow","borrow_mut","clone","clone_into","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","Max","borrow","borrow_mut","clone","clone_into","default","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","Min","borrow","borrow_mut","clone","clone_into","default","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","One","Output","Output","Zero","one","zero","Prod","borrow","borrow_mut","clone","clone_into","default","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","Sum","borrow","borrow_mut","clone","clone_into","default","from","id","into","inv","new","op","to_owned","try_from","try_into","type_id","vzip","AlgeStruct","Associative","BinaryOp","Commutative","Group","Idempotence","Identity","Inverse","Monoid","Output","Semigroup","id","inv","op","Update","borrow","borrow_mut","clone","clone_into","default","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","UpdateSum","borrow","borrow_mut","clone","clone_into","convert","default","fold","fold_id","from","into","new","to_owned","try_from","try_into","type_id","update","update_id","vzip","bsearch","compressor","edit_distance","enumerate_bitset","imos_1d","interval_scheduling","inversion_number","kmp","knapsack","lcs","lis","majority_vote","manacher","max_partial_sum","max_rect","merge","mo","num_subseq","permutation","psp","rle","rolling_hash","sa","sliding_window","static_range_freq_query","static_range_inversions_query","subset_sum","two_sat","zalgo","equal_range","lower_bound","upper_bound","Compressor","CompressorBuilder","add","add_vec","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","compress","decompress","default","from","from","get","index","into","into","new","size","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","edit_distance","gray_code","subset_asc","subset_between","subset_desc","subset_size_k","superset_asc","superset_desc","gray_code","subset_asc","subset_between","subset_desc","subset_size_k","super_asc","superset_desc","Imos1D","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","update","vzip","interval_scheduling","inversion_number","KMP","borrow","borrow_mut","clone","clone_into","fmt","from","into","matches","new","to_owned","try_from","try_into","type_id","vzip","limited","small_quantity","small_value","small_weight","unlimited","knapsack_limited","knapsack_small_quantity","knapsack_small_value","knapsack_small_weight","knapsack_unlimited","lcs","lis","majority_vote","manacher","max_partial_sum","max_rect","max_rect_in_histogram","inplace_merge","inplace_merge_by","merge","Mo","add","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","num_subseq","next_permutation","permutations","prev_permutation","PSP","borrow","borrow_mut","clone","clone_into","from","gain_if_blue","gain_if_both_blue","gain_if_both_red","gain_if_red","if_red_then_must_be_red","into","must_be_blue","must_be_red","new","penalty_if_blue","penalty_if_different","penalty_if_red","penalty_if_red_blue","solve","to_owned","try_from","try_into","type_id","vzip","rle","RollingHash","Table","borrow","borrow","borrow_mut","borrow_mut","from","from","hash","hash","hash_table","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","SuffixArray","borrow","borrow_mut","clone","clone_into","fmt","from","index","into","lcp_array","new","to_owned","to_slice","try_from","try_into","type_id","vzip","sliding_maximum","sliding_minimum","StaticRangeFreqQuery","borrow","borrow_mut","from","into","new","query","try_from","try_into","type_id","vzip","StaticRangeInversionsQuery","add","borrow","borrow_mut","from","into","new","solve","try_from","try_into","type_id","vzip","count","limited","subset_sum","subset_sum_limited","TwoSat","add_if","add_or","borrow","borrow_mut","from","into","new","not_coexist","solve","try_from","try_into","type_id","vzip","zalgo","binary_trie","cht","cumulative_sum_1d","cumulative_sum_2d","disjoint_sparse_table","dual_segtree","fenwick","fenwick_add","fenwick_on_fenwick","foldable_deque","interval_heap","lazy_segtree","lazy_segtree_coeff","lazy_skew_heap","li_chao","multiset","partially_persistent_unionfind","persistent_array","persistent_queue","persistent_stack","qword_tree","range_search_tree","rollbackable_vector","segtree","segtree_beats","segtree_linear_add","skew_heap","sparse_table","starry_sky_tree","succinct_dict","traits","unionfind","wavelet_matrix","BinaryTrie","borrow","borrow_mut","clone","clone_into","count","default","erase","fmt","from","insert","into","is_empty","len","lower_bound","max","min","new","to_owned","to_vec","try_from","try_into","type_id","upper_bound","vzip","ConvexHullTrick","Max","Min","Mode","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","from","from","into","into","new","query","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","CumulativeSum1D","CumulativeSum1DBuilder","Foldable","Group","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","fmt","fold","from","from","index","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","CumulativeSum2D","CumulativeSum2DBuilder","Foldable2D","Group","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","fmt","fold","from","from","index","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","DisjointSparseTable","Foldable","Semigroup","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","vzip","DualSegmentTree","Monoid","Updatable","borrow","borrow_mut","from","from_vec","get","into","new","to_vec","try_from","try_into","type_id","update","vzip","FenwickTree","Foldable","Group","Updatable","borrow","borrow_mut","clone","clone_into","default","fold","fold","from","into","new","to_owned","try_from","try_into","type_id","update","vzip","FenwickTreeAdd","Foldable","Updatable","add","borrow","borrow_mut","fold","fold","from","into","new","sub","try_from","try_into","type_id","vzip","FenwickOnFenwick","FenwickOnFenwickBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","default","fold","fold_to","from","from","into","into","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","FoldableDeque","back","borrow","borrow_mut","fold","from","front","into","is_empty","len","new","pop_back","pop_front","push_back","push_front","try_from","try_into","type_id","vzip","IntervalHeap","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","max","min","new","pop_max","pop_min","push","to_owned","try_from","try_into","type_id","vzip","LazySegmentTree","Updatable","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","update","vzip","Elem","Foldable","LazySegmentTreeCoeff","Updatable","borrow","borrow_mut","fold","from","init_with_vec","into","new","try_from","try_into","type_id","update","vzip","Elem","LazySkewHeap","add","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","meld","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","LiChaoTree","Max","Min","Mode","add_line","add_segment","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","from","from","into","into","new","query","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","MultiSet","borrow","borrow_mut","clone","clone_into","contains","count","default","first","fmt","from","insert","into","is_empty","last","len","new","pop_first","pop_last","remove","to_owned","try_from","try_into","type_id","vzip","At","PartiallyPersistentUnionFind","at","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","is_same","latest","merge","new","root_of","size_of","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","PersistentArray","borrow","borrow_mut","from","get","into","new","set","try_from","try_into","type_id","vzip","PersistentQueue","back","borrow","borrow_mut","default","fmt","from","front","into","is_empty","len","new","pop","push","try_from","try_into","type_id","vzip","PersistentStack","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","iter","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","MAX","QwordTree","borrow","borrow_mut","contains","default","erase","erase_unchecked","from","insert","insert_unchecked","into","is_empty","len","max","max_le","min","min_ge","new","try_from","try_into","type_id","vzip","RangeSearchTree","RangeSearchTreeBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","default","from","from","into","into","new","search","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","RollbackableVec","assign","borrow","borrow_mut","clone","clone_into","default","fmt","from","from","index","into","is_empty","len","new","pop","push","rollback","to_owned","try_from","try_into","type_id","vzip","Assignable","Foldable","Monoid","SegmentTree","Updatable","assign","borrow","borrow_mut","clone","clone_into","fold","from","index","into","new","to_owned","try_from","try_into","type_id","update","vzip","SegmentTreeBeats","add","borrow","borrow_mut","chmax","chmin","clone","clone_into","fmt","from","get_max","get_min","get_sum","into","new","new_with_vec","to_owned","try_from","try_into","type_id","vzip","Elem","Indexable","SegmentTreeLinearAdd","borrow","borrow_mut","from","get","into","new","try_from","try_into","type_id","update","vzip","SkewHeap","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","meld","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","SparseTable","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","vzip","Elem","Foldable","Max","Min","Mode","StarrySkyTree","Updatable","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fold","from","from","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","SuccinctDict","access","borrow","borrow_mut","clone","clone_into","count","from","into","is_empty","len","new","rank","select","to_owned","try_from","try_into","type_id","vzip","Assignable","Foldable","Foldable2D","Indexable","Output","Output","Output","Updatable","Value","Value","assign","fold","fold","get","update","UnionFind","borrow","borrow_mut","count_groups","from","get_groups","into","is_same","merge","new","new_with_values","root_of","size_of","try_from","try_into","type_id","value_of","vzip","WaveletMatrix","access","borrow","borrow_mut","clone","clone_into","count","from","into","maximum","minimum","new","next_value","prev_value","quantile","range_freq","rank","select","to_owned","try_from","try_into","type_id","vzip","Circle","Eps","EpsFloat","EpsValue","Line","Vector","abs","abs","abs","abs","abs_sq","acos","acos","add","add","add_assign","angle","angle_diff","area_intersection_circle_polygon","area_intersection_circles","area_polygon","atan2","atan2","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ccw","center","circumcircle","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","closest_pair","common_tangent_circles","convex","convex_cut","convex_diameter","convex_hull","cos","cos","cross","cross","default","default","default","default","diff","dist_line_point","dist_segment_point","dist_segments","div","div","div_assign","dot","dot","eps","eps","eps","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_str","incircle","intersect_circle_line","intersect_circle_segment","intersect_circles","intersect_line_segment","intersect_segments","into","into","into","into","is_orthogonal","is_parallel","max","max","min","min","mul","mul","mul_assign","neg","new","new","new","normal","normal","partial_cmp","point_in_polygon","polar","projection","radius","reflection","sin","sin","sq","sq","sqrt","sqrt","sub","sub","sub_assign","tan","tan","tangent_circle","to","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unit","unit","vzip","vzip","vzip","vzip","area_intersection_circle_polygon","area_intersection_circles","area_polygon","CCW","CLOCKWISE","COUNTER_CLOCKWISE","ONLINE_BACK","ONLINE_FRONT","ON_SEGMENT","borrow","borrow_mut","ccw","clone","clone_into","eq","fmt","from","into","to_owned","to_value","try_from","try_into","type_id","vzip","circumcircle","closest_pair","common_tangent_circles","is_convex","convex_cut","convex_diameter","Hull","Lower","Upper","borrow","borrow_mut","clone","clone_into","convex_hull","eq","from","half_hull","into","to_owned","try_from","try_into","type_id","vzip","dist_line_point","dist_segment_point","dist_segments","incircle","CROSSED","IntersectCircleLine","OUTSIDE","TANGENT","borrow","borrow_mut","clone","clone_into","eq","fmt","from","intersect_circle_line","into","to_owned","try_from","try_into","type_id","vzip","INSIDE","IntersectCircleSegment","ONE_CROSSPOINT","OUTSIDE","TANGENT","TWO_CROSSPOINTS","borrow","borrow_mut","clone","clone_into","eq","fmt","from","intersect_circle_segment","into","to_owned","try_from","try_into","type_id","vzip","CIRCUMSCRIBED","INSCRIBED","INSIDE","INTERSECTED","IntersectCircles","OUTSIDE","SAME","borrow","borrow_mut","clone","clone_into","eq","fmt","from","intersect_circles","into","num_common_tangent","to_owned","try_from","try_into","type_id","vzip","CROSSED","IntersectLineSegment","LEFTSIDE","OVERLAPPED","RIGHTSIDE","borrow","borrow_mut","clone","clone_into","eq","fmt","from","intersect_line_segment","into","to_owned","try_from","try_into","type_id","vzip","INTERSECTED","IntersectSegments","NOT_INTERSECTED","OVERLAPPED","SAME","borrow","borrow_mut","clone","clone_into","eq","fmt","from","intersect_segments","into","to_owned","try_from","try_into","type_id","vzip","EXCLUSION","INCLUSION","ON_SEGMENT","PointPolygon","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","point_in_polygon","to_owned","try_from","try_into","type_id","vzip","tangent_circle","Directed","Direction","Edge","EdgeTrait","Graph","Undirected","Weight","add","add","articulation_points","bellman_ford","bfs","bi_match","biconnected","bipartite","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bridges","chinese_postman","chu_liu_edmonds","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cycle","detect_cycle","dijkstra","dinic","edges","enumerate_triangles","eulerian","extend","extend","flow","fmt","fmt","fmt","fmt","ford_fulkerson","from","from","from","from","from","from","from","hopcroft_karp","index","into","into","into","into","is_empty","kruskal","len","lowlink","max_independent_set","min_cost_flow","new","new","prim","pseudo_tree","rev","rev","scc","to","to","to","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tsort","tsp","two_edge","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","warshall_floyd","weight","weight","weight","articulation_points","NumInf","bellman_ford","bfs","BipartiteMatching","add_edge","borrow","borrow_mut","from","into","matching","new","try_from","try_into","type_id","vzip","Lowlink","biconnected","check_bipartite","bridges","chinese_postman_problem","chu_liu_edmonds","directed_shortest","directed_shortest_cycle","detect_cycle","dijkstra","Dinic","add_edge","borrow","borrow_mut","clone","clone_into","from","get_edges","into","max_flow","new","reset","to_owned","try_from","try_into","type_id","vzip","enumerate_triangles","directed","undirected","DirectedEulerianTrail","add_edge","borrow","borrow_mut","clone","clone_into","from","into","new","solve","to_owned","try_from","try_into","type_id","vzip","UndirectedEulerianTrail","add_edge","borrow","borrow_mut","clone","clone_into","from","into","new","solve","to_owned","try_from","try_into","type_id","vzip","Cap","MaxFlow","add_edge","get_edges","max_flow","new","reset","FordFulkerson","add_edge","borrow","borrow_mut","clone","clone_into","from","get_edges","into","max_flow","new","reset","to_owned","try_from","try_into","type_id","vzip","Edge","HopcroftKarp","add_edge","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","from","from","get_matching","into","into","matching","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","kruskal","Lowlink","back","borrow","borrow_mut","ch","clone","clone_into","fmt","from","into","low","new","ord","par","size","to_owned","try_from","try_into","type_id","vzip","max_independent_set","MinCostFlow","add_edge","borrow","borrow_mut","clone","clone_into","from","into","min_cost_flow","new","to_owned","try_from","try_into","type_id","vzip","prim","PseudoTree","borrow","borrow_mut","from","group","in_loop","into","pseudo_tree","try_from","try_into","type_id","vzip","SCC","borrow","borrow_mut","from","groups","into","new","to_vec","try_from","try_into","type_id","vzip","tsort","tsp","two_edge_connected_components","warshall_floyd","D","DIR_4","Grid","L","Position","R","U","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","find_all","fmt","fmt","for_each","from","from","get","into","into","new","new","to_graph","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","x","y","grid_to_graph","chmax","chmin","ds_macros","eps","for_loop","get_time","io","max","min","modulo","mul_vec","rec","sort_with","timer","trait_alias","bell_number","berlekamp_massey","binomial_coefficient","convolution","count_coprime","crt","divisor","enumerate_quotients","ext_gcd","factorial","factorial_prime_factor","factorize","ff","gcd_lcm","linalg","miller_rabin","mod_ops","montmort","nim_product","prime_test","primitive_root","rational","sum_floor_linear","sum_of_exponential_times_polynomial_limit","totient","totient_sum","bell_number_table","berlekamp_massey","BinomialCoefficient","ExtLucas","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","from","from","get","get","into","into","new","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","conv_and","conv_or","mobius_sub","mobius_super","subset_conv","zeta_sub","zeta_super","convolution_and","convolution_or","fast_mobius_subset","fast_mobius_superset","subset_convolution","fast_zeta_subset","fast_zeta_superset","count_coprime","crt","crt_vec","count_divisors","enumerate_divisors","Quotient","borrow","borrow_mut","clone","clone_into","enumerate_quotients","eq","fmt","from","from","into","q","to","to_owned","try_from","try_into","type_id","vzip","ext_gcd","FactorialTable","bell","bell_number","bernoulli","bernoulli_number","borrow","borrow_mut","catalan","catalan_number","clone","clone_into","comb","default","facto","fmt","from","h","into","inv_facto","new","perm","to_owned","try_from","try_into","type_id","vzip","factorial_prime_factor","sieve","trial","FactorizeSieve","borrow","borrow_mut","factorize","from","into","new","try_from","try_into","type_id","vzip","factorize","const_modint","modint","traits","ConstModInt","FF","Frac","Inv","One","Pow","Zero","add","add_assign","borrow","borrow_mut","clone","clone_into","default","div","div_assign","eq","fmt","fmt","frac","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","into","inv","mul","mul_assign","neg","new","one","pow","sub","sub_assign","sum","to_owned","to_string","try_from","try_into","type_id","vzip","zero","FF","Frac","Inv","ModInt","Modulo","One","Pow","Zero","add","add_assign","borrow","borrow_mut","clone","clone_into","default","div","div_assign","eq","fmt","fmt","frac","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","into","inv","mul","mul_assign","neg","new","one","pow","sub","sub_assign","sum","to_owned","to_string","try_from","try_into","type_id","value","vzip","zero","FF","Frac","Inv","Output","Output","Output","Pow","frac","inv","pow","GcdLcm","Output","gcd","gcd_lcm","lcm","determinant_p","inverse_p","matrix","square_matrix","determinant_p","inverse_p","Matrix","add","add_assign","borrow","borrow_mut","clone","clone_into","eq","from","from_vec","get_mut","height","index","into","mul","mul_assign","neg","new","sub","sub_assign","to_owned","to_vec","transpose","try_from","try_into","type_id","vzip","width","SquareMatrix","SquareMatrixElem","add","add_assign","borrow","borrow_mut","clone","clone_into","eq","fmt","from","from_vec","get_mut","index","into","mul","mul_assign","neg","new","pow","size","straight_mul","strassen_mul","sub","sub_assign","to_owned","to_vec","transpose","try_from","try_into","type_id","unit","vzip","miller_rabin","enum_inv","inv","inv_p","log","pow","sqrt","enumerate_mod_inv","mod_inv","mod_inv_p","mod_log","mod_pow","mod_sqrt","montmort","nim_product_16","nim_product_32","nim_product_64","nim_product_8","eratosthenes","traits","EratosthenesSieve","borrow","borrow_mut","from","into","is_prime","new","try_from","try_into","type_id","vzip","CheckPrime","is_prime","primitive_root","Rational","add","add_assign","borrow","borrow_mut","clone","clone_into","div","div_assign","eq","fmt","from","from","into","mul","mul_assign","neg","new","partial_cmp","sub","sub_assign","to_owned","try_from","try_into","type_id","vzip","sum_floor_linear","sum_of_exponential_times_polynomial_limit","totient","totient_table","totient_sum","dice","paren","Dice","back","borrow","borrow_mut","bottom","clone","clone_into","eq","fmt","from","front","into","left","new","right","rot_back","rot_clockwise","rot_counterclockwise","rot_front","rot_left","rot_right","to_owned","top","try_from","try_into","type_id","vzip","check_paren","rand_range","Tree","TreeEdge","TreeEdgeTrait","TreeNode","Weight","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","centroid","children","clone","clone","clone","clone_into","clone_into","clone_into","depth_query","euler_tour","extend","extend_rooted","fmt","fmt","fmt","from","from","from","from","from","from","hld","index","into","into","into","is_empty","lca","len","neighbors","neighbors_size","new","new","nodes","parent","rerooting","rev","rev","rooted_isomorphism","rooting","to","to","to","to_owned","to_owned","to_owned","tree_dp","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","utils","vzip","vzip","vzip","weight","weight","weight","centroids","TreeDepthQuery","ancestor","borrow","borrow_mut","children_query","from","into","me_query","new","try_from","try_into","type_id","vzip","EulerTour","borrow","borrow_mut","from","into","new","point_query","subtree_query","try_from","try_into","type_id","vzip","HLD","borrow","borrow_mut","clone","clone_into","fmt","from","get_id","into","lca","new","parent","path_query_edge","path_query_vertex","subtree_query_edge","subtree_query_vertex","to_owned","try_from","try_into","type_id","vzip","DoublingLCA","ancestor","borrow","borrow_mut","from","get_lca","into","jump","new","try_from","try_into","type_id","vzip","RerootingDP","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","rooted_isomorphism","rooting","TreeDP","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","tree_diameter","tree_distance","tree_height","tree_path","bits","fastio","join_str","num_inf","swap","transpose","xor_shift","yesno","highest_one","FastIO","borrow","borrow_mut","drop","from","getc","into","new","peek","read_chars","read_i64","read_u64","skip","try_from","try_into","type_id","vzip","write","writeln","JoinStr","join_str","Inf","NegInf","NumInf","Value","add","borrow","borrow_mut","clone","clone_into","cmp","eq","fmt","from","into","is_inf","is_neg_inf","is_value","neg","partial_cmp","sub","to_owned","try_from","try_into","type_id","unwrap","vzip","swap_vv","Output","Transpose","transpose","XorShift","borrow","borrow_mut","clone","clone_into","fmt","from","gen","into","new","to_owned","try_from","try_into","type_id","vzip","YesNo","yesno"],"q":["haar_lib","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::algebra","","","","","","","","","","","","","","haar_lib::algebra::action","","","","","","","","haar_lib::algebra::add_sum","","","","","","","","","","","","","","","","","","","haar_lib::algebra::affine","","","","","","","","","","","","","","","","haar_lib::algebra::bitxor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::algebra::dihedral","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::algebra::dual","","","","","","","","","","","","","","","haar_lib::algebra::max","","","","","","","","","","","","","","","","haar_lib::algebra::min","","","","","","","","","","","","","","","","haar_lib::algebra::one_zero","","","","","","haar_lib::algebra::prod","","","","","","","","","","","","","","","","haar_lib::algebra::sum","","","","","","","","","","","","","","","","","haar_lib::algebra::traits","","","","","","","","","","","","","","haar_lib::algebra::update","","","","","","","","","","","","","","","","haar_lib::algebra::update_sum","","","","","","","","","","","","","","","","","","","haar_lib::algo","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::algo::bsearch","","","haar_lib::algo::compressor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::algo::edit_distance","haar_lib::algo::enumerate_bitset","","","","","","","haar_lib::algo::enumerate_bitset::gray_code","haar_lib::algo::enumerate_bitset::subset_asc","haar_lib::algo::enumerate_bitset::subset_between","haar_lib::algo::enumerate_bitset::subset_desc","haar_lib::algo::enumerate_bitset::subset_size_k","haar_lib::algo::enumerate_bitset::superset_asc","haar_lib::algo::enumerate_bitset::superset_desc","haar_lib::algo::imos_1d","","","","","","","","","","","","haar_lib::algo::interval_scheduling","haar_lib::algo::inversion_number","haar_lib::algo::kmp","","","","","","","","","","","","","","","haar_lib::algo::knapsack","","","","","haar_lib::algo::knapsack::limited","haar_lib::algo::knapsack::small_quantity","haar_lib::algo::knapsack::small_value","haar_lib::algo::knapsack::small_weight","haar_lib::algo::knapsack::unlimited","haar_lib::algo::lcs","haar_lib::algo::lis","haar_lib::algo::majority_vote","haar_lib::algo::manacher","haar_lib::algo::max_partial_sum","haar_lib::algo::max_rect","","haar_lib::algo::merge","","","haar_lib::algo::mo","","","","","","","","","","","","haar_lib::algo::num_subseq","haar_lib::algo::permutation","","","haar_lib::algo::psp","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::algo::rle","haar_lib::algo::rolling_hash","","","","","","","","","","","","","","","","","","","","","","haar_lib::algo::sa","","","","","","","","","","","","","","","","","haar_lib::algo::sliding_window","","haar_lib::algo::static_range_freq_query","","","","","","","","","","","haar_lib::algo::static_range_inversions_query","","","","","","","","","","","","haar_lib::algo::subset_sum","","haar_lib::algo::subset_sum::count","haar_lib::algo::subset_sum::limited","haar_lib::algo::two_sat","","","","","","","","","","","","","","haar_lib::algo::zalgo","haar_lib::ds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::binary_trie","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::cht","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::cumulative_sum_1d","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::cumulative_sum_2d","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::disjoint_sparse_table","","","","","","","","","","","","","haar_lib::ds::dual_segtree","","","","","","","","","","","","","","","","haar_lib::ds::fenwick","","","","","","","","","","","","","","","","","","","","haar_lib::ds::fenwick_add","","","","","","","","","","","","","","","","haar_lib::ds::fenwick_on_fenwick","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::foldable_deque","","","","","","","","","","","","","","","","","","","haar_lib::ds::interval_heap","","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::lazy_segtree","","","","","","","","","","","","","haar_lib::ds::lazy_segtree_coeff","","","","","","","","","","","","","","","","haar_lib::ds::lazy_skew_heap","","","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::li_chao","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::multiset","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::partially_persistent_unionfind","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::persistent_array","","","","","","","","","","","","haar_lib::ds::persistent_queue","","","","","","","","","","","","","","","","","","haar_lib::ds::persistent_stack","","","","","","","","","","","","","","","","","","","haar_lib::ds::qword_tree","","","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::range_search_tree","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::rollbackable_vector","","","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::segtree","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::segtree_beats","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::segtree_linear_add","","","","","","","","","","","","","","haar_lib::ds::skew_heap","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::sparse_table","","","","","","","","","","","haar_lib::ds::starry_sky_tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::succinct_dict","","","","","","","","","","","","","","","","","","","haar_lib::ds::traits","","","","","","","","","","","","","","","haar_lib::ds::unionfind","","","","","","","","","","","","","","","","","","haar_lib::ds::wavelet_matrix","","","","","","","","","","","","","","","","","","","","","","","haar_lib::geom","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::geom::area_intersection_circle_polygon","haar_lib::geom::area_intersection_circles","haar_lib::geom::area_polygon","haar_lib::geom::ccw","","","","","","","","","","","","","","","","","","","","","haar_lib::geom::circumcircle","haar_lib::geom::closest_pair","haar_lib::geom::common_tangent_circles","haar_lib::geom::convex","haar_lib::geom::convex_cut","haar_lib::geom::convex_diameter","haar_lib::geom::convex_hull","","","","","","","","","","","","","","","","","haar_lib::geom::dist_line_point","haar_lib::geom::dist_segment_point","haar_lib::geom::dist_segments","haar_lib::geom::incircle","haar_lib::geom::intersect_circle_line","","","","","","","","","","","","","","","","","","haar_lib::geom::intersect_circle_segment","","","","","","","","","","","","","","","","","","","","haar_lib::geom::intersect_circles","","","","","","","","","","","","","","","","","","","","","","haar_lib::geom::intersect_line_segment","","","","","","","","","","","","","","","","","","","haar_lib::geom::intersect_segments","","","","","","","","","","","","","","","","","","","haar_lib::geom::point_in_polygon","","","","","","","","","","","","","","","","","","haar_lib::geom::tangent_circle","haar_lib::graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::graph::articulation_points","haar_lib::graph::bellman_ford","","haar_lib::graph::bfs","haar_lib::graph::bi_match","","","","","","","","","","","","haar_lib::graph::biconnected","","haar_lib::graph::bipartite","haar_lib::graph::bridges","haar_lib::graph::chinese_postman","haar_lib::graph::chu_liu_edmonds","haar_lib::graph::cycle","haar_lib::graph::cycle::directed_shortest","haar_lib::graph::detect_cycle","haar_lib::graph::dijkstra","haar_lib::graph::dinic","","","","","","","","","","","","","","","","","haar_lib::graph::enumerate_triangles","haar_lib::graph::eulerian","","haar_lib::graph::eulerian::directed","","","","","","","","","","","","","","","haar_lib::graph::eulerian::undirected","","","","","","","","","","","","","","","haar_lib::graph::flow","","","","","","","haar_lib::graph::ford_fulkerson","","","","","","","","","","","","","","","","","haar_lib::graph::hopcroft_karp","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::graph::kruskal","haar_lib::graph::lowlink","","","","","","","","","","","","","","","","","","","","haar_lib::graph::max_independent_set","haar_lib::graph::min_cost_flow","","","","","","","","","","","","","","","haar_lib::graph::prim","haar_lib::graph::pseudo_tree","","","","","","","","","","","","haar_lib::graph::scc","","","","","","","","","","","","haar_lib::graph::tsort","haar_lib::graph::tsp","haar_lib::graph::two_edge","haar_lib::graph::warshall_floyd","haar_lib::grid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::grid::to_graph","haar_lib::macros","","","","","","","","","","","","","","","haar_lib::math","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::math::bell_number","haar_lib::math::berlekamp_massey","haar_lib::math::binomial_coefficient","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::math::convolution","","","","","","","haar_lib::math::convolution::conv_and","haar_lib::math::convolution::conv_or","haar_lib::math::convolution::mobius_sub","haar_lib::math::convolution::mobius_super","haar_lib::math::convolution::subset_conv","haar_lib::math::convolution::zeta_sub","haar_lib::math::convolution::zeta_super","haar_lib::math::count_coprime","haar_lib::math::crt","","haar_lib::math::divisor","","haar_lib::math::enumerate_quotients","","","","","","","","","","","","","","","","","","haar_lib::math::ext_gcd","haar_lib::math::factorial","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::math::factorial_prime_factor","haar_lib::math::factorize","","haar_lib::math::factorize::sieve","","","","","","","","","","","haar_lib::math::factorize::trial","haar_lib::math::ff","","","haar_lib::math::ff::const_modint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::math::ff::modint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::math::ff::traits","","","","","","","","","","haar_lib::math::gcd_lcm","","","","","haar_lib::math::linalg","","","","haar_lib::math::linalg::determinant_p","haar_lib::math::linalg::inverse_p","haar_lib::math::linalg::matrix","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::math::linalg::square_matrix","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::math::miller_rabin","haar_lib::math::mod_ops","","","","","","haar_lib::math::mod_ops::enum_inv","haar_lib::math::mod_ops::inv","haar_lib::math::mod_ops::inv_p","haar_lib::math::mod_ops::log","haar_lib::math::mod_ops::pow","haar_lib::math::mod_ops::sqrt","haar_lib::math::montmort","haar_lib::math::nim_product","","","","haar_lib::math::prime_test","","haar_lib::math::prime_test::eratosthenes","","","","","","","","","","","haar_lib::math::prime_test::traits","","haar_lib::math::primitive_root","haar_lib::math::rational","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::math::sum_floor_linear","haar_lib::math::sum_of_exponential_times_polynomial_limit","haar_lib::math::totient","","haar_lib::math::totient_sum","haar_lib::misc","","haar_lib::misc::dice","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::misc::paren","haar_lib::testtools","haar_lib::tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::tree::centroid","haar_lib::tree::depth_query","","","","","","","","","","","","","haar_lib::tree::euler_tour","","","","","","","","","","","","haar_lib::tree::hld","","","","","","","","","","","","","","","","","","","","","haar_lib::tree::lca","","","","","","","","","","","","","haar_lib::tree::rerooting","","","","","","","","","","","haar_lib::tree::rooted_isomorphism","haar_lib::tree::rooting","haar_lib::tree::tree_dp","","","","","","","","","","","haar_lib::tree::utils","","","","haar_lib::utils","","","","","","","","haar_lib::utils::bits","haar_lib::utils::fastio","","","","","","","","","","","","","","","","","","","haar_lib::utils::join_str","","haar_lib::utils::num_inf","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::utils::swap","haar_lib::utils::transpose","","","haar_lib::utils::xor_shift","","","","","","","","","","","","","","","haar_lib::utils::yesno",""],"d":["代数的構造","","","","","","データ構造","","","","","","グラフ一般に関するもの","","","","","macro_exportされたmacro置き場","数学","","","分類を放置しているもの","","","…","","","","","木に関するもの","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","二分探索","座標圧縮","","","","区間スケジューリング問題","転倒数","","ナップサック問題","最長共通部分列","最長増加部分列","Boyer-Moore majority vote algorithm","","最大連続部分和","","","","相異なる部分列の総数","","Project Selection Problem","","","","スライド最小値","配列に対する範囲頻度取得クエリ","","部分和問題","","","lower_bound, upper_boundの組を求める。","x以上となる最小のindexを求める。","xを超える最小のindexを求める。","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","<code>i</code>番目の値を返す。","<code>value</code>が何番目の値(0-index)かを返す。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","…","数列の転倒数を計算する。","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","個数制限付きナップサック問題","要素数が小さいナップサック問題","価値の総和が小さいナップサック問題","容量が小さいナップサック問題","個数制限無しナップサック問題","列a, bの最長共通部分列の一つを求める。","列の最長増加部分列の一つを求める。","","","…","…","…","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","返り値<code>ret</code>に対して、<code>ret[i]</code>は<code>a[0..i]</code>…","","","","Project Selection Problem","","","","","Returns the argument unchanged.","頂点iが青ならばcの利益を得る。","頂点iとjがともに青ならばcの利益を得る。","頂点iとjがともに赤ならばcの利益を得る。","頂点iが赤ならばcの利益を得る。","頂点iが赤ならば、頂点jも赤…","Calls <code>U::from(self)</code>.","頂点iは青でなければならない。","頂点iは赤でなければならない。","","頂点iが青ならばcの損失になる。","頂点iとjが異なる色ならばcの損失となる。","頂点iが赤ならばcの損失になる。","頂点iが赤かつ頂点jが青…","must be制約を破った場合、<code>None</code>…","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","…","…","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Time Complexity $O(|a|)$","Time Complexity $O(log |a|)$","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","部分和問題 …","…","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","1次元累積和","2次元累積和","半群の列の区間演算を行う(O(1))","","","","","","","","係数乗算付き区間加算区間総和遅延セグ木","遅延加算付き融合可能ヒープ","","","部分永続UnionFind","永続配列","永続キュー","永続スタック","64分木","領域内の点を列挙する","ロールバック可能Vec","","","区間一次関数加算セグメントツリー","融合可能ヒープ","冪等性と結合性をもつ列の区間取得(O(1))","区間加算・区間Max(Min)","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Time complexity O(1)","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Time Complexity O(1)","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","使用する点を登録する。","","","","","","","","","","","Time Complexity $O(\\\\log ^ 2 n)$","Time Complexity $O(\\\\log ^ 2 n)$","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Time Complexity $O(\\\\log ^ 2 n)$","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","時刻tでの状態","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","最新時点の状態","","","","Complexity","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","永続スタック","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","　0 ~ 16777215 ($2^24 - 1$) の値の集合を管理する","","","xを含むかどうかを判定する","","xを集合から削除する","Safety","Returns the argument unchanged.","xを集合に加える","Safety","Calls <code>U::from(self)</code>.","集合が空かどうかを判断する","集合に含まれている要素数を返す","最大値を返す","x以下で最大の値を返す","最小値を返す","x以上で最小の値を返す","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","[l, r) に含まれる<code>b</code>の個数","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","[0, index) に含まれる<code>b</code>の個数","nth(0-indexed)番目の<code>b</code>の位置","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","<code>index</code>番目の値を得る。","","","","","<code>range</code>に含まれる<code>value</code>の個数。","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>range</code>での最大値","<code>range</code>での最小値","","<code>range</code>で<code>lb</code>以上の最小値","<code>range</code>で<code>ub</code>未満の最大値","<code>range</code>でk(0-indexed)番目に小さい値。","<code>range</code>で<code>lb</code>以上<code>ub</code>未満の値の個数","[0, index)に含まれる<code>value</code>の個数。","<code>nth</code>(0-indexed)番目の<code>value</code>の位置。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","関節点の列挙","負閉路を持つグラフの最短経路 (Bellman-Ford)","","二部マッチング","二重頂点連結分解","二部グラフ判定","","","","","","","","","橋の列挙","中国人郵便配達問題","有向グラフ上の最小有向全域木を求める","","","","","","","","","","有向グラフの閉路検出","非負重み付き最短経路 (Dijkstra)","最大流 (Dinic)","","","(準)Eulerグラフの判定","","","","","","","","最大流 (Ford-Fulkerson)","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","二部マッチング (Hopcroft-Karp)","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","最小全域木 (Kruskal)","","","最大独立集合","最小費用流","","","最小全域木 (Prim)","","","","強連結成分分解","","","","","","","","","","","","","","","","トポロジカルソート","巡回セールスマン問題","二重辺連結成分分解","","","","","","","","","全頂点間最短経路長","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","橋の列挙","Time complexity O(V ^ 2 * 2 ^ V)","有向グラフ上の最小有向全域木を求める","…","…","","Time complexity O((E + V) log V)","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","最大独立集合を求める","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Time complexity O(N)","","","Time complexity O(n ^ 3)","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","中国剰余定理","約数列挙","","拡張ユークリッドの互除法","","$a!$の素因数pの個数を求める。","","","最大公約数・最小公倍数","","","mod mでの演算","","","","原始根","有理数","$\\\\sum_{i=0}^{n-1} \\\\lfloor \\\\frac{ai+b}{m} \\\\rfloor$","$\\\\sum_{i=0}^{\\\\infty} r^ii^d$","トーシェント関数","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Time complexity O(sqrt n)","Time complexity O(sqrt n)","","","","","","1以上N以下の自然数xについて<code>floor(N/x)</code>…","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","n個からk個とりだす組み合わせの個数 (nCk)","","nの階乗","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","nの階乗の逆元","Time complexity O(n)","n個からk個とりだす順列の個数 (nPk)","","","","","","$a!$の素因数pの個数を求める。","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","素数mod p上での行列式を求める。 $O(n^3)$","素数mod p上での逆行列を求める。 $O(n^3)$","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","0,1,..,nの素数mod pでの逆元を列挙する。","mod mでの逆元","素数mod pでの逆元","$a^x = b \\\\bmod m$を満たすxを求める。","$x^p \\\\bmod m$を求める。","$x^2 = a \\\\bmod p$を満たすxを一つ求める。","0,1,..,nの素数mod pでの逆元を列挙する。","mod mでの逆元","素数mod pでの逆元","$a^x = b \\\\bmod m$を満たすxを求める。","$x^p \\\\bmod m$を求める。","$x^2 = a \\\\bmod p$を満たすxを一つ求める。","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","$\\\\sum_{i=0}^{\\\\infty} r^ii^d$","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","括弧列が対応が取れているかを調べる","","","","","","","","","","","","","重心列挙","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","重軽分解","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","最小共通祖先","","","","","","","","全方位木DP","","","","根付き木に変換","","","","","","","木DP","","","","","","","","","","","","","","","","","","Tree depth query","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","重軽分解","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","演算は可換性を仮定する。","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","…","","","","","","全方位木DP","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","木の任意の2頂点の距離の最大値を求める。","…","…","…","","","","正の無限大、負の無限大をもつ数","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,85,85,85,85,85,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,25,25,25,26,25,26,25,26,25,26,25,25,26,26,25,26,26,26,26,25,26,25,26,25,26,25,26,25,26,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,9,8,0,8,9,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,0,0,0,0,0,0,0,0,31,0,30,187,32,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,42,44,42,44,42,42,44,42,44,42,44,44,42,44,42,44,44,44,42,42,44,44,42,44,42,44,42,44,42,44,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,47,47,47,47,47,47,47,47,47,47,0,0,0,50,50,50,50,50,50,50,50,50,50,50,50,50,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,54,54,54,54,54,54,54,54,54,54,0,0,0,0,0,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,0,0,0,59,60,59,60,59,60,59,60,59,59,60,59,59,60,59,60,59,60,59,60,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,63,63,63,63,63,63,63,63,63,63,0,64,64,64,64,64,64,64,64,64,64,64,0,0,0,0,0,65,65,65,65,65,65,65,65,65,65,65,65,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,0,68,68,0,67,68,67,68,67,68,67,68,67,68,68,67,68,67,68,67,67,67,68,67,68,67,68,67,68,67,68,67,0,0,0,0,70,71,70,71,70,71,71,71,71,70,71,71,70,71,70,71,70,71,70,71,70,71,70,70,71,0,0,0,0,72,73,72,73,72,73,73,73,73,72,73,73,72,73,72,73,72,73,72,73,72,73,72,72,73,0,0,0,75,75,75,75,75,75,75,75,75,75,0,0,0,76,76,76,76,76,76,76,76,76,76,76,76,76,0,0,0,0,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,0,0,0,80,80,80,80,80,80,80,80,80,80,80,80,80,0,0,81,81,82,81,82,81,81,82,81,82,81,82,82,81,82,81,82,81,81,82,81,82,81,82,81,82,82,81,82,0,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,0,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,0,0,86,86,86,86,86,86,86,86,86,86,86,0,0,0,0,88,88,88,88,88,88,88,88,88,88,88,88,0,0,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,0,92,92,0,91,91,91,92,91,92,92,92,92,92,91,92,91,92,91,91,92,91,92,91,92,91,92,91,92,0,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,0,0,94,94,95,94,95,94,95,94,95,95,94,94,94,95,95,94,95,94,95,94,95,94,95,0,96,96,96,96,96,96,96,96,96,96,96,0,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,0,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,0,0,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,0,0,100,101,100,101,100,100,100,100,100,101,100,101,100,100,101,100,101,100,101,100,101,100,101,100,0,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,0,0,0,0,0,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,0,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,0,0,0,106,106,106,106,106,106,106,106,106,106,106,0,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,0,108,108,108,108,108,108,108,108,108,108,0,0,109,109,0,0,0,111,109,111,109,109,109,111,111,109,111,109,111,109,111,109,111,109,111,109,111,111,109,0,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,0,0,0,0,188,189,190,0,191,192,191,188,189,190,192,0,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,0,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,0,0,0,0,0,0,118,117,119,120,119,118,117,117,119,117,119,119,0,0,0,118,117,117,119,120,121,117,119,120,121,0,121,0,117,119,120,121,117,119,120,121,0,0,0,0,0,0,118,117,119,120,117,119,120,121,120,0,0,0,117,119,117,119,120,116,118,117,117,119,120,121,117,117,119,119,120,121,117,117,119,120,121,120,117,0,0,0,0,0,0,117,119,120,121,120,120,118,117,118,117,117,119,117,117,117,120,121,119,120,117,0,119,120,121,120,118,117,118,117,118,117,117,119,117,118,117,0,120,117,119,120,121,117,119,117,119,120,121,117,119,120,121,117,119,120,121,119,120,117,119,120,121,0,0,0,0,126,126,126,126,126,126,126,0,126,126,126,126,126,126,126,126,126,126,126,126,0,0,0,0,0,0,0,127,127,127,127,127,127,0,127,127,0,127,127,127,127,127,127,0,0,0,0,128,0,128,128,128,128,128,128,128,128,128,0,128,128,128,128,128,128,129,0,129,129,129,129,129,129,129,129,129,129,129,0,129,129,129,129,129,129,130,130,130,130,0,130,130,130,130,130,130,130,130,130,0,130,130,130,130,130,130,130,131,0,131,131,131,131,131,131,131,131,131,131,0,131,131,131,131,131,131,132,0,132,132,132,132,132,132,132,132,132,132,0,132,132,132,132,132,132,133,133,133,0,133,133,133,133,133,133,133,133,0,133,133,133,133,133,0,0,0,0,0,0,0,135,136,136,0,0,0,0,0,0,138,137,134,136,138,137,134,136,0,0,0,138,137,134,136,138,137,134,136,0,0,0,0,136,0,0,136,136,0,138,137,134,136,0,135,138,138,137,134,136,138,0,138,138,137,134,136,136,0,136,0,0,0,138,136,0,0,135,138,0,135,138,138,138,137,134,136,138,137,134,136,138,137,134,136,0,0,0,138,137,134,136,138,137,134,136,0,135,138,138,0,0,0,0,0,143,143,143,143,143,143,143,143,143,143,143,0,0,0,0,0,0,0,0,0,0,0,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,0,0,0,0,145,145,145,145,145,145,145,145,145,145,145,145,145,145,0,146,146,146,146,146,146,146,146,146,146,146,146,146,146,142,0,142,142,142,142,142,0,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,0,0,148,148,149,148,149,149,149,149,148,149,148,148,149,148,148,149,148,149,148,149,148,149,148,149,0,0,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,0,0,150,150,150,150,150,150,150,150,150,150,150,150,150,150,0,0,151,151,151,151,151,151,0,151,151,151,151,0,152,152,152,152,152,152,152,152,152,152,152,0,0,0,0,153,153,0,153,0,153,153,153,153,154,153,154,153,154,153,154,153,154,153,154,154,153,154,154,153,154,153,154,0,153,154,153,154,153,154,153,154,153,154,153,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,158,159,158,159,158,159,158,159,158,159,158,159,158,159,158,159,158,159,158,159,158,159,158,159,158,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,160,160,160,0,160,160,160,160,160,160,160,160,160,160,160,160,0,0,0,161,0,161,161,161,0,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,0,0,0,0,162,162,162,162,162,162,162,162,162,162,0,0,0,0,0,0,0,0,0,0,0,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,0,0,0,0,0,0,0,0,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,164,165,165,0,0,0,193,194,195,0,195,194,193,0,196,196,196,196,0,0,0,0,0,0,0,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,0,0,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,169,169,169,169,169,169,169,169,169,0,197,0,0,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,0,0,0,0,0,0,0,0,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,0,0,0,0,0,0,175,172,173,174,172,173,174,0,173,172,173,174,172,173,174,0,0,174,174,172,173,174,175,172,172,173,174,172,0,172,172,173,174,174,0,174,173,173,172,174,174,173,0,175,172,0,0,175,172,172,172,173,174,0,172,173,174,172,173,174,172,173,174,0,172,173,174,175,172,172,0,0,177,177,177,177,177,177,177,177,177,177,177,177,0,178,178,178,178,178,178,178,178,178,178,178,0,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,0,180,180,180,180,180,180,180,180,180,180,180,180,0,181,181,181,181,181,181,181,181,181,181,0,0,0,182,182,182,182,182,182,182,182,182,182,0,0,0,0,0,0,0,0,0,0,0,0,0,0,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,0,198,141,141,0,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,0,199,0,199,0,186,186,186,186,186,186,186,186,186,186,186,186,186,186,0,200],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[]],[[]],[[]],[[]],0,[[]],[[]],[[[3,[2,2]]],[[3,[2,2]]]],[[]],[[3,1]],[[],[[3,[4,4]]]],[3],[3],[[]],[[]],[[],3],[[]],[[],5],[[],5],[[],6],[3],[3],[[]],0,[[]],[[]],[[[7,[2]]],[[7,[2]]]],[[]],[[],[[7,[4]]]],[[]],[[[7,[[0,[8,9,10]]]]]],[[]],[[],7],[[[7,[[0,[11,12,10]]]]]],[[]],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[[[13,[2]]],[[13,[2]]]],[[]],[[],[[13,[4]]]],[[]],[[[13,[14]]]],[[[13,[15]]]],[[[13,[16]]]],[[[13,[17]]]],[[[13,[18]]]],[[[13,[19]]]],[[[13,[20]]]],[[[13,[21]]]],[[[13,[22]]]],[[[13,[23]]]],[[[13,[1]]]],[[[13,[24]]]],[[]],[[[13,[22]]]],[[[13,[21]]]],[[[13,[16]]]],[[[13,[15]]]],[[[13,[17]]]],[[[13,[1]]]],[[[13,[24]]]],[[[13,[19]]]],[[[13,[20]]]],[[[13,[14]]]],[[[13,[23]]]],[[[13,[18]]]],[[],13],[[[13,[20]]]],[[[13,[24]]]],[[[13,[22]]]],[[[13,[21]]]],[[[13,[1]]]],[[[13,[15]]]],[[[13,[18]]]],[[[13,[19]]]],[[[13,[23]]]],[[[13,[16]]]],[[[13,[17]]]],[[[13,[14]]]],[[]],[[],5],[[],5],[[],6],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[25,25],[26,26],[[]],[[]],[[25,27],28],[[]],[[]],[26],[[]],[[]],[26],[1,26],[26],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[]],[[]],0,[[]],[[]],[[[29,[2,2]]],[[29,[2,2]]]],[[]],[[]],[[[29,[30]]]],[[]],[31,[[29,[31]]]],[[[29,[32]]]],[[]],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[[[33,[2]]],[[33,[2]]]],[[]],[[],[[33,[4]]]],[[]],[33],[[]],[[],33],[[[33,[[0,[34,10]]]]]],[[]],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[[[35,[2]]],[[35,[2]]]],[[]],[[],[[35,[4]]]],[[]],[35],[[]],[[],35],[[[35,[[0,[34,10]]]]]],[[]],[[],5],[[],5],[[],6],[[]],0,0,0,0,[[]],[[]],0,[[]],[[]],[[[36,[2]]],[[36,[2]]]],[[]],[[],[[36,[4]]]],[[]],[[[36,[8]]]],[[]],[[],36],[[[36,[12]]]],[[]],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[[[37,[2]]],[[37,[2]]]],[[]],[[],[[37,[4]]]],[[]],[[[37,[9]]]],[[]],[[[37,[38]]]],[[],37],[[[37,[11]]]],[[]],[[],5],[[],5],[[],6],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],0,[[]],[[]],[[[39,[2]]],[[39,[2]]]],[[]],[[],[[39,[4]]]],[[]],[39],[[]],[[],39],[39],[[]],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[[[40,[2,2]]],[[40,[2,2]]]],[[]],[[40,1]],[[],[[40,[4,4]]]],[40],[40],[[]],[[]],[[],40],[[]],[[],5],[[],5],[[],6],[40],[40],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[],1],[[],1],0,0,[[[42,[[0,[2,34,41]]]],[0,[2,34,41]]]],[[[42,[[0,[2,34,41]]]],43]],[[]],[[]],[[]],[[]],[[[42,[[0,[2,34,41]]]]],[[44,[[0,[2,34,41]]]]]],[[[44,[2]]],[[44,[2]]]],[[[42,[2]]],[[42,[2]]]],[[]],[[]],[[44,43],45],[[44,43],45],[[],[[42,[4]]]],[[]],[[]],[[44,1]],[44,1],[[]],[[]],[[],[[42,[[0,[2,34,41]]]]]],[44,1],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[]],[[]],[[],1],0,0,0,0,0,0,0,[20,45],[20,45],[[20,20],45],[20,45],[[20,20],45],[[20,20],45],[[20,20],45],0,[[]],[[]],[[[47,[[0,[10,4,11,46]]]]],[[48,[[0,[10,4,11,46]]]]]],[[]],[[]],[1,[[47,[[0,[10,4,11,46]]]]]],[[],5],[[],5],[[],6],[[[47,[[0,[10,4,11,46]]]],[49,[1]],[0,[10,4,11,46]]]],[[]],[[],[[48,[1]]]],[[],22],0,[[]],[[]],[50,50],[[]],[[50,27],28],[[]],[[]],[[50,51],[[48,[1]]]],[51,50],[[]],[[],5],[[],5],[[],6],[[]],0,0,0,0,0,[1],[[]],[22,1],[1],[1],[[],[[48,[[0,[10,52]]]]]],[[],[[48,[1]]]],[[],53],[[],[[48,[1]]]],[[],53],[[[0,[10,52]]],1],[[]],[1],[1],[[],[[48,[[0,[34,10]]]]]],0,[[54,1,1]],[[]],[[]],[[]],[[]],[[1,1,[56,[55]],[56,[55]],[56,[55]],[56,[55]],[56,[55]]],54],[54],[[],5],[[],5],[[],6],[[]],[22,[[48,[22]]]],[[],57],[[[48,[[0,[34,10]]]]],45],[[],57],0,[[]],[[]],[58,58],[[]],[[]],[[58,1,22]],[[58,1,1,22]],[[58,1,1,22]],[[58,1,22]],[[58,1,1]],[[]],[[58,1]],[[58,1]],[1,58],[[58,1,22]],[[58,1,1,22]],[[58,1,22]],[[58,1,1,22]],[58,[[53,[24]]]],[[]],[[],5],[[],5],[[],6],[[]],[[],48],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[59,51],22],[[60,[49,[1]]],22],[[59,51],60],[[]],[[]],[[1,22,22],59],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[]],[[]],0,[[]],[[]],[61,61],[[]],[[61,27],28],[[]],[[61,1]],[[]],[61,[[48,[1]]]],[51,61],[[]],[61],[[],5],[[],5],[[],6],[[]],[1,[[48,[[0,[34,10]]]]]],[1,[[48,[[0,[34,10]]]]]],0,[[]],[[]],[[]],[[]],[[[48,[[0,[62,41]]]]],[[63,[[0,[62,41]]]]]],[[[63,[[0,[62,41]]]],[49,[1]]],1],[[],5],[[],5],[[],6],[[]],0,[[64,1,1]],[[]],[[]],[[]],[[]],[[],64],[64,[[48,[22]]]],[[],5],[[],5],[[],6],[[]],0,0,[[1,1],48],[[1,1],[[48,[57]]]],0,[[65,15,15]],[[65,15,15]],[[]],[[]],[[]],[[]],[1,65],[[65,15,15]],[65,[[53,[[48,[57]]]]]],[[],5],[[],5],[[],6],[[]],[[],[[48,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[66,66],[[]],[[66,22],1],[[],66],[[66,22],[[53,[1]]]],[[66,27],28],[[]],[[66,22],1],[[]],[66,57],[66,1],[[66,22],1],[[66,22],[[53,[22]]]],[[66,22],[[53,[22]]]],[[],66],[[]],[66,[[48,[22]]]],[[],5],[[],5],[[],6],[[66,22],1],[[]],0,0,0,0,[67],[[]],[[]],[[]],[[]],[68,68],[[[67,[2]]],[[67,[2]]]],[[]],[[]],[[68,68],57],[[68,27],28],[[[67,[69]],27],28],[[]],[[]],[[]],[[]],[68,67],[67],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[70,71],[[[71,[2,2]]],[[71,[2,2]]]],[[]],[[[71,[69,69]],27],28],[[71,[49,[1]]]],[[]],[[]],[[71,1]],[[]],[[]],[1,70],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[70,1]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[72,73],[[[73,[2,2]]],[[73,[2,2]]]],[[]],[[[73,[69,69]],27],28],[[73,[49,[1]],[49,[1]]]],[[]],[[]],[73],[[]],[[]],[[1,1],72],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[72,1,1]],[[]],[[]],0,0,0,[[]],[[]],[[[75,[[0,[2,4]],74]],[49,[1]]]],[[]],[[]],[[[48,[2]],74],[[75,[2,74]]]],[[],5],[[],5],[[],6],[[]],0,0,0,[[]],[[]],[[]],[76],[[76,1]],[[]],[1,76],[76,48],[[],5],[[],5],[[],6],[[76,[49,[1]]]],[[]],0,0,0,0,[[]],[[]],[[[77,[2,2]]],[[77,[2,2]]]],[[]],[[],[[77,[4,4]]]],[[[77,[2,78]],[79,[1]]]],[[[77,[2,78]],[49,[1]]]],[[]],[[]],[[1,78],[[77,[2,78]]]],[[]],[[],5],[[],5],[[],6],[[[77,[2,78]],1,2]],[[]],0,0,0,[[[80,[[0,[10,11,46]]]],1,[0,[10,11,46]]]],[[]],[[]],[[[80,[[0,[10,11,46]]]],[49,[1]]]],[[[80,[[0,[10,11]]]],[79,[1]]]],[[]],[[]],[[1,[0,[10,11,46]]],[[80,[[0,[10,11,46]]]]]],[[[80,[[0,[10,11,46]]]],1,[0,[10,11,46]]]],[[],5],[[],5],[[],6],[[]],0,0,[[81,24,24]],[[]],[[]],[[]],[[]],[[81,10],[[82,[10]]]],[81,81],[[[82,[2]]],[[82,[2]]]],[[]],[[]],[[],81],[[[82,[[0,[10,11,46]]]],[49,[24]],[49,[24]]],[[0,[10,11,46]]]],[[[82,[[0,[10,11,46]]]],[79,[24]],[79,[24]]],[[0,[10,11,46]]]],[[]],[[]],[[]],[[]],[[],81],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[[82,[[0,[10,11,46]]]],24,24,[0,[10,11,46]]]],[[]],[[]],0,[83,53],[[]],[[]],[83,53],[[]],[83,53],[[]],[83,57],[83,1],[[],83],[83,53],[83,53],[83],[83],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[[[84,[2]]],[[84,[2]]]],[[]],[[],[[84,[4]]]],[[[84,[69]],27],28],[[]],[[]],[[[84,[34]]],57],[[[84,[34]]],1],[[[84,[34]]],53],[[[84,[34]]],53],[[],[[84,[34]]]],[[[84,[34]]],[[53,[34]]]],[[[84,[34]]],[[53,[34]]]],[[[84,[34]],34]],[[]],[[],5],[[],5],[[],6],[[]],0,0,[[]],[[]],[[[86,[[0,[2,41]],[0,[2,41]],[0,[2,85]]]],[49,[1]]],[[0,[2,41]]]],[[]],[[]],[[1,[0,[2,85]]],[[86,[[0,[2,41]],[0,[2,41]],[0,[2,85]]]]]],[[],5],[[],5],[[],6],[[[86,[[0,[2,41]],[0,[2,41]],[0,[2,85]]]],[49,[1]],[0,[2,41]]]],[[]],0,0,0,0,[[]],[[]],[[[88,[87]],[49,[1]]],87],[[]],[[[88,[87]],[48,[87]]]],[[]],[[1,[48,[87]]],[[88,[87]]]],[[],5],[[],5],[[],6],[[[88,[87]],[49,[1]],87]],[[]],0,0,[[[90,[89]],89]],[[]],[[]],[[[90,[2]]],[[90,[2]]]],[[]],[[],[[90,[4]]]],[[[90,[69]],27],28],[[]],[[]],[[[90,[89]]],57],[[[90,[89]]],1],[[[90,[89]],[90,[89]]]],[[],[[90,[89]]]],[[[90,[89]]],53],[[[90,[89]]],[[53,[89]]]],[[[90,[89]],89]],[[]],[[],5],[[],5],[[],6],[[]],0,0,0,0,[91],[91],[[]],[[]],[[]],[[]],[92,92],[[]],[[92,92],57],[[92,27],28],[[]],[[]],[[]],[[]],[92,91],[91,53],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[]],[[]],0,[[]],[[]],[[[93,[2]]],[[93,[2]]]],[[]],[[[93,[[0,[34,41,2]]]]],57],[[[93,[[0,[34,41,2]]]]],1],[[],[[93,[4]]]],[[[93,[[0,[34,41,2]]]]],[[53,[[0,[34,41,2]]]]]],[[[93,[69]],27],28],[[]],[[[93,[[0,[34,41,2]]]],[0,[34,41,2]]]],[[]],[[[93,[[0,[34,41,2]]]]],57],[[[93,[[0,[34,41,2]]]]],[[53,[[0,[34,41,2]]]]]],[[[93,[[0,[34,41,2]]]]],1],[[],[[93,[[0,[34,41,2]]]]]],[[[93,[[0,[34,41,2]]]]],[[53,[[0,[34,41,2]]]]]],[[[93,[[0,[34,41,2]]]]],[[53,[[0,[34,41,2]]]]]],[[[93,[[0,[34,41,2]]]],[0,[34,41,2]]],57],[[]],[[],5],[[],5],[[],6],[[]],0,0,[[94,1],95],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[95,1,1],57],[94,95],[[94,1,1]],[1,94],[[95,1],1],[[95,1],1],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[]],[[]],0,[[]],[[]],[[]],[[96,1]],[[]],[1,96],[[96,1],96],[[],5],[[],5],[[],6],[[]],0,[97,53],[[]],[[]],[[],[[97,[4]]]],[[[97,[69]],27],28],[[]],[97,53],[[]],[97,57],[97,1],[[],97],[97,[[53,[97]]]],[97,97],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[[[98,[2]]],[[98,[2]]]],[[]],[[],[[98,[4]]]],[[[98,[69]],27],28],[[]],[[]],[98,45],[[],98],[98,53],[98,[[53,[98]]]],[98,98],[[]],[[],5],[[],5],[[],6],[[]],0,0,[[]],[[]],[[99,20],57],[[],99],[[99,20],57],[[99,20]],[[]],[[99,20],57],[[99,20]],[[]],[99,57],[99,1],[99,[[53,[20]]]],[[99,20],[[53,[20]]]],[99,[[53,[20]]]],[[99,20],[[53,[20]]]],[[],99],[[],5],[[],5],[[],6],[[]],0,0,[100],[[]],[[]],[[]],[[]],[100,101],[[[100,[2]]],[[100,[2]]]],[[]],[[],[[100,[4]]]],[[]],[[]],[[]],[[]],[[],100],[101,48],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[]],[[]],0,[[102,1]],[[]],[[]],[[[102,[2]]],[[102,[2]]]],[[]],[[],[[102,[4]]]],[[[102,[69]],27],28],[48,102],[[]],[[102,1]],[[]],[102,57],[102,1],[[],102],[102,53],[102],[102,57],[[]],[[],5],[[],5],[[],6],[[]],0,0,0,0,0,[[103,1]],[[]],[[]],[[[103,[2,2]]],[[103,[2,2]]]],[[]],[103],[[]],[[103,1]],[[]],[1,103],[[]],[[],5],[[],5],[[],6],[[103,1]],[[]],0,[[104,[49,[1]],24]],[[]],[[]],[[104,[49,[1]],24]],[[104,[49,[1]],24]],[104,104],[[]],[[104,27],28],[[]],[[104,[49,[1]]],24],[[104,[49,[1]]],24],[[104,[49,[1]]],24],[[]],[1,104],[[[48,[24]]],104],[[]],[[],5],[[],5],[[],6],[[]],0,0,0,[[]],[[]],[[]],[[[106,[105]],1]],[[]],[[1,105],[[106,[105]]]],[[],5],[[],5],[[],6],[[[106,[105]],[49,[1]]]],[[]],0,[[]],[[]],[[[107,[2]]],[[107,[2]]]],[[]],[[],[[107,[4]]]],[[[107,[69]],27],28],[[]],[[]],[[[107,[34]]],57],[[[107,[34]]],1],[[[107,[34]],[107,[34]]]],[[],[[107,[34]]]],[[[107,[34]]],53],[[[107,[34]]],[[53,[34]]]],[[[107,[34]],34]],[[]],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[[108,[49,[1]]]],[[]],[[]],[48,108],[[],5],[[],5],[[],6],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[109,109],[[]],[[[111,[110]],[49,[1]]]],[[]],[[]],[[]],[[]],[[1,109],[[111,[110]]]],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[[111,[110]],[49,[1]],110]],[[]],[[]],0,[[112,1],22],[[]],[[]],[112,112],[[]],[[112,[49,[1]],57],1],[[]],[[]],[112,57],[112,1],[[[48,[57]]],112],[[112,1,57],1],[[112,1,57],[[53,[1]]]],[[]],[[],5],[[],5],[[],6],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[113,1],[[]],[113,[[48,[[48,[1]]]]]],[[]],[[113,1,1],57],[[113,1,1],1],[1,113],[[1,48,[56,[55]]],113],[[113,1],1],[[113,1],1],[[],5],[[],5],[[],6],[[113,1],53],[[]],0,[[114,1],22],[[]],[[]],[114,114],[[]],[[114,[115,[1]],22],1],[[]],[[]],[[114,[115,[1]]],[[53,[22]]]],[[114,[115,[1]]],[[53,[22]]]],[[[48,[22]]],114],[[114,[0,[[115,[1]],2]],22],[[53,[22]]]],[[114,[0,[[115,[1]],2]],22],[[53,[22]]]],[[114,[115,[1]],1],[[53,[22]]]],[[114,[0,[[115,[1]],2]],22,22],1],[[114,1,22],1],[[114,1,22],[[53,[1]]]],[[]],[[],5],[[],5],[[],6],[[]],0,0,0,0,0,0,[[]],[[[117,[[0,[116,10]]]]],[[117,[[0,[116,10]]]]]],[[[119,[118]]],118],[[[120,[118]]],118],[[[119,[118]]],118],[[]],[[[117,[[0,[116,10]]]]],[[117,[[0,[116,10]]]]]],[[[117,[116]],[117,[116]]],[[117,[116]]]],[[[119,[118]],[119,[118]]],[[119,[118]]]],[[[117,[116]],[117,[116]]]],[[[119,[118]],[119,[118]]],118],[[[119,[118]],[119,[118]]],118],0,0,0,[[]],[[[117,[[0,[116,10]]]],[117,[[0,[116,10]]]]],[[117,[[0,[116,10]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[117,[2]]],[[117,[2]]]],[[[119,[2]]],[[119,[2]]]],[[[120,[2]]],[[120,[2]]]],[[[121,[2]]],[[121,[2]]]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[[117,[[0,[116,10]]]]],[[117,[[0,[116,10]]]]]],[[[119,[118]],[119,[118]]],118],[[[120,[118]],[120,[118]]],118],[[],[[117,[4]]]],[[],[[119,[4]]]],[[],[[120,[4]]]],[[],[[121,[4]]]],[[[120,[118]]],[[119,[118]]]],0,0,0,[[[117,[116]],[117,[116]]],[[117,[116]]]],[[[119,[118]],118],[[119,[118]]]],[[[117,[116]],[117,[116]]]],[[[119,[118]],[119,[118]]],118],[[[120,[118]],[120,[118]]],118],[[],122],[[],122],[[],122],[[[117,[116]],[117,[116]]],57],[[[119,[52]],119],57],[[[120,[52]],120],57],[[[121,[52]],121],57],[[[117,[69]],27],28],[[117,27],28],[[[119,[[0,[118,123]]]],27],28],[[[119,[69]],27],28],[[[120,[69]],27],28],[[[121,[69]],27],28],[122,117],[[]],[[]],[[]],[[]],0,[51,[[5,[117]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[[120,[118]],[120,[118]]],57],[[[120,[118]],[120,[118]]],57],[[]],[[[117,[[0,[116,10]]]],[117,[[0,[116,10]]]]],[[117,[[0,[116,10]]]]]],[[]],[[[117,[[0,[116,10]]]],[117,[[0,[116,10]]]]],[[117,[[0,[116,10]]]]]],[[[117,[116]],[117,[116]]],[[117,[116]]]],[[[119,[118]],118],[[119,[118]]]],[[[117,[116]],[117,[116]]]],[117,117],[122,117],[[[119,[118]],[119,[118]]],[[120,[118]]]],[119,121],[[[119,[118]]],[[119,[118]]]],[[[120,[118]]],[[119,[118]]]],[[[117,[116]],[117,[116]]],[[53,[124]]]],0,[[118,118],[[119,[118]]]],[[[120,[118]],[119,[118]]],[[119,[118]]]],0,[[[120,[118]],[119,[118]]],[[119,[118]]]],[[]],[[[117,[[0,[116,10]]]]],[[117,[[0,[116,10]]]]]],[[]],[[[117,[[0,[116,10]]]]],[[117,[[0,[116,10]]]]]],[[]],[[[117,[[0,[116,10]]]]],[[117,[[0,[116,10]]]]]],[[[117,[116]],[117,[116]]],[[117,[116]]]],[[[119,[118]],[119,[118]]],[[119,[118]]]],[[[117,[116]],[117,[116]]]],[[]],[[[117,[[0,[116,10]]]]],[[117,[[0,[116,10]]]]]],0,0,[[]],[[]],[[]],[[]],[[],125],[[],125],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[[],6],[[[119,[118]]],[[119,[118]]]],[[[120,[118]]],[[119,[118]]]],[[]],[[]],[[]],[[]],[[[121,[118]]],118],[[[121,[118]],[121,[118]]],118],[[],118],0,0,0,0,0,0,[[]],[[]],[[[119,[118]],[119,[118]],[119,[118]]],126],[126,126],[[]],[[126,126],57],[[126,27],28],[[]],[[]],[[]],[126,14],[[],5],[[],5],[[],6],[[]],[[[119,[118]],[119,[118]],[119,[118]]],[[121,[118]]]],[[[48,[[119,[118]]]]],53],[[[121,[[0,[118,69]]]],[121,[[0,[118,69]]]]],[[48,[[119,[[0,[118,69]]]]]]]],[[],57],[[[120,[118]]]],[[[48,[[119,[118]]]]],118],0,0,0,[[]],[[]],[127,127],[[]],[[[48,[[119,[118]]]]],[[48,[[119,[118]]]]]],[[127,127],57],[[]],[[[48,[[119,[118]]]],127],[[48,[[119,[118]]]]]],[[]],[[]],[[],5],[[],5],[[],6],[[]],[[[120,[118]],[119,[118]]],118],[[[120,[118]],[119,[118]]],118],[[[120,[118]],[120,[118]]],118],[[[119,[118]],[119,[118]],[119,[118]]],[[121,[118]]]],0,0,0,0,[[]],[[]],[128,128],[[]],[[128,128],57],[[128,27],28],[[]],[[[121,[118]],[120,[118]]]],[[]],[[]],[[],5],[[],5],[[],6],[[]],0,0,0,0,0,0,[[]],[[]],[129,129],[[]],[[129,129],57],[[129,27],28],[[]],[[[121,[118]],[120,[118]]]],[[]],[[]],[[],5],[[],5],[[],6],[[]],0,0,0,0,0,0,0,[[]],[[]],[130,130],[[]],[[130,130],57],[[130,27],28],[[]],[[[121,[118]],[121,[118]]]],[[]],[130,[[53,[20]]]],[[]],[[],5],[[],5],[[],6],[[]],0,0,0,0,0,[[]],[[]],[131,131],[[]],[[131,131],57],[[131,27],28],[[]],[[[120,[118]],[120,[118]]]],[[]],[[]],[[],5],[[],5],[[],6],[[]],0,0,0,0,0,[[]],[[]],[132,132],[[]],[[132,132],57],[[132,27],28],[[]],[[[120,[118]],[120,[118]]]],[[]],[[]],[[],5],[[],5],[[],6],[[]],0,0,0,0,[[]],[[]],[133,133],[[]],[[133,133],57],[[133,27],28],[[]],[[]],[[[119,[118]]],133],[[]],[[],5],[[],5],[[],6],[[]],[[[121,[118]],[119,[118]]],[[48,[[119,[118]]]]]],0,0,0,0,0,0,0,[[[136,[134,[0,[135,2]]]],[0,[135,2]]]],[[[136,[137,[0,[135,2]]]],[0,[135,2]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[138,[2,2]]],[[138,[2,2]]]],[137,137],[134,134],[[[136,[2,2]]],[[136,[2,2]]]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[[136,[134,[0,[135,2]]]],43]],[[[136,[137,[0,[135,2]]]],43]],0,[[[138,[69,69]],27],28],[[137,27],28],[[134,27],28],[[[136,[69,69]],27],28],0,[[],1],[[[138,[2]]],1],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[136,57],0,[136,1],0,0,0,[[1,1],138],[1,[[136,[139,[0,[135,2]]]]]],0,0,[[]],[[[138,[2]]],[[138,[2]]]],0,[[],1],[[[138,[2]]],1],0,[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,0,[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],0,[[]],[[[138,[2]]]],0,[140,[[48,[1]]]],0,[[136,1],[[48,[141]]]],[[136,43],[[48,[[53,[1]]]]]],0,[[[143,[142]],1,1]],[[]],[[]],[[]],[[]],[[[143,[142]]],22],[[1,1],[[143,[142]]]],[[],5],[[],5],[[],6],[[]],0,[140,48],[136,[[48,[53]]]],[140,48],[136],[[136,1],48],0,[[136,1],[[53,[48]]]],[136,[[53,[48]]]],[136,[[48,[53]]]],0,[[144,1,1]],[[]],[[]],[144,144],[[]],[[]],[[144,1],48],[[]],[[144,1,1]],[1,144],[144],[[]],[[],5],[[],5],[[],6],[[]],[136,48],0,0,0,[[145,1,1]],[[]],[[]],[145,145],[[]],[[]],[[]],[1,145],[145,[[53,[[48,[1]]]]]],[[]],[[],5],[[],5],[[],6],[[]],0,[[146,1,1]],[[]],[[]],[146,146],[[]],[[]],[[]],[1,146],[146,[[53,[[48,[1]]]]]],[[]],[[],5],[[],5],[[],6],[[]],0,0,[[1,1]],[1,48],[[1,1]],[1],[[]],0,[[147,1,1]],[[]],[[]],[147,147],[[]],[[]],[[147,1],48],[[]],[[147,1,1]],[1,147],[147],[[]],[[],5],[[],5],[[],6],[[]],0,0,[[148,1,1]],[[]],[[]],[[]],[[]],[149,149],[[]],[[149,27],28],[[]],[[]],[148,48],[[]],[[]],[148,20],[[1,1],148],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[]],[[]],[136,48],0,0,[[]],[[]],0,[140,140],[[]],[[140,27],28],[[]],[[]],0,[136,140],0,0,0,[[]],[[],5],[[],5],[[],6],[[]],[136,[[48,[1]]]],0,[[150,1,1,22,24]],[[]],[[]],[150,150],[[]],[[]],[[]],[[150,1,1,22],[[5,[24]]]],[1,150],[[]],[[],5],[[],5],[[],6],[[]],[136,48],0,[[]],[[]],[[]],0,0,[[]],[136,151],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[[]],[152,48],[[]],[136,152],[152,[[48,[1]]]],[[],5],[[],5],[[],6],[[]],[136,[[53,[[48,[1]]]]]],[[136,1],53],[140,[[48,[[48,[1]]]]]],[136,[[53,[[48,[[48,[53]]]]]]]],0,0,0,0,0,0,0,[[153,153],153],[[]],[[]],[[]],[[]],[153,153],[[[154,[2]]],[[154,[2]]]],[[]],[[]],[[],153],[[154,155],[[48,[153]]]],[[153,27],28],[[[154,[69]],27],28],[[154,155]],[[]],[[]],[[154,153]],[[]],[[]],[[15,15],153],[43,154],0,[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[]],[[]],0,0,[[1,1,55,55,55],[[136,[137,[138,[2]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[48,[[48,[[0,[156,[157,[1]]]]]]]]]],[48,48],0,0,[[]],[[]],[[]],[[]],[158,158],[159,159],[[]],[[]],[[]],[[]],[[158,22,22],22],[[159,22,22],22],[[]],[[]],[[22,22],158],[22,159],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[]],[[]],0,0,0,0,0,0,0,[[48,48],48],[[48,48],48],[[]],[[]],[[48,48],48],[[]],[[]],[[22,22],22],[[],53],[[],53],[22,22],[22,[[48,[22]]]],0,[[]],[[]],[160,160],[[]],[22,[[48,[160]]]],[[160,160],57],[[160,27],28],[[]],0,[[]],0,0,[[]],[[],5],[[],5],[[],6],[[]],[[22,22]],0,0,[[[161,[[0,[156,[157,[1]]]]]],1,1],[[0,[156,[157,[1]]]]]],0,[[[161,[[0,[156,[157,[1]]]]]],1],[[48,[[0,[156,[157,[1]]]]]]]],[[]],[[]],0,[[[161,[[0,[156,[157,[1]]]]]],1],[[0,[156,[157,[1]]]]]],[[[161,[2]]],[[161,[2]]]],[[]],[[[161,[[0,[156,[157,[1]]]]]],1,1],[[0,[156,[157,[1]]]]]],[[],[[161,[4]]]],[[[161,[[0,[156,[157,[1]]]]]],1],[[0,[156,[157,[1]]]]]],[[[161,[69]],27],28],[[]],[[[161,[[0,[156,[157,[1]]]]]],1,1],[[0,[156,[157,[1]]]]]],[[]],[[[161,[[0,[156,[157,[1]]]]]],1],[[0,[156,[157,[1]]]]]],[1,[[161,[[0,[156,[157,[1]]]]]]]],[[[161,[[0,[156,[157,[1]]]]]],1,1],[[0,[156,[157,[1]]]]]],[[]],[[],5],[[],5],[[],6],[[]],[[22,22],22],0,0,0,[[]],[[]],[[162,1],[[48,[1]]]],[[]],[[]],[1,162],[[],5],[[],5],[[],6],[[]],[22,48],0,0,0,0,0,0,0,0,0,0,[[163,163],163],[[163,163]],[[]],[[]],[163,163],[[]],[[],163],[[163,163],163],[[163,163]],[[163,163],57],[[163,27],28],[[163,27],28],[[24,24],163],[23,163],[24,163],[14,163],[21,163],[16,163],[15,163],[18,163],[1,163],[17,163],[20,163],[22,163],[19,163],[[]],[51,[[5,[163]]]],[[]],[163,163],[[163,163],163],[[163,163]],[163,163],[20,163],[[]],[[163,22],163],[[163,163],163],[[163,163]],[45,163],[[]],[[],125],[[],5],[[],5],[[],6],[[]],[[]],0,0,0,0,0,0,0,0,[[[165,[164]],[165,[164]]],[[165,[164]]]],[[[165,[[0,[164,10]]]],[165,[[0,[164,10]]]]]],[[]],[[]],[[[165,[2]]],[[165,[2]]]],[[]],[[],[[165,[4]]]],[[[165,[164]],[165,[164]]],[[165,[164]]]],[[[165,[[0,[164,10]]]],[165,[[0,[164,10]]]]]],[[[165,[52]],165],57],[[[165,[164]],27],28],[[[165,[164]],27],28],[[24,24],[[165,[164]]]],[21,[[165,[164]]]],[[]],[1,[[165,[164]]]],[14,[[165,[164]]]],[19,[[165,[164]]]],[24,[[165,[164]]]],[18,[[165,[164]]]],[15,[[165,[164]]]],[16,[[165,[164]]]],[17,[[165,[164]]]],[20,[[165,[164]]]],[22,[[165,[164]]]],[23,[[165,[164]]]],[51,[[5,[[165,[164]]]]]],[[]],[[[165,[164]]],[[165,[164]]]],[[[165,[164]],[165,[164]]],[[165,[164]]]],[[[165,[[0,[164,10]]]],[165,[[0,[164,10]]]]]],[[[165,[164]]],[[165,[164]]]],[20,[[165,[164]]]],[[]],[[[165,[164]],22],[[165,[164]]]],[[[165,[164]],[165,[164]]],[[165,[164]]]],[[[165,[[0,[164,10]]]],[165,[[0,[164,10]]]]]],[45,[[165,[164]]]],[[]],[[],125],[[],5],[[],5],[[],6],[[],20],[[]],[[]],0,0,0,0,0,0,0,[[24,24]],[[]],[22],0,0,[[]],[[]],[[]],0,0,0,0,[[[48,[[48,[22]]]],22],22],[[[48,[[48,[22]]]],22],[[53,[[48,[[48,[22]]]]]]]],0,[[166,166],166],[[166,166]],[[]],[[]],[[[166,[2]]],[[166,[2]]]],[[]],[[[166,[52]],166],57],[[]],[[[48,[48]]],166],[[166,1,1],53],[166,1],[[166,1]],[[]],[[166,166],166],[[166,166]],[166,166],[[1,1],166],[[166,166],166],[[166,166]],[[]],[166,[[48,[48]]]],[166,166],[[],5],[[],5],[[],6],[[]],[166,1],0,0,[[[168,[167]],[168,[167]]],[[168,[167]]]],[[[168,[167]],[168,[167]]]],[[]],[[]],[[[168,[2]]],[[168,[2]]]],[[]],[[[168,[52]],168],57],[[[168,[69]],27],28],[[]],[[[48,[[48,[167]]]]],[[168,[167]]]],[[[168,[167]],1,1],53],[[168,1]],[[]],[[[168,[167]],[168,[167]]],[[168,[167]]]],[[[168,[167]],[168,[167]]]],[[[168,[[0,[167,38]]]]],[[168,[[0,[167,38]]]]]],[1,[[168,[167]]]],[[[168,[167]],22],[[168,[167]]]],[[[168,[167]]],1],[[[168,[167]],[168,[167]]],[[168,[167]]]],[[[168,[167]],[168,[167]]],[[168,[167]]]],[[[168,[167]],[168,[167]]],[[168,[167]]]],[[[168,[167]],[168,[167]]]],[[]],[[[168,[167]]],[[48,[[48,[167]]]]]],[[[168,[167]]],[[168,[167]]]],[[],5],[[],5],[[],6],[1,[[168,[167]]]],[[]],[22,57],0,0,0,0,0,0,[[1,22],[[48,[22]]]],[[22,22],[[53,[22]]]],[[22,22],22],[[22,22,22],[[53,[22]]]],[[22,22,22],22],[[22,22],[[53,[22]]]],[[1,22],[[48,[22]]]],[[17,17],17],[[20,20],20],[[22,22],22],[[16,16],16],0,0,0,[[]],[[]],[[]],[[]],[[169,1],57],[1,169],[[],5],[[],5],[[],6],[[]],0,[[],57],[22,[[53,[22]]]],0,[[170,170],170],[[170,170]],[[]],[[]],[170,170],[[]],[[170,170],170],[[170,170]],[[170,170],57],[[170,27],28],[[]],[24,170],[[]],[[170,170],170],[[170,170]],[170,170],[[24,24],170],[[170,170],[[53,[124]]]],[[170,170],170],[[170,170]],[[]],[[],5],[[],5],[[],6],[[]],[[22,22,22,22],22],[[22,22,22],22],[22,22],[1,[[48,[22]]]],[[22,22],22],0,0,0,0,[[]],[[]],0,[[[171,[2]]],[[171,[2]]]],[[]],[[[171,[52]],171],57],[[[171,[69]],27],28],[[]],0,[[]],0,[[],171],0,[171,171],[171,171],[171,171],[171,171],[171,171],[171,171],[[]],0,[[],5],[[],5],[[],6],[[]],[[43,[0,[10,41]],[0,[10,41]]],57],[49,49],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[172,[2,2]]],[[172,[2,2]]]],[[[173,[2]]],[[173,[2]]]],[[[174,[2]]],[[174,[2]]]],[[]],[[]],[[]],0,0,[[[174,[[0,[175,2]]]],43]],[[[174,[[0,[175,2]]]],43]],[[[172,[69,69]],27],28],[[[173,[69]],27],28],[[[174,[69]],27],28],[[],1],[[]],[[[172,[2]]],1],[[]],[[]],0,0,0,[[]],[[]],[[]],[174,57],0,[174,1],[[[173,[175]]],176],[[[173,[175]]],1],[[1,1],172],[1,[[174,[[0,[175,2]]]]]],0,0,0,[[]],[[[172,[2]]],[[172,[2]]]],0,0,[[],1],[[[172,[2]]],1],0,[[]],[[]],[[]],0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],0,[[]],[[]],[[]],[[]],[[[172,[2]]]],0,[174,[[48,[1]]]],0,[[177,1,1],[[53,[1]]]],[[]],[[]],[[177,1,1],53],[[]],[[]],[[177,1]],[[174,1],177],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[[]],[[]],[[174,1],178],[[178,1],1],[[178,1]],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[179,179],[[]],[[179,27],28],[[]],[[179,1],1],[[]],[[179,1,1],1],[[[174,[175]],1],179],[[179,1],[[53,[1]]]],[[179,1,1],48],[[179,1,1],48],[[179,1]],[[179,1]],[[]],[[],5],[[],5],[[],6],[[]],0,[[180,1,1],[[53,[1]]]],[[]],[[]],[[]],[[180,1,1],1],[[]],[[180,1,1,1],[[53,[1]]]],[[174,1],180],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[[]],[[]],[[[56,[55]],[56,[55]],[56,[55]]],181],[[181,174],48],[[],5],[[],5],[[],6],[[]],[[174,1]],[[174,1],[[5,[51]]]],0,[[]],[[]],[[]],[[]],[[[56,[55]],[56,[55]],[56,[55]]],182],[[182,174,1],48],[[],5],[[],5],[[],6],[[]],[174],[[174,1],48],[174,48],[[174,1,1],[[48,[1]]]],0,0,0,0,0,0,0,0,[22,20],0,[[]],[[]],[183],[[]],[183,[[53,[16]]]],[[]],[[],183],[183,[[53,[16]]]],[183,[[48,[184]]]],[183,24],[183,22],[183],[[],5],[[],5],[[],6],[[]],[[183,123]],[[183,123]],0,[51,125],0,0,0,0,[[[141,[11]],[141,[11]]],[[141,[11]]]],[[]],[[]],[[[141,[2]]],[[141,[2]]]],[[]],[[[141,[34]],141],124],[[[141,[52]],141],57],[[[141,[69]],27],28],[[]],[[]],[[[141,[10]]],57],[[[141,[10]]],57],[[[141,[10]]],57],[[[141,[38]]],[[141,[38]]]],[[[141,[185]],141],[[53,[124]]]],[[[141,[46]],[141,[46]]],[[141,[46]]]],[[]],[[],5],[[],5],[[],6],[[[141,[10]]],10],[[]],[[1,1,1,1]],0,0,[[]],0,[[]],[[]],[186,186],[[]],[[186,27],28],[[]],[186,22],[[]],[[],186],[[]],[[],5],[[],5],[[],6],[[]],0,[[51,51],51]],"p":[[15,"usize"],[8,"Clone"],[3,"AddSum"],[8,"Default"],[4,"Result"],[3,"TypeId"],[3,"Affine"],[8,"One"],[8,"Zero"],[8,"Copy"],[8,"Add"],[8,"Mul"],[3,"BitXor"],[15,"i32"],[15,"isize"],[15,"u8"],[15,"u16"],[15,"i128"],[15,"i8"],[15,"u32"],[15,"i16"],[15,"u64"],[15,"u128"],[15,"i64"],[4,"DihedralValue"],[3,"Dihedral"],[3,"Formatter"],[6,"Result"],[3,"Dual"],[8,"Identity"],[8,"AlgeStruct"],[8,"BinaryOp"],[3,"Max"],[8,"Ord"],[3,"Min"],[3,"Prod"],[3,"Sum"],[8,"Neg"],[3,"Update"],[3,"UpdateSum"],[8,"Eq"],[3,"CompressorBuilder"],[8,"IntoIterator"],[3,"Compressor"],[8,"Iterator"],[8,"Sub"],[3,"Imos1D"],[3,"Vec"],[3,"Range"],[3,"KMP"],[15,"str"],[8,"PartialEq"],[4,"Option"],[3,"Mo"],[8,"Fn"],[3,"Box"],[15,"bool"],[3,"PSP"],[3,"RollingHash"],[3,"Table"],[3,"SuffixArray"],[8,"Hash"],[3,"StaticRangeFreqQuery"],[3,"StaticRangeInversionsQuery"],[3,"TwoSat"],[3,"BinaryTrie"],[3,"ConvexHullTrick"],[4,"Mode"],[8,"Debug"],[3,"CumulativeSum1DBuilder"],[3,"CumulativeSum1D"],[3,"CumulativeSum2DBuilder"],[3,"CumulativeSum2D"],[8,"Semigroup"],[3,"DisjointSparseTable"],[3,"DualSegmentTree"],[3,"FenwickTree"],[8,"Group"],[3,"RangeTo"],[3,"FenwickTreeAdd"],[3,"FenwickOnFenwickBuilder"],[3,"FenwickOnFenwick"],[3,"FoldableDeque"],[3,"IntervalHeap"],[8,"Action"],[3,"LazySegmentTree"],[8,"Elem"],[3,"LazySegmentTreeCoeff"],[8,"Elem"],[3,"LazySkewHeap"],[3,"LiChaoTree"],[4,"Mode"],[3,"MultiSet"],[3,"PartiallyPersistentUnionFind"],[3,"At"],[3,"PersistentArray"],[3,"PersistentQueue"],[3,"PersistentStack"],[3,"QwordTree"],[3,"RangeSearchTreeBuilder"],[3,"RangeSearchTree"],[3,"RollbackableVec"],[3,"SegmentTree"],[3,"SegmentTreeBeats"],[8,"Elem"],[3,"SegmentTreeLinearAdd"],[3,"SkewHeap"],[3,"SparseTable"],[4,"Mode"],[8,"Elem"],[3,"StarrySkyTree"],[3,"SuccinctDict"],[3,"UnionFind"],[3,"WaveletMatrix"],[8,"RangeBounds"],[8,"EpsValue"],[3,"EpsFloat"],[8,"Eps"],[3,"Vector"],[3,"Line"],[3,"Circle"],[15,"f64"],[8,"Display"],[4,"Ordering"],[3,"String"],[4,"CCW"],[4,"Hull"],[4,"IntersectCircleLine"],[4,"IntersectCircleSegment"],[4,"IntersectCircles"],[4,"IntersectLineSegment"],[4,"IntersectSegments"],[4,"PointPolygon"],[3,"Undirected"],[8,"EdgeTrait"],[3,"Graph"],[3,"Directed"],[3,"Edge"],[8,"Direction"],[3,"Lowlink"],[4,"NumInf"],[8,"MaxFlow"],[3,"BipartiteMatching"],[3,"Dinic"],[3,"DirectedEulerianTrail"],[3,"UndirectedEulerianTrail"],[3,"FordFulkerson"],[3,"HopcroftKarp"],[3,"Edge"],[3,"MinCostFlow"],[3,"PseudoTree"],[3,"SCC"],[3,"Position"],[3,"Grid"],[8,"FnMut"],[8,"FF"],[8,"From"],[3,"ExtLucas"],[3,"BinomialCoefficient"],[3,"Quotient"],[3,"FactorialTable"],[3,"FactorizeSieve"],[3,"ConstModInt"],[8,"Modulo"],[3,"ModInt"],[3,"Matrix"],[8,"SquareMatrixElem"],[3,"SquareMatrix"],[3,"EratosthenesSieve"],[3,"Rational"],[3,"Dice"],[3,"TreeEdge"],[3,"TreeNode"],[3,"Tree"],[8,"TreeEdgeTrait"],[8,"DoubleEndedIterator"],[3,"TreeDepthQuery"],[3,"EulerTour"],[3,"HLD"],[3,"DoublingLCA"],[3,"RerootingDP"],[3,"TreeDP"],[3,"FastIO"],[15,"char"],[8,"PartialOrd"],[3,"XorShift"],[8,"Inverse"],[8,"Foldable"],[8,"Foldable2D"],[8,"Indexable"],[8,"Assignable"],[8,"Updatable"],[8,"Pow"],[8,"Inv"],[8,"Frac"],[8,"GcdLcm"],[8,"CheckPrime"],[8,"JoinStr"],[8,"Transpose"],[8,"YesNo"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
