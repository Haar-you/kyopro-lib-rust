var searchIndex={};
searchIndex["haar_lib"] = {"doc":"Rust GitHub last commit","i":[[0,"algebra","haar_lib","代数的構造",null,null],[0,"one_zero","haar_lib::algebra","",null,null],[8,"Zero","haar_lib::algebra::one_zero","",null,null],[16,"Output","","",0,null],[10,"zero","","",0,[[]]],[8,"One","","",null,null],[16,"Output","","",1,null],[10,"one","","",1,[[]]],[0,"traits","haar_lib::algebra","",null,null],[8,"AlgeStruct","haar_lib::algebra::traits","",null,null],[16,"Output","","",2,null],[8,"BinaryOp","","",null,null],[10,"op","","",3,[[["self"]]]],[8,"Identity","","",null,null],[10,"id","","",4,[[["self"]]]],[8,"Inverse","","",null,null],[10,"inv","","",5,[[["self"]]]],[8,"Commutative","","",null,null],[8,"Associative","","",null,null],[8,"Idempotence","","",null,null],[8,"Semigroup","","",null,null],[8,"Monoid","","",null,null],[8,"Group","","",null,null],[0,"affine","haar_lib::algebra","",null,null],[3,"Affine","haar_lib::algebra::affine","",null,null],[11,"new","","",6,[[],["self"]]],[0,"bitxor","haar_lib::algebra","",null,null],[3,"BitXor","haar_lib::algebra::bitxor","",null,null],[11,"new","","",7,[[],["self"]]],[0,"dihedral","haar_lib::algebra","",null,null],[3,"Dihedral","haar_lib::algebra::dihedral","",null,null],[4,"DihedralValue","","",null,null],[13,"R","","",8,null],[13,"S","","",8,null],[11,"new","","",9,[[["usize"]],["self"]]],[0,"dual","haar_lib::algebra","",null,null],[3,"Dual","haar_lib::algebra::dual","",null,null],[11,"new","","",10,[[["s"]],["self"]]],[0,"max","haar_lib::algebra","",null,null],[3,"Max","haar_lib::algebra::max","",null,null],[11,"new","","",11,[[],["self"]]],[0,"min","haar_lib::algebra","",null,null],[3,"Min","haar_lib::algebra::min","",null,null],[11,"new","","",12,[[],["self"]]],[0,"prod","haar_lib::algebra","",null,null],[3,"Prod","haar_lib::algebra::prod","",null,null],[11,"new","","",13,[[],["self"]]],[0,"sum","haar_lib::algebra","",null,null],[3,"Sum","haar_lib::algebra::sum","",null,null],[11,"new","","",14,[[],["self"]]],[0,"update","haar_lib::algebra","",null,null],[3,"Update","haar_lib::algebra::update","",null,null],[11,"new","","",15,[[],["self"]]],[0,"action","haar_lib::algebra","",null,null],[8,"Action","haar_lib::algebra::action","",null,null],[16,"FType","","",16,null],[16,"UType","","",16,null],[10,"fold_id","","",16,[[["self"]]]],[10,"fold","","",16,[[["self"]]]],[10,"update_id","","",16,[[["self"]]]],[10,"update","","",16,[[["self"]]]],[10,"convert","","",16,[[["usize"],["self"]]]],[0,"add_sum","haar_lib::algebra","",null,null],[3,"AddSum","haar_lib::algebra::add_sum","",null,null],[11,"new","","",17,[[],["self"]]],[0,"update_sum","haar_lib::algebra","",null,null],[3,"UpdateSum","haar_lib::algebra::update_sum","",null,null],[11,"new","","",18,[[],["self"]]],[0,"algo","haar_lib","",null,null],[0,"bsearch","haar_lib::algo","二分探索",null,null],[5,"lower_bound","haar_lib::algo::bsearch","x以上となる最小のindexを求める。",null,[[["t"]],["usize"]]],[5,"upper_bound","","xを超える最小のindexを求める。",null,[[["t"]],["usize"]]],[5,"equal_range","","lower_bound, upper_boundの組を求める。",null,[[["t"]]]],[0,"compressor","haar_lib::algo","座標圧縮",null,null],[3,"Compressor","haar_lib::algo::compressor","",null,null],[3,"CompressorBuilder","","",null,null],[11,"index","","`value`が何番目の値(0-index)かを返す。 # Complexity Time complexity…",19,[[["t"],["self"]],["usize"]]],[11,"get","","`i`番目の値を返す。 # Complexity Time complexity $O(1)$",19,[[["self"],["usize"]],["t"]]],[11,"compress","","",19,[[["self"]]]],[11,"decompress","","",19,[[["self"]]]],[11,"size","","",19,[[["self"]],["usize"]]],[11,"new","","",20,[[],["self"]]],[11,"add","","",20,[[["self"],["t"]]]],[11,"add_vec","","",20,[[["self"]]]],[11,"build","","",20,[[],["compressor"]]],[0,"edit_distance","haar_lib::algo","",null,null],[5,"edit_distance","haar_lib::algo::edit_distance","",null,[[],["usize"]]],[0,"enumerate_bitset","haar_lib::algo","",null,null],[0,"gray_code","haar_lib::algo::enumerate_bitset","",null,null],[5,"gray_code","haar_lib::algo::enumerate_bitset::gray_code","",null,[[["u32"]]]],[0,"subset_asc","haar_lib::algo::enumerate_bitset","",null,null],[5,"subset_asc","haar_lib::algo::enumerate_bitset::subset_asc","",null,[[["u32"]]]],[0,"subset_between","haar_lib::algo::enumerate_bitset","",null,null],[5,"subset_between","haar_lib::algo::enumerate_bitset::subset_between","",null,[[["u32"]]]],[0,"subset_desc","haar_lib::algo::enumerate_bitset","",null,null],[5,"subset_desc","haar_lib::algo::enumerate_bitset::subset_desc","",null,[[["u32"]]]],[0,"subset_size_k","haar_lib::algo::enumerate_bitset","",null,null],[5,"subset_size_k","haar_lib::algo::enumerate_bitset::subset_size_k","",null,[[["u32"]]]],[0,"superset_asc","haar_lib::algo::enumerate_bitset","",null,null],[5,"super_asc","haar_lib::algo::enumerate_bitset::superset_asc","",null,[[["u32"]]]],[0,"superset_desc","haar_lib::algo::enumerate_bitset","",null,null],[5,"superset_desc","haar_lib::algo::enumerate_bitset::superset_desc","",null,[[["u32"]]]],[0,"imos_1d","haar_lib::algo","",null,null],[3,"Imos1D","haar_lib::algo::imos_1d","",null,null],[11,"new","","",21,[[["usize"]],["self"]]],[11,"update","","",21,[[["range",["usize"]],["usize"],["self"],["t"]]]],[11,"build","","",21,[[],["vec"]]],[0,"interval_scheduling","haar_lib::algo","区間スケジューリング問題",null,null],[5,"interval_scheduling","haar_lib::algo::interval_scheduling","半開区間の集合から共通部分を含まないような部分集合のうち、要素数が最大となるものを求める。 # Complexity…",null,[[],[["usize"],["vec",["usize"]]]]],[0,"inversion_number","haar_lib::algo","転倒数",null,null],[5,"inversion_number","haar_lib::algo::inversion_number","数列の転倒数を計算する。 # Complexity Time complexity $O(n \\log(n))$",null,[[],["u64"]]],[0,"kmp","haar_lib::algo","",null,null],[3,"KMP","haar_lib::algo::kmp","",null,null],[11,"new","","",22,[[["str"]],["self"]]],[11,"matches","","",22,[[["str"],["self"]],[["usize"],["vec",["usize"]]]]],[0,"knapsack","haar_lib::algo","ナップサック問題",null,null],[0,"limited","haar_lib::algo::knapsack","",null,null],[5,"knapsack_limited","haar_lib::algo::knapsack::limited","個数制限付きナップサック問題 # Complexity Time complexity O(n cap…",null,[[["usize"]],["t"]]],[0,"small_quantity","haar_lib::algo::knapsack","",null,null],[5,"knapsack_small_quantity","haar_lib::algo::knapsack::small_quantity","要素数が小さいナップサック問題 # Complexity Time complexity O(n * 2 ^ (n…",null,[[["w"]],["v"]]],[0,"small_value","haar_lib::algo::knapsack","",null,null],[5,"knapsack_small_value","haar_lib::algo::knapsack::small_value","価値の総和が小さいナップサック問題 # Complexity Time complexity O(n sum(vs))",null,[[["u64"]],["usize"]]],[0,"small_weight","haar_lib::algo::knapsack","",null,null],[5,"knapsack_small_weight","haar_lib::algo::knapsack::small_weight","容量が小さいナップサック問題 # Complexity Time complexity O(n cap)",null,[[["usize"]],["t"]]],[0,"unlimited","haar_lib::algo::knapsack","",null,null],[5,"knapsack_unlimited","haar_lib::algo::knapsack::unlimited","個数制限無しナップサック問題 # Complexity Time complexity O(n cap)",null,[[["usize"]],["t"]]],[0,"lcs","haar_lib::algo","最長共通部分列",null,null],[5,"lcs","haar_lib::algo::lcs","列a, bの最長共通部分列の一つを求める。",null,[[],[["vec"],["copy"],["partialeq"]]]],[0,"lis","haar_lib::algo","最長増加部分列",null,null],[5,"lis","haar_lib::algo::lis","列の最長増加部分列の一つを求める。",null,[[],[["usize"],["vec",["usize"]]]]],[0,"manacher","haar_lib::algo","",null,null],[5,"manacher","haar_lib::algo::manacher","",null,[[],[["usize"],["vec",["usize"]]]]],[0,"max_partial_sum","haar_lib::algo","最大連続部分和",null,null],[5,"max_partial_sum","haar_lib::algo::max_partial_sum","空でない連続する部分列の和で最大のものを返す。",null,[[],["option"]]],[0,"max_rect","haar_lib::algo","",null,null],[5,"max_rect_in_histogram","haar_lib::algo::max_rect","ヒストグラム中の最大面積長方形の面積を計算する。",null,[[],["t"]]],[5,"max_rect","","グリッド上の最大面積長方形の面積を計算する。",null,[[["copy"],["partialeq"]],["usize"]]],[0,"merge","haar_lib::algo","",null,null],[5,"inplace_merge_by","haar_lib::algo::merge","",null,[[["usize"]]]],[5,"inplace_merge","","",null,[[["usize"]]]],[5,"merge","","",null,[[],[["vec"],["ord"],["copy"]]]],[0,"mo","haar_lib::algo","",null,null],[3,"Mo","haar_lib::algo::mo","",null,null],[11,"new","","",23,[[["usize"],["box"]],["self"]]],[11,"add","","",23,[[["self"],["usize"]]]],[11,"run","","",23,[[]]],[0,"num_subseq","haar_lib::algo","相異なる部分列の総数",null,null],[5,"num_subseq","haar_lib::algo::num_subseq","返り値`ret`に対して、`ret[i]`は`a[0..i]`の相異なる部分列の総数",null,[[["u64"]],[["vec",["u64"]],["u64"]]]],[0,"permutation","haar_lib::algo","",null,null],[5,"next_permutation","haar_lib::algo::permutation","",null,[[],["bool"]]],[5,"prev_permutation","","",null,[[],["bool"]]],[5,"permutations","","",null,[[["vec"],["ord"],["copy"]]]],[0,"rle","haar_lib::algo","",null,null],[5,"rle","haar_lib::algo::rle","",null,[[],["vec"]]],[0,"sa","haar_lib::algo","",null,null],[3,"SuffixArray","haar_lib::algo::sa","",null,null],[11,"new","","",24,[[["str"]],["self"]]],[11,"to_slice","","",24,[[["self"]]]],[11,"lcp_array","","",24,[[["self"]],[["usize"],["vec",["usize"]]]]],[0,"sliding_window","haar_lib::algo","スライド最小値",null,null],[5,"sliding_minimum","haar_lib::algo::sliding_window","配列のすべての長さkの連続部分列について、その最小値を列挙する。 # Complexity Time…",null,[[["usize"]],[["vec"],["ord"],["copy"]]]],[5,"sliding_maximum","","",null,[[["usize"]],[["vec"],["ord"],["copy"]]]],[0,"subset_sum","haar_lib::algo","部分和問題",null,null],[0,"count","haar_lib::algo::subset_sum","",null,null],[5,"subset_sum","haar_lib::algo::subset_sum::count","部分和問題 (和を達成する組み合わせ数を返す)",null,[[["usize"]],["vec"]]],[0,"limited","haar_lib::algo::subset_sum","",null,null],[5,"subset_sum_limited","haar_lib::algo::subset_sum::limited","各要素に最大使用回数が定められている部分和問題",null,[[["usize"]],[["vec",["bool"]],["bool"]]]],[0,"two_sat","haar_lib::algo","",null,null],[3,"TwoSat","haar_lib::algo::two_sat","",null,null],[11,"new","","",25,[[["usize"]],["self"]]],[11,"add_if","","",25,[[["isize"],["self"]]]],[11,"add_or","","",25,[[["isize"],["self"]]]],[11,"not_coexist","","",25,[[["isize"],["self"]]]],[11,"solve","","",25,[[["self"]],[["vec",["bool"]],["option",["vec"]]]]],[0,"zalgo","haar_lib::algo","",null,null],[5,"zalgo","haar_lib::algo::zalgo","",null,[[],[["usize"],["vec",["usize"]]]]],[0,"static_range_freq_query","haar_lib::algo","配列に対する範囲頻度取得クエリ",null,null],[3,"StaticRangeFreqQuery","haar_lib::algo::static_range_freq_query","配列に対する範囲頻度取得クエリを処理する。",null,null],[11,"new","","Time Complexity $O(|a|)$",26,[[["vec"]],["self"]]],[11,"query","","Time Complexity $O(log |a|)$",26,[[["range",["usize"]],["usize"],["t"],["self"]],["usize"]]],[0,"static_range_inversions_query","haar_lib::algo","",null,null],[3,"StaticRangeInversionsQuery","haar_lib::algo::static_range_inversions_query","",null,null],[11,"new","","",27,[[],["self"]]],[11,"add","","",27,[[["self"],["usize"]]]],[11,"solve","","",27,[[["self"]],[["vec",["u64"]],["u64"]]]],[0,"ds","haar_lib","データ構造",null,null],[0,"traits","haar_lib::ds","",null,null],[8,"Foldable","haar_lib::ds::traits","",null,null],[16,"Output","","",28,null],[10,"fold","","",28,[[["idx"],["self"]]]],[8,"Foldable2D","","",null,null],[16,"Output","","",29,null],[10,"fold","","",29,[[["idx"],["self"]]]],[8,"Assignable","","",null,null],[16,"Value","","",30,null],[10,"assign","","",30,[[["self"],["idx"]]]],[8,"Updatable","","",null,null],[16,"Value","","",31,null],[10,"update","","",31,[[["self"],["idx"]]]],[8,"Indexable","","",null,null],[16,"Output","","",32,null],[10,"get","","",32,[[["idx"],["self"]]]],[0,"partially_persistent_unionfind","haar_lib::ds","部分永続UnionFind # Problems - AGC 002 D - Stamp Rally - CODE…",null,null],[3,"PartiallyPersistentUnionFind","haar_lib::ds::partially_persistent_unionfind","",null,null],[3,"At","","",null,null],[11,"new","","",33,[[["usize"]],["self"]]],[11,"at","","時刻tでの状態",33,[[["self"],["usize"]],["at"]]],[11,"latest","","最新時点の状態",33,[[["self"]],["at"]]],[11,"merge","","",33,[[["self"],["usize"]]]],[11,"root_of","","",34,[[["self"],["usize"]],["usize"]]],[11,"is_same","","",34,[[["self"],["usize"]],["bool"]]],[11,"size_of","","Complexity Time Complexity $(\\log t)$",34,[[["self"],["usize"]],["usize"]]],[0,"unionfind","haar_lib::ds","",null,null],[3,"UnionFind","haar_lib::ds::unionfind","",null,null],[11,"new","","",35,[[["usize"]],["self"]]],[11,"new_with_values","","",35,[[["box"],["usize"],["vec"]],["self"]]],[11,"root_of","","",35,[[["self"],["usize"]],["usize"]]],[11,"is_same","","",35,[[["self"],["usize"]],["bool"]]],[11,"merge","","",35,[[["self"],["usize"]],["usize"]]],[11,"size_of","","",35,[[["self"],["usize"]],["usize"]]],[11,"count_groups","","",35,[[["self"]],["usize"]]],[11,"value_of","","",35,[[["self"],["usize"]],[["t"],["option"]]]],[11,"get_groups","","",35,[[["self"]],[["vec",["vec"]],["vec",["usize"]]]]],[0,"dual_segtree","haar_lib::ds","",null,null],[3,"DualSegmentTree","haar_lib::ds::dual_segtree","",null,null],[11,"new","","",36,[[["m"],["usize"]],["self"]]],[11,"get","","",36,[[["self"],["usize"]],["t"]]],[11,"from_vec","","",36,[[["self"]]]],[11,"to_vec","","",36,[[["self"]],["vec"]]],[0,"fenwick","haar_lib::ds","",null,null],[3,"FenwickTree","haar_lib::ds::fenwick","",null,null],[11,"new","","",37,[[["usize"],["g"]],["self"]]],[0,"fenwick_add","haar_lib::ds","",null,null],[3,"FenwickTreeAdd","haar_lib::ds::fenwick_add","",null,null],[11,"new","","",38,[[["usize"],["t"]],["self"]]],[11,"sub","","",38,[[["self"],["usize"],["t"]]]],[11,"add","","",38,[[["self"],["usize"],["t"]]]],[0,"lazy_segtree","haar_lib::ds","",null,null],[3,"LazySegmentTree","haar_lib::ds::lazy_segtree","",null,null],[11,"new","","",39,[[["a"],["usize"]],["self"]]],[11,"fold","","",39,[[["self"],["range",["usize"]],["usize"]],["t"]]],[0,"lazy_segtree_coeff","haar_lib::ds","係数乗算付き区間加算区間総和遅延セグ木",null,null],[3,"LazySegmentTreeCoeff","haar_lib::ds::lazy_segtree_coeff","",null,null],[8,"Elem","","",null,null],[11,"new","","",40,[[["vec"],["usize"]],["self"]]],[11,"init_with_vec","","",40,[[["self"],["vec"]]]],[0,"segtree","haar_lib::ds","",null,null],[3,"SegmentTree","haar_lib::ds::segtree","",null,null],[11,"new","","",41,[[["m"],["usize"]],["self"]]],[0,"segtree_beats","haar_lib::ds","",null,null],[3,"SegmentTreeBeats","haar_lib::ds::segtree_beats","",null,null],[11,"new","","",42,[[["usize"]],["self"]]],[11,"chmin","","",42,[[["i64"],["range",["usize"]],["usize"],["self"]]]],[11,"chmax","","",42,[[["i64"],["range",["usize"]],["usize"],["self"]]]],[11,"add","","",42,[[["i64"],["range",["usize"]],["usize"],["self"]]]],[11,"get_sum","","",42,[[["self"],["range",["usize"]],["usize"]],["i64"]]],[11,"get_max","","",42,[[["self"],["range",["usize"]],["usize"]],["i64"]]],[11,"get_min","","",42,[[["self"],["range",["usize"]],["usize"]],["i64"]]],[11,"new_with_vec","","",42,[[["i64"],["vec",["i64"]]],["self"]]],[0,"segtree_linear_add","haar_lib::ds","区間一次関数加算セグメントツリー",null,null],[3,"SegmentTreeLinearAdd","haar_lib::ds::segtree_linear_add","",null,null],[8,"Elem","","",null,null],[11,"new","","",43,[[["usize"],["t"]],["self"]]],[11,"update","","",43,[[["range",["usize"]],["usize"],["self"]]]],[0,"starry_sky_tree","haar_lib::ds","区間加算・区間Max(Min)",null,null],[3,"StarrySkyTree","haar_lib::ds::starry_sky_tree","",null,null],[4,"Mode","","",null,null],[13,"Max","","",44,null],[13,"Min","","",44,null],[8,"Elem","","",null,null],[11,"new","","",45,[[["usize"],["mode"]],["self"]]],[0,"fenwick_on_fenwick","haar_lib::ds","",null,null],[3,"FenwickOnFenwickBuilder","haar_lib::ds::fenwick_on_fenwick","",null,null],[3,"FenwickOnFenwick","","",null,null],[11,"new","","",46,[[],["self"]]],[11,"add","","使用する点を登録する。",46,[[["i64"],["self"]]]],[11,"build","","",46,[[["copy"]],[["fenwickonfenwick"],["copy"]]]],[11,"update","","Time Complexity $O(\\log ^ 2 n)$",47,[[["i64"],["self"],["t"]]]],[11,"fold","","Time Complexity $O(\\log ^ 2 n)$",47,[[["i64"],["range",["i64"]],["self"]],["t"]]],[11,"fold_to","","Time Complexity $O(\\log ^ 2 n)$",47,[[["i64"],["rangeto",["i64"]],["self"]],["t"]]],[0,"cumulative_sum_1d","haar_lib::ds","1次元累積和",null,null],[3,"CumulativeSum1D","haar_lib::ds::cumulative_sum_1d","",null,null],[3,"CumulativeSum1DBuilder","","",null,null],[11,"new","","",48,[[["usize"],["g"]],["self"]]],[11,"update","","",48,[[["self"],["usize"],["t"]]]],[11,"build","","",48,[[],["cumulativesum1d"]]],[0,"cumulative_sum_2d","haar_lib::ds","2次元累積和",null,null],[3,"CumulativeSum2D","haar_lib::ds::cumulative_sum_2d","",null,null],[3,"CumulativeSum2DBuilder","","",null,null],[11,"new","","",49,[[["usize"],["g"]],["self"]]],[11,"update","","",49,[[["self"],["usize"],["t"]]]],[11,"build","","",49,[[],["cumulativesum2d"]]],[0,"persistent_array","haar_lib::ds","永続配列",null,null],[3,"PersistentArray","haar_lib::ds::persistent_array","",null,null],[11,"new","","",50,[[["usize"],["t"]],["self"]]],[11,"set","","",50,[[["t"],["self"],["usize"]],["self"]]],[11,"get","","",50,[[["self"],["usize"]],["t"]]],[0,"rollbackable_vector","haar_lib::ds","ロールバック可能Vec",null,null],[3,"RollbackableVec","haar_lib::ds::rollbackable_vector","",null,null],[11,"new","","",51,[[],["self"]]],[11,"push","","",51,[[["self"],["t"]]]],[11,"pop","","",51,[[["self"]],["option"]]],[11,"assign","","",51,[[["self"],["usize"],["t"]]]],[11,"rollback","","",51,[[["self"]],["bool"]]],[11,"len","","",51,[[["self"]],["usize"]]],[11,"is_empty","","",51,[[["self"]],["bool"]]],[0,"range_search_tree","haar_lib::ds","領域内の点を列挙する",null,null],[3,"RangeSearchTree","haar_lib::ds::range_search_tree","",null,null],[3,"RangeSearchTreeBuilder","","",null,null],[11,"search","","",52,[[["self"]],["vec"]]],[11,"new","","",53,[[],["self"]]],[11,"add","","",53,[[["self"],["index"]]]],[11,"build","","",53,[[],["rangesearchtree"]]],[0,"foldable_deque","haar_lib::ds","",null,null],[3,"FoldableDeque","haar_lib::ds::foldable_deque","",null,null],[11,"new","","",54,[[["s"]],["self"]]],[11,"fold","","",54,[[["self"]],["option"]]],[11,"push_back","","",54,[[["self"],["t"]]]],[11,"push_front","","",54,[[["self"],["t"]]]],[11,"pop_front","","",54,[[["self"]],["option"]]],[11,"pop_back","","",54,[[["self"]],["option"]]],[11,"front","","",54,[[["self"]],[["t"],["option"]]]],[11,"back","","",54,[[["self"]],[["t"],["option"]]]],[11,"len","","",54,[[["self"]],["usize"]]],[0,"persistent_queue","haar_lib::ds","永続キュー",null,null],[3,"PersistentQueue","haar_lib::ds::persistent_queue","",null,null],[11,"new","","",55,[[["t"]],["self"]]],[11,"push","","",55,[[["self"],["t"]],["self"]]],[11,"pop","","",55,[[["self"]],["option"]]],[11,"front","","",55,[[["self"]],[["t"],["option"]]]],[11,"back","","",55,[[["self"]],[["t"],["option"]]]],[11,"is_empty","","",55,[[["self"]],["bool"]]],[11,"len","","",55,[[["self"]],["usize"]]],[0,"disjoint_sparse_table","haar_lib::ds","半群の列の区間演算を行う(O(1))",null,null],[3,"DisjointSparseTable","haar_lib::ds::disjoint_sparse_table","",null,null],[11,"new","","",56,[[["vec"],["s"]],["self"]]],[0,"sparse_table","haar_lib::ds","冪等性と結合性をもつ列の区間取得(O(1))",null,null],[3,"SparseTable","haar_lib::ds::sparse_table","",null,null],[11,"new","","",57,[[["a"],["vec"]],["self"]]],[0,"lazy_skew_heap","haar_lib::ds","遅延加算付き融合可能ヒープ",null,null],[3,"LazySkewHeap","haar_lib::ds::lazy_skew_heap","",null,null],[8,"Elem","","",null,null],[11,"new","","",58,[[],["self"]]],[11,"meld","","",58,[[["lazyskewheap"],["self"]]]],[11,"push","","",58,[[["self"],["t"]]]],[11,"peek","","",58,[[["self"]],[["t"],["option"]]]],[11,"pop","","",58,[[["self"]],["option"]]],[11,"add","","",58,[[["self"],["t"]]]],[11,"len","","",58,[[["self"]],["usize"]]],[11,"is_empty","","",58,[[["self"]],["bool"]]],[0,"skew_heap","haar_lib::ds","融合可能ヒープ",null,null],[3,"SkewHeap","haar_lib::ds::skew_heap","",null,null],[11,"new","","",59,[[],["self"]]],[11,"meld","","",59,[[["skewheap"],["self"]]]],[11,"push","","",59,[[["self"],["t"]]]],[11,"peek","","",59,[[["self"]],[["t"],["option"]]]],[11,"pop","","",59,[[["self"]],["option"]]],[11,"len","","",59,[[["self"]],["usize"]]],[11,"is_empty","","",59,[[["self"]],["bool"]]],[0,"persistent_stack","haar_lib::ds","永続スタック",null,null],[3,"PersistentStack","haar_lib::ds::persistent_stack","",null,null],[11,"new","","",60,[[],["self"]]],[11,"peek","","",60,[[["self"]],[["t"],["option"]]]],[11,"push","","",60,[[["self"],["t"]],["self"]]],[11,"pop","","",60,[[["self"]],["option"]]],[11,"iter","","",60,[[["self"]]]],[0,"cht","haar_lib::ds","",null,null],[3,"ConvexHullTrick","haar_lib::ds::cht","",null,null],[4,"Mode","","",null,null],[13,"Max","","",61,null],[13,"Min","","",61,null],[11,"new","","",62,[[["mode"]],["self"]]],[11,"add","","",62,[[["self"]]]],[11,"query","","",62,[[["self"],["t"]],["t"]]],[0,"li_chao","haar_lib::ds","",null,null],[3,"LiChaoTree","haar_lib::ds::li_chao","",null,null],[4,"Mode","","",null,null],[13,"Max","","",63,null],[13,"Min","","",63,null],[11,"new","","",64,[[["mode"]],["self"]]],[11,"add_line","","",64,[[["self"]]]],[11,"add_segment","","",64,[[["self"]]]],[11,"query","","",64,[[["self"],["t"]],["option"]]],[0,"binary_trie","haar_lib::ds","",null,null],[3,"BinaryTrie","haar_lib::ds::binary_trie","",null,null],[11,"new","","",65,[[],["self"]]],[11,"len","","",65,[[["self"]],["usize"]]],[11,"is_empty","","",65,[[["self"]],["bool"]]],[11,"count","","",65,[[["self"],["u64"]],["usize"]]],[11,"insert","","",65,[[["self"],["u64"]],["usize"]]],[11,"erase","","",65,[[["self"],["u64"]],[["option",["usize"]],["usize"]]]],[11,"min","","",65,[[["self"],["u64"]],[["u64"],["option",["u64"]]]]],[11,"max","","",65,[[["self"],["u64"]],[["u64"],["option",["u64"]]]]],[11,"lower_bound","","",65,[[["self"],["u64"]],["usize"]]],[11,"upper_bound","","",65,[[["self"],["u64"]],["usize"]]],[11,"to_vec","","",65,[[["self"]],[["vec",["u64"]],["u64"]]]],[0,"succinct_dict","haar_lib::ds","",null,null],[3,"SuccinctDict","haar_lib::ds::succinct_dict","",null,null],[11,"new","","",66,[[["vec",["bool"]],["bool"]],["self"]]],[11,"len","","",66,[[["self"]],["usize"]]],[11,"is_empty","","",66,[[["self"]],["bool"]]],[11,"rank","","[0, index) に含まれる`b`の個数",66,[[["bool"],["self"],["usize"]],["u32"]]],[11,"count","","[l, r) に含まれる`b`の個数",66,[[["range",["usize"]],["usize"],["self"],["bool"]],["u32"]]],[11,"access","","",66,[[["self"],["usize"]],["u32"]]],[11,"select","","nth(1-indexed)番目の`b`の位置",66,[[["bool"],["self"],["usize"]],[["option",["usize"]],["usize"]]]],[0,"geom","haar_lib","",null,null],[3,"EpsFloat","haar_lib::geom","",null,null],[12,"0","","",67,null],[3,"Vector","","",null,null],[12,"0","","",68,null],[12,"1","","",68,null],[3,"Line","","",null,null],[12,"from","","",69,null],[12,"to","","",69,null],[3,"Circle","","",null,null],[12,"center","","",70,null],[12,"radius","","",70,null],[0,"ccw","","",null,null],[4,"CCW","haar_lib::geom::ccw","",null,null],[13,"ONLINE_BACK","","",71,null],[13,"COUNTER_CLOCKWISE","","",71,null],[13,"ON_SEGMENT","","",71,null],[13,"CLOCKWISE","","",71,null],[13,"ONLINE_FRONT","","",71,null],[5,"ccw","","",null,[[["eps"],["vector"]],["ccw"]]],[11,"to_value","","",71,[[],["i32"]]],[0,"intersect_circle_line","haar_lib::geom","",null,null],[4,"IntersectCircleLine","haar_lib::geom::intersect_circle_line","",null,null],[13,"OUTSIDE","","",72,null],[13,"TANGENT","","",72,null],[13,"CROSSED","","",72,null],[5,"intersect_circle_line","","",null,[[["line"],["circle"],["eps"]]]],[0,"intersect_circle_segment","haar_lib::geom","",null,null],[4,"IntersectCircleSegment","haar_lib::geom::intersect_circle_segment","",null,null],[13,"INSIDE","","",73,null],[13,"OUTSIDE","","",73,null],[13,"TANGENT","","",73,null],[13,"ONE_CROSSPOINT","","",73,null],[13,"TWO_CROSSPOINTS","","",73,null],[5,"intersect_circle_segment","","",null,[[["line"],["circle"],["eps"]]]],[0,"intersect_circles","haar_lib::geom","",null,null],[4,"IntersectCircles","haar_lib::geom::intersect_circles","",null,null],[13,"SAME","","",74,null],[13,"INSIDE","","",74,null],[13,"INSCRIBED","","",74,null],[13,"INTERSECTED","","",74,null],[13,"CIRCUMSCRIBED","","",74,null],[13,"OUTSIDE","","",74,null],[5,"intersect_circles","","",null,[[["circle"],["eps"]]]],[11,"num_common_tangent","","",74,[[],[["option",["u32"]],["u32"]]]],[0,"intersect_line_segment","haar_lib::geom","",null,null],[4,"IntersectLineSegment","haar_lib::geom::intersect_line_segment","",null,null],[13,"LEFTSIDE","","",75,null],[13,"RIGHTSIDE","","",75,null],[13,"OVERLAPPED","","",75,null],[13,"CROSSED","","",75,null],[5,"intersect_line_segment","","",null,[[["eps"],["line"]]]],[0,"intersect_segments","haar_lib::geom","",null,null],[4,"IntersectSegments","haar_lib::geom::intersect_segments","",null,null],[13,"INTERSECTED","","",76,null],[13,"OVERLAPPED","","",76,null],[13,"NOT_INTERSECTED","","",76,null],[13,"SAME","","",76,null],[5,"intersect_segments","","",null,[[["eps"],["line"]]]],[0,"dist_line_point","haar_lib::geom","",null,null],[5,"dist_line_point","haar_lib::geom::dist_line_point","",null,[[["vector"],["eps"],["line"]],["eps"]]],[0,"dist_segment_point","haar_lib::geom","",null,null],[5,"dist_segment_point","haar_lib::geom::dist_segment_point","",null,[[["vector"],["eps"],["line"]],["eps"]]],[0,"dist_segments","haar_lib::geom","",null,null],[5,"dist_segments","haar_lib::geom::dist_segments","",null,[[["eps"],["line"]],["eps"]]],[0,"area_intersection_circle_polygon","haar_lib::geom","",null,null],[5,"area_intersection_circle_polygon","haar_lib::geom::area_intersection_circle_polygon","",null,[[["circle"],["eps"]],["eps"]]],[0,"area_intersection_circles","haar_lib::geom","",null,null],[5,"area_intersection_circles","haar_lib::geom::area_intersection_circles","",null,[[["circle"],["eps"]],["eps"]]],[0,"area_polygon","haar_lib::geom","",null,null],[5,"area_polygon","haar_lib::geom::area_polygon","",null,[[],["eps"]]],[0,"convex","haar_lib::geom","",null,null],[5,"is_convex","haar_lib::geom::convex","",null,[[],["bool"]]],[0,"convex_cut","haar_lib::geom","",null,null],[5,"convex_cut","haar_lib::geom::convex_cut","",null,[[["eps"],["line"]]]],[0,"convex_diameter","haar_lib::geom","",null,null],[5,"convex_diameter","haar_lib::geom::convex_diameter","",null,[[["vec",["vector"]],["vector"]],["eps"]]],[0,"convex_hull","haar_lib::geom","",null,null],[4,"Hull","haar_lib::geom::convex_hull","",null,null],[13,"Upper","","",77,null],[13,"Lower","","",77,null],[5,"half_hull","","",null,[[["vec",["vector"]],["hull"],["vector"]],[["vec",["vector"]],["vector"]]]],[5,"convex_hull","","",null,[[["vec",["vector"]],["vector"]],[["vec",["vector"]],["vector"]]]],[0,"point_in_polygon","haar_lib::geom","",null,null],[4,"PointPolygon","haar_lib::geom::point_in_polygon","",null,null],[13,"INCLUSION","","",78,null],[13,"ON_SEGMENT","","",78,null],[13,"EXCLUSION","","",78,null],[5,"point_in_polygon","","",null,[[["eps"],["vector"]],["pointpolygon"]]],[0,"circumcircle","haar_lib::geom","",null,null],[5,"circumcircle","haar_lib::geom::circumcircle","",null,[[["eps"],["vector"]],[["circle"],["eps"]]]],[0,"incircle","haar_lib::geom","",null,null],[5,"incircle","haar_lib::geom::incircle","",null,[[["eps"],["vector"]],[["circle"],["eps"]]]],[0,"common_tangent_circles","haar_lib::geom","",null,null],[5,"common_tangent_circles","haar_lib::geom::common_tangent_circles","",null,[[["eps"],["debug"],["circle"]],[["vec",["vector"]],["vector"]]]],[0,"tangent_circle","haar_lib::geom","",null,null],[5,"tangent_circle","haar_lib::geom::tangent_circle","",null,[[["vector"],["circle"],["eps"]],[["vec",["vector"]],["vector"]]]],[0,"closest_pair","haar_lib::geom","",null,null],[5,"closest_pair","haar_lib::geom::closest_pair","",null,[[["vec",["vector"]],["vector"]],["option"]]],[8,"EpsValue","haar_lib::geom","",null,null],[10,"eps","","",79,[[],["f64"]]],[8,"Eps","","",null,null],[10,"eps","","",80,[[],["f64"]]],[10,"sin","","",80,[[],["self"]]],[10,"cos","","",80,[[],["self"]]],[10,"tan","","",80,[[],["self"]]],[10,"acos","","",80,[[],["self"]]],[10,"abs","","",80,[[],["self"]]],[10,"sqrt","","",80,[[],["self"]]],[10,"atan2","","",80,[[],["self"]]],[10,"max","","",80,[[],["self"]]],[10,"min","","",80,[[],["self"]]],[10,"sq","","",80,[[],["self"]]],[11,"new","","",67,[[["f64"]],["self"]]],[11,"abs","","",68,[[],["t"]]],[11,"abs_sq","","",68,[[],["t"]]],[11,"dot","","",68,[[],["t"]]],[11,"cross","","",68,[[],["t"]]],[11,"unit","","",68,[[],["self"]]],[11,"normal","","",68,[[],["self"]]],[11,"angle","","",68,[[],["t"]]],[11,"polar","","",68,[[["t"]],["self"]]],[11,"angle_diff","","",68,[[],["t"]]],[11,"new","","",69,[[["vector"]],["self"]]],[11,"unit","","",69,[[],["vector"]]],[11,"normal","","",69,[[],["vector"]]],[11,"diff","","",69,[[],["vector"]]],[11,"abs","","",69,[[],["t"]]],[11,"dot","","",69,[[],["t"]]],[11,"cross","","",69,[[],["t"]]],[11,"projection","","",69,[[["vector"]],["vector"]]],[11,"reflection","","",69,[[["vector"]],["vector"]]],[11,"is_orthogonal","","",69,[[],["bool"]]],[11,"is_parallel","","",69,[[],["bool"]]],[11,"new","","",70,[[["t"],["vector"]],["self"]]],[0,"graph","haar_lib","グラフ一般に関するもの",null,null],[3,"Edge","haar_lib::graph","",null,null],[12,"from","","",81,null],[12,"to","","",81,null],[12,"weight","","",81,null],[12,"index","","",81,null],[3,"Directed","","",null,null],[3,"Undirected","","",null,null],[3,"Graph","","",null,null],[12,"edges","","",82,null],[12,"__phantom","","",82,null],[0,"articulation_points","","関節点の列挙",null,null],[5,"articulation_points","haar_lib::graph::articulation_points","",null,[[["lowlink"]],[["usize"],["vec",["usize"]]]]],[0,"biconnected","haar_lib::graph","二重頂点連結分解",null,null],[5,"biconnected","haar_lib::graph::biconnected","",null,[[["lowlink"]],["vec"]]],[0,"bridges","haar_lib::graph","橋の列挙",null,null],[5,"bridges","haar_lib::graph::bridges","橋の列挙",null,[[["lowlink"]],["vec"]]],[0,"lowlink","haar_lib::graph","",null,null],[3,"Lowlink","haar_lib::graph::lowlink","",null,null],[12,"size","","",83,null],[12,"ord","","",83,null],[12,"low","","",83,null],[12,"par","","",83,null],[12,"ch","","",83,null],[12,"back","","",83,null],[11,"new","","",83,[[["graph"]],["self"]]],[0,"scc","haar_lib::graph","強連結成分分解",null,null],[3,"SCC","haar_lib::graph::scc","",null,null],[11,"new","","",84,[[["graph"]],["self"]]],[11,"groups","","",84,[[["self"]],["vec"]]],[11,"to_vec","","",84,[[["self"]],[["usize"],["vec",["usize"]]]]],[0,"two_edge","haar_lib::graph","二重辺連結成分分解",null,null],[5,"two_edge_connected_components","haar_lib::graph::two_edge","",null,[[["lowlink"]],[["vec",["vec"]],["vec",["usize"]]]]],[0,"pseudo_tree","haar_lib::graph","",null,null],[3,"PseudoTree","haar_lib::graph::pseudo_tree","",null,null],[12,"group","","",85,null],[12,"in_loop","","",85,null],[5,"pseudo_tree","","",null,[[["graph"]],["pseudotree"]]],[0,"bellman_ford","haar_lib::graph","負閉路を持つグラフの最短経路 (Bellman-Ford)",null,null],[5,"bellman_ford","haar_lib::graph::bellman_ford","",null,[[["usize"],["graph"]],[["vec",["numinf"]],["numinf"]]]],[0,"bfs","haar_lib::graph","",null,null],[5,"bfs","haar_lib::graph::bfs","",null,[[["graph"]],[["option",["usize"]],["vec",["option"]]]]],[0,"dijkstra","haar_lib::graph","非負重み付き最短経路 (Dijkstra)",null,null],[5,"dijkstra","haar_lib::graph::dijkstra","Time complexity O((E + V) log V)",null,[[["graph"]],[["option"],["vec",["option"]]]]],[0,"warshall_floyd","haar_lib::graph","全頂点間最短経路長",null,null],[5,"warshall_floyd","haar_lib::graph::warshall_floyd","Time complexity O(n ^ 3)",null,[[["graph"]],[["option",["vec"]],["vec",["vec"]]]]],[0,"cycle","haar_lib::graph","",null,null],[0,"directed_shortest","haar_lib::graph::cycle","有向グラフで単一始点の最短サイクルを求める。",null,null],[5,"directed_shortest_cycle","haar_lib::graph::cycle::directed_shortest","有向グラフで単一始点の最短サイクルを求める。",null,[[["graph"],["usize"]],[["option",["vec"]],["vec"]]]],[0,"detect_cycle","haar_lib::graph","有向グラフの閉路検出",null,null],[5,"detect_cycle","haar_lib::graph::detect_cycle","",null,[[["graph"]],[["option",["vec"]],["vec"]]]],[0,"eulerian","haar_lib::graph","(準)Eulerグラフの判定",null,null],[0,"directed","haar_lib::graph::eulerian","",null,null],[3,"DirectedEulerianTrail","haar_lib::graph::eulerian::directed","",null,null],[11,"new","","",86,[[["usize"]],["self"]]],[11,"add_edge","","",86,[[["self"],["usize"]]]],[11,"solve","","",86,[[],[["option",["vec"]],["vec",["usize"]]]]],[0,"undirected","haar_lib::graph::eulerian","",null,null],[3,"UndirectedEulerianTrail","haar_lib::graph::eulerian::undirected","",null,null],[11,"new","","",87,[[["usize"]],["self"]]],[11,"add_edge","","",87,[[["self"],["usize"]]]],[11,"solve","","",87,[[],[["option",["vec"]],["vec",["usize"]]]]],[0,"bipartite","haar_lib::graph","二部グラフ判定",null,null],[5,"check_bipartite","haar_lib::graph::bipartite","",null,[[["graph"]],[["option"],["vec",["option"]]]]],[0,"enumerate_triangles","haar_lib::graph","",null,null],[5,"enumerate_triangles","haar_lib::graph::enumerate_triangles","",null,[[["graph"]],["vec"]]],[0,"max_independent_set","haar_lib::graph","最大独立集合",null,null],[5,"max_independent_set","haar_lib::graph::max_independent_set","",null,[[["vec",["vec"]],["vec",["bool"]]],[["usize"],["vec",["usize"]]]]],[0,"chu_liu_edmonds","haar_lib::graph","有向グラフ上の最小有向全域木を求める",null,null],[5,"chu_liu_edmonds","haar_lib::graph::chu_liu_edmonds","有向グラフ上の最小有向全域木を求める",null,[[["graph"],["usize"]],[["e"],["vec"]]]],[0,"kruskal","haar_lib::graph","最小全域木 (Kruskal)",null,null],[5,"kruskal","haar_lib::graph::kruskal","",null,[[["graph"]],[["e"],["vec"]]]],[0,"prim","haar_lib::graph","最小全域木 (Prim)",null,null],[5,"prim","haar_lib::graph::prim","",null,[[["graph"]],[["e"],["vec"]]]],[0,"tsort","haar_lib::graph","トポロジカルソート",null,null],[5,"tsort","haar_lib::graph::tsort","Time complexity O(N)",null,[[["graph"]],[["option",["vec"]],["vec",["usize"]]]]],[0,"chinese_postman","haar_lib::graph","中国人郵便配達問題",null,null],[5,"chinese_postman_problem","haar_lib::graph::chinese_postman","Time complexity O(V ^ 2 * 2 ^ V)",null,[[["graph"]],["t"]]],[0,"tsp","haar_lib::graph","巡回セールスマン問題",null,null],[5,"tsp","haar_lib::graph::tsp","",null,[[["graph"],["usize"]],["option"]]],[0,"psp","haar_lib::graph","Project Selection Problem",null,null],[3,"PSP","haar_lib::graph::psp","Project Selection Problem",null,null],[11,"new","","",88,[[["usize"]],["self"]]],[11,"penalty_if_red","","頂点iが赤ならばcの損失になる。",88,[[["self"],["usize"],["u64"]]]],[11,"penalty_if_blue","","頂点iが青ならばcの損失になる。",88,[[["self"],["usize"],["u64"]]]],[11,"gain_if_red","","頂点iが赤ならばcの利益を得る。",88,[[["self"],["usize"],["u64"]]]],[11,"gain_if_blue","","頂点iが青ならばcの利益を得る。",88,[[["self"],["usize"],["u64"]]]],[11,"penalty_if_red_blue","","頂点iが赤かつ頂点jが青ならばcの損失となる。",88,[[["self"],["usize"],["u64"]]]],[11,"penalty_if_different","","頂点iとjが異なる色ならばcの損失となる。",88,[[["self"],["usize"],["u64"]]]],[11,"must_be_red","","頂点iは赤でなければならない。",88,[[["self"],["usize"]]]],[11,"must_be_blue","","頂点iは青でなければならない。",88,[[["self"],["usize"]]]],[11,"if_red_then_must_be_red","","頂点iが赤ならば、頂点jも赤でなければならない。",88,[[["self"],["usize"]]]],[11,"gain_if_both_red","","頂点iとjがともに赤ならばcの利益を得る。",88,[[["self"],["usize"],["u64"]]]],[11,"gain_if_both_blue","","頂点iとjがともに青ならばcの利益を得る。",88,[[["self"],["usize"],["u64"]]]],[11,"solve","","must be制約を破った場合、`None`を返す。そうでなければ、利益の最大値を`Some`に包んで返す。",88,[[],[["option",["i64"]],["i64"]]]],[0,"dinic","haar_lib::graph","最大流 (Dinic)",null,null],[3,"Dinic","haar_lib::graph::dinic","",null,null],[0,"flow","haar_lib::graph","",null,null],[8,"MaxFlow","haar_lib::graph::flow","",null,null],[16,"Cap","","",89,null],[10,"new","","",89,[[["usize"]],["self"]]],[10,"add_edge","","",89,[[["self"],["usize"]]]],[10,"max_flow","","",89,[[["self"],["usize"]]]],[10,"get_edges","","",89,[[["self"],["usize"]],["vec"]]],[10,"reset","","",89,[[["self"]]]],[0,"ford_fulkerson","haar_lib::graph","最大流 (Ford-Fulkerson)",null,null],[3,"FordFulkerson","haar_lib::graph::ford_fulkerson","",null,null],[0,"hopcroft_karp","haar_lib::graph","二部マッチング (Hopcroft-Karp)",null,null],[3,"Edge","haar_lib::graph::hopcroft_karp","",null,null],[3,"HopcroftKarp","","",null,null],[11,"new","","",90,[[["usize"]],["self"]]],[11,"add_edge","","",90,[[["self"],["usize"]]]],[11,"matching","","",90,[[["self"]],["u32"]]],[11,"get_matching","","",90,[[["self"]],["vec"]]],[0,"min_cost_flow","haar_lib::graph","最小費用流",null,null],[3,"MinCostFlow","haar_lib::graph::min_cost_flow","",null,null],[11,"new","","",91,[[["usize"]],["self"]]],[11,"add_edge","","",91,[[["i64"],["usize"],["self"],["u64"]]]],[11,"min_cost_flow","","",91,[[["self"],["usize"],["u64"]],[["result",["i64"]],["i64"]]]],[0,"bi_match","haar_lib::graph","二部マッチング",null,null],[3,"BipartiteMatching","haar_lib::graph::bi_match","",null,null],[11,"new","","",92,[[["usize"]],["self"]]],[11,"add_edge","","",92,[[["self"],["usize"]]]],[11,"matching","","",92,[[["self"]],["u64"]]],[8,"EdgeTrait","haar_lib::graph","",null,null],[16,"Weight","","",93,null],[10,"from","","",93,[[["self"]],["usize"]]],[10,"to","","",93,[[["self"]],["usize"]]],[10,"weight","","",93,[[["self"]]]],[10,"rev","","",93,[[],["self"]]],[8,"Direction","","",null,null],[11,"new","","",81,[[["i"],["usize"],["t"]],["self"]]],[11,"new","","",82,[[["usize"]],["self"]]],[11,"add","","",82,[[["self"],["e"]]]],[11,"extend","","",82,[[["self"]]]],[11,"add","","",82,[[["self"],["e"]]]],[11,"extend","","",82,[[["self"]]]],[11,"len","","",82,[[["self"]],["usize"]]],[11,"is_empty","","",82,[[["self"]],["bool"]]],[0,"grid","haar_lib","",null,null],[3,"Position","haar_lib::grid","",null,null],[12,"x","","",94,null],[12,"y","","",94,null],[3,"Grid","","",null,null],[0,"to_graph","","",null,null],[5,"grid_to_graph","haar_lib::grid::to_graph","",null,[[["usize"]],[["edge"],["graph",["directed","edge"]],["directed"]]]],[11,"new","haar_lib::grid","",94,[[["isize"]],["self"]]],[18,"L","","",94,null],[18,"R","","",94,null],[18,"U","","",94,null],[18,"D","","",94,null],[18,"DIR_4","","",94,null],[11,"new","","",95,[[],["self"]]],[11,"get","","",95,[[["position"],["self"]],["t"]]],[11,"find_all","","",95,[[["fnmut"],["self"]],[["position"],["vec",["position"]]]]],[11,"for_each","","",95,[[["self"],["fnmut"]]]],[0,"macros","haar_lib","macro_exportされたmacro置き場",null,null],[0,"chmax","haar_lib::macros","",null,null],[0,"chmin","","",null,null],[0,"ds_macros","","",null,null],[0,"eps","","",null,null],[0,"for_loop","","",null,null],[0,"get_time","","",null,null],[0,"io","","",null,null],[0,"max","","",null,null],[0,"min","","",null,null],[0,"modulo","","",null,null],[0,"mul_vec","","",null,null],[0,"rec","","",null,null],[0,"sort_with","","",null,null],[0,"timer","","",null,null],[0,"trait_alias","","",null,null],[0,"math","haar_lib","数学",null,null],[0,"crt","haar_lib::math","中国剰余定理",null,null],[5,"crt","haar_lib::math::crt","",null,[[],["option"]]],[5,"crt_vec","","",null,[[],["option"]]],[0,"divisor","haar_lib::math","約数列挙",null,null],[5,"count_divisors","haar_lib::math::divisor","Time complexity O(sqrt n)",null,[[["u64"]],["u64"]]],[5,"enumerate_divisors","","Time complexity O(sqrt n)",null,[[["u64"]],[["vec",["u64"]],["u64"]]]],[0,"ext_gcd","haar_lib::math","拡張ユークリッドの互除法",null,null],[5,"ext_gcd","haar_lib::math::ext_gcd","",null,[[["u64"]]]],[0,"factorize","haar_lib::math","",null,null],[0,"sieve","haar_lib::math::factorize","",null,null],[3,"FactorizeSieve","haar_lib::math::factorize::sieve","",null,null],[11,"new","","",96,[[["usize"]],["self"]]],[11,"factorize","","",96,[[["self"],["usize"]],[["usize"],["vec",["usize"]]]]],[0,"trial","haar_lib::math::factorize","",null,null],[5,"factorize","haar_lib::math::factorize::trial","",null,[[["u64"]],["vec"]]],[0,"gcd_lcm","haar_lib::math","最大公約数・最小公倍数",null,null],[8,"GcdLcm","haar_lib::math::gcd_lcm","",null,null],[16,"Output","","",97,null],[10,"gcd","","",97,[[["self"]]]],[10,"lcm","","",97,[[["self"]]]],[10,"gcd_lcm","","",97,[[["self"]]]],[0,"mod_ops","haar_lib::math","mod mでの演算",null,null],[0,"enum_inv","haar_lib::math::mod_ops","0,1,..,nの素数mod pでの逆元を列挙する。",null,null],[5,"enumerate_mod_inv","haar_lib::math::mod_ops::enum_inv","0,1,..,nの素数mod pでの逆元を列挙する。",null,[[["usize"],["u64"]],[["vec",["u64"]],["u64"]]]],[0,"inv","haar_lib::math::mod_ops","mod mでの逆元",null,null],[5,"mod_inv","haar_lib::math::mod_ops::inv","mod mでの逆元",null,[[["u64"]],[["u64"],["option",["u64"]]]]],[0,"inv_p","haar_lib::math::mod_ops","素数mod pでの逆元",null,null],[5,"mod_inv_p","haar_lib::math::mod_ops::inv_p","素数mod pでの逆元",null,[[["u64"]],["u64"]]],[0,"log","haar_lib::math::mod_ops","$a^x = b \\bmod m$を満たすxを求める。",null,null],[5,"mod_log","haar_lib::math::mod_ops::log","$a^x = b \\bmod m$を満たすxを求める。",null,[[["u64"]],[["u64"],["option",["u64"]]]]],[0,"pow","haar_lib::math::mod_ops","$x^p \\bmod m$を求める。",null,null],[5,"mod_pow","haar_lib::math::mod_ops::pow","$x^p \\bmod m$を求める。",null,[[["u64"]],["u64"]]],[0,"sqrt","haar_lib::math::mod_ops","$x^2 = a \\bmod p$を満たすxを一つ求める。",null,null],[5,"mod_sqrt","haar_lib::math::mod_ops::sqrt","$x^2 = a \\bmod p$を満たすxを一つ求める。",null,[[["u64"]],[["u64"],["option",["u64"]]]]],[0,"nim_product","haar_lib::math","",null,null],[5,"nim_product_8","haar_lib::math::nim_product","",null,[[["u8"]],["u8"]]],[5,"nim_product_64","","",null,[[["u64"]],["u64"]]],[5,"nim_product_32","","",null,[[["u32"]],["u32"]]],[5,"nim_product_16","","",null,[[["u16"]],["u16"]]],[0,"miller_rabin","haar_lib::math","",null,null],[5,"miller_rabin","haar_lib::math::miller_rabin","",null,[[["u64"]],["bool"]]],[0,"prime_test","haar_lib::math","",null,null],[0,"traits","haar_lib::math::prime_test","",null,null],[8,"CheckPrime","haar_lib::math::prime_test::traits","",null,null],[10,"is_prime","","",98,[[["self"],["t"]],["bool"]]],[0,"eratosthenes","haar_lib::math::prime_test","",null,null],[3,"EratosthenesSieve","haar_lib::math::prime_test::eratosthenes","",null,null],[11,"new","","",99,[[["usize"]],["self"]]],[0,"primitive_root","haar_lib::math","原始根",null,null],[5,"primitive_root","haar_lib::math::primitive_root","",null,[[["u64"]],[["u64"],["option",["u64"]]]]],[0,"ff","haar_lib::math","",null,null],[0,"modint","haar_lib::math::ff","",null,null],[3,"ModInt","haar_lib::math::ff::modint","",null,null],[8,"Modulo","","",null,null],[10,"value","","",100,[[],["u32"]]],[11,"new","","",101,[[["u32"]],["self"]]],[0,"traits","haar_lib::math::ff","",null,null],[8,"Pow","haar_lib::math::ff::traits","",null,null],[16,"Output","","",102,null],[10,"pow","","",102,[[["u64"]]]],[8,"Inv","","",null,null],[16,"Output","","",103,null],[10,"inv","","",103,[[]]],[8,"Frac","","",null,null],[16,"Output","","",104,null],[10,"frac","","",104,[[["i64"]]]],[8,"FF","","",null,null],[0,"bell_number","haar_lib::math","",null,null],[5,"bell_number_table","haar_lib::math::bell_number","",null,[[["usize"]],[["vec",["vec"]],["vec"]]]],[0,"binomial_coefficient","haar_lib::math","",null,null],[3,"ExtLucas","haar_lib::math::binomial_coefficient","",null,null],[3,"BinomialCoefficient","","",null,null],[11,"new","","",105,[[["u64"]],["self"]]],[11,"get","","",105,[[["self"],["u64"]],["u64"]]],[11,"new","","",106,[[["u64"]],["self"]]],[11,"get","","",106,[[["self"],["u64"]],["u64"]]],[0,"factorial","haar_lib::math","",null,null],[3,"FactorialTable","haar_lib::math::factorial","",null,null],[0,"bell","","",null,null],[11,"bell_number","","",107,[[["self"],["usize"]],["t"]]],[0,"bernoulli","","",null,null],[11,"bernoulli_number","","",107,[[["self"],["usize"]],["vec"]]],[0,"catalan","","",null,null],[11,"catalan_number","","",107,[[["self"],["usize"]],["t"]]],[11,"new","","Time complexity O(n)",107,[[["usize"]],["self"]]],[11,"facto","","nの階乗",107,[[["self"],["usize"]],["t"]]],[11,"inv_facto","","nの階乗の逆元",107,[[["self"],["usize"]],["t"]]],[11,"perm","","n個からk個とりだす順列の個数 (nPk)",107,[[["self"],["usize"]],["t"]]],[11,"comb","","n個からk個とりだす組み合わせの個数 (nCk)",107,[[["self"],["usize"]],["t"]]],[11,"h","","",107,[[["self"],["usize"]],["t"]]],[0,"montmort","haar_lib::math","",null,null],[5,"montmort","haar_lib::math::montmort","",null,[[["usize"],["u64"]],[["vec",["u64"]],["u64"]]]],[0,"convolution","haar_lib::math","",null,null],[0,"mobius_sub","haar_lib::math::convolution","",null,null],[5,"fast_mobius_subset","haar_lib::math::convolution::mobius_sub","",null,[[]]],[0,"mobius_super","haar_lib::math::convolution","",null,null],[5,"fast_mobius_superset","haar_lib::math::convolution::mobius_super","",null,[[]]],[0,"zeta_sub","haar_lib::math::convolution","",null,null],[5,"fast_zeta_subset","haar_lib::math::convolution::zeta_sub","",null,[[]]],[0,"zeta_super","haar_lib::math::convolution","",null,null],[5,"fast_zeta_superset","haar_lib::math::convolution::zeta_super","",null,[[]]],[0,"conv_and","haar_lib::math::convolution","",null,null],[5,"convolution_and","haar_lib::math::convolution::conv_and","",null,[[["vec"]],["vec"]]],[0,"conv_or","haar_lib::math::convolution","",null,null],[5,"convolution_or","haar_lib::math::convolution::conv_or","",null,[[["vec"]],["vec"]]],[0,"subset_conv","haar_lib::math::convolution","",null,null],[5,"subset_convolution","haar_lib::math::convolution::subset_conv","",null,[[["vec"]],["vec"]]],[0,"rational","haar_lib::math","有理数",null,null],[3,"Rational","haar_lib::math::rational","",null,null],[11,"new","","",108,[[["i64"]],["self"]]],[0,"totient","haar_lib::math","トーシェント関数",null,null],[5,"totient","haar_lib::math::totient","",null,[[["u64"]],["u64"]]],[5,"totient_table","","",null,[[["usize"]],[["vec",["u64"]],["u64"]]]],[0,"totient_sum","haar_lib::math","",null,null],[5,"totient_sum","haar_lib::math::totient_sum","",null,[[["u64"]],["u64"]]],[0,"berlekamp_massey","haar_lib::math","",null,null],[5,"berlekamp_massey","haar_lib::math::berlekamp_massey","",null,[[["vec"]],["vec"]]],[0,"linalg","haar_lib::math","",null,null],[0,"matrix","haar_lib::math::linalg","",null,null],[3,"Matrix","haar_lib::math::linalg::matrix","",null,null],[11,"new","","",109,[[["usize"]],["self"]]],[11,"from_vec","","",109,[[["vec",["vec"]],["vec"]],["self"]]],[11,"to_vec","","",109,[[["self"]],[["vec",["vec"]],["vec"]]]],[11,"height","","",109,[[["self"]],["usize"]]],[11,"width","","",109,[[["self"]],["usize"]]],[11,"transpose","","",109,[[],["self"]]],[11,"get_mut","","",109,[[["self"],["usize"]],[["option"],["t"]]]],[0,"square_matrix","haar_lib::math::linalg","",null,null],[3,"SquareMatrix","haar_lib::math::linalg::square_matrix","",null,null],[8,"SquareMatrixElem","","",null,null],[11,"new","","",110,[[["usize"]],["self"]]],[11,"unit","","",110,[[["usize"]],["self"]]],[11,"from_vec","","",110,[[["vec",["vec"]],["vec"]],["self"]]],[11,"to_vec","","",110,[[["self"]],[["vec",["vec"]],["vec"]]]],[11,"size","","",110,[[["self"]],["usize"]]],[11,"transpose","","",110,[[],["self"]]],[11,"pow","","",110,[[["u64"]],["self"]]],[11,"get_mut","","",110,[[["self"],["usize"]],[["option"],["t"]]]],[11,"straight_mul","","",110,[[],["self"]]],[11,"strassen_mul","","",110,[[],["self"]]],[0,"determinant_p","haar_lib::math::linalg","",null,null],[5,"determinant_p","haar_lib::math::linalg::determinant_p","素数mod p上での行列式を求める。 $O(n^3)$",null,[[["u64"],["vec",["u64"]],["vec",["vec"]]],["u64"]]],[0,"inverse_p","haar_lib::math::linalg","",null,null],[5,"inverse_p","haar_lib::math::linalg::inverse_p","素数mod p上での逆行列を求める。 $O(n^3)$",null,[[["u64"],["vec",["u64"]],["vec",["vec"]]],[["option",["vec"]],["vec",["vec"]]]]],[0,"sum_floor_linear","haar_lib::math","$\\sum_{i=0}^{n-1} \\lfloor \\frac{ai+b}{m} \\rfloor$",null,null],[5,"sum_floor_linear","haar_lib::math::sum_floor_linear","",null,[[["u64"]],["u64"]]],[0,"sum_of_exponential_times_polynomial_limit","haar_lib::math","$\\sum_{i=0}^{\\infty} r^ii^d$",null,null],[5,"sum_of_exponential_times_polynomial_limit","haar_lib::math::sum_of_exponential_times_polynomial_limit","$\\sum_{i=0}^{\\infty} r^ii^d$",null,[[["u64"]],["u64"]]],[0,"factorial_prime_factor","haar_lib::math","$a!$の素因数pの個数を求める。",null,null],[5,"factorial_prime_factor","haar_lib::math::factorial_prime_factor","$a!$の素因数pの個数を求める。",null,[[["u64"]],["u64"]]],[0,"count_coprime","haar_lib::math","",null,null],[5,"count_coprime","haar_lib::math::count_coprime","",null,[[["u64"]],["u64"]]],[0,"misc","haar_lib","分類を放置しているもの",null,null],[0,"dice","haar_lib::misc","",null,null],[3,"Dice","haar_lib::misc::dice","",null,null],[12,"top","","",111,null],[12,"bottom","","",111,null],[12,"front","","",111,null],[12,"back","","",111,null],[12,"right","","",111,null],[12,"left","","",111,null],[11,"new","","",111,[[["t"]],["self"]]],[11,"rot_left","","",111,[[["self"]],["self"]]],[11,"rot_right","","",111,[[["self"]],["self"]]],[11,"rot_front","","",111,[[["self"]],["self"]]],[11,"rot_back","","",111,[[["self"]],["self"]]],[11,"rot_clockwise","","",111,[[["self"]],["self"]]],[11,"rot_counterclockwise","","",111,[[["self"]],["self"]]],[0,"tree","haar_lib","木に関するもの",null,null],[3,"TreeEdge","haar_lib::tree","",null,null],[12,"to","","",112,null],[12,"weight","","",112,null],[3,"TreeNode","","",null,null],[12,"index","","",113,null],[12,"parent","","",113,null],[12,"children","","",113,null],[3,"Tree","","",null,null],[12,"nodes","","",114,null],[0,"centroid","","重心列挙",null,null],[5,"centroids","haar_lib::tree::centroid","",null,[[["tree"]],[["usize"],["vec",["usize"]]]]],[0,"depth_query","haar_lib::tree","",null,null],[3,"TreeDepthQuery","haar_lib::tree::depth_query","Tree depth query",null,null],[11,"new","","",115,[[["tree"],["usize"]],["self"]]],[11,"children_query","","",115,[[["self"],["usize"]],["option"]]],[11,"me_query","","",115,[[["self"],["usize"]]]],[11,"ancestor","","",115,[[["self"],["usize"]],[["option",["usize"]],["usize"]]]],[0,"euler_tour","haar_lib::tree","",null,null],[3,"EulerTour","haar_lib::tree::euler_tour","",null,null],[11,"new","","",116,[[["tree"],["usize"]],["self"]]],[11,"subtree_query","","",116,[[["self"],["usize"]]]],[11,"point_query","","",116,[[["self"],["usize"]],["usize"]]],[0,"hld","haar_lib::tree","重軽分解",null,null],[3,"HLD","haar_lib::tree::hld","重軽分解",null,null],[11,"new","","",117,[[["copy"],["usize"],["tree"]],["self"]]],[11,"path_query_vertex","","演算は可換性を仮定する。",117,[[["self"],["usize"]],["vec"]]],[11,"path_query_edge","","",117,[[["self"],["usize"]],["vec"]]],[11,"subtree_query_vertex","","",117,[[["self"],["usize"]]]],[11,"subtree_query_edge","","",117,[[["self"],["usize"]]]],[11,"parent","","",117,[[["self"],["usize"]],[["option",["usize"]],["usize"]]]],[11,"get_id","","",117,[[["self"],["usize"]],["usize"]]],[11,"lca","","",117,[[["self"],["usize"]],["usize"]]],[0,"lca","haar_lib::tree","最小共通祖先",null,null],[3,"DoublingLCA","haar_lib::tree::lca","",null,null],[11,"new","","",118,[[["tree"],["usize"]],["self"]]],[11,"ancestor","","",118,[[["self"],["usize"]],[["option",["usize"]],["usize"]]]],[11,"get_lca","","",118,[[["self"],["usize"]],["usize"]]],[11,"jump","","s-t最短パス上で、sから見てd番目の頂点を返す。",118,[[["self"],["usize"]],[["option",["usize"]],["usize"]]]],[0,"rerooting","haar_lib::tree","全方位木DP",null,null],[3,"RerootingDP","haar_lib::tree::rerooting","全方位木DP",null,null],[11,"new","","",119,[[["box"],["box"],["box"],["t"]],["self"]]],[11,"run","","",119,[[["self"],["tree"]],["vec"]]],[0,"rooted_isomorphism","haar_lib::tree","",null,null],[5,"rooted_isomorphism","haar_lib::tree::rooted_isomorphism","",null,[[["tree"],["usize"]]]],[0,"rooting","haar_lib::tree","根付き木に変換",null,null],[5,"rooting","haar_lib::tree::rooting","",null,[[["tree"],["usize"]],[["str"],["result",["str"]]]]],[0,"tree_dp","haar_lib::tree","木DP",null,null],[3,"TreeDP","haar_lib::tree::tree_dp","",null,null],[11,"new","","",120,[[["box"],["box"],["box"],["t"]],["self"]]],[11,"run","","",120,[[["usize"],["self"],["tree"]],["vec"]]],[0,"utils","haar_lib::tree","",null,null],[5,"tree_distance","haar_lib::tree::utils","rootを根としたときの根から各頂点への距離を列挙する。 # Complexity Time complexity…",null,[[["tree"],["usize"]],["vec"]]],[5,"tree_diameter","","木の任意の2頂点の距離の最大値を求める。 # Complexity Time complexity $O(n)$",null,[[["tree"]]]],[5,"tree_height","","木の各頂点について、そこからの距離の最大値を列挙する。 # Complexity Time complexity…",null,[[["tree"]],["vec"]]],[5,"tree_path","","木上の2頂点を結ぶパス上の頂点列を求める。 # Complexity Time complexity $O(n)$",null,[[["tree"],["usize"]],[["usize"],["vec",["usize"]]]]],[11,"neighbors","haar_lib::tree","",113,[[["self"]]]],[11,"neighbors_size","","",113,[[["self"]],["usize"]]],[11,"new","","",114,[[["usize"]],["self"]]],[11,"add_undirected","","",114,[[["self"]]]],[11,"add_directed","","",114,[[["self"]]]],[11,"len","","",114,[[["self"]],["usize"]]],[11,"is_empty","","",114,[[["self"]],["bool"]]],[0,"utils","haar_lib","",null,null],[0,"bits","haar_lib::utils","",null,null],[5,"highest_one","haar_lib::utils::bits","",null,[[["u64"]],["u32"]]],[0,"fastio","haar_lib::utils","",null,null],[3,"FastIO","haar_lib::utils::fastio","",null,null],[11,"new","","",121,[[],["self"]]],[11,"getc","","",121,[[["self"]],[["option",["u8"]],["u8"]]]],[11,"peek","","",121,[[["self"]],[["option",["u8"]],["u8"]]]],[11,"skip","","",121,[[["self"]]]],[11,"read_u64","","",121,[[["self"]],["u64"]]],[11,"read_i64","","",121,[[["self"]],["i64"]]],[11,"read_chars","","",121,[[["self"]],[["vec",["char"]],["char"]]]],[11,"write","","",121,[[["str"],["self"]]]],[11,"writeln","","",121,[[["str"],["self"]]]],[0,"join_str","haar_lib::utils","",null,null],[8,"JoinStr","haar_lib::utils::join_str","",null,null],[10,"join_str","","",122,[[["str"]],["string"]]],[0,"num_inf","haar_lib::utils","正の無限大、負の無限大をもつ数",null,null],[4,"NumInf","haar_lib::utils::num_inf","",null,null],[13,"NegInf","","",123,null],[13,"Value","","",123,null],[13,"Inf","","",123,null],[11,"is_value","","",123,[[],["bool"]]],[11,"is_inf","","",123,[[],["bool"]]],[11,"is_neg_inf","","",123,[[],["bool"]]],[11,"unwrap","","",123,[[],["t"]]],[0,"swap","haar_lib::utils","",null,null],[5,"swap_vv","haar_lib::utils::swap","",null,[[["usize"],["vec"]]]],[0,"transpose","haar_lib::utils","",null,null],[8,"Transpose","haar_lib::utils::transpose","",null,null],[16,"Output","","",124,null],[10,"transpose","","",124,[[]]],[0,"xor_shift","haar_lib::utils","",null,null],[3,"XorShift","haar_lib::utils::xor_shift","",null,null],[11,"new","","",125,[[],["self"]]],[11,"gen","","",125,[[["self"]],["u64"]]],[0,"yesno","haar_lib::utils","",null,null],[8,"YesNo","haar_lib::utils::yesno","",null,null],[10,"yesno","","",126,[[["str"]],["str"]]],[0,"testtools","haar_lib","",null,null],[5,"rand_range","haar_lib::testtools","",null,[[["range"],["r"]],["range"]]],[8,"RangeIsEmpty","","",null,null],[10,"is_empty","","",127,[[["self"]],["bool"]]],[14,"chmax","haar_lib","",null,null],[14,"chmin","","",null,null],[14,"hashset","","",null,null],[14,"btreeset","","",null,null],[14,"hashmap","","",null,null],[14,"btreemap","","",null,null],[14,"eps","","",null,null],[14,"for_loop","","",null,null],[14,"get_time","","",null,null],[14,"get","","",null,null],[14,"input","","",null,null],[14,"io","","",null,null],[14,"max","","",null,null],[14,"min","","",null,null],[14,"modulo","","",null,null],[14,"mul_vec","","",null,null],[14,"rec","","immutableかつ引数を一つのみとる再帰クロージャ",null,null],[14,"sort_with","","",null,null],[14,"timer","","",null,null],[14,"trait_alias","","",null,null],[11,"from","haar_lib::algebra::affine","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"vzip","","",6,[[],["v"]]],[11,"from","haar_lib::algebra::bitxor","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"vzip","","",7,[[],["v"]]],[11,"from","haar_lib::algebra::dihedral","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"vzip","","",9,[[],["v"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"vzip","","",8,[[],["v"]]],[11,"from","haar_lib::algebra::dual","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"vzip","","",10,[[],["v"]]],[11,"from","haar_lib::algebra::max","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"vzip","","",11,[[],["v"]]],[11,"from","haar_lib::algebra::min","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"vzip","","",12,[[],["v"]]],[11,"from","haar_lib::algebra::prod","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"vzip","","",13,[[],["v"]]],[11,"from","haar_lib::algebra::sum","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"vzip","","",14,[[],["v"]]],[11,"from","haar_lib::algebra::update","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"vzip","","",15,[[],["v"]]],[11,"from","haar_lib::algebra::add_sum","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"vzip","","",17,[[],["v"]]],[11,"from","haar_lib::algebra::update_sum","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"vzip","","",18,[[],["v"]]],[11,"from","haar_lib::algo::compressor","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"vzip","","",19,[[],["v"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"vzip","","",20,[[],["v"]]],[11,"from","haar_lib::algo::imos_1d","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"vzip","","",21,[[],["v"]]],[11,"from","haar_lib::algo::kmp","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"vzip","","",22,[[],["v"]]],[11,"from","haar_lib::algo::mo","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"vzip","","",23,[[],["v"]]],[11,"from","haar_lib::algo::sa","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"vzip","","",24,[[],["v"]]],[11,"from","haar_lib::algo::two_sat","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"vzip","","",25,[[],["v"]]],[11,"from","haar_lib::algo::static_range_freq_query","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"vzip","","",26,[[],["v"]]],[11,"from","haar_lib::algo::static_range_inversions_query","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"vzip","","",27,[[],["v"]]],[11,"from","haar_lib::ds::partially_persistent_unionfind","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"vzip","","",33,[[],["v"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"vzip","","",34,[[],["v"]]],[11,"from","haar_lib::ds::unionfind","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"vzip","","",35,[[],["v"]]],[11,"from","haar_lib::ds::dual_segtree","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"vzip","","",36,[[],["v"]]],[11,"from","haar_lib::ds::fenwick","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,[[["self"],["t"]]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"vzip","","",37,[[],["v"]]],[11,"from","haar_lib::ds::fenwick_add","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"vzip","","",38,[[],["v"]]],[11,"from","haar_lib::ds::lazy_segtree","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"vzip","","",39,[[],["v"]]],[11,"from","haar_lib::ds::lazy_segtree_coeff","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"vzip","","",40,[[],["v"]]],[11,"from","haar_lib::ds::segtree","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,[[["self"],["t"]]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"vzip","","",41,[[],["v"]]],[11,"from","haar_lib::ds::segtree_beats","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,[[["self"],["t"]]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"vzip","","",42,[[],["v"]]],[11,"from","haar_lib::ds::segtree_linear_add","",43,[[["t"]],["t"]]],[11,"into","","",43,[[],["u"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"vzip","","",43,[[],["v"]]],[11,"from","haar_lib::ds::starry_sky_tree","",45,[[["t"]],["t"]]],[11,"into","","",45,[[],["u"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"vzip","","",45,[[],["v"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,[[["self"],["t"]]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"vzip","","",44,[[],["v"]]],[11,"from","haar_lib::ds::fenwick_on_fenwick","",46,[[["t"]],["t"]]],[11,"into","","",46,[[],["u"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"vzip","","",46,[[],["v"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[],["u"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"vzip","","",47,[[],["v"]]],[11,"from","haar_lib::ds::cumulative_sum_1d","",128,[[["t"]],["t"]]],[11,"into","","",128,[[],["u"]]],[11,"to_owned","","",128,[[["self"]],["t"]]],[11,"clone_into","","",128,[[["self"],["t"]]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"try_into","","",128,[[],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"type_id","","",128,[[["self"]],["typeid"]]],[11,"vzip","","",128,[[],["v"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[],["u"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"try_into","","",48,[[],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"type_id","","",48,[[["self"]],["typeid"]]],[11,"vzip","","",48,[[],["v"]]],[11,"from","haar_lib::ds::cumulative_sum_2d","",129,[[["t"]],["t"]]],[11,"into","","",129,[[],["u"]]],[11,"to_owned","","",129,[[["self"]],["t"]]],[11,"clone_into","","",129,[[["self"],["t"]]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"try_into","","",129,[[],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"type_id","","",129,[[["self"]],["typeid"]]],[11,"vzip","","",129,[[],["v"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[],["u"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"try_into","","",49,[[],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"type_id","","",49,[[["self"]],["typeid"]]],[11,"vzip","","",49,[[],["v"]]],[11,"from","haar_lib::ds::persistent_array","",50,[[["t"]],["t"]]],[11,"into","","",50,[[],["u"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"try_into","","",50,[[],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"type_id","","",50,[[["self"]],["typeid"]]],[11,"vzip","","",50,[[],["v"]]],[11,"from","haar_lib::ds::rollbackable_vector","",51,[[["t"]],["t"]]],[11,"into","","",51,[[],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,[[["self"],["t"]]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"try_into","","",51,[[],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"type_id","","",51,[[["self"]],["typeid"]]],[11,"vzip","","",51,[[],["v"]]],[11,"from","haar_lib::ds::range_search_tree","",52,[[["t"]],["t"]]],[11,"into","","",52,[[],["u"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"try_into","","",52,[[],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"type_id","","",52,[[["self"]],["typeid"]]],[11,"vzip","","",52,[[],["v"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,[[["self"],["t"]]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"try_into","","",53,[[],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"type_id","","",53,[[["self"]],["typeid"]]],[11,"vzip","","",53,[[],["v"]]],[11,"from","haar_lib::ds::foldable_deque","",54,[[["t"]],["t"]]],[11,"into","","",54,[[],["u"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"try_into","","",54,[[],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"type_id","","",54,[[["self"]],["typeid"]]],[11,"vzip","","",54,[[],["v"]]],[11,"from","haar_lib::ds::persistent_queue","",55,[[["t"]],["t"]]],[11,"into","","",55,[[],["u"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"try_into","","",55,[[],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"type_id","","",55,[[["self"]],["typeid"]]],[11,"vzip","","",55,[[],["v"]]],[11,"from","haar_lib::ds::disjoint_sparse_table","",56,[[["t"]],["t"]]],[11,"into","","",56,[[],["u"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"try_into","","",56,[[],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"type_id","","",56,[[["self"]],["typeid"]]],[11,"vzip","","",56,[[],["v"]]],[11,"from","haar_lib::ds::sparse_table","",57,[[["t"]],["t"]]],[11,"into","","",57,[[],["u"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"try_into","","",57,[[],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"type_id","","",57,[[["self"]],["typeid"]]],[11,"vzip","","",57,[[],["v"]]],[11,"from","haar_lib::ds::lazy_skew_heap","",58,[[["t"]],["t"]]],[11,"into","","",58,[[],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,[[["self"],["t"]]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"try_into","","",58,[[],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"type_id","","",58,[[["self"]],["typeid"]]],[11,"vzip","","",58,[[],["v"]]],[11,"from","haar_lib::ds::skew_heap","",59,[[["t"]],["t"]]],[11,"into","","",59,[[],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,[[["self"],["t"]]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"try_into","","",59,[[],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"type_id","","",59,[[["self"]],["typeid"]]],[11,"vzip","","",59,[[],["v"]]],[11,"from","haar_lib::ds::persistent_stack","",60,[[["t"]],["t"]]],[11,"into","","",60,[[],["u"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,[[["self"],["t"]]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"try_into","","",60,[[],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"type_id","","",60,[[["self"]],["typeid"]]],[11,"vzip","","",60,[[],["v"]]],[11,"from","haar_lib::ds::cht","",62,[[["t"]],["t"]]],[11,"into","","",62,[[],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,[[["self"],["t"]]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"try_into","","",62,[[],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"type_id","","",62,[[["self"]],["typeid"]]],[11,"vzip","","",62,[[],["v"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,[[["self"],["t"]]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"try_into","","",61,[[],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"type_id","","",61,[[["self"]],["typeid"]]],[11,"vzip","","",61,[[],["v"]]],[11,"from","haar_lib::ds::li_chao","",64,[[["t"]],["t"]]],[11,"into","","",64,[[],["u"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"try_into","","",64,[[],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"type_id","","",64,[[["self"]],["typeid"]]],[11,"vzip","","",64,[[],["v"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[],["u"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,[[["self"],["t"]]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"try_into","","",63,[[],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"type_id","","",63,[[["self"]],["typeid"]]],[11,"vzip","","",63,[[],["v"]]],[11,"from","haar_lib::ds::binary_trie","",65,[[["t"]],["t"]]],[11,"into","","",65,[[],["u"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,[[["self"],["t"]]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"try_into","","",65,[[],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"type_id","","",65,[[["self"]],["typeid"]]],[11,"vzip","","",65,[[],["v"]]],[11,"from","haar_lib::ds::succinct_dict","",66,[[["t"]],["t"]]],[11,"into","","",66,[[],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,[[["self"],["t"]]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"try_into","","",66,[[],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"type_id","","",66,[[["self"]],["typeid"]]],[11,"vzip","","",66,[[],["v"]]],[11,"from","haar_lib::geom","",67,[[["t"]],["t"]]],[11,"into","","",67,[[],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,[[["self"],["t"]]]],[11,"to_string","","",67,[[["self"]],["string"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"try_into","","",67,[[],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"type_id","","",67,[[["self"]],["typeid"]]],[11,"vzip","","",67,[[],["v"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,[[["self"],["t"]]]],[11,"to_string","","",68,[[["self"]],["string"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"try_into","","",68,[[],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"type_id","","",68,[[["self"]],["typeid"]]],[11,"vzip","","",68,[[],["v"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,[[["self"],["t"]]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"try_into","","",69,[[],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"type_id","","",69,[[["self"]],["typeid"]]],[11,"vzip","","",69,[[],["v"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,[[["self"],["t"]]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"try_into","","",70,[[],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"type_id","","",70,[[["self"]],["typeid"]]],[11,"vzip","","",70,[[],["v"]]],[11,"from","haar_lib::geom::ccw","",71,[[["t"]],["t"]]],[11,"into","","",71,[[],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,[[["self"],["t"]]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"try_into","","",71,[[],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"type_id","","",71,[[["self"]],["typeid"]]],[11,"vzip","","",71,[[],["v"]]],[11,"from","haar_lib::geom::intersect_circle_line","",72,[[["t"]],["t"]]],[11,"into","","",72,[[],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,[[["self"],["t"]]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"try_into","","",72,[[],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"type_id","","",72,[[["self"]],["typeid"]]],[11,"vzip","","",72,[[],["v"]]],[11,"from","haar_lib::geom::intersect_circle_segment","",73,[[["t"]],["t"]]],[11,"into","","",73,[[],["u"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,[[["self"],["t"]]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"try_into","","",73,[[],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"type_id","","",73,[[["self"]],["typeid"]]],[11,"vzip","","",73,[[],["v"]]],[11,"from","haar_lib::geom::intersect_circles","",74,[[["t"]],["t"]]],[11,"into","","",74,[[],["u"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,[[["self"],["t"]]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"try_into","","",74,[[],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"type_id","","",74,[[["self"]],["typeid"]]],[11,"vzip","","",74,[[],["v"]]],[11,"from","haar_lib::geom::intersect_line_segment","",75,[[["t"]],["t"]]],[11,"into","","",75,[[],["u"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,[[["self"],["t"]]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"try_into","","",75,[[],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"type_id","","",75,[[["self"]],["typeid"]]],[11,"vzip","","",75,[[],["v"]]],[11,"from","haar_lib::geom::intersect_segments","",76,[[["t"]],["t"]]],[11,"into","","",76,[[],["u"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,[[["self"],["t"]]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"try_into","","",76,[[],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"type_id","","",76,[[["self"]],["typeid"]]],[11,"vzip","","",76,[[],["v"]]],[11,"from","haar_lib::geom::convex_hull","",77,[[["t"]],["t"]]],[11,"into","","",77,[[],["u"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,[[["self"],["t"]]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"try_into","","",77,[[],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"type_id","","",77,[[["self"]],["typeid"]]],[11,"vzip","","",77,[[],["v"]]],[11,"from","haar_lib::geom::point_in_polygon","",78,[[["t"]],["t"]]],[11,"into","","",78,[[],["u"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,[[["self"],["t"]]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"try_into","","",78,[[],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"type_id","","",78,[[["self"]],["typeid"]]],[11,"vzip","","",78,[[],["v"]]],[11,"from","haar_lib::graph","",81,[[["t"]],["t"]]],[11,"into","","",81,[[],["u"]]],[11,"to_owned","","",81,[[["self"]],["t"]]],[11,"clone_into","","",81,[[["self"],["t"]]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"try_into","","",81,[[],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"type_id","","",81,[[["self"]],["typeid"]]],[11,"vzip","","",81,[[],["v"]]],[11,"from","","",130,[[["t"]],["t"]]],[11,"into","","",130,[[],["u"]]],[11,"to_owned","","",130,[[["self"]],["t"]]],[11,"clone_into","","",130,[[["self"],["t"]]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"try_into","","",130,[[],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"type_id","","",130,[[["self"]],["typeid"]]],[11,"vzip","","",130,[[],["v"]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"into","","",131,[[],["u"]]],[11,"to_owned","","",131,[[["self"]],["t"]]],[11,"clone_into","","",131,[[["self"],["t"]]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"try_into","","",131,[[],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"type_id","","",131,[[["self"]],["typeid"]]],[11,"vzip","","",131,[[],["v"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[],["u"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,[[["self"],["t"]]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"try_into","","",82,[[],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"type_id","","",82,[[["self"]],["typeid"]]],[11,"vzip","","",82,[[],["v"]]],[11,"from","haar_lib::graph::lowlink","",83,[[["t"]],["t"]]],[11,"into","","",83,[[],["u"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,[[["self"],["t"]]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"try_into","","",83,[[],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"type_id","","",83,[[["self"]],["typeid"]]],[11,"vzip","","",83,[[],["v"]]],[11,"from","haar_lib::graph::scc","",84,[[["t"]],["t"]]],[11,"into","","",84,[[],["u"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"try_into","","",84,[[],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"type_id","","",84,[[["self"]],["typeid"]]],[11,"vzip","","",84,[[],["v"]]],[11,"from","haar_lib::graph::pseudo_tree","",85,[[["t"]],["t"]]],[11,"into","","",85,[[],["u"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"try_into","","",85,[[],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"type_id","","",85,[[["self"]],["typeid"]]],[11,"vzip","","",85,[[],["v"]]],[11,"from","haar_lib::graph::eulerian::directed","",86,[[["t"]],["t"]]],[11,"into","","",86,[[],["u"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,[[["self"],["t"]]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"try_into","","",86,[[],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"type_id","","",86,[[["self"]],["typeid"]]],[11,"vzip","","",86,[[],["v"]]],[11,"from","haar_lib::graph::eulerian::undirected","",87,[[["t"]],["t"]]],[11,"into","","",87,[[],["u"]]],[11,"to_owned","","",87,[[["self"]],["t"]]],[11,"clone_into","","",87,[[["self"],["t"]]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"try_into","","",87,[[],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"type_id","","",87,[[["self"]],["typeid"]]],[11,"vzip","","",87,[[],["v"]]],[11,"from","haar_lib::graph::psp","",88,[[["t"]],["t"]]],[11,"into","","",88,[[],["u"]]],[11,"to_owned","","",88,[[["self"]],["t"]]],[11,"clone_into","","",88,[[["self"],["t"]]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"try_into","","",88,[[],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"type_id","","",88,[[["self"]],["typeid"]]],[11,"vzip","","",88,[[],["v"]]],[11,"from","haar_lib::graph::dinic","",132,[[["t"]],["t"]]],[11,"into","","",132,[[],["u"]]],[11,"to_owned","","",132,[[["self"]],["t"]]],[11,"clone_into","","",132,[[["self"],["t"]]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"try_into","","",132,[[],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"type_id","","",132,[[["self"]],["typeid"]]],[11,"vzip","","",132,[[],["v"]]],[11,"from","haar_lib::graph::ford_fulkerson","",133,[[["t"]],["t"]]],[11,"into","","",133,[[],["u"]]],[11,"to_owned","","",133,[[["self"]],["t"]]],[11,"clone_into","","",133,[[["self"],["t"]]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"try_into","","",133,[[],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"type_id","","",133,[[["self"]],["typeid"]]],[11,"vzip","","",133,[[],["v"]]],[11,"from","haar_lib::graph::hopcroft_karp","",134,[[["t"]],["t"]]],[11,"into","","",134,[[],["u"]]],[11,"to_owned","","",134,[[["self"]],["t"]]],[11,"clone_into","","",134,[[["self"],["t"]]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"try_into","","",134,[[],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"type_id","","",134,[[["self"]],["typeid"]]],[11,"vzip","","",134,[[],["v"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"into","","",90,[[],["u"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"try_into","","",90,[[],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"type_id","","",90,[[["self"]],["typeid"]]],[11,"vzip","","",90,[[],["v"]]],[11,"from","haar_lib::graph::min_cost_flow","",91,[[["t"]],["t"]]],[11,"into","","",91,[[],["u"]]],[11,"to_owned","","",91,[[["self"]],["t"]]],[11,"clone_into","","",91,[[["self"],["t"]]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"try_into","","",91,[[],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"type_id","","",91,[[["self"]],["typeid"]]],[11,"vzip","","",91,[[],["v"]]],[11,"from","haar_lib::graph::bi_match","",92,[[["t"]],["t"]]],[11,"into","","",92,[[],["u"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"try_into","","",92,[[],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"type_id","","",92,[[["self"]],["typeid"]]],[11,"vzip","","",92,[[],["v"]]],[11,"from","haar_lib::grid","",94,[[["t"]],["t"]]],[11,"into","","",94,[[],["u"]]],[11,"to_owned","","",94,[[["self"]],["t"]]],[11,"clone_into","","",94,[[["self"],["t"]]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"try_into","","",94,[[],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"type_id","","",94,[[["self"]],["typeid"]]],[11,"vzip","","",94,[[],["v"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"into","","",95,[[],["u"]]],[11,"to_owned","","",95,[[["self"]],["t"]]],[11,"clone_into","","",95,[[["self"],["t"]]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"try_into","","",95,[[],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"type_id","","",95,[[["self"]],["typeid"]]],[11,"vzip","","",95,[[],["v"]]],[11,"from","haar_lib::math::factorize::sieve","",96,[[["t"]],["t"]]],[11,"into","","",96,[[],["u"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"try_into","","",96,[[],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"type_id","","",96,[[["self"]],["typeid"]]],[11,"vzip","","",96,[[],["v"]]],[11,"from","haar_lib::math::prime_test::eratosthenes","",99,[[["t"]],["t"]]],[11,"into","","",99,[[],["u"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"try_into","","",99,[[],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"type_id","","",99,[[["self"]],["typeid"]]],[11,"vzip","","",99,[[],["v"]]],[11,"from","haar_lib::math::ff::modint","",101,[[["t"]],["t"]]],[11,"into","","",101,[[],["u"]]],[11,"to_owned","","",101,[[["self"]],["t"]]],[11,"clone_into","","",101,[[["self"],["t"]]]],[11,"to_string","","",101,[[["self"]],["string"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"try_into","","",101,[[],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"type_id","","",101,[[["self"]],["typeid"]]],[11,"vzip","","",101,[[],["v"]]],[11,"from","haar_lib::math::binomial_coefficient","",105,[[["t"]],["t"]]],[11,"into","","",105,[[],["u"]]],[11,"to_owned","","",105,[[["self"]],["t"]]],[11,"clone_into","","",105,[[["self"],["t"]]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"try_into","","",105,[[],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"type_id","","",105,[[["self"]],["typeid"]]],[11,"vzip","","",105,[[],["v"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"into","","",106,[[],["u"]]],[11,"to_owned","","",106,[[["self"]],["t"]]],[11,"clone_into","","",106,[[["self"],["t"]]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"try_into","","",106,[[],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"type_id","","",106,[[["self"]],["typeid"]]],[11,"vzip","","",106,[[],["v"]]],[11,"from","haar_lib::math::factorial","",107,[[["t"]],["t"]]],[11,"into","","",107,[[],["u"]]],[11,"to_owned","","",107,[[["self"]],["t"]]],[11,"clone_into","","",107,[[["self"],["t"]]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"try_into","","",107,[[],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"type_id","","",107,[[["self"]],["typeid"]]],[11,"vzip","","",107,[[],["v"]]],[11,"from","haar_lib::math::rational","",108,[[["t"]],["t"]]],[11,"into","","",108,[[],["u"]]],[11,"to_owned","","",108,[[["self"]],["t"]]],[11,"clone_into","","",108,[[["self"],["t"]]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"try_into","","",108,[[],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"type_id","","",108,[[["self"]],["typeid"]]],[11,"vzip","","",108,[[],["v"]]],[11,"from","haar_lib::math::linalg::matrix","",109,[[["t"]],["t"]]],[11,"into","","",109,[[],["u"]]],[11,"to_owned","","",109,[[["self"]],["t"]]],[11,"clone_into","","",109,[[["self"],["t"]]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"try_into","","",109,[[],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"type_id","","",109,[[["self"]],["typeid"]]],[11,"vzip","","",109,[[],["v"]]],[11,"from","haar_lib::math::linalg::square_matrix","",110,[[["t"]],["t"]]],[11,"into","","",110,[[],["u"]]],[11,"to_owned","","",110,[[["self"]],["t"]]],[11,"clone_into","","",110,[[["self"],["t"]]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"try_into","","",110,[[],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"type_id","","",110,[[["self"]],["typeid"]]],[11,"vzip","","",110,[[],["v"]]],[11,"from","haar_lib::misc::dice","",111,[[["t"]],["t"]]],[11,"into","","",111,[[],["u"]]],[11,"to_owned","","",111,[[["self"]],["t"]]],[11,"clone_into","","",111,[[["self"],["t"]]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"try_into","","",111,[[],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"type_id","","",111,[[["self"]],["typeid"]]],[11,"vzip","","",111,[[],["v"]]],[11,"from","haar_lib::tree","",112,[[["t"]],["t"]]],[11,"into","","",112,[[],["u"]]],[11,"to_owned","","",112,[[["self"]],["t"]]],[11,"clone_into","","",112,[[["self"],["t"]]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"try_into","","",112,[[],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"type_id","","",112,[[["self"]],["typeid"]]],[11,"vzip","","",112,[[],["v"]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"into","","",113,[[],["u"]]],[11,"to_owned","","",113,[[["self"]],["t"]]],[11,"clone_into","","",113,[[["self"],["t"]]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"try_into","","",113,[[],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"type_id","","",113,[[["self"]],["typeid"]]],[11,"vzip","","",113,[[],["v"]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"into","","",114,[[],["u"]]],[11,"to_owned","","",114,[[["self"]],["t"]]],[11,"clone_into","","",114,[[["self"],["t"]]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"try_into","","",114,[[],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"type_id","","",114,[[["self"]],["typeid"]]],[11,"vzip","","",114,[[],["v"]]],[11,"from","haar_lib::tree::depth_query","",115,[[["t"]],["t"]]],[11,"into","","",115,[[],["u"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"try_into","","",115,[[],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"type_id","","",115,[[["self"]],["typeid"]]],[11,"vzip","","",115,[[],["v"]]],[11,"from","haar_lib::tree::euler_tour","",116,[[["t"]],["t"]]],[11,"into","","",116,[[],["u"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"try_into","","",116,[[],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"type_id","","",116,[[["self"]],["typeid"]]],[11,"vzip","","",116,[[],["v"]]],[11,"from","haar_lib::tree::hld","",117,[[["t"]],["t"]]],[11,"into","","",117,[[],["u"]]],[11,"to_owned","","",117,[[["self"]],["t"]]],[11,"clone_into","","",117,[[["self"],["t"]]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"try_into","","",117,[[],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"type_id","","",117,[[["self"]],["typeid"]]],[11,"vzip","","",117,[[],["v"]]],[11,"from","haar_lib::tree::lca","",118,[[["t"]],["t"]]],[11,"into","","",118,[[],["u"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"try_into","","",118,[[],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"type_id","","",118,[[["self"]],["typeid"]]],[11,"vzip","","",118,[[],["v"]]],[11,"from","haar_lib::tree::rerooting","",119,[[["t"]],["t"]]],[11,"into","","",119,[[],["u"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"try_into","","",119,[[],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"type_id","","",119,[[["self"]],["typeid"]]],[11,"vzip","","",119,[[],["v"]]],[11,"from","haar_lib::tree::tree_dp","",120,[[["t"]],["t"]]],[11,"into","","",120,[[],["u"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"try_into","","",120,[[],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"type_id","","",120,[[["self"]],["typeid"]]],[11,"vzip","","",120,[[],["v"]]],[11,"from","haar_lib::utils::fastio","",121,[[["t"]],["t"]]],[11,"into","","",121,[[],["u"]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"try_into","","",121,[[],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"type_id","","",121,[[["self"]],["typeid"]]],[11,"vzip","","",121,[[],["v"]]],[11,"from","haar_lib::utils::num_inf","",123,[[["t"]],["t"]]],[11,"into","","",123,[[],["u"]]],[11,"to_owned","","",123,[[["self"]],["t"]]],[11,"clone_into","","",123,[[["self"],["t"]]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"try_into","","",123,[[],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"type_id","","",123,[[["self"]],["typeid"]]],[11,"vzip","","",123,[[],["v"]]],[11,"from","haar_lib::utils::xor_shift","",125,[[["t"]],["t"]]],[11,"into","","",125,[[],["u"]]],[11,"to_owned","","",125,[[["self"]],["t"]]],[11,"clone_into","","",125,[[["self"],["t"]]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"try_into","","",125,[[],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"type_id","","",125,[[["self"]],["typeid"]]],[11,"vzip","","",125,[[],["v"]]],[11,"zero","haar_lib::math::ff::modint","",101,[[]]],[11,"one","","",101,[[]]],[11,"op","haar_lib::algebra::affine","",6,[[["self"]]]],[11,"op","haar_lib::algebra::bitxor","",7,[[["self"]]]],[11,"op","","",7,[[["self"]]]],[11,"op","","",7,[[["self"]]]],[11,"op","","",7,[[["self"]]]],[11,"op","","",7,[[["self"]]]],[11,"op","","",7,[[["self"]]]],[11,"op","","",7,[[["self"]]]],[11,"op","","",7,[[["self"]]]],[11,"op","","",7,[[["self"]]]],[11,"op","","",7,[[["self"]]]],[11,"op","","",7,[[["self"]]]],[11,"op","","",7,[[["self"]]]],[11,"op","haar_lib::algebra::dihedral","",9,[[["self"]]]],[11,"op","haar_lib::algebra::dual","",10,[[["self"]]]],[11,"op","haar_lib::algebra::max","",11,[[["self"]]]],[11,"op","haar_lib::algebra::min","",12,[[["self"]]]],[11,"op","haar_lib::algebra::prod","",13,[[["self"]]]],[11,"op","haar_lib::algebra::sum","",14,[[["self"]]]],[11,"op","haar_lib::algebra::update","",15,[[["self"]]]],[11,"id","haar_lib::algebra::affine","",6,[[["self"]]]],[11,"id","haar_lib::algebra::bitxor","",7,[[["self"]]]],[11,"id","","",7,[[["self"]]]],[11,"id","","",7,[[["self"]]]],[11,"id","","",7,[[["self"]]]],[11,"id","","",7,[[["self"]]]],[11,"id","","",7,[[["self"]]]],[11,"id","","",7,[[["self"]]]],[11,"id","","",7,[[["self"]]]],[11,"id","","",7,[[["self"]]]],[11,"id","","",7,[[["self"]]]],[11,"id","","",7,[[["self"]]]],[11,"id","","",7,[[["self"]]]],[11,"id","haar_lib::algebra::dihedral","",9,[[["self"]]]],[11,"id","haar_lib::algebra::dual","",10,[[["self"]]]],[11,"id","haar_lib::algebra::max","",11,[[["self"]]]],[11,"id","haar_lib::algebra::min","",12,[[["self"]]]],[11,"id","haar_lib::algebra::prod","",13,[[["self"]]]],[11,"id","haar_lib::algebra::sum","",14,[[["self"]]]],[11,"id","haar_lib::algebra::update","",15,[[["self"]]]],[11,"inv","haar_lib::algebra::bitxor","",7,[[["self"]]]],[11,"inv","","",7,[[["self"]]]],[11,"inv","","",7,[[["self"]]]],[11,"inv","","",7,[[["self"]]]],[11,"inv","","",7,[[["self"]]]],[11,"inv","","",7,[[["self"]]]],[11,"inv","","",7,[[["self"]]]],[11,"inv","","",7,[[["self"]]]],[11,"inv","","",7,[[["self"]]]],[11,"inv","","",7,[[["self"]]]],[11,"inv","","",7,[[["self"]]]],[11,"inv","","",7,[[["self"]]]],[11,"inv","haar_lib::algebra::dihedral","",9,[[["self"]]]],[11,"inv","haar_lib::algebra::sum","",14,[[["self"]]]],[11,"fold_id","haar_lib::algebra::add_sum","",17,[[["self"]],["t"]]],[11,"fold","","",17,[[["self"],["t"]],["t"]]],[11,"update_id","","",17,[[["self"]],["u"]]],[11,"update","","",17,[[["u"],["self"]],["u"]]],[11,"convert","","",17,[[["usize"],["u"],["self"],["t"]],["t"]]],[11,"fold_id","haar_lib::algebra::update_sum","",18,[[["self"]]]],[11,"fold","","",18,[[["self"]]]],[11,"update_id","","",18,[[["self"]]]],[11,"update","","",18,[[["self"]]]],[11,"convert","","",18,[[["usize"],["self"]]]],[11,"fold","haar_lib::ds::fenwick","",37,[[["rangeto",["usize"]],["self"],["usize"]]]],[11,"fold","","",37,[[["range",["usize"]],["self"],["usize"]]]],[11,"fold","haar_lib::ds::fenwick_add","",38,[[["rangeto",["usize"]],["self"],["usize"]]]],[11,"fold","","",38,[[["range",["usize"]],["self"],["usize"]]]],[11,"fold","haar_lib::ds::lazy_segtree_coeff","",40,[[["range",["usize"]],["self"],["usize"]],["t"]]],[11,"fold","haar_lib::ds::segtree","",41,[[["range",["usize"]],["self"],["usize"]]]],[11,"fold","haar_lib::ds::starry_sky_tree","",45,[[["range",["usize"]],["self"],["usize"]]]],[11,"fold","haar_lib::ds::cumulative_sum_1d","Time complexity O(1)",128,[[["range",["usize"]],["self"],["usize"]]]],[11,"fold","haar_lib::ds::disjoint_sparse_table","",56,[[["range",["usize"]],["self"],["usize"]]]],[11,"fold","haar_lib::ds::sparse_table","",57,[[["range",["usize"]],["self"],["usize"]]]],[11,"fold","haar_lib::ds::cumulative_sum_2d","Time Complexity O(1)",129,[[["range",["usize"]],["usize"],["self"]]]],[11,"assign","haar_lib::ds::segtree","",41,[[["self"],["usize"],["t"]]]],[11,"update","haar_lib::ds::dual_segtree","",36,[[["range",["usize"]],["usize"],["self"]]]],[11,"update","haar_lib::ds::fenwick","",37,[[["self"],["usize"],["t"]]]],[11,"update","haar_lib::ds::lazy_segtree","",39,[[["range",["usize"]],["usize"],["u"],["self"]]]],[11,"update","haar_lib::ds::lazy_segtree_coeff","",40,[[["range",["usize"]],["usize"],["self"],["t"]]]],[11,"update","haar_lib::ds::segtree","",41,[[["self"],["usize"],["t"]]]],[11,"update","haar_lib::ds::starry_sky_tree","",45,[[["range",["usize"]],["usize"],["self"],["t"]]]],[11,"get","haar_lib::ds::segtree_linear_add","",43,[[["self"],["usize"]]]],[11,"eps","haar_lib::geom","",67,[[],["f64"]]],[11,"sin","","",67,[[],["self"]]],[11,"cos","","",67,[[],["self"]]],[11,"tan","","",67,[[],["self"]]],[11,"acos","","",67,[[],["self"]]],[11,"abs","","",67,[[],["self"]]],[11,"atan2","","",67,[[],["self"]]],[11,"max","","",67,[[],["self"]]],[11,"min","","",67,[[],["self"]]],[11,"sqrt","","",67,[[],["self"]]],[11,"sq","","",67,[[],["self"]]],[11,"new","haar_lib::graph::dinic","",132,[[["usize"]],["self"]]],[11,"add_edge","","",132,[[["self"],["usize"]]]],[11,"max_flow","","",132,[[["self"],["usize"]]]],[11,"get_edges","","",132,[[["self"],["usize"]],["vec"]]],[11,"reset","","",132,[[["self"]]]],[11,"new","haar_lib::graph::ford_fulkerson","",133,[[["usize"]],["self"]]],[11,"add_edge","","",133,[[["self"],["usize"]]]],[11,"max_flow","","",133,[[["self"],["usize"]]]],[11,"get_edges","","",133,[[["self"],["usize"]],["vec"]]],[11,"reset","","",133,[[["self"]]]],[11,"from","haar_lib::graph","",81,[[["self"]],["usize"]]],[11,"to","","",81,[[["self"]],["usize"]]],[11,"weight","","",81,[[["self"]]]],[11,"rev","","",81,[[],["self"]]],[11,"is_prime","haar_lib::math::prime_test::eratosthenes","",99,[[["self"],["usize"]],["bool"]]],[11,"pow","haar_lib::math::ff::modint","",101,[[["u64"]],["self"]]],[11,"inv","","",101,[[],["self"]]],[11,"frac","","",101,[[["i64"]],["self"]]],[11,"drop","haar_lib::utils::fastio","",121,[[["self"]]]],[11,"from","haar_lib::ds::rollbackable_vector","",51,[[["vec"]],["self"]]],[11,"from","haar_lib::geom","",67,[[["f64"]],["self"]]],[11,"from","haar_lib::math::ff::modint","",101,[[["i8"]],["self"]]],[11,"from","","",101,[[["i16"]],["self"]]],[11,"from","","",101,[[["i32"]],["self"]]],[11,"from","","",101,[[["i64"]],["self"]]],[11,"from","","",101,[[["i128"]],["self"]]],[11,"from","","",101,[[["isize"]],["self"]]],[11,"from","","",101,[[["u8"]],["self"]]],[11,"from","","",101,[[["u16"]],["self"]]],[11,"from","","",101,[[["u32"]],["self"]]],[11,"from","","",101,[[["u64"]],["self"]]],[11,"from","","",101,[[["u128"]],["self"]]],[11,"from","","",101,[[["usize"]],["self"]]],[11,"from","haar_lib::math::rational","",108,[[["i64"]],["self"]]],[11,"clone","haar_lib::algebra::affine","",6,[[["self"]],["affine"]]],[11,"clone","haar_lib::algebra::bitxor","",7,[[["self"]],["bitxor"]]],[11,"clone","haar_lib::algebra::dihedral","",8,[[["self"]],["dihedralvalue"]]],[11,"clone","","",9,[[["self"]],["dihedral"]]],[11,"clone","haar_lib::algebra::dual","",10,[[["self"]],["dual"]]],[11,"clone","haar_lib::algebra::max","",11,[[["self"]],["max"]]],[11,"clone","haar_lib::algebra::min","",12,[[["self"]],["min"]]],[11,"clone","haar_lib::algebra::prod","",13,[[["self"]],["prod"]]],[11,"clone","haar_lib::algebra::sum","",14,[[["self"]],["sum"]]],[11,"clone","haar_lib::algebra::update","",15,[[["self"]],["update"]]],[11,"clone","haar_lib::algebra::add_sum","",17,[[["self"]],["addsum"]]],[11,"clone","haar_lib::algebra::update_sum","",18,[[["self"]],["updatesum"]]],[11,"clone","haar_lib::algo::compressor","",19,[[["self"]],["compressor"]]],[11,"clone","","",20,[[["self"]],["compressorbuilder"]]],[11,"clone","haar_lib::algo::kmp","",22,[[["self"]],["kmp"]]],[11,"clone","haar_lib::algo::sa","",24,[[["self"]],["suffixarray"]]],[11,"clone","haar_lib::ds::fenwick","",37,[[["self"]],["fenwicktree"]]],[11,"clone","haar_lib::ds::segtree","",41,[[["self"]],["segmenttree"]]],[11,"clone","haar_lib::ds::segtree_beats","",42,[[["self"]],["segmenttreebeats"]]],[11,"clone","haar_lib::ds::starry_sky_tree","",44,[[["self"]],["mode"]]],[11,"clone","haar_lib::ds::cumulative_sum_1d","",128,[[["self"]],["cumulativesum1d"]]],[11,"clone","haar_lib::ds::cumulative_sum_2d","",129,[[["self"]],["cumulativesum2d"]]],[11,"clone","haar_lib::ds::rollbackable_vector","",51,[[["self"]],["rollbackablevec"]]],[11,"clone","haar_lib::ds::range_search_tree","",53,[[["self"]],["rangesearchtreebuilder"]]],[11,"clone","haar_lib::ds::lazy_skew_heap","",58,[[["self"]],["lazyskewheap"]]],[11,"clone","haar_lib::ds::skew_heap","",59,[[["self"]],["skewheap"]]],[11,"clone","haar_lib::ds::persistent_stack","",60,[[["self"]],["persistentstack"]]],[11,"clone","haar_lib::ds::cht","",61,[[["self"]],["mode"]]],[11,"clone","","",62,[[["self"]],["convexhulltrick"]]],[11,"clone","haar_lib::ds::li_chao","",63,[[["self"]],["mode"]]],[11,"clone","haar_lib::ds::binary_trie","",65,[[["self"]],["binarytrie"]]],[11,"clone","haar_lib::ds::succinct_dict","",66,[[["self"]],["succinctdict"]]],[11,"clone","haar_lib::geom::ccw","",71,[[["self"]],["ccw"]]],[11,"clone","haar_lib::geom::intersect_circle_line","",72,[[["self"]],["intersectcircleline"]]],[11,"clone","haar_lib::geom::intersect_circle_segment","",73,[[["self"]],["intersectcirclesegment"]]],[11,"clone","haar_lib::geom::intersect_circles","",74,[[["self"]],["intersectcircles"]]],[11,"clone","haar_lib::geom::intersect_line_segment","",75,[[["self"]],["intersectlinesegment"]]],[11,"clone","haar_lib::geom::intersect_segments","",76,[[["self"]],["intersectsegments"]]],[11,"clone","haar_lib::geom::convex_hull","",77,[[["self"]],["hull"]]],[11,"clone","haar_lib::geom::point_in_polygon","",78,[[["self"]],["pointpolygon"]]],[11,"clone","haar_lib::geom","",67,[[["self"]],["epsfloat"]]],[11,"clone","","",68,[[["self"]],["vector"]]],[11,"clone","","",69,[[["self"]],["line"]]],[11,"clone","","",70,[[["self"]],["circle"]]],[11,"clone","haar_lib::graph::lowlink","",83,[[["self"]],["lowlink"]]],[11,"clone","haar_lib::graph::eulerian::directed","",86,[[["self"]],["directedeuleriantrail"]]],[11,"clone","haar_lib::graph::eulerian::undirected","",87,[[["self"]],["undirectedeuleriantrail"]]],[11,"clone","haar_lib::graph::psp","",88,[[["self"]],["psp"]]],[11,"clone","haar_lib::graph::dinic","",132,[[["self"]],["dinic"]]],[11,"clone","haar_lib::graph::ford_fulkerson","",133,[[["self"]],["fordfulkerson"]]],[11,"clone","haar_lib::graph::hopcroft_karp","",134,[[["self"]],["edge"]]],[11,"clone","haar_lib::graph::min_cost_flow","",91,[[["self"]],["mincostflow"]]],[11,"clone","haar_lib::graph","",81,[[["self"]],["edge"]]],[11,"clone","","",130,[[["self"]],["directed"]]],[11,"clone","","",131,[[["self"]],["undirected"]]],[11,"clone","","",82,[[["self"]],["graph"]]],[11,"clone","haar_lib::grid","",94,[[["self"]],["position"]]],[11,"clone","","",95,[[["self"]],["grid"]]],[11,"clone","haar_lib::math::ff::modint","",101,[[["self"]],["modint"]]],[11,"clone","haar_lib::math::binomial_coefficient","",105,[[["self"]],["extlucas"]]],[11,"clone","","",106,[[["self"]],["binomialcoefficient"]]],[11,"clone","haar_lib::math::factorial","",107,[[["self"]],["factorialtable"]]],[11,"clone","haar_lib::math::rational","",108,[[["self"]],["rational"]]],[11,"clone","haar_lib::math::linalg::matrix","",109,[[["self"]],["matrix"]]],[11,"clone","haar_lib::math::linalg::square_matrix","",110,[[["self"]],["squarematrix"]]],[11,"clone","haar_lib::misc::dice","",111,[[["self"]],["dice"]]],[11,"clone","haar_lib::tree::hld","",117,[[["self"]],["hld"]]],[11,"clone","haar_lib::tree","",112,[[["self"]],["treeedge"]]],[11,"clone","","",113,[[["self"]],["treenode"]]],[11,"clone","","",114,[[["self"]],["tree"]]],[11,"clone","haar_lib::utils::num_inf","",123,[[["self"]],["numinf"]]],[11,"clone","haar_lib::utils::xor_shift","",125,[[["self"]],["xorshift"]]],[11,"default","haar_lib::algebra::affine","",6,[[],["affine"]]],[11,"default","haar_lib::algebra::bitxor","",7,[[],["bitxor"]]],[11,"default","haar_lib::algebra::max","",11,[[],["max"]]],[11,"default","haar_lib::algebra::min","",12,[[],["min"]]],[11,"default","haar_lib::algebra::prod","",13,[[],["prod"]]],[11,"default","haar_lib::algebra::sum","",14,[[],["sum"]]],[11,"default","haar_lib::algebra::update","",15,[[],["update"]]],[11,"default","haar_lib::algebra::add_sum","",17,[[],["addsum"]]],[11,"default","haar_lib::algebra::update_sum","",18,[[],["updatesum"]]],[11,"default","haar_lib::algo::compressor","",20,[[],["compressorbuilder"]]],[11,"default","haar_lib::ds::fenwick","",37,[[],["fenwicktree"]]],[11,"default","haar_lib::ds::rollbackable_vector","",51,[[],["rollbackablevec"]]],[11,"default","haar_lib::ds::range_search_tree","",53,[[],["rangesearchtreebuilder"]]],[11,"default","haar_lib::ds::persistent_queue","",55,[[],["persistentqueue"]]],[11,"default","haar_lib::ds::lazy_skew_heap","",58,[[],["lazyskewheap"]]],[11,"default","haar_lib::ds::skew_heap","",59,[[],["skewheap"]]],[11,"default","haar_lib::ds::persistent_stack","",60,[[],["persistentstack"]]],[11,"default","haar_lib::ds::binary_trie","",65,[[],["binarytrie"]]],[11,"default","haar_lib::geom","",67,[[],["epsfloat"]]],[11,"default","","",68,[[],["vector"]]],[11,"default","","",69,[[],["line"]]],[11,"default","","",70,[[],["circle"]]],[11,"default","haar_lib::grid","",94,[[],["position"]]],[11,"default","haar_lib::math::ff::modint","",101,[[],["modint"]]],[11,"default","haar_lib::math::factorial","",107,[[],["factorialtable"]]],[11,"cmp","haar_lib::utils::num_inf","",123,[[["numinf"],["self"]],["ordering"]]],[11,"eq","haar_lib::ds::cht","",61,[[["self"],["mode"]],["bool"]]],[11,"eq","haar_lib::ds::li_chao","",63,[[["mode"],["self"]],["bool"]]],[11,"eq","haar_lib::geom::ccw","",71,[[["ccw"],["self"]],["bool"]]],[11,"eq","haar_lib::geom::intersect_circle_line","",72,[[["self"],["intersectcircleline"]],["bool"]]],[11,"eq","haar_lib::geom::intersect_circle_segment","",73,[[["intersectcirclesegment"],["self"]],["bool"]]],[11,"eq","haar_lib::geom::intersect_circles","",74,[[["self"],["intersectcircles"]],["bool"]]],[11,"eq","haar_lib::geom::intersect_line_segment","",75,[[["self"],["intersectlinesegment"]],["bool"]]],[11,"eq","haar_lib::geom::intersect_segments","",76,[[["self"],["intersectsegments"]],["bool"]]],[11,"eq","haar_lib::geom::convex_hull","",77,[[["hull"],["self"]],["bool"]]],[11,"eq","haar_lib::geom::point_in_polygon","",78,[[["self"],["pointpolygon"]],["bool"]]],[11,"eq","haar_lib::geom","",67,[[["self"]],["bool"]]],[11,"eq","","",68,[[["vector"],["self"]],["bool"]]],[11,"ne","","",68,[[["vector"],["self"]],["bool"]]],[11,"eq","","",69,[[["line"],["self"]],["bool"]]],[11,"ne","","",69,[[["line"],["self"]],["bool"]]],[11,"eq","","",70,[[["circle"],["self"]],["bool"]]],[11,"ne","","",70,[[["circle"],["self"]],["bool"]]],[11,"eq","haar_lib::math::ff::modint","",101,[[["modint"],["self"]],["bool"]]],[11,"ne","","",101,[[["modint"],["self"]],["bool"]]],[11,"eq","haar_lib::math::rational","",108,[[["self"],["rational"]],["bool"]]],[11,"ne","","",108,[[["self"],["rational"]],["bool"]]],[11,"eq","haar_lib::math::linalg::matrix","",109,[[["self"],["matrix"]],["bool"]]],[11,"ne","","",109,[[["self"],["matrix"]],["bool"]]],[11,"eq","haar_lib::math::linalg::square_matrix","",110,[[["squarematrix"],["self"]],["bool"]]],[11,"ne","","",110,[[["squarematrix"],["self"]],["bool"]]],[11,"eq","haar_lib::misc::dice","",111,[[["self"],["dice"]],["bool"]]],[11,"ne","","",111,[[["self"],["dice"]],["bool"]]],[11,"eq","haar_lib::utils::num_inf","",123,[[["numinf"],["self"]],["bool"]]],[11,"ne","","",123,[[["numinf"],["self"]],["bool"]]],[11,"partial_cmp","haar_lib::geom","",67,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","haar_lib::math::rational","",108,[[["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","haar_lib::utils::num_inf","",123,[[["numinf"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",123,[[["numinf"],["self"]],["bool"]]],[11,"le","","",123,[[["numinf"],["self"]],["bool"]]],[11,"gt","","",123,[[["numinf"],["self"]],["bool"]]],[11,"ge","","",123,[[["numinf"],["self"]],["bool"]]],[11,"fmt","haar_lib::algebra::dihedral","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::algo::kmp","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::algo::sa","",24,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::ds::segtree_beats","",42,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::ds::cumulative_sum_1d","",128,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::ds::cumulative_sum_2d","",129,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::ds::rollbackable_vector","",51,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::ds::persistent_queue","",55,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::ds::lazy_skew_heap","",58,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::ds::skew_heap","",59,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::ds::persistent_stack","",60,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::ds::cht","",61,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",62,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::ds::li_chao","",63,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::ds::binary_trie","",65,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::geom::ccw","",71,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::geom::intersect_circle_line","",72,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::geom::intersect_circle_segment","",73,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::geom::intersect_circles","",74,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::geom::intersect_line_segment","",75,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::geom::intersect_segments","",76,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::geom::point_in_polygon","",78,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::geom","",67,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",68,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",69,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",70,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::graph::lowlink","",83,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::graph::hopcroft_karp","",134,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::graph","",81,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",130,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",131,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",82,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::grid","",94,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",95,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::math::ff::modint","",101,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::math::factorial","",107,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::math::rational","",108,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::math::linalg::square_matrix","",110,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::misc::dice","",111,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::tree::hld","",117,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::tree","",112,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",113,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",114,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::utils::num_inf","",123,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::utils::xor_shift","",125,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_lib::geom","",67,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"fmt","haar_lib::math::ff::modint","",101,[[["formatter"],["self"]],["result"]]],[11,"div","haar_lib::geom","",67,[[],["self"]]],[11,"div","","",68,[[["t"]],["self"]]],[11,"div","haar_lib::math::ff::modint","",101,[[],["self"]]],[11,"div","haar_lib::math::rational","",108,[[],["self"]]],[11,"sub","haar_lib::geom","",67,[[],["self"]]],[11,"sub","","",68,[[],["self"]]],[11,"sub","haar_lib::math::ff::modint","",101,[[],["self"]]],[11,"sub","haar_lib::math::rational","",108,[[],["self"]]],[11,"sub","haar_lib::math::linalg::matrix","",109,[[],["self"]]],[11,"sub","haar_lib::math::linalg::square_matrix","",110,[[],["self"]]],[11,"sub","haar_lib::utils::num_inf","",123,[[],["self"]]],[11,"add","haar_lib::geom","",67,[[],["self"]]],[11,"add","","",68,[[],["self"]]],[11,"add","haar_lib::grid","",94,[[],["self"]]],[11,"add","haar_lib::math::ff::modint","",101,[[],["self"]]],[11,"add","haar_lib::math::rational","",108,[[],["self"]]],[11,"add","haar_lib::math::linalg::matrix","",109,[[],["self"]]],[11,"add","haar_lib::math::linalg::square_matrix","",110,[[],["self"]]],[11,"add","haar_lib::utils::num_inf","",123,[[],["self"]]],[11,"mul","haar_lib::geom","",67,[[],["self"]]],[11,"mul","","",68,[[["t"]],["self"]]],[11,"mul","haar_lib::math::ff::modint","",101,[[],["self"]]],[11,"mul","haar_lib::math::rational","",108,[[],["self"]]],[11,"mul","haar_lib::math::linalg::matrix","",109,[[],["self"]]],[11,"mul","haar_lib::math::linalg::square_matrix","",110,[[],["self"]]],[11,"neg","haar_lib::geom","",67,[[],["self"]]],[11,"neg","haar_lib::math::ff::modint","",101,[[],["self"]]],[11,"neg","haar_lib::math::rational","",108,[[],["self"]]],[11,"neg","haar_lib::math::linalg::matrix","",109,[[],["self"]]],[11,"neg","haar_lib::math::linalg::square_matrix","",110,[[],["self"]]],[11,"neg","haar_lib::utils::num_inf","",123,[[],["self"]]],[11,"add_assign","haar_lib::geom","",67,[[["self"]]]],[11,"add_assign","haar_lib::math::ff::modint","",101,[[["self"]]]],[11,"add_assign","haar_lib::math::rational","",108,[[["rational"],["self"]]]],[11,"add_assign","haar_lib::math::linalg::matrix","",109,[[["self"]]]],[11,"add_assign","haar_lib::math::linalg::square_matrix","",110,[[["self"]]]],[11,"sub_assign","haar_lib::geom","",67,[[["self"]]]],[11,"sub_assign","haar_lib::math::ff::modint","",101,[[["self"]]]],[11,"sub_assign","haar_lib::math::rational","",108,[[["rational"],["self"]]]],[11,"sub_assign","haar_lib::math::linalg::matrix","",109,[[["self"]]]],[11,"sub_assign","haar_lib::math::linalg::square_matrix","",110,[[["self"]]]],[11,"mul_assign","haar_lib::geom","",67,[[["self"]]]],[11,"mul_assign","haar_lib::math::ff::modint","",101,[[["self"]]]],[11,"mul_assign","haar_lib::math::rational","",108,[[["self"]]]],[11,"mul_assign","haar_lib::math::linalg::matrix","",109,[[["self"]]]],[11,"mul_assign","haar_lib::math::linalg::square_matrix","",110,[[["self"]]]],[11,"div_assign","haar_lib::geom","",67,[[["self"]]]],[11,"div_assign","haar_lib::math::ff::modint","",101,[[["self"]]]],[11,"div_assign","haar_lib::math::rational","",108,[[["self"]]]],[11,"index","haar_lib::algo::sa","",24,[[["self"],["usize"]]]],[11,"index","haar_lib::ds::segtree","",41,[[["self"],["usize"]]]],[11,"index","haar_lib::ds::cumulative_sum_1d","",128,[[["self"],["usize"]]]],[11,"index","haar_lib::ds::cumulative_sum_2d","",129,[[["self"]]]],[11,"index","haar_lib::ds::rollbackable_vector","",51,[[["self"],["usize"]]]],[11,"index","haar_lib::math::linalg::matrix","",109,[[["self"],["usize"]]]],[11,"index","haar_lib::math::linalg::square_matrix","",110,[[["self"],["usize"]]]],[11,"sum","haar_lib::math::ff::modint","",101,[[["iterator"]],["self"]]],[11,"from_str","haar_lib::geom","",67,[[["str"]],["result"]]],[11,"from_str","haar_lib::math::ff::modint","",101,[[["str"]],["result"]]]],"p":[[8,"Zero"],[8,"One"],[8,"AlgeStruct"],[8,"BinaryOp"],[8,"Identity"],[8,"Inverse"],[3,"Affine"],[3,"BitXor"],[4,"DihedralValue"],[3,"Dihedral"],[3,"Dual"],[3,"Max"],[3,"Min"],[3,"Prod"],[3,"Sum"],[3,"Update"],[8,"Action"],[3,"AddSum"],[3,"UpdateSum"],[3,"Compressor"],[3,"CompressorBuilder"],[3,"Imos1D"],[3,"KMP"],[3,"Mo"],[3,"SuffixArray"],[3,"TwoSat"],[3,"StaticRangeFreqQuery"],[3,"StaticRangeInversionsQuery"],[8,"Foldable"],[8,"Foldable2D"],[8,"Assignable"],[8,"Updatable"],[8,"Indexable"],[3,"PartiallyPersistentUnionFind"],[3,"At"],[3,"UnionFind"],[3,"DualSegmentTree"],[3,"FenwickTree"],[3,"FenwickTreeAdd"],[3,"LazySegmentTree"],[3,"LazySegmentTreeCoeff"],[3,"SegmentTree"],[3,"SegmentTreeBeats"],[3,"SegmentTreeLinearAdd"],[4,"Mode"],[3,"StarrySkyTree"],[3,"FenwickOnFenwickBuilder"],[3,"FenwickOnFenwick"],[3,"CumulativeSum1DBuilder"],[3,"CumulativeSum2DBuilder"],[3,"PersistentArray"],[3,"RollbackableVec"],[3,"RangeSearchTree"],[3,"RangeSearchTreeBuilder"],[3,"FoldableDeque"],[3,"PersistentQueue"],[3,"DisjointSparseTable"],[3,"SparseTable"],[3,"LazySkewHeap"],[3,"SkewHeap"],[3,"PersistentStack"],[4,"Mode"],[3,"ConvexHullTrick"],[4,"Mode"],[3,"LiChaoTree"],[3,"BinaryTrie"],[3,"SuccinctDict"],[3,"EpsFloat"],[3,"Vector"],[3,"Line"],[3,"Circle"],[4,"CCW"],[4,"IntersectCircleLine"],[4,"IntersectCircleSegment"],[4,"IntersectCircles"],[4,"IntersectLineSegment"],[4,"IntersectSegments"],[4,"Hull"],[4,"PointPolygon"],[8,"EpsValue"],[8,"Eps"],[3,"Edge"],[3,"Graph"],[3,"Lowlink"],[3,"SCC"],[3,"PseudoTree"],[3,"DirectedEulerianTrail"],[3,"UndirectedEulerianTrail"],[3,"PSP"],[8,"MaxFlow"],[3,"HopcroftKarp"],[3,"MinCostFlow"],[3,"BipartiteMatching"],[8,"EdgeTrait"],[3,"Position"],[3,"Grid"],[3,"FactorizeSieve"],[8,"GcdLcm"],[8,"CheckPrime"],[3,"EratosthenesSieve"],[8,"Modulo"],[3,"ModInt"],[8,"Pow"],[8,"Inv"],[8,"Frac"],[3,"ExtLucas"],[3,"BinomialCoefficient"],[3,"FactorialTable"],[3,"Rational"],[3,"Matrix"],[3,"SquareMatrix"],[3,"Dice"],[3,"TreeEdge"],[3,"TreeNode"],[3,"Tree"],[3,"TreeDepthQuery"],[3,"EulerTour"],[3,"HLD"],[3,"DoublingLCA"],[3,"RerootingDP"],[3,"TreeDP"],[3,"FastIO"],[8,"JoinStr"],[4,"NumInf"],[8,"Transpose"],[3,"XorShift"],[8,"YesNo"],[8,"RangeIsEmpty"],[3,"CumulativeSum1D"],[3,"CumulativeSum2D"],[3,"Directed"],[3,"Undirected"],[3,"Dinic"],[3,"FordFulkerson"],[3,"Edge"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);