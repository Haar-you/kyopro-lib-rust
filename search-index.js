var searchIndex = JSON.parse('{\
"haar_lib":{"doc":"Rust GitHub last commit","t":[0,0,14,14,14,14,0,14,14,0,14,14,0,0,14,14,14,0,0,14,14,0,14,14,14,14,0,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,16,16,10,10,10,10,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,8,8,8,8,8,8,16,8,10,10,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,0,0,0,0,0,0,5,5,5,5,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,0,0,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,2,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,2,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,2,2,11,11,11,11,11,11,11,11,11,11,3,2,2,11,11,11,11,11,11,11,11,11,11,11,11,11,3,2,2,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,2,2,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,2,11,11,11,11,11,11,11,11,11,11,11,8,2,3,2,11,11,11,11,11,11,11,11,11,11,11,11,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,2,2,3,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,2,3,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,8,2,13,13,4,3,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,8,16,16,16,8,16,16,10,10,10,10,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,3,8,3,3,10,11,11,11,11,10,11,11,11,11,11,11,0,0,0,10,11,11,11,11,11,11,11,11,11,0,12,0,11,11,11,11,11,11,11,11,0,0,0,0,0,0,10,11,11,11,11,11,11,11,11,0,0,0,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,0,0,0,0,0,0,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,0,11,11,12,11,10,11,10,11,10,11,11,11,11,10,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,4,13,13,13,13,13,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,4,13,13,11,11,11,11,5,11,11,5,11,11,11,11,11,11,5,5,5,5,13,4,13,13,11,11,11,11,11,11,11,5,11,11,11,11,11,11,13,4,13,13,13,13,11,11,11,11,11,11,11,5,11,11,11,11,11,11,13,13,13,13,4,13,13,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,13,4,13,13,13,11,11,11,11,11,11,11,5,11,11,11,11,11,11,13,4,13,13,13,11,11,11,11,11,11,11,5,11,11,11,11,11,11,13,13,13,4,11,11,11,11,11,11,11,11,5,11,11,11,11,11,5,3,8,3,8,3,3,16,11,11,0,0,0,0,0,0,11,11,11,11,11,11,11,11,0,0,0,11,11,11,11,11,11,11,11,0,0,0,0,12,0,0,11,11,0,11,11,11,11,0,10,11,11,11,11,11,12,0,12,11,11,11,11,11,0,11,0,0,0,11,11,0,0,10,11,0,10,11,12,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,11,11,11,11,11,11,11,11,0,10,11,12,5,2,5,5,3,11,11,11,11,11,11,11,11,11,11,11,2,5,5,5,5,5,0,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,8,10,10,10,10,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,3,12,11,11,12,11,11,11,11,11,12,11,12,12,12,11,11,11,11,11,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,3,11,11,11,12,12,11,5,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,18,18,3,18,3,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,12,12,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,3,11,11,11,11,5,11,11,11,12,11,12,12,11,11,11,11,11,5,3,0,11,0,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,0,3,11,11,11,11,11,11,11,11,11,11,5,0,0,0,3,2,2,2,2,2,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,2,2,3,8,2,2,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,8,8,8,16,16,16,8,10,10,10,8,16,10,10,10,0,0,0,0,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,0,0,3,11,11,11,11,11,11,11,11,11,11,8,10,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,0,0,3,12,11,11,12,11,11,11,11,11,12,11,12,11,12,11,11,11,11,11,11,11,12,11,11,11,11,5,5,0,0,8,8,8,8,8,16,16,8,10,10,3,3,8,3,16,11,11,11,11,11,11,0,12,11,11,11,11,11,11,0,0,11,11,11,11,11,10,11,11,11,11,12,0,12,11,11,11,11,0,11,11,11,11,11,12,12,0,10,11,0,0,10,11,12,11,11,11,0,11,11,11,11,11,11,11,11,11,0,11,11,11,10,11,12,5,3,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,5,5,3,11,11,11,11,11,11,11,11,11,11,5,5,5,5,0,0,0,0,0,0,0,0,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,16,8,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10],"n":["algebra","algo","btreemap","btreeset","chmax","chmin","ds","eps","for_loop","geom","get","get_time","graph","grid","hashmap","hashset","input","macros","math","max","min","misc","modulo","mul_vec","rec","sort_with","testtools","timer","trait_alias","traits","tree","utils","action","add_sum","affine","bitxor","dihedral","dual","max","min","prod","sum","traits","update","update_sum","Action","FType","UType","convert","fold","fold_id","update","update_id","AddSum","borrow","borrow_mut","clone","clone_into","convert","default","fold","fold_id","from","into","new","to_owned","try_from","try_into","type_id","update","update_id","vzip","Affine","borrow","borrow_mut","clone","clone_into","default","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","BitXor","borrow","borrow_mut","clone","clone_into","default","from","id","id","id","id","id","id","id","id","id","id","id","id","into","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","new","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","Dihedral","DihedralValue","R","S","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","fmt","from","from","id","into","into","inv","new","op","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Dual","borrow","borrow_mut","clone","clone_into","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","Max","borrow","borrow_mut","clone","clone_into","default","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","Min","borrow","borrow_mut","clone","clone_into","default","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","Prod","borrow","borrow_mut","clone","clone_into","default","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","Sum","borrow","borrow_mut","clone","clone_into","default","from","id","into","inv","new","op","to_owned","try_from","try_into","type_id","vzip","AlgeStruct","Associative","BinaryOp","Commutative","Group","Idempotence","Identity","Inverse","Monoid","Output","Semigroup","id","inv","op","Update","borrow","borrow_mut","clone","clone_into","default","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","UpdateSum","borrow","borrow_mut","clone","clone_into","convert","default","fold","fold_id","from","into","new","to_owned","try_from","try_into","type_id","update","update_id","vzip","bsearch","compressor","edit_distance","enumerate_bitset","imos_1d","interval_scheduling","inversion_number","kmp","knapsack","lcs","lis","majority_vote","manacher","max_partial_sum","max_rect","merge","mo","num_subseq","permutation","psp","rle","rolling_hash","sa","sliding_window","static_range_freq_query","static_range_inversions_query","subset_sum","two_sat","zalgo","equal_range","lower_bound","upper_bound","Compressor","CompressorBuilder","add","add_vec","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","compress","decompress","default","from","from","get","index","into","into","new","size","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","edit_distance","gray_code","subset_asc","subset_between","subset_desc","subset_size_k","superset_asc","superset_desc","gray_code","subset_asc","subset_between","subset_desc","subset_size_k","super_asc","superset_desc","Imos1D","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","update","vzip","interval_scheduling","inversion_number","KMP","borrow","borrow_mut","clone","clone_into","fmt","from","into","matches","new","to_owned","try_from","try_into","type_id","vzip","limited","small_quantity","small_value","small_weight","unlimited","knapsack_limited","knapsack_small_quantity","knapsack_small_value","knapsack_small_weight","knapsack_unlimited","lcs","lis","majority_vote","manacher","max_partial_sum","max_rect","max_rect_in_histogram","inplace_merge","inplace_merge_by","merge","Mo","add","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","num_subseq","next_permutation","permutations","prev_permutation","PSP","borrow","borrow_mut","clone","clone_into","from","gain_if_blue","gain_if_both_blue","gain_if_both_red","gain_if_red","if_red_then_must_be_red","into","must_be_blue","must_be_red","new","penalty_if_blue","penalty_if_different","penalty_if_red","penalty_if_red_blue","solve","to_owned","try_from","try_into","type_id","vzip","rle","RollingHash","Table","borrow","borrow","borrow_mut","borrow_mut","from","from","hash","hash","hash_table","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","SuffixArray","borrow","borrow_mut","clone","clone_into","fmt","from","index","into","lcp_array","new","to_owned","to_slice","try_from","try_into","type_id","vzip","sliding_maximum","sliding_minimum","StaticRangeFreqQuery","borrow","borrow_mut","from","into","new","query","try_from","try_into","type_id","vzip","StaticRangeInversionsQuery","add","borrow","borrow_mut","from","into","new","solve","try_from","try_into","type_id","vzip","count","limited","subset_sum","subset_sum_limited","TwoSat","add_if","add_or","borrow","borrow_mut","from","into","new","not_coexist","solve","try_from","try_into","type_id","vzip","zalgo","binary_trie","cht","cumulative_sum_1d","cumulative_sum_2d","disjoint_sparse_table","dual_segtree","fenwick","fenwick_add","fenwick_on_fenwick","foldable_deque","interval_heap","lazy_segtree","lazy_segtree_coeff","lazy_skew_heap","li_chao","multiset","partially_persistent_unionfind","persistent_array","persistent_queue","persistent_stack","qword_tree","range_search_tree","rollbackable_vector","segtree","segtree_beats","segtree_linear_add","skew_heap","sparse_table","starry_sky_tree","succinct_dict","traits","unionfind","wavelet_matrix","BinaryTrie","borrow","borrow_mut","clone","clone_into","count","default","erase","fmt","from","insert","into","is_empty","len","lower_bound","max","min","new","to_owned","to_vec","try_from","try_into","type_id","upper_bound","vzip","ConvexHullTrick","Elem","Max","Min","Mode","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","from","from","into","into","new","query","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","CumulativeSum1D","CumulativeSum1DBuilder","Foldable","Group","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","fmt","fold","from","from","index","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","CumulativeSum2D","CumulativeSum2DBuilder","Foldable2D","Group","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","fmt","fold","from","from","index","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","DisjointSparseTable","Foldable","Semigroup","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","vzip","DualSegmentTree","Monoid","Updatable","borrow","borrow_mut","from","from_vec","get","into","new","to_vec","try_from","try_into","type_id","update","vzip","FenwickTree","Foldable","Group","Updatable","borrow","borrow_mut","clone","clone_into","default","fold","fold","from","into","new","to_owned","try_from","try_into","type_id","update","vzip","Elem","FenwickTreeAdd","Foldable","Updatable","add","borrow","borrow_mut","fold","fold","from","into","new","sub","try_from","try_into","type_id","vzip","FenwickOnFenwick","FenwickOnFenwickBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","default","fold","fold_to","from","from","into","into","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","FoldableDeque","back","borrow","borrow_mut","fold","from","front","into","is_empty","len","new","pop_back","pop_front","push_back","push_front","try_from","try_into","type_id","vzip","IntervalHeap","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","max","min","new","pop_max","pop_min","push","to_owned","try_from","try_into","type_id","vzip","LazySegmentTree","Updatable","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","update","vzip","Elem","Foldable","LazySegmentTreeCoeff","Updatable","borrow","borrow_mut","fold","from","init_with_vec","into","new","try_from","try_into","type_id","update","vzip","Elem","LazySkewHeap","add","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","meld","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","Elem","LiChaoTree","Max","Min","Mode","add_line","add_segment","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","from","from","into","into","new","query","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","MultiSet","borrow","borrow_mut","clone","clone_into","contains","count","default","first","fmt","from","insert","into","is_empty","last","len","new","pop_first","pop_last","remove","to_owned","try_from","try_into","type_id","vzip","At","PartiallyPersistentUnionFind","at","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","is_same","latest","merge","new","root_of","size_of","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","PersistentArray","borrow","borrow_mut","from","get","into","new","set","try_from","try_into","type_id","vzip","PersistentQueue","back","borrow","borrow_mut","default","fmt","from","front","into","is_empty","len","new","pop","push","try_from","try_into","type_id","vzip","PersistentStack","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","iter","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","MAX","QwordTree","borrow","borrow_mut","contains","default","erase","erase_unchecked","from","insert","insert_unchecked","into","is_empty","len","max","max_le","min","min_ge","new","try_from","try_into","type_id","vzip","RangeSearchTree","RangeSearchTreeBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","default","from","from","into","into","new","search","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","RollbackableVec","assign","borrow","borrow_mut","clone","clone_into","default","fmt","from","from","index","into","is_empty","len","new","pop","push","rollback","to_owned","try_from","try_into","type_id","vzip","Assignable","Foldable","Monoid","SegmentTree","Updatable","assign","borrow","borrow_mut","clone","clone_into","fold","from","index","into","new","to_owned","try_from","try_into","type_id","update","vzip","SegmentTreeBeats","add","borrow","borrow_mut","chmax","chmin","clone","clone_into","fmt","from","get_max","get_min","get_sum","into","new","new_with_vec","to_owned","try_from","try_into","type_id","vzip","Elem","Indexable","SegmentTreeLinearAdd","borrow","borrow_mut","from","get","into","new","try_from","try_into","type_id","update","vzip","SkewHeap","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","meld","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","SparseTable","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","vzip","Elem","Foldable","Max","Min","Mode","StarrySkyTree","Updatable","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fold","from","from","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","SuccinctDict","access","borrow","borrow_mut","clone","clone_into","count","from","into","is_empty","len","new","rank","select","to_owned","try_from","try_into","type_id","vzip","Assignable","Foldable","Foldable2D","Indexable","Output","Output","Output","Updatable","Value","Value","assign","fold","fold","get","update","UnionFind","borrow","borrow_mut","count_groups","from","get_groups","into","is_same","merge","new","new_with_values","root_of","size_of","try_from","try_into","type_id","value_of","vzip","WaveletMatrix","access","borrow","borrow_mut","clone","clone_into","count","from","into","maximum","minimum","new","next_value","prev_value","quantile","range_freq","rank","select","to_owned","try_from","try_into","type_id","vzip","Circle","Eps","EpsFloat","EpsValue","Line","Vector","abs","abs","abs","abs","abs_sq","acos","acos","add","add","add_assign","angle","angle_diff","area_intersection_circle_polygon","area_intersection_circles","area_polygon","atan2","atan2","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ccw","center","circumcircle","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","closest_pair","common_tangent_circles","convex","convex_cut","convex_diameter","convex_hull","cos","cos","cross","cross","default","default","default","default","diff","dist_line_point","dist_segment_point","dist_segments","div","div","div_assign","dot","dot","eps","eps","eps","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_str","incircle","intersect_circle_line","intersect_circle_segment","intersect_circles","intersect_line_segment","intersect_segments","into","into","into","into","is_orthogonal","is_parallel","max","max","min","min","mul","mul","mul_assign","neg","new","new","new","normal","normal","partial_cmp","point_in_polygon","polar","projection","radius","reflection","sin","sin","sq","sq","sqrt","sqrt","sub","sub","sub_assign","tan","tan","tangent_circle","to","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unit","unit","vzip","vzip","vzip","vzip","area_intersection_circle_polygon","area_intersection_circles","area_polygon","CCW","CLOCKWISE","COUNTER_CLOCKWISE","ONLINE_BACK","ONLINE_FRONT","ON_SEGMENT","borrow","borrow_mut","ccw","clone","clone_into","eq","fmt","from","into","to_owned","to_value","try_from","try_into","type_id","vzip","circumcircle","closest_pair","common_tangent_circles","is_convex","convex_cut","convex_diameter","Hull","Lower","Upper","borrow","borrow_mut","clone","clone_into","convex_hull","eq","from","half_hull","into","to_owned","try_from","try_into","type_id","vzip","dist_line_point","dist_segment_point","dist_segments","incircle","CROSSED","IntersectCircleLine","OUTSIDE","TANGENT","borrow","borrow_mut","clone","clone_into","eq","fmt","from","intersect_circle_line","into","to_owned","try_from","try_into","type_id","vzip","INSIDE","IntersectCircleSegment","ONE_CROSSPOINT","OUTSIDE","TANGENT","TWO_CROSSPOINTS","borrow","borrow_mut","clone","clone_into","eq","fmt","from","intersect_circle_segment","into","to_owned","try_from","try_into","type_id","vzip","CIRCUMSCRIBED","INSCRIBED","INSIDE","INTERSECTED","IntersectCircles","OUTSIDE","SAME","borrow","borrow_mut","clone","clone_into","eq","fmt","from","intersect_circles","into","num_common_tangent","to_owned","try_from","try_into","type_id","vzip","CROSSED","IntersectLineSegment","LEFTSIDE","OVERLAPPED","RIGHTSIDE","borrow","borrow_mut","clone","clone_into","eq","fmt","from","intersect_line_segment","into","to_owned","try_from","try_into","type_id","vzip","INTERSECTED","IntersectSegments","NOT_INTERSECTED","OVERLAPPED","SAME","borrow","borrow_mut","clone","clone_into","eq","fmt","from","intersect_segments","into","to_owned","try_from","try_into","type_id","vzip","EXCLUSION","INCLUSION","ON_SEGMENT","PointPolygon","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","point_in_polygon","to_owned","try_from","try_into","type_id","vzip","tangent_circle","Directed","Direction","Edge","EdgeTrait","Graph","Undirected","Weight","add","add","articulation_points","bellman_ford","bfs","bi_match","biconnected","bipartite","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bridges","chinese_postman","chu_liu_edmonds","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cycle","detect_cycle","dijkstra","dinic","edges","enumerate_triangles","eulerian","extend","extend","flow","fmt","fmt","fmt","fmt","ford_fulkerson","from","from","from","from","from","from","from","hopcroft_karp","index","into","into","into","into","is_empty","kruskal","len","lowlink","max_independent_set","min_cost_flow","new","new","prim","pseudo_tree","rev","rev","scc","to","to","to","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tsort","tsp","two_edge","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","warshall_floyd","weight","weight","weight","articulation_points","NumInf","bellman_ford","bfs","BipartiteMatching","add_edge","borrow","borrow_mut","from","into","matching","new","try_from","try_into","type_id","vzip","Lowlink","biconnected","check_bipartite","bridges","chinese_postman_problem","chu_liu_edmonds","directed_shortest","directed_shortest_cycle","detect_cycle","dijkstra","Dinic","add_edge","borrow","borrow_mut","clone","clone_into","from","get_edges","into","max_flow","new","reset","to_owned","try_from","try_into","type_id","vzip","enumerate_triangles","directed","undirected","DirectedEulerianTrail","add_edge","borrow","borrow_mut","clone","clone_into","from","into","new","solve","to_owned","try_from","try_into","type_id","vzip","UndirectedEulerianTrail","add_edge","borrow","borrow_mut","clone","clone_into","from","into","new","solve","to_owned","try_from","try_into","type_id","vzip","Cap","MaxFlow","add_edge","get_edges","max_flow","new","reset","FordFulkerson","add_edge","borrow","borrow_mut","clone","clone_into","from","get_edges","into","max_flow","new","reset","to_owned","try_from","try_into","type_id","vzip","Edge","HopcroftKarp","add_edge","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","from","from","get_matching","into","into","matching","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","kruskal","Lowlink","back","borrow","borrow_mut","ch","clone","clone_into","fmt","from","into","low","new","ord","par","size","to_owned","try_from","try_into","type_id","vzip","max_independent_set","MinCostFlow","add_edge","borrow","borrow_mut","clone","clone_into","from","into","min_cost_flow","new","to_owned","try_from","try_into","type_id","vzip","prim","PseudoTree","borrow","borrow_mut","from","group","in_loop","into","pseudo_tree","try_from","try_into","type_id","vzip","SCC","borrow","borrow_mut","from","groups","into","new","to_vec","try_from","try_into","type_id","vzip","tsort","tsp","two_edge_connected_components","warshall_floyd","D","DIR_4","Grid","L","Position","R","U","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","find_all","fmt","fmt","for_each","from","from","get","into","into","new","new","to_graph","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","x","y","grid_to_graph","chmax","chmin","ds_macros","eps","for_loop","get_time","io","max","min","modulo","mul_vec","rec","sort_with","timer","trait_alias","bell_number","berlekamp_massey","binomial_coefficient","convolution","count_coprime","crt","divisor","enumerate_quotients","ext_gcd","factorial","factorial_prime_factor","factorize","ff","gcd_lcm","linalg","miller_rabin","mod_ops","montmort","nim_product","prime_test","primitive_root","rational","sum_floor_linear","sum_of_exponential_times_polynomial_limit","totient","totient_sum","bell_number_table","berlekamp_massey","BinomialCoefficient","ExtLucas","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","from","from","get","get","into","into","new","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","conv_and","conv_or","mobius_sub","mobius_super","subset_conv","zeta_sub","zeta_super","convolution_and","convolution_or","fast_mobius_subset","fast_mobius_superset","subset_convolution","fast_zeta_subset","fast_zeta_superset","count_coprime","crt","crt_vec","count_divisors","enumerate_divisors","Quotient","borrow","borrow_mut","clone","clone_into","enumerate_quotients","eq","fmt","from","from","into","q","to","to_owned","try_from","try_into","type_id","vzip","ext_gcd","FactorialTable","bell","bell_number","bernoulli","bernoulli_number","borrow","borrow_mut","catalan","catalan_number","clone","clone_into","comb","default","facto","fmt","from","h","into","inv_facto","new","perm","to_owned","try_from","try_into","type_id","vzip","factorial_prime_factor","sieve","trial","FactorizeSieve","borrow","borrow_mut","factorize","from","into","new","try_from","try_into","type_id","vzip","factorize","const_modint","modint","traits","ConstModInt","FF","Frac","Inv","One","Pow","Zero","add","add_assign","borrow","borrow_mut","clone","clone_into","default","div","div_assign","eq","fmt","fmt","frac","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","into","inv","mul","mul_assign","neg","new","one","pow","sub","sub_assign","sum","to_owned","to_string","try_from","try_into","type_id","vzip","zero","FF","Frac","Inv","ModInt","Modulo","One","Pow","Zero","add","add_assign","borrow","borrow_mut","clone","clone_into","default","div","div_assign","eq","fmt","fmt","frac","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","into","inv","mul","mul_assign","neg","new","one","pow","sub","sub_assign","sum","to_owned","to_string","try_from","try_into","type_id","value","vzip","zero","FF","Frac","Inv","Output","Output","Output","Pow","frac","inv","pow","GcdLcm","Output","gcd","gcd_lcm","lcm","determinant_p","inverse_p","matrix","square_matrix","determinant_p","inverse_p","Matrix","add","add_assign","borrow","borrow_mut","clone","clone_into","eq","from","from_vec","get_mut","height","index","into","mul","mul_assign","neg","new","sub","sub_assign","to_owned","to_vec","transpose","try_from","try_into","type_id","vzip","width","SquareMatrix","SquareMatrixElem","add","add_assign","borrow","borrow_mut","clone","clone_into","eq","fmt","from","from_vec","get_mut","index","into","mul","mul_assign","neg","new","pow","size","straight_mul","strassen_mul","sub","sub_assign","to_owned","to_vec","transpose","try_from","try_into","type_id","unit","vzip","miller_rabin","enum_inv","inv","inv_p","log","pow","sqrt","enumerate_mod_inv","mod_inv","mod_inv_p","mod_log","mod_pow","mod_sqrt","montmort","nim_product_16","nim_product_32","nim_product_64","nim_product_8","eratosthenes","traits","EratosthenesSieve","borrow","borrow_mut","from","into","is_prime","new","try_from","try_into","type_id","vzip","CheckPrime","is_prime","primitive_root","Rational","add","add_assign","borrow","borrow_mut","clone","clone_into","div","div_assign","eq","fmt","from","from","into","mul","mul_assign","neg","new","partial_cmp","sub","sub_assign","to_owned","try_from","try_into","type_id","vzip","sum_floor_linear","sum_of_exponential_times_polynomial_limit","totient","totient_table","totient_sum","dice","paren","Dice","back","borrow","borrow_mut","bottom","clone","clone_into","eq","fmt","from","front","into","left","new","right","rot_back","rot_clockwise","rot_counterclockwise","rot_front","rot_left","rot_right","to_owned","top","try_from","try_into","type_id","vzip","check_paren","rand_range","num","one_zero","Float","Int","Signed","Unsigned","One","Output","Output","Zero","one","zero","Tree","TreeEdge","TreeEdgeTrait","TreeNode","Weight","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","centroid","children","clone","clone","clone","clone_into","clone_into","clone_into","depth_query","euler_tour","extend","extend_rooted","fmt","fmt","fmt","from","from","from","from","from","from","hld","index","into","into","into","is_empty","lca","len","neighbors","neighbors_size","new","new","nodes","parent","rerooting","rev","rev","rooted_isomorphism","rooting","to","to","to","to_owned","to_owned","to_owned","tree_dp","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","utils","vzip","vzip","vzip","weight","weight","weight","centroids","TreeDepthQuery","ancestor","borrow","borrow_mut","children_query","from","into","me_query","new","try_from","try_into","type_id","vzip","EulerTour","borrow","borrow_mut","from","into","new","point_query","subtree_query","try_from","try_into","type_id","vzip","HLD","borrow","borrow_mut","clone","clone_into","fmt","from","get_id","into","lca","new","parent","path_query_edge","path_query_vertex","subtree_query_edge","subtree_query_vertex","to_owned","try_from","try_into","type_id","vzip","DoublingLCA","ancestor","borrow","borrow_mut","from","get_lca","into","jump","new","try_from","try_into","type_id","vzip","RerootingDP","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","rooted_isomorphism","rooting","TreeDP","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","tree_diameter","tree_distance","tree_height","tree_path","bits","fastio","join_str","num_inf","swap","transpose","xor_shift","yesno","highest_one","FastIO","borrow","borrow_mut","drop","from","getc","into","new","peek","read_chars","read_i32","read_i64","read_isize","read_u32","read_u64","read_usize","skip","try_from","try_into","type_id","vzip","write","writeln","JoinStr","join_str","Inf","NegInf","NumInf","Value","add","borrow","borrow_mut","clone","clone_into","cmp","eq","fmt","from","into","is_inf","is_neg_inf","is_value","neg","partial_cmp","sub","to_owned","try_from","try_into","type_id","unwrap","vzip","swap_vv","Output","Transpose","transpose","XorShift","borrow","borrow_mut","clone","clone_into","fmt","from","gen","into","new","to_owned","try_from","try_into","type_id","vzip","YesNo","yesno"],"q":["haar_lib","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::algebra","","","","","","","","","","","","","haar_lib::algebra::action","","","","","","","","haar_lib::algebra::add_sum","","","","","","","","","","","","","","","","","","","haar_lib::algebra::affine","","","","","","","","","","","","","","","","haar_lib::algebra::bitxor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::algebra::dihedral","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::algebra::dual","","","","","","","","","","","","","","","haar_lib::algebra::max","","","","","","","","","","","","","","","","haar_lib::algebra::min","","","","","","","","","","","","","","","","haar_lib::algebra::prod","","","","","","","","","","","","","","","","haar_lib::algebra::sum","","","","","","","","","","","","","","","","","haar_lib::algebra::traits","","","","","","","","","","","","","","haar_lib::algebra::update","","","","","","","","","","","","","","","","haar_lib::algebra::update_sum","","","","","","","","","","","","","","","","","","","haar_lib::algo","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::algo::bsearch","","","haar_lib::algo::compressor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::algo::edit_distance","haar_lib::algo::enumerate_bitset","","","","","","","haar_lib::algo::enumerate_bitset::gray_code","haar_lib::algo::enumerate_bitset::subset_asc","haar_lib::algo::enumerate_bitset::subset_between","haar_lib::algo::enumerate_bitset::subset_desc","haar_lib::algo::enumerate_bitset::subset_size_k","haar_lib::algo::enumerate_bitset::superset_asc","haar_lib::algo::enumerate_bitset::superset_desc","haar_lib::algo::imos_1d","","","","","","","","","","","","haar_lib::algo::interval_scheduling","haar_lib::algo::inversion_number","haar_lib::algo::kmp","","","","","","","","","","","","","","","haar_lib::algo::knapsack","","","","","haar_lib::algo::knapsack::limited","haar_lib::algo::knapsack::small_quantity","haar_lib::algo::knapsack::small_value","haar_lib::algo::knapsack::small_weight","haar_lib::algo::knapsack::unlimited","haar_lib::algo::lcs","haar_lib::algo::lis","haar_lib::algo::majority_vote","haar_lib::algo::manacher","haar_lib::algo::max_partial_sum","haar_lib::algo::max_rect","","haar_lib::algo::merge","","","haar_lib::algo::mo","","","","","","","","","","","","haar_lib::algo::num_subseq","haar_lib::algo::permutation","","","haar_lib::algo::psp","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::algo::rle","haar_lib::algo::rolling_hash","","","","","","","","","","","","","","","","","","","","","","haar_lib::algo::sa","","","","","","","","","","","","","","","","","haar_lib::algo::sliding_window","","haar_lib::algo::static_range_freq_query","","","","","","","","","","","haar_lib::algo::static_range_inversions_query","","","","","","","","","","","","haar_lib::algo::subset_sum","","haar_lib::algo::subset_sum::count","haar_lib::algo::subset_sum::limited","haar_lib::algo::two_sat","","","","","","","","","","","","","","haar_lib::algo::zalgo","haar_lib::ds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::binary_trie","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::cht","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::cumulative_sum_1d","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::cumulative_sum_2d","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::disjoint_sparse_table","","","","","","","","","","","","","haar_lib::ds::dual_segtree","","","","","","","","","","","","","","","","haar_lib::ds::fenwick","","","","","","","","","","","","","","","","","","","","haar_lib::ds::fenwick_add","","","","","","","","","","","","","","","","","haar_lib::ds::fenwick_on_fenwick","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::foldable_deque","","","","","","","","","","","","","","","","","","","haar_lib::ds::interval_heap","","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::lazy_segtree","","","","","","","","","","","","","haar_lib::ds::lazy_segtree_coeff","","","","","","","","","","","","","","","","haar_lib::ds::lazy_skew_heap","","","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::li_chao","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::multiset","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::partially_persistent_unionfind","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::persistent_array","","","","","","","","","","","","haar_lib::ds::persistent_queue","","","","","","","","","","","","","","","","","","haar_lib::ds::persistent_stack","","","","","","","","","","","","","","","","","","","haar_lib::ds::qword_tree","","","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::range_search_tree","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::rollbackable_vector","","","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::segtree","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::segtree_beats","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::segtree_linear_add","","","","","","","","","","","","","","haar_lib::ds::skew_heap","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::sparse_table","","","","","","","","","","","haar_lib::ds::starry_sky_tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::ds::succinct_dict","","","","","","","","","","","","","","","","","","","haar_lib::ds::traits","","","","","","","","","","","","","","","haar_lib::ds::unionfind","","","","","","","","","","","","","","","","","","haar_lib::ds::wavelet_matrix","","","","","","","","","","","","","","","","","","","","","","","haar_lib::geom","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::geom::area_intersection_circle_polygon","haar_lib::geom::area_intersection_circles","haar_lib::geom::area_polygon","haar_lib::geom::ccw","","","","","","","","","","","","","","","","","","","","","haar_lib::geom::circumcircle","haar_lib::geom::closest_pair","haar_lib::geom::common_tangent_circles","haar_lib::geom::convex","haar_lib::geom::convex_cut","haar_lib::geom::convex_diameter","haar_lib::geom::convex_hull","","","","","","","","","","","","","","","","","haar_lib::geom::dist_line_point","haar_lib::geom::dist_segment_point","haar_lib::geom::dist_segments","haar_lib::geom::incircle","haar_lib::geom::intersect_circle_line","","","","","","","","","","","","","","","","","","haar_lib::geom::intersect_circle_segment","","","","","","","","","","","","","","","","","","","","haar_lib::geom::intersect_circles","","","","","","","","","","","","","","","","","","","","","","haar_lib::geom::intersect_line_segment","","","","","","","","","","","","","","","","","","","haar_lib::geom::intersect_segments","","","","","","","","","","","","","","","","","","","haar_lib::geom::point_in_polygon","","","","","","","","","","","","","","","","","","haar_lib::geom::tangent_circle","haar_lib::graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::graph::articulation_points","haar_lib::graph::bellman_ford","","haar_lib::graph::bfs","haar_lib::graph::bi_match","","","","","","","","","","","","haar_lib::graph::biconnected","","haar_lib::graph::bipartite","haar_lib::graph::bridges","haar_lib::graph::chinese_postman","haar_lib::graph::chu_liu_edmonds","haar_lib::graph::cycle","haar_lib::graph::cycle::directed_shortest","haar_lib::graph::detect_cycle","haar_lib::graph::dijkstra","haar_lib::graph::dinic","","","","","","","","","","","","","","","","","haar_lib::graph::enumerate_triangles","haar_lib::graph::eulerian","","haar_lib::graph::eulerian::directed","","","","","","","","","","","","","","","haar_lib::graph::eulerian::undirected","","","","","","","","","","","","","","","haar_lib::graph::flow","","","","","","","haar_lib::graph::ford_fulkerson","","","","","","","","","","","","","","","","","haar_lib::graph::hopcroft_karp","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::graph::kruskal","haar_lib::graph::lowlink","","","","","","","","","","","","","","","","","","","","haar_lib::graph::max_independent_set","haar_lib::graph::min_cost_flow","","","","","","","","","","","","","","","haar_lib::graph::prim","haar_lib::graph::pseudo_tree","","","","","","","","","","","","haar_lib::graph::scc","","","","","","","","","","","","haar_lib::graph::tsort","haar_lib::graph::tsp","haar_lib::graph::two_edge","haar_lib::graph::warshall_floyd","haar_lib::grid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::grid::to_graph","haar_lib::macros","","","","","","","","","","","","","","","haar_lib::math","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::math::bell_number","haar_lib::math::berlekamp_massey","haar_lib::math::binomial_coefficient","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::math::convolution","","","","","","","haar_lib::math::convolution::conv_and","haar_lib::math::convolution::conv_or","haar_lib::math::convolution::mobius_sub","haar_lib::math::convolution::mobius_super","haar_lib::math::convolution::subset_conv","haar_lib::math::convolution::zeta_sub","haar_lib::math::convolution::zeta_super","haar_lib::math::count_coprime","haar_lib::math::crt","","haar_lib::math::divisor","","haar_lib::math::enumerate_quotients","","","","","","","","","","","","","","","","","","haar_lib::math::ext_gcd","haar_lib::math::factorial","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::math::factorial_prime_factor","haar_lib::math::factorize","","haar_lib::math::factorize::sieve","","","","","","","","","","","haar_lib::math::factorize::trial","haar_lib::math::ff","","","haar_lib::math::ff::const_modint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::math::ff::modint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::math::ff::traits","","","","","","","","","","haar_lib::math::gcd_lcm","","","","","haar_lib::math::linalg","","","","haar_lib::math::linalg::determinant_p","haar_lib::math::linalg::inverse_p","haar_lib::math::linalg::matrix","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::math::linalg::square_matrix","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::math::miller_rabin","haar_lib::math::mod_ops","","","","","","haar_lib::math::mod_ops::enum_inv","haar_lib::math::mod_ops::inv","haar_lib::math::mod_ops::inv_p","haar_lib::math::mod_ops::log","haar_lib::math::mod_ops::pow","haar_lib::math::mod_ops::sqrt","haar_lib::math::montmort","haar_lib::math::nim_product","","","","haar_lib::math::prime_test","","haar_lib::math::prime_test::eratosthenes","","","","","","","","","","","haar_lib::math::prime_test::traits","","haar_lib::math::primitive_root","haar_lib::math::rational","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::math::sum_floor_linear","haar_lib::math::sum_of_exponential_times_polynomial_limit","haar_lib::math::totient","","haar_lib::math::totient_sum","haar_lib::misc","","haar_lib::misc::dice","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::misc::paren","haar_lib::testtools","haar_lib::traits","","haar_lib::traits::num","","","","haar_lib::traits::one_zero","","","","","","haar_lib::tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::tree::centroid","haar_lib::tree::depth_query","","","","","","","","","","","","","haar_lib::tree::euler_tour","","","","","","","","","","","","haar_lib::tree::hld","","","","","","","","","","","","","","","","","","","","","haar_lib::tree::lca","","","","","","","","","","","","","haar_lib::tree::rerooting","","","","","","","","","","","haar_lib::tree::rooted_isomorphism","haar_lib::tree::rooting","haar_lib::tree::tree_dp","","","","","","","","","","","haar_lib::tree::utils","","","","haar_lib::utils","","","","","","","","haar_lib::utils::bits","haar_lib::utils::fastio","","","","","","","","","","","","","","","","","","","","","","","haar_lib::utils::join_str","","haar_lib::utils::num_inf","","","","","","","","","","","","","","","","","","","","","","","","","","haar_lib::utils::swap","haar_lib::utils::transpose","","","haar_lib::utils::xor_shift","","","","","","","","","","","","","","","haar_lib::utils::yesno",""],"d":["代数的構造","","","","","","データ構造","","","","","","グラフ一般に関するもの","","","","","macro_exportされたmacro置き場","数学","","","分類を放置しているもの","","","…","","","","","","木に関するもの","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","二分探索","座標圧縮","","","","区間スケジューリング問題","転倒数","","ナップサック問題","最長共通部分列","最長増加部分列","Boyer-Moore majority vote algorithm","","最大連続部分和","","","","相異なる部分列の総数","","Project Selection Problem","","","","スライド最小値","配列に対する範囲頻度取得クエリ","","部分和問題","","","lower_bound, upper_boundの組を求める。","x以上となる最小のindexを求める。","xを超える最小のindexを求める。","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","<code>i</code>番目の値を返す。","<code>value</code>が何番目の値(0-index)かを返す。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","…","数列の転倒数を計算する。","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","個数制限付きナップサック問題","要素数が小さいナップサック問題","価値の総和が小さいナップサック問題","容量が小さいナップサック問題","個数制限無しナップサック問題","列a, bの最長共通部分列の一つを求める。","列の最長増加部分列の一つを求める。","","","…","…","…","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","返り値<code>ret</code>に対して、<code>ret[i]</code>は<code>a[0..i]</code>…","","","","Project Selection Problem","","","","","Returns the argument unchanged.","頂点iが青ならばcの利益を得る。","頂点iとjがともに青ならばcの利益を得る。","頂点iとjがともに赤ならばcの利益を得る。","頂点iが赤ならばcの利益を得る。","頂点iが赤ならば、頂点jも赤…","Calls <code>U::from(self)</code>.","頂点iは青でなければならない。","頂点iは赤でなければならない。","","頂点iが青ならばcの損失になる。","頂点iとjが異なる色ならばcの損失となる。","頂点iが赤ならばcの損失になる。","頂点iが赤かつ頂点jが青…","must be制約を破った場合、<code>None</code>…","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","…","…","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Time Complexity $O(|a|)$","Time Complexity $O(log |a|)$","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","部分和問題 …","…","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","1次元累積和","2次元累積和","半群の列の区間演算を行う(O(1))","","","","","","","","係数乗算付き区間加算区間総和遅延セグ木","遅延加算付き融合可能ヒープ","","","部分永続UnionFind","永続配列","永続キュー","永続スタック","64分木","領域内の点を列挙する","ロールバック可能Vec","","","区間一次関数加算セグメントツリー","融合可能ヒープ","冪等性と結合性をもつ列の区間取得(O(1))","区間加算・区間Max(Min)","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Time complexity O(1)","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Time Complexity O(1)","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","使用する点を登録する。","","","","","","","","","","","Time Complexity $O(\\\\log ^ 2 n)$","Time Complexity $O(\\\\log ^ 2 n)$","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Time Complexity $O(\\\\log ^ 2 n)$","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","時刻tでの状態","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","最新時点の状態","","","","Complexity","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","永続スタック","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","　0 ~ 16777215 ($2^24 - 1$) の値の集合を管理する","","","xを含むかどうかを判定する","","xを集合から削除する","Safety","Returns the argument unchanged.","xを集合に加える","Safety","Calls <code>U::from(self)</code>.","集合が空かどうかを判断する","集合に含まれている要素数を返す","最大値を返す","x以下で最大の値を返す","最小値を返す","x以上で最小の値を返す","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","[l, r) に含まれる<code>b</code>の個数","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","[0, index) に含まれる<code>b</code>の個数","nth(0-indexed)番目の<code>b</code>の位置","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","<code>index</code>番目の値を得る。","","","","","<code>range</code>に含まれる<code>value</code>の個数。","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>range</code>での最大値","<code>range</code>での最小値","","<code>range</code>で<code>lb</code>以上の最小値","<code>range</code>で<code>ub</code>未満の最大値","<code>range</code>でk(0-indexed)番目に小さい値。","<code>range</code>で<code>lb</code>以上<code>ub</code>未満の値の個数","[0, index)に含まれる<code>value</code>の個数。","<code>nth</code>(0-indexed)番目の<code>value</code>の位置。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","関節点の列挙","負閉路を持つグラフの最短経路 (Bellman-Ford)","","二部マッチング","二重頂点連結分解","二部グラフ判定","","","","","","","","","橋の列挙","中国人郵便配達問題","有向グラフ上の最小有向全域木を求める","","","","","","","","","","有向グラフの閉路検出","非負重み付き最短経路 (Dijkstra)","最大流 (Dinic)","","","(準)Eulerグラフの判定","","","","","","","","最大流 (Ford-Fulkerson)","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","二部マッチング (Hopcroft-Karp)","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","最小全域木 (Kruskal)","","","最大独立集合","最小費用流","","","最小全域木 (Prim)","","","","強連結成分分解","","","","","","","","","","","","","","","","トポロジカルソート","巡回セールスマン問題","二重辺連結成分分解","","","","","","","","","全頂点間最短経路長","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","橋の列挙","Time complexity O(V ^ 2 * 2 ^ V)","有向グラフ上の最小有向全域木を求める","…","…","","Time complexity O((E + V) log V)","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","最大独立集合を求める","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Time complexity O(N)","","","Time complexity O(n ^ 3)","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","中国剰余定理","約数列挙","","拡張ユークリッドの互除法","","$a!$の素因数pの個数を求める。","","","最大公約数・最小公倍数","","","mod mでの演算","","","","原始根","有理数","$\\\\sum_{i=0}^{n-1} \\\\lfloor \\\\frac{ai+b}{m} \\\\rfloor$","$\\\\sum_{i=0}^{\\\\infty} r^ii^d$","トーシェント関数","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Time complexity O(sqrt n)","Time complexity O(sqrt n)","","","","","","1以上N以下の自然数xについて<code>floor(N/x)</code>…","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","n個からk個とりだす組み合わせの個数 (nCk)","","nの階乗","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","nの階乗の逆元","Time complexity O(n)","n個からk個とりだす順列の個数 (nPk)","","","","","","$a!$の素因数pの個数を求める。","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","素数mod p上での行列式を求める。 $O(n^3)$","素数mod p上での逆行列を求める。 $O(n^3)$","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","0,1,..,nの素数mod pでの逆元を列挙する。","mod mでの逆元","素数mod pでの逆元","$a^x = b \\\\bmod m$を満たすxを求める。","$x^p \\\\bmod m$を求める。","$x^2 = a \\\\bmod p$を満たすxを一つ求める。","0,1,..,nの素数mod pでの逆元を列挙する。","mod mでの逆元","素数mod pでの逆元","$a^x = b \\\\bmod m$を満たすxを求める。","$x^p \\\\bmod m$を求める。","$x^2 = a \\\\bmod p$を満たすxを一つ求める。","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","$\\\\sum_{i=0}^{\\\\infty} r^ii^d$","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","括弧列が対応が取れているかを調べる","","","","浮動小数点型","整数型","符号付きの数値型","非負の数値型","乗算についての単位元をもつ","","","加算についての単位元をもつ","","","","","","","","","","","","","","重心列挙","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","重軽分解","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","最小共通祖先","","","","","","","","全方位木DP","","","","根付き木に変換","","","","","","","木DP","","","","","","","","","","","","","","","","","","Tree depth query","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","重軽分解","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","演算は可換性を仮定する。","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","…","","","","","","全方位木DP","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","木の任意の2頂点の距離の最大値を求める。","…","…","…","","","","正の無限大、負の無限大をもつ数","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,88,88,88,88,88,88,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,25,25,25,26,25,26,25,26,25,26,25,25,26,26,25,26,26,26,26,25,26,25,26,25,26,25,26,25,26,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,0,0,0,0,0,0,0,0,31,0,30,191,32,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,42,44,42,44,42,42,44,42,44,42,44,44,42,44,42,44,44,44,42,42,44,44,42,44,42,44,42,44,42,44,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,48,48,48,48,48,48,48,48,48,48,0,0,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,0,0,0,60,61,60,61,60,61,60,61,60,60,61,60,60,61,60,61,60,61,60,61,0,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,0,0,0,64,64,64,64,64,64,64,64,64,64,0,65,65,65,65,65,65,65,65,65,65,65,0,0,0,0,0,66,66,66,66,66,66,66,66,66,66,66,66,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,0,0,70,70,0,69,70,69,70,69,70,69,70,69,70,70,69,70,69,70,69,69,69,70,69,70,69,70,69,70,69,70,69,0,0,0,0,72,73,72,73,72,73,73,73,73,72,73,73,72,73,72,73,72,73,72,73,72,73,72,72,73,0,0,0,0,74,75,74,75,74,75,75,75,75,74,75,75,74,75,74,75,74,75,74,75,74,75,74,74,75,0,0,0,77,77,77,77,77,77,77,77,77,77,0,0,0,78,78,78,78,78,78,78,78,78,78,78,78,78,0,0,0,0,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,0,0,0,0,83,83,83,83,83,83,83,83,83,83,83,83,83,0,0,84,84,85,84,85,84,84,85,84,85,84,85,85,84,85,84,85,84,84,85,84,85,84,85,84,85,85,84,85,0,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,0,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,0,0,89,89,89,89,89,89,89,89,89,89,89,0,0,0,0,91,91,91,91,91,91,91,91,91,91,91,91,0,0,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,0,0,96,96,0,95,95,95,96,95,96,96,96,96,96,95,96,95,96,95,95,96,95,96,95,96,95,96,95,96,0,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,0,0,98,98,99,98,99,98,99,98,99,99,98,98,98,99,99,98,99,98,99,98,99,98,99,0,100,100,100,100,100,100,100,100,100,100,100,0,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,0,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,0,0,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,0,0,104,105,104,105,104,104,104,104,104,105,104,105,104,104,105,104,105,104,105,104,105,104,105,104,0,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,0,0,0,0,0,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,0,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,0,0,0,110,110,110,110,110,110,110,110,110,110,110,0,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,0,112,112,112,112,112,112,112,112,112,112,0,0,113,113,0,0,0,115,113,115,113,113,113,115,115,113,115,113,115,113,115,113,115,113,115,113,115,115,113,0,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,0,0,0,0,192,193,194,0,195,196,195,192,193,194,196,0,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,0,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,0,0,0,0,0,0,122,121,123,124,123,122,121,121,123,121,123,123,0,0,0,122,121,121,123,124,125,121,123,124,125,0,125,0,121,123,124,125,121,123,124,125,0,0,0,0,0,0,122,121,123,124,121,123,124,125,124,0,0,0,121,123,121,123,124,120,122,121,121,123,124,125,121,121,123,123,124,125,121,121,123,124,125,124,121,0,0,0,0,0,0,121,123,124,125,124,124,122,121,122,121,121,123,121,121,121,124,125,123,124,121,0,123,124,125,124,122,121,122,121,122,121,121,123,121,122,121,0,124,121,123,124,125,121,123,121,123,124,125,121,123,124,125,121,123,124,125,123,124,121,123,124,125,0,0,0,0,130,130,130,130,130,130,130,0,130,130,130,130,130,130,130,130,130,130,130,130,0,0,0,0,0,0,0,131,131,131,131,131,131,0,131,131,0,131,131,131,131,131,131,0,0,0,0,132,0,132,132,132,132,132,132,132,132,132,0,132,132,132,132,132,132,133,0,133,133,133,133,133,133,133,133,133,133,133,0,133,133,133,133,133,133,134,134,134,134,0,134,134,134,134,134,134,134,134,134,0,134,134,134,134,134,134,134,135,0,135,135,135,135,135,135,135,135,135,135,0,135,135,135,135,135,135,136,0,136,136,136,136,136,136,136,136,136,136,0,136,136,136,136,136,136,137,137,137,0,137,137,137,137,137,137,137,137,0,137,137,137,137,137,0,0,0,0,0,0,0,139,140,140,0,0,0,0,0,0,142,138,141,140,142,138,141,140,0,0,0,142,138,141,140,142,138,141,140,0,0,0,0,140,0,0,140,140,0,142,138,141,140,0,139,142,142,138,141,140,142,0,142,142,138,141,140,140,0,140,0,0,0,142,140,0,0,139,142,0,139,142,142,142,138,141,140,142,138,141,140,142,138,141,140,0,0,0,142,138,141,140,142,138,141,140,0,139,142,142,0,0,0,0,0,147,147,147,147,147,147,147,147,147,147,147,0,0,0,0,0,0,0,0,0,0,0,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,0,0,0,0,149,149,149,149,149,149,149,149,149,149,149,149,149,149,0,150,150,150,150,150,150,150,150,150,150,150,150,150,150,146,0,146,146,146,146,146,0,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,0,0,152,152,153,152,153,153,153,153,152,153,152,152,153,152,152,153,152,153,152,153,152,153,152,153,0,0,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,0,0,154,154,154,154,154,154,154,154,154,154,154,154,154,154,0,0,155,155,155,155,155,155,0,155,155,155,155,0,156,156,156,156,156,156,156,156,156,156,156,0,0,0,0,157,157,0,157,0,157,157,157,157,158,157,158,157,158,157,158,157,158,157,158,158,157,158,158,157,158,157,158,0,157,158,157,158,157,158,157,158,157,158,157,157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,162,163,162,163,162,163,162,163,162,163,162,163,162,163,162,163,162,163,162,163,162,163,162,163,162,163,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,164,164,164,0,164,164,164,164,164,164,164,164,164,164,164,164,0,0,0,165,0,165,165,165,0,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,0,0,0,0,166,166,166,166,166,166,166,166,166,166,0,0,0,0,0,0,0,0,0,0,0,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,0,0,0,0,0,0,0,0,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,168,169,169,0,0,0,197,198,199,0,199,198,197,0,200,200,200,200,0,0,0,0,0,0,0,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,0,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,173,173,173,173,173,173,173,173,173,173,0,201,0,0,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,0,0,0,0,0,0,0,0,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,0,0,0,0,0,0,0,0,0,9,8,0,8,9,0,0,0,0,179,176,177,178,176,177,178,0,177,176,177,178,176,177,178,0,0,178,178,176,177,178,179,176,176,177,178,176,0,176,176,177,178,178,0,178,177,177,176,178,178,177,0,179,176,0,0,179,176,176,176,177,178,0,176,177,178,176,177,178,176,177,178,0,176,177,178,179,176,176,0,0,181,181,181,181,181,181,181,181,181,181,181,181,0,182,182,182,182,182,182,182,182,182,182,182,0,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,0,184,184,184,184,184,184,184,184,184,184,184,184,0,185,185,185,185,185,185,185,185,185,185,0,0,0,186,186,186,186,186,186,186,186,186,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,0,202,145,145,0,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,0,203,0,203,0,190,190,190,190,190,190,190,190,190,190,190,190,190,190,0,204],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[]],[[]],[[]],[[]],0,[[]],[[]],[[[3,[2,2]]],[[3,[2,2]]]],[[]],[[3,1]],[[],[[3,[4,4]]]],[3],[3],[[]],[[]],[[],3],[[]],[[],5],[[],5],[[],6],[3],[3],[[]],0,[[]],[[]],[[[7,[2]]],[[7,[2]]]],[[]],[[],[[7,[4]]]],[[]],[[[7,[[0,[8,9,10]]]]]],[[]],[[],7],[[[7,[[0,[11,12,10]]]]]],[[]],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[[[13,[2]]],[[13,[2]]]],[[]],[[],[[13,[4]]]],[[]],[[[13,[14]]]],[[[13,[15]]]],[[[13,[16]]]],[[[13,[17]]]],[[[13,[18]]]],[[[13,[1]]]],[[[13,[19]]]],[[[13,[20]]]],[[[13,[21]]]],[[[13,[22]]]],[[[13,[23]]]],[[[13,[24]]]],[[]],[[[13,[23]]]],[[[13,[17]]]],[[[13,[15]]]],[[[13,[18]]]],[[[13,[21]]]],[[[13,[24]]]],[[[13,[14]]]],[[[13,[20]]]],[[[13,[16]]]],[[[13,[19]]]],[[[13,[1]]]],[[[13,[22]]]],[[],13],[[[13,[1]]]],[[[13,[19]]]],[[[13,[22]]]],[[[13,[20]]]],[[[13,[16]]]],[[[13,[14]]]],[[[13,[17]]]],[[[13,[21]]]],[[[13,[24]]]],[[[13,[18]]]],[[[13,[23]]]],[[[13,[15]]]],[[]],[[],5],[[],5],[[],6],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[25,25],[26,26],[[]],[[]],[[25,27],28],[[]],[[]],[26],[[]],[[]],[26],[1,26],[26],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[]],[[]],0,[[]],[[]],[[[29,[2,2]]],[[29,[2,2]]]],[[]],[[]],[[[29,[30]]]],[[]],[31,[[29,[31]]]],[[[29,[32]]]],[[]],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[[[33,[2]]],[[33,[2]]]],[[]],[[],[[33,[4]]]],[[]],[33],[[]],[[],33],[[[33,[[0,[34,10]]]]]],[[]],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[[[35,[2]]],[[35,[2]]]],[[]],[[],[[35,[4]]]],[[]],[35],[[]],[[],35],[[[35,[[0,[34,10]]]]]],[[]],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[[[36,[2]]],[[36,[2]]]],[[]],[[],[[36,[4]]]],[[]],[[[36,[8]]]],[[]],[[],36],[[[36,[12]]]],[[]],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[[[37,[2]]],[[37,[2]]]],[[]],[[],[[37,[4]]]],[[]],[[[37,[9]]]],[[]],[[[37,[38]]]],[[],37],[[[37,[11]]]],[[]],[[],5],[[],5],[[],6],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],0,[[]],[[]],[[[39,[2]]],[[39,[2]]]],[[]],[[],[[39,[4]]]],[[]],[39],[[]],[[],39],[39],[[]],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[[[40,[2,2]]],[[40,[2,2]]]],[[]],[[40,1]],[[],[[40,[4,4]]]],[40],[40],[[]],[[]],[[],40],[[]],[[],5],[[],5],[[],6],[40],[40],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[],1],[[],1],0,0,[[[42,[[0,[2,34,41]]]],[0,[2,34,41]]]],[[[42,[[0,[2,34,41]]]],43]],[[]],[[]],[[]],[[]],[[[42,[[0,[2,34,41]]]]],[[44,[[0,[2,34,41]]]]]],[[[44,[2]]],[[44,[2]]]],[[[42,[2]]],[[42,[2]]]],[[]],[[]],[[44,43],45],[[44,43],45],[[],[[42,[4]]]],[[]],[[]],[[44,1]],[44,1],[[]],[[]],[[],[[42,[[0,[2,34,41]]]]]],[44,1],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[]],[[]],[[],1],0,0,0,0,0,0,0,[23,45],[23,45],[[23,23],45],[23,45],[[23,23],45],[[23,23],45],[[23,23],45],0,[[]],[[]],[[[48,[[0,[10,46,9,11,47]]]]],[[49,[[0,[10,46,9,11,47]]]]]],[[]],[[]],[1,[[48,[[0,[10,46,9,11,47]]]]]],[[],5],[[],5],[[],6],[[[48,[[0,[10,46,9,11,47]]]],[50,[1]],[0,[10,46,9,11,47]]]],[[]],[[],[[49,[1]]]],[[],21],0,[[]],[[]],[51,51],[[]],[[51,27],28],[[]],[[]],[[51,52],[[49,[1]]]],[52,51],[[]],[[],5],[[],5],[[],6],[[]],0,0,0,0,0,[1],[[]],[21,1],[1],[1],[[],[[49,[[0,[10,53]]]]]],[[],[[49,[1]]]],[[],54],[[],[[49,[1]]]],[[],54],[[[0,[10,53]]],1],[[]],[1],[1],[[],[[49,[[0,[34,10]]]]]],0,[[55,1,1]],[[]],[[]],[[]],[[]],[[1,1,[57,[56]],[57,[56]],[57,[56]],[57,[56]],[57,[56]]],55],[55],[[],5],[[],5],[[],6],[[]],[21,[[49,[21]]]],[[],58],[[[49,[[0,[34,10]]]]],45],[[],58],0,[[]],[[]],[59,59],[[]],[[]],[[59,1,21]],[[59,1,1,21]],[[59,1,1,21]],[[59,1,21]],[[59,1,1]],[[]],[[59,1]],[[59,1]],[1,59],[[59,1,21]],[[59,1,1,21]],[[59,1,21]],[[59,1,1,21]],[59,[[54,[15]]]],[[]],[[],5],[[],5],[[],6],[[]],[[],49],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[60,52],21],[[61,[50,[1]]],21],[[60,52],61],[[]],[[]],[[1,21,21],60],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[]],[[]],0,[[]],[[]],[62,62],[[]],[[62,27],28],[[]],[[62,1]],[[]],[62,[[49,[1]]]],[52,62],[[]],[62],[[],5],[[],5],[[],6],[[]],[1,[[49,[[0,[34,10]]]]]],[1,[[49,[[0,[34,10]]]]]],0,[[]],[[]],[[]],[[]],[[[49,[[0,[63,41]]]]],[[64,[[0,[63,41]]]]]],[[[64,[[0,[63,41]]]],[50,[1]]],1],[[],5],[[],5],[[],6],[[]],0,[[65,1,1]],[[]],[[]],[[]],[[]],[[],65],[65,[[49,[21]]]],[[],5],[[],5],[[],6],[[]],0,0,[[1,1],49],[[1,1],[[49,[58]]]],0,[[66,19,19]],[[66,19,19]],[[]],[[]],[[]],[[]],[1,66],[[66,19,19]],[66,[[54,[[49,[58]]]]]],[[],5],[[],5],[[],6],[[]],[[],[[49,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[67,67],[[]],[[67,21],1],[[],67],[[67,21],[[54,[1]]]],[[67,27],28],[[]],[[67,21],1],[[]],[67,58],[67,1],[[67,21],1],[[67,21],[[54,[21]]]],[[67,21],[[54,[21]]]],[[],67],[[]],[67,[[49,[21]]]],[[],5],[[],5],[[],6],[[67,21],1],[[]],0,0,0,0,0,[[[69,[68]]]],[[]],[[]],[[]],[[]],[70,70],[[[69,[2]]],[[69,[2]]]],[[]],[[]],[[70,70],58],[[70,27],28],[[[69,[71]],27],28],[[]],[[]],[[]],[[]],[70,[[69,[68]]]],[[[69,[68]],68],68],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[72,73],[[[73,[2,2]]],[[73,[2,2]]]],[[]],[[[73,[71,71]],27],28],[[73,[50,[1]]]],[[]],[[]],[[73,1]],[[]],[[]],[1,72],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[72,1]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[74,75],[[[75,[2,2]]],[[75,[2,2]]]],[[]],[[[75,[71,71]],27],28],[[75,[50,[1]],[50,[1]]]],[[]],[[]],[75],[[]],[[]],[[1,1],74],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[74,1,1]],[[]],[[]],0,0,0,[[]],[[]],[[[77,[[0,[2,4]],76]],[50,[1]]]],[[]],[[]],[[[49,[2]],76],[[77,[2,76]]]],[[],5],[[],5],[[],6],[[]],0,0,0,[[]],[[]],[[]],[78],[[78,1]],[[]],[1,78],[78,49],[[],5],[[],5],[[],6],[[78,[50,[1]]]],[[]],0,0,0,0,[[]],[[]],[[[79,[2,2]]],[[79,[2,2]]]],[[]],[[],[[79,[4,4]]]],[[[79,[2,80]],[50,[1]]]],[[[79,[2,80]],[81,[1]]]],[[]],[[]],[[1,80],[[79,[2,80]]]],[[]],[[],5],[[],5],[[],6],[[[79,[2,80]],1,2]],[[]],0,0,0,0,[[[83,[82]],1,82]],[[]],[[]],[[[83,[82]],[50,[1]]]],[[[83,[82]],[81,[1]]]],[[]],[[]],[1,[[83,[82]]]],[[[83,[82]],1,82]],[[],5],[[],5],[[],6],[[]],0,0,[[84,15,15]],[[]],[[]],[[]],[[]],[[84,10],[[85,[10]]]],[84,84],[[[85,[2]]],[[85,[2]]]],[[]],[[]],[[],84],[[[85,[[0,[10,11,47]]]],[50,[15]],[50,[15]]],[[0,[10,11,47]]]],[[[85,[[0,[10,11,47]]]],[81,[15]],[81,[15]]],[[0,[10,11,47]]]],[[]],[[]],[[]],[[]],[[],84],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[[85,[[0,[10,11,47]]]],15,15,[0,[10,11,47]]]],[[]],[[]],0,[86,54],[[]],[[]],[86,54],[[]],[86,54],[[]],[86,58],[86,1],[[],86],[86,54],[86,54],[86],[86],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[[[87,[2]]],[[87,[2]]]],[[]],[[],[[87,[4]]]],[[[87,[71]],27],28],[[]],[[]],[[[87,[34]]],58],[[[87,[34]]],1],[[[87,[34]]],54],[[[87,[34]]],54],[[],[[87,[34]]]],[[[87,[34]]],[[54,[34]]]],[[[87,[34]]],[[54,[34]]]],[[[87,[34]],34]],[[]],[[],5],[[],5],[[],6],[[]],0,0,[[]],[[]],[[[89,[[0,[2,41]],[0,[2,41]],[0,[2,88]]]],[50,[1]]],[[0,[2,41]]]],[[]],[[]],[[1,[0,[2,88]]],[[89,[[0,[2,41]],[0,[2,41]],[0,[2,88]]]]]],[[],5],[[],5],[[],6],[[[89,[[0,[2,41]],[0,[2,41]],[0,[2,88]]]],[50,[1]],[0,[2,41]]]],[[]],0,0,0,0,[[]],[[]],[[[91,[90]],[50,[1]]],90],[[]],[[[91,[90]],[49,[90]]]],[[]],[[1,[49,[90]]],[[91,[90]]]],[[],5],[[],5],[[],6],[[[91,[90]],[50,[1]],90]],[[]],0,0,[[[93,[92]],92]],[[]],[[]],[[[93,[2]]],[[93,[2]]]],[[]],[[],[[93,[4]]]],[[[93,[71]],27],28],[[]],[[]],[[[93,[92]]],58],[[[93,[92]]],1],[[[93,[92]],[93,[92]]]],[[],[[93,[92]]]],[[[93,[92]]],54],[[[93,[92]]],[[54,[92]]]],[[[93,[92]],92]],[[]],[[],5],[[],5],[[],6],[[]],0,0,0,0,0,[[[95,[94]]]],[[[95,[94]]]],[[]],[[]],[[]],[[]],[96,96],[[]],[[96,96],58],[[96,27],28],[[]],[[]],[[]],[[]],[96,[[95,[94]]]],[[[95,[94]],94],[[54,[94]]]],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[]],[[]],0,[[]],[[]],[[[97,[2]]],[[97,[2]]]],[[]],[[[97,[[0,[34,41,2]]]]],58],[[[97,[[0,[34,41,2]]]]],1],[[],[[97,[4]]]],[[[97,[[0,[34,41,2]]]]],[[54,[[0,[34,41,2]]]]]],[[[97,[71]],27],28],[[]],[[[97,[[0,[34,41,2]]]],[0,[34,41,2]]]],[[]],[[[97,[[0,[34,41,2]]]]],58],[[[97,[[0,[34,41,2]]]]],[[54,[[0,[34,41,2]]]]]],[[[97,[[0,[34,41,2]]]]],1],[[],[[97,[[0,[34,41,2]]]]]],[[[97,[[0,[34,41,2]]]]],[[54,[[0,[34,41,2]]]]]],[[[97,[[0,[34,41,2]]]]],[[54,[[0,[34,41,2]]]]]],[[[97,[[0,[34,41,2]]]],[0,[34,41,2]]],58],[[]],[[],5],[[],5],[[],6],[[]],0,0,[[98,1],99],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[99,1,1],58],[98,99],[[98,1,1]],[1,98],[[99,1],1],[[99,1],1],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[]],[[]],0,[[]],[[]],[[]],[[100,1]],[[]],[1,100],[[100,1],100],[[],5],[[],5],[[],6],[[]],0,[101,54],[[]],[[]],[[],[[101,[4]]]],[[[101,[71]],27],28],[[]],[101,54],[[]],[101,58],[101,1],[[],101],[101,[[54,[101]]]],[101,101],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[[[102,[2]]],[[102,[2]]]],[[]],[[],[[102,[4]]]],[[[102,[71]],27],28],[[]],[[]],[102,45],[[],102],[102,54],[102,[[54,[102]]]],[102,102],[[]],[[],5],[[],5],[[],6],[[]],0,0,[[]],[[]],[[103,23],58],[[],103],[[103,23],58],[[103,23]],[[]],[[103,23],58],[[103,23]],[[]],[103,58],[103,1],[103,[[54,[23]]]],[[103,23],[[54,[23]]]],[103,[[54,[23]]]],[[103,23],[[54,[23]]]],[[],103],[[],5],[[],5],[[],6],[[]],0,0,[104],[[]],[[]],[[]],[[]],[104,105],[[[104,[2]]],[[104,[2]]]],[[]],[[],[[104,[4]]]],[[]],[[]],[[]],[[]],[[],104],[105,49],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[]],[[]],0,[[106,1]],[[]],[[]],[[[106,[2]]],[[106,[2]]]],[[]],[[],[[106,[4]]]],[[[106,[71]],27],28],[49,106],[[]],[[106,1]],[[]],[106,58],[106,1],[[],106],[106,54],[106],[106,58],[[]],[[],5],[[],5],[[],6],[[]],0,0,0,0,0,[[107,1]],[[]],[[]],[[[107,[2,2]]],[[107,[2,2]]]],[[]],[107],[[]],[[107,1]],[[]],[1,107],[[]],[[],5],[[],5],[[],6],[[107,1]],[[]],0,[[108,[50,[1]],15]],[[]],[[]],[[108,[50,[1]],15]],[[108,[50,[1]],15]],[108,108],[[]],[[108,27],28],[[]],[[108,[50,[1]]],15],[[108,[50,[1]]],15],[[108,[50,[1]]],15],[[]],[1,108],[[[49,[15]]],108],[[]],[[],5],[[],5],[[],6],[[]],0,0,0,[[]],[[]],[[]],[[[110,[109]],1]],[[]],[1,[[110,[109]]]],[[],5],[[],5],[[],6],[[[110,[109]],[50,[1]]]],[[]],0,[[]],[[]],[[[111,[2]]],[[111,[2]]]],[[]],[[],[[111,[4]]]],[[[111,[71]],27],28],[[]],[[]],[[[111,[34]]],58],[[[111,[34]]],1],[[[111,[34]],[111,[34]]]],[[],[[111,[34]]]],[[[111,[34]]],54],[[[111,[34]]],[[54,[34]]]],[[[111,[34]],34]],[[]],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[[112,[50,[1]]]],[[]],[[]],[49,112],[[],5],[[],5],[[],6],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[113,113],[[]],[[[115,[114]],[50,[1]]]],[[]],[[]],[[]],[[]],[[1,113],[[115,[114]]]],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[[115,[114]],[50,[1]],114]],[[]],[[]],0,[[116,1],21],[[]],[[]],[116,116],[[]],[[116,[50,[1]],58],1],[[]],[[]],[116,58],[116,1],[[[49,[58]]],116],[[116,1,58],1],[[116,1,58],[[54,[1]]]],[[]],[[],5],[[],5],[[],6],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[117,1],[[]],[117,[[49,[[49,[1]]]]]],[[]],[[117,1,1],58],[[117,1,1],1],[1,117],[[1,49,[57,[56]]],117],[[117,1],1],[[117,1],1],[[],5],[[],5],[[],6],[[117,1],54],[[]],0,[[118,1],21],[[]],[[]],[118,118],[[]],[[118,[119,[1]],21],1],[[]],[[]],[[118,[119,[1]]],[[54,[21]]]],[[118,[119,[1]]],[[54,[21]]]],[[[49,[21]]],118],[[118,[0,[[119,[1]],2]],21],[[54,[21]]]],[[118,[0,[[119,[1]],2]],21],[[54,[21]]]],[[118,[119,[1]],1],[[54,[21]]]],[[118,[0,[[119,[1]],2]],21,21],1],[[118,1,21],1],[[118,1,21],[[54,[1]]]],[[]],[[],5],[[],5],[[],6],[[]],0,0,0,0,0,0,[[]],[[[121,[[0,[120,10]]]]],[[121,[[0,[120,10]]]]]],[[[123,[122]]],122],[[[124,[122]]],122],[[[123,[122]]],122],[[]],[[[121,[[0,[120,10]]]]],[[121,[[0,[120,10]]]]]],[[[121,[120]],[121,[120]]],[[121,[120]]]],[[[123,[122]],[123,[122]]],[[123,[122]]]],[[[121,[120]],[121,[120]]]],[[[123,[122]],[123,[122]]],122],[[[123,[122]],[123,[122]]],122],0,0,0,[[]],[[[121,[[0,[120,10]]]],[121,[[0,[120,10]]]]],[[121,[[0,[120,10]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[121,[2]]],[[121,[2]]]],[[[123,[2]]],[[123,[2]]]],[[[124,[2]]],[[124,[2]]]],[[[125,[2]]],[[125,[2]]]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[[121,[[0,[120,10]]]]],[[121,[[0,[120,10]]]]]],[[[123,[122]],[123,[122]]],122],[[[124,[122]],[124,[122]]],122],[[],[[121,[4]]]],[[],[[123,[4]]]],[[],[[124,[4]]]],[[],[[125,[4]]]],[[[124,[122]]],[[123,[122]]]],0,0,0,[[[121,[120]],[121,[120]]],[[121,[120]]]],[[[123,[122]],122],[[123,[122]]]],[[[121,[120]],[121,[120]]]],[[[123,[122]],[123,[122]]],122],[[[124,[122]],[124,[122]]],122],[[],126],[[],126],[[],126],[[[121,[120]],[121,[120]]],58],[[[123,[53]],123],58],[[[124,[53]],124],58],[[[125,[53]],125],58],[[121,27],28],[[[121,[71]],27],28],[[[123,[71]],27],28],[[[123,[[0,[122,127]]]],27],28],[[[124,[71]],27],28],[[[125,[71]],27],28],[[]],[126,121],[[]],[[]],[[]],0,[52,[[5,[121]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[[124,[122]],[124,[122]]],58],[[[124,[122]],[124,[122]]],58],[[]],[[[121,[[0,[120,10]]]],[121,[[0,[120,10]]]]],[[121,[[0,[120,10]]]]]],[[]],[[[121,[[0,[120,10]]]],[121,[[0,[120,10]]]]],[[121,[[0,[120,10]]]]]],[[[121,[120]],[121,[120]]],[[121,[120]]]],[[[123,[122]],122],[[123,[122]]]],[[[121,[120]],[121,[120]]]],[121,121],[126,121],[[[123,[122]],[123,[122]]],[[124,[122]]]],[123,125],[[[123,[122]]],[[123,[122]]]],[[[124,[122]]],[[123,[122]]]],[[[121,[120]],[121,[120]]],[[54,[128]]]],0,[[122,122],[[123,[122]]]],[[[124,[122]],[123,[122]]],[[123,[122]]]],0,[[[124,[122]],[123,[122]]],[[123,[122]]]],[[]],[[[121,[[0,[120,10]]]]],[[121,[[0,[120,10]]]]]],[[]],[[[121,[[0,[120,10]]]]],[[121,[[0,[120,10]]]]]],[[]],[[[121,[[0,[120,10]]]]],[[121,[[0,[120,10]]]]]],[[[121,[120]],[121,[120]]],[[121,[120]]]],[[[123,[122]],[123,[122]]],[[123,[122]]]],[[[121,[120]],[121,[120]]]],[[]],[[[121,[[0,[120,10]]]]],[[121,[[0,[120,10]]]]]],0,0,[[]],[[]],[[]],[[]],[[],129],[[],129],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[[],6],[[[123,[122]]],[[123,[122]]]],[[[124,[122]]],[[123,[122]]]],[[]],[[]],[[]],[[]],[[[125,[122]]],122],[[[125,[122]],[125,[122]]],122],[[],122],0,0,0,0,0,0,[[]],[[]],[[[123,[122]],[123,[122]],[123,[122]]],130],[130,130],[[]],[[130,130],58],[[130,27],28],[[]],[[]],[[]],[130,24],[[],5],[[],5],[[],6],[[]],[[[123,[122]],[123,[122]],[123,[122]]],[[125,[122]]]],[[[49,[[123,[122]]]]],54],[[[125,[[0,[122,71]]]],[125,[[0,[122,71]]]]],[[49,[[123,[[0,[122,71]]]]]]]],[[],58],[[[124,[122]]]],[[[49,[[123,[122]]]]],122],0,0,0,[[]],[[]],[131,131],[[]],[[[49,[[123,[122]]]]],[[49,[[123,[122]]]]]],[[131,131],58],[[]],[[[49,[[123,[122]]]],131],[[49,[[123,[122]]]]]],[[]],[[]],[[],5],[[],5],[[],6],[[]],[[[124,[122]],[123,[122]]],122],[[[124,[122]],[123,[122]]],122],[[[124,[122]],[124,[122]]],122],[[[123,[122]],[123,[122]],[123,[122]]],[[125,[122]]]],0,0,0,0,[[]],[[]],[132,132],[[]],[[132,132],58],[[132,27],28],[[]],[[[125,[122]],[124,[122]]]],[[]],[[]],[[],5],[[],5],[[],6],[[]],0,0,0,0,0,0,[[]],[[]],[133,133],[[]],[[133,133],58],[[133,27],28],[[]],[[[125,[122]],[124,[122]]]],[[]],[[]],[[],5],[[],5],[[],6],[[]],0,0,0,0,0,0,0,[[]],[[]],[134,134],[[]],[[134,134],58],[[134,27],28],[[]],[[[125,[122]],[125,[122]]]],[[]],[134,[[54,[23]]]],[[]],[[],5],[[],5],[[],6],[[]],0,0,0,0,0,[[]],[[]],[135,135],[[]],[[135,135],58],[[135,27],28],[[]],[[[124,[122]],[124,[122]]]],[[]],[[]],[[],5],[[],5],[[],6],[[]],0,0,0,0,0,[[]],[[]],[136,136],[[]],[[136,136],58],[[136,27],28],[[]],[[[124,[122]],[124,[122]]]],[[]],[[]],[[],5],[[],5],[[],6],[[]],0,0,0,0,[[]],[[]],[137,137],[[]],[[137,137],58],[[137,27],28],[[]],[[]],[[[123,[122]]],137],[[]],[[],5],[[],5],[[],6],[[]],[[[125,[122]],[123,[122]]],[[49,[[123,[122]]]]]],0,0,0,0,0,0,0,[[[140,[138,[0,[139,2]]]],[0,[139,2]]]],[[[140,[141,[0,[139,2]]]],[0,[139,2]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[142,[2,2]]],[[142,[2,2]]]],[138,138],[141,141],[[[140,[2,2]]],[[140,[2,2]]]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[[140,[141,[0,[139,2]]]],43]],[[[140,[138,[0,[139,2]]]],43]],0,[[[142,[71,71]],27],28],[[138,27],28],[[141,27],28],[[[140,[71,71]],27],28],0,[[],1],[[]],[[[142,[2]]],1],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[140,58],0,[140,1],0,0,0,[[1,1],142],[1,[[140,[143,[0,[139,2]]]]]],0,0,[[]],[[[142,[2]]],[[142,[2]]]],0,[[],1],[[[142,[2]]],1],0,[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,0,[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],0,[[]],[[[142,[2]]]],0,[144,[[49,[1]]]],0,[[140,1],[[49,[145]]]],[[140,43],[[49,[[54,[1]]]]]],0,[[[147,[146]],1,1]],[[]],[[]],[[]],[[]],[[[147,[146]]],21],[[1,1],[[147,[146]]]],[[],5],[[],5],[[],6],[[]],0,[144,49],[140,[[49,[54]]]],[144,49],[140],[[140,1],49],0,[[140,1],[[54,[49]]]],[140,[[54,[49]]]],[140,[[49,[54]]]],0,[[148,1,1]],[[]],[[]],[148,148],[[]],[[]],[[148,1],49],[[]],[[148,1,1]],[1,148],[148],[[]],[[],5],[[],5],[[],6],[[]],[140,49],0,0,0,[[149,1,1]],[[]],[[]],[149,149],[[]],[[]],[[]],[1,149],[149,[[54,[[49,[1]]]]]],[[]],[[],5],[[],5],[[],6],[[]],0,[[150,1,1]],[[]],[[]],[150,150],[[]],[[]],[[]],[1,150],[150,[[54,[[49,[1]]]]]],[[]],[[],5],[[],5],[[],6],[[]],0,0,[[1,1]],[1,49],[[1,1]],[1],[[]],0,[[151,1,1]],[[]],[[]],[151,151],[[]],[[]],[[151,1],49],[[]],[[151,1,1]],[1,151],[151],[[]],[[],5],[[],5],[[],6],[[]],0,0,[[152,1,1]],[[]],[[]],[[]],[[]],[153,153],[[]],[[153,27],28],[[]],[[]],[152,49],[[]],[[]],[152,23],[[1,1],152],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[]],[[]],[140,49],0,0,[[]],[[]],0,[144,144],[[]],[[144,27],28],[[]],[[]],0,[140,144],0,0,0,[[]],[[],5],[[],5],[[],6],[[]],[140,[[49,[1]]]],0,[[154,1,1,21,15]],[[]],[[]],[154,154],[[]],[[]],[[]],[[154,1,1,21],[[5,[15]]]],[1,154],[[]],[[],5],[[],5],[[],6],[[]],[140,49],0,[[]],[[]],[[]],0,0,[[]],[140,155],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[[]],[156,49],[[]],[140,156],[156,[[49,[1]]]],[[],5],[[],5],[[],6],[[]],[140,[[54,[[49,[1]]]]]],[[140,1],54],[144,[[49,[[49,[1]]]]]],[140,[[54,[[49,[[49,[54]]]]]]]],0,0,0,0,0,0,0,[[157,157],157],[[]],[[]],[[]],[[]],[157,157],[[[158,[2]]],[[158,[2]]]],[[]],[[]],[[],157],[[158,159],[[49,[157]]]],[[157,27],28],[[[158,[71]],27],28],[[158,159]],[[]],[[]],[[158,157]],[[]],[[]],[[19,19],157],[43,158],0,[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[]],[[]],0,0,[[1,1,56,56,56],[[140,[138,[142,[2]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[49,[[49,[[0,[160,[161,[1]]]]]]]]]],[49,49],0,0,[[]],[[]],[[]],[[]],[162,162],[163,163],[[]],[[]],[[]],[[]],[[162,21,21],21],[[163,21,21],21],[[]],[[]],[[21,21],162],[21,163],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[]],[[]],0,0,0,0,0,0,0,[[49,49],49],[[49,49],49],[[]],[[]],[[49,49],49],[[]],[[]],[[21,21],21],[[],54],[[],54],[21,21],[21,[[49,[21]]]],0,[[]],[[]],[164,164],[[]],[21,[[49,[164]]]],[[164,164],58],[[164,27],28],[[]],0,[[]],0,0,[[]],[[],5],[[],5],[[],6],[[]],[[21,21]],0,0,[[[165,[[0,[160,[161,[1]]]]]],1,1],[[0,[160,[161,[1]]]]]],0,[[[165,[[0,[160,[161,[1]]]]]],1],[[49,[[0,[160,[161,[1]]]]]]]],[[]],[[]],0,[[[165,[[0,[160,[161,[1]]]]]],1],[[0,[160,[161,[1]]]]]],[[[165,[2]]],[[165,[2]]]],[[]],[[[165,[[0,[160,[161,[1]]]]]],1,1],[[0,[160,[161,[1]]]]]],[[],[[165,[4]]]],[[[165,[[0,[160,[161,[1]]]]]],1],[[0,[160,[161,[1]]]]]],[[[165,[71]],27],28],[[]],[[[165,[[0,[160,[161,[1]]]]]],1,1],[[0,[160,[161,[1]]]]]],[[]],[[[165,[[0,[160,[161,[1]]]]]],1],[[0,[160,[161,[1]]]]]],[1,[[165,[[0,[160,[161,[1]]]]]]]],[[[165,[[0,[160,[161,[1]]]]]],1,1],[[0,[160,[161,[1]]]]]],[[]],[[],5],[[],5],[[],6],[[]],[[21,21],21],0,0,0,[[]],[[]],[[166,1],[[49,[1]]]],[[]],[[]],[1,166],[[],5],[[],5],[[],6],[[]],[21,49],0,0,0,0,0,0,0,0,0,0,[[167,167],167],[[167,167]],[[]],[[]],[167,167],[[]],[[],167],[[167,167],167],[[167,167]],[[167,167],58],[[167,27],28],[[167,27],28],[[15,15],167],[18,167],[21,167],[23,167],[14,167],[22,167],[19,167],[[]],[15,167],[24,167],[17,167],[16,167],[1,167],[20,167],[52,[[5,[167]]]],[[]],[167,167],[[167,167],167],[[167,167]],[167,167],[23,167],[[]],[[167,21],167],[[167,167],167],[[167,167]],[45,167],[[]],[[],129],[[],5],[[],5],[[],6],[[]],[[]],0,0,0,0,0,0,0,0,[[[169,[168]],[169,[168]]],[[169,[168]]]],[[[169,[[0,[168,10]]]],[169,[[0,[168,10]]]]]],[[]],[[]],[[[169,[2]]],[[169,[2]]]],[[]],[[],[[169,[4]]]],[[[169,[168]],[169,[168]]],[[169,[168]]]],[[[169,[[0,[168,10]]]],[169,[[0,[168,10]]]]]],[[[169,[53]],169],58],[[[169,[168]],27],28],[[[169,[168]],27],28],[[15,15],[[169,[168]]]],[16,[[169,[168]]]],[[]],[17,[[169,[168]]]],[20,[[169,[168]]]],[18,[[169,[168]]]],[19,[[169,[168]]]],[22,[[169,[168]]]],[14,[[169,[168]]]],[23,[[169,[168]]]],[15,[[169,[168]]]],[21,[[169,[168]]]],[1,[[169,[168]]]],[24,[[169,[168]]]],[52,[[5,[[169,[168]]]]]],[[]],[[[169,[168]]],[[169,[168]]]],[[[169,[168]],[169,[168]]],[[169,[168]]]],[[[169,[[0,[168,10]]]],[169,[[0,[168,10]]]]]],[[[169,[168]]],[[169,[168]]]],[23,[[169,[168]]]],[[]],[[[169,[168]],21],[[169,[168]]]],[[[169,[168]],[169,[168]]],[[169,[168]]]],[[[169,[[0,[168,10]]]],[169,[[0,[168,10]]]]]],[45,[[169,[168]]]],[[]],[[],129],[[],5],[[],5],[[],6],[[],23],[[]],[[]],0,0,0,0,0,0,0,[[15,15]],[[]],[21],0,0,[[]],[[]],[[]],0,0,0,0,[[[49,[[49,[21]]]],21],21],[[[49,[[49,[21]]]],21],[[54,[[49,[[49,[21]]]]]]]],0,[[170,170],170],[[170,170]],[[]],[[]],[[[170,[2]]],[[170,[2]]]],[[]],[[[170,[53]],170],58],[[]],[[[49,[49]]],170],[[170,1,1],54],[170,1],[[170,1]],[[]],[[170,170],170],[[170,170]],[170,170],[[1,1],170],[[170,170],170],[[170,170]],[[]],[170,[[49,[49]]]],[170,170],[[],5],[[],5],[[],6],[[]],[170,1],0,0,[[[172,[171]],[172,[171]]],[[172,[171]]]],[[[172,[171]],[172,[171]]]],[[]],[[]],[[[172,[2]]],[[172,[2]]]],[[]],[[[172,[53]],172],58],[[[172,[71]],27],28],[[]],[[[49,[[49,[171]]]]],[[172,[171]]]],[[[172,[171]],1,1],54],[[172,1]],[[]],[[[172,[171]],[172,[171]]],[[172,[171]]]],[[[172,[171]],[172,[171]]]],[[[172,[[0,[171,38]]]]],[[172,[[0,[171,38]]]]]],[1,[[172,[171]]]],[[[172,[171]],21],[[172,[171]]]],[[[172,[171]]],1],[[[172,[171]],[172,[171]]],[[172,[171]]]],[[[172,[171]],[172,[171]]],[[172,[171]]]],[[[172,[171]],[172,[171]]],[[172,[171]]]],[[[172,[171]],[172,[171]]]],[[]],[[[172,[171]]],[[49,[[49,[171]]]]]],[[[172,[171]]],[[172,[171]]]],[[],5],[[],5],[[],6],[1,[[172,[171]]]],[[]],[21,58],0,0,0,0,0,0,[[1,21],[[49,[21]]]],[[21,21],[[54,[21]]]],[[21,21],21],[[21,21,21],[[54,[21]]]],[[21,21,21],21],[[21,21],[[54,[21]]]],[[1,21],[[49,[21]]]],[[14,14],14],[[23,23],23],[[21,21],21],[[22,22],22],0,0,0,[[]],[[]],[[]],[[]],[[173,1],58],[1,173],[[],5],[[],5],[[],6],[[]],0,[[],58],[21,[[54,[21]]]],0,[[174,174],174],[[174,174]],[[]],[[]],[174,174],[[]],[[174,174],174],[[174,174]],[[174,174],58],[[174,27],28],[[]],[15,174],[[]],[[174,174],174],[[174,174]],[174,174],[[15,15],174],[[174,174],[[54,[128]]]],[[174,174],174],[[174,174]],[[]],[[],5],[[],5],[[],6],[[]],[[21,21,21,21],21],[[21,21,21],21],[21,21],[1,[[49,[21]]]],[[21,21],21],0,0,0,0,[[]],[[]],0,[[[175,[2]]],[[175,[2]]]],[[]],[[[175,[53]],175],58],[[[175,[71]],27],28],[[]],0,[[]],0,[[],175],0,[175,175],[175,175],[175,175],[175,175],[175,175],[175,175],[[]],0,[[],5],[[],5],[[],6],[[]],[[43,[0,[10,41]],[0,[10,41]]],58],[50,50],0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[176,[2,2]]],[[176,[2,2]]]],[[[177,[2]]],[[177,[2]]]],[[[178,[2]]],[[178,[2]]]],[[]],[[]],[[]],0,0,[[[178,[[0,[179,2]]]],43]],[[[178,[[0,[179,2]]]],43]],[[[176,[71,71]],27],28],[[[177,[71]],27],28],[[[178,[71]],27],28],[[],1],[[[176,[2]]],1],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[178,58],0,[178,1],[[[177,[179]]],180],[[[177,[179]]],1],[[1,1],176],[1,[[178,[[0,[179,2]]]]]],0,0,0,[[]],[[[176,[2]]],[[176,[2]]]],0,0,[[],1],[[[176,[2]]],1],0,[[]],[[]],[[]],0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],0,[[]],[[]],[[]],[[]],[[[176,[2]]]],0,[178,[[49,[1]]]],0,[[181,1,1],[[54,[1]]]],[[]],[[]],[[181,1,1],54],[[]],[[]],[[181,1]],[[178,1],181],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[[]],[[]],[[178,1],182],[[182,1],1],[[182,1]],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[183,183],[[]],[[183,27],28],[[]],[[183,1],1],[[]],[[183,1,1],1],[[[178,[179]],1],183],[[183,1],[[54,[1]]]],[[183,1,1],49],[[183,1,1],49],[[183,1]],[[183,1]],[[]],[[],5],[[],5],[[],6],[[]],0,[[184,1,1],[[54,[1]]]],[[]],[[]],[[]],[[184,1,1],1],[[]],[[184,1,1,1],[[54,[1]]]],[[178,1],184],[[],5],[[],5],[[],6],[[]],0,[[]],[[]],[[]],[[]],[[[57,[56]],[57,[56]],[57,[56]]],185],[[185,178],49],[[],5],[[],5],[[],6],[[]],[[178,1]],[[178,1],[[5,[52]]]],0,[[]],[[]],[[]],[[]],[[[57,[56]],[57,[56]],[57,[56]]],186],[[186,178,1],49],[[],5],[[],5],[[],6],[[]],[178],[[178,1],49],[178,49],[[178,1,1],[[49,[1]]]],0,0,0,0,0,0,0,0,[21,23],0,[[]],[[]],[187],[[]],[187,[[54,[22]]]],[[]],[[],187],[187,[[54,[22]]]],[187,[[49,[188]]]],[187,24],[187,15],[187,19],[187,23],[187,21],[187,1],[187],[[],5],[[],5],[[],6],[[]],[[187,127]],[[187,127]],0,[52,129],0,0,0,0,[[[145,[11]],[145,[11]]],[[145,[11]]]],[[]],[[]],[[[145,[2]]],[[145,[2]]]],[[]],[[[145,[34]],145],128],[[[145,[53]],145],58],[[[145,[71]],27],28],[[]],[[]],[[[145,[10]]],58],[[[145,[10]]],58],[[[145,[10]]],58],[[[145,[38]]],[[145,[38]]]],[[[145,[189]],145],[[54,[128]]]],[[[145,[47]],[145,[47]]],[[145,[47]]]],[[]],[[],5],[[],5],[[],6],[[[145,[10]]],10],[[]],[[1,1,1,1]],0,0,[[]],0,[[]],[[]],[190,190],[[]],[[190,27],28],[[]],[190,21],[[]],[[],190],[[]],[[],5],[[],5],[[],6],[[]],0,[[52,52],52]],"p":[[15,"usize"],[8,"Clone"],[3,"AddSum"],[8,"Default"],[4,"Result"],[3,"TypeId"],[3,"Affine"],[8,"One"],[8,"Zero"],[8,"Copy"],[8,"Add"],[8,"Mul"],[3,"BitXor"],[15,"u16"],[15,"i64"],[15,"i8"],[15,"i16"],[15,"i128"],[15,"isize"],[15,"u128"],[15,"u64"],[15,"u8"],[15,"u32"],[15,"i32"],[4,"DihedralValue"],[3,"Dihedral"],[3,"Formatter"],[6,"Result"],[3,"Dual"],[8,"Identity"],[8,"AlgeStruct"],[8,"BinaryOp"],[3,"Max"],[8,"Ord"],[3,"Min"],[3,"Prod"],[3,"Sum"],[8,"Neg"],[3,"Update"],[3,"UpdateSum"],[8,"Eq"],[3,"CompressorBuilder"],[8,"IntoIterator"],[3,"Compressor"],[8,"Iterator"],[8,"Signed"],[8,"Sub"],[3,"Imos1D"],[3,"Vec"],[3,"Range"],[3,"KMP"],[15,"str"],[8,"PartialEq"],[4,"Option"],[3,"Mo"],[8,"Fn"],[3,"Box"],[15,"bool"],[3,"PSP"],[3,"RollingHash"],[3,"Table"],[3,"SuffixArray"],[8,"Hash"],[3,"StaticRangeFreqQuery"],[3,"StaticRangeInversionsQuery"],[3,"TwoSat"],[3,"BinaryTrie"],[8,"Elem"],[3,"ConvexHullTrick"],[4,"Mode"],[8,"Debug"],[3,"CumulativeSum1DBuilder"],[3,"CumulativeSum1D"],[3,"CumulativeSum2DBuilder"],[3,"CumulativeSum2D"],[8,"Semigroup"],[3,"DisjointSparseTable"],[3,"DualSegmentTree"],[3,"FenwickTree"],[8,"Group"],[3,"RangeTo"],[8,"Elem"],[3,"FenwickTreeAdd"],[3,"FenwickOnFenwickBuilder"],[3,"FenwickOnFenwick"],[3,"FoldableDeque"],[3,"IntervalHeap"],[8,"Action"],[3,"LazySegmentTree"],[8,"Elem"],[3,"LazySegmentTreeCoeff"],[8,"Elem"],[3,"LazySkewHeap"],[8,"Elem"],[3,"LiChaoTree"],[4,"Mode"],[3,"MultiSet"],[3,"PartiallyPersistentUnionFind"],[3,"At"],[3,"PersistentArray"],[3,"PersistentQueue"],[3,"PersistentStack"],[3,"QwordTree"],[3,"RangeSearchTreeBuilder"],[3,"RangeSearchTree"],[3,"RollbackableVec"],[3,"SegmentTree"],[3,"SegmentTreeBeats"],[8,"Elem"],[3,"SegmentTreeLinearAdd"],[3,"SkewHeap"],[3,"SparseTable"],[4,"Mode"],[8,"Elem"],[3,"StarrySkyTree"],[3,"SuccinctDict"],[3,"UnionFind"],[3,"WaveletMatrix"],[8,"RangeBounds"],[8,"EpsValue"],[3,"EpsFloat"],[8,"Eps"],[3,"Vector"],[3,"Line"],[3,"Circle"],[15,"f64"],[8,"Display"],[4,"Ordering"],[3,"String"],[4,"CCW"],[4,"Hull"],[4,"IntersectCircleLine"],[4,"IntersectCircleSegment"],[4,"IntersectCircles"],[4,"IntersectLineSegment"],[4,"IntersectSegments"],[4,"PointPolygon"],[3,"Directed"],[8,"EdgeTrait"],[3,"Graph"],[3,"Undirected"],[3,"Edge"],[8,"Direction"],[3,"Lowlink"],[4,"NumInf"],[8,"MaxFlow"],[3,"BipartiteMatching"],[3,"Dinic"],[3,"DirectedEulerianTrail"],[3,"UndirectedEulerianTrail"],[3,"FordFulkerson"],[3,"HopcroftKarp"],[3,"Edge"],[3,"MinCostFlow"],[3,"PseudoTree"],[3,"SCC"],[3,"Position"],[3,"Grid"],[8,"FnMut"],[8,"FF"],[8,"From"],[3,"ExtLucas"],[3,"BinomialCoefficient"],[3,"Quotient"],[3,"FactorialTable"],[3,"FactorizeSieve"],[3,"ConstModInt"],[8,"Modulo"],[3,"ModInt"],[3,"Matrix"],[8,"SquareMatrixElem"],[3,"SquareMatrix"],[3,"EratosthenesSieve"],[3,"Rational"],[3,"Dice"],[3,"TreeEdge"],[3,"TreeNode"],[3,"Tree"],[8,"TreeEdgeTrait"],[8,"DoubleEndedIterator"],[3,"TreeDepthQuery"],[3,"EulerTour"],[3,"HLD"],[3,"DoublingLCA"],[3,"RerootingDP"],[3,"TreeDP"],[3,"FastIO"],[15,"char"],[8,"PartialOrd"],[3,"XorShift"],[8,"Inverse"],[8,"Foldable"],[8,"Foldable2D"],[8,"Indexable"],[8,"Assignable"],[8,"Updatable"],[8,"Pow"],[8,"Inv"],[8,"Frac"],[8,"GcdLcm"],[8,"CheckPrime"],[8,"JoinStr"],[8,"Transpose"],[8,"YesNo"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
