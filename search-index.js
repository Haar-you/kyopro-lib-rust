var searchIndex={};
searchIndex["haar_kyopro_lib_rust"] = {"doc":"","i":[[0,"algebra","haar_kyopro_lib_rust","代数的構造",null,null],[0,"one_zero","haar_kyopro_lib_rust::algebra","",null,null],[8,"Zero","haar_kyopro_lib_rust::algebra::one_zero","",null,null],[16,"Output","","",0,null],[10,"zero","","",0,[[]]],[8,"One","","",null,null],[16,"Output","","",1,null],[10,"one","","",1,[[]]],[0,"traits","haar_kyopro_lib_rust::algebra","",null,null],[8,"AlgeStruct","haar_kyopro_lib_rust::algebra::traits","",null,null],[16,"Output","","",2,null],[8,"BinaryOp","","",null,null],[10,"op","","",3,[[["self"]]]],[8,"Identity","","",null,null],[10,"id","","",4,[[["self"]]]],[8,"Inverse","","",null,null],[10,"inv","","",5,[[["self"]]]],[8,"Commutative","","",null,null],[8,"Associative","","",null,null],[8,"Idempotence","","",null,null],[8,"Semigroup","","",null,null],[8,"Monoid","","",null,null],[8,"Group","","",null,null],[0,"affine","haar_kyopro_lib_rust::algebra","",null,null],[3,"Affine","haar_kyopro_lib_rust::algebra::affine","",null,null],[11,"new","","",6,[[],["self"]]],[0,"bitxor","haar_kyopro_lib_rust::algebra","",null,null],[3,"BitXor","haar_kyopro_lib_rust::algebra::bitxor","",null,null],[11,"new","","",7,[[],["self"]]],[0,"dihedral","haar_kyopro_lib_rust::algebra","",null,null],[3,"Dihedral","haar_kyopro_lib_rust::algebra::dihedral","",null,null],[4,"DihedralValue","","",null,null],[13,"R","","",8,null],[13,"S","","",8,null],[11,"new","","",9,[[["usize"]],["self"]]],[0,"dual","haar_kyopro_lib_rust::algebra","",null,null],[3,"Dual","haar_kyopro_lib_rust::algebra::dual","",null,null],[11,"new","","",10,[[["s"]],["self"]]],[0,"max","haar_kyopro_lib_rust::algebra","",null,null],[3,"Max","haar_kyopro_lib_rust::algebra::max","",null,null],[11,"new","","",11,[[],["self"]]],[0,"min","haar_kyopro_lib_rust::algebra","",null,null],[3,"Min","haar_kyopro_lib_rust::algebra::min","",null,null],[11,"new","","",12,[[],["self"]]],[0,"prod","haar_kyopro_lib_rust::algebra","",null,null],[3,"Prod","haar_kyopro_lib_rust::algebra::prod","",null,null],[11,"new","","",13,[[],["self"]]],[0,"sum","haar_kyopro_lib_rust::algebra","",null,null],[3,"Sum","haar_kyopro_lib_rust::algebra::sum","",null,null],[11,"new","","",14,[[],["self"]]],[0,"update","haar_kyopro_lib_rust::algebra","",null,null],[3,"Update","haar_kyopro_lib_rust::algebra::update","",null,null],[11,"new","","",15,[[],["self"]]],[0,"action","haar_kyopro_lib_rust::algebra","",null,null],[8,"Action","haar_kyopro_lib_rust::algebra::action","",null,null],[16,"FType","","",16,null],[16,"UType","","",16,null],[10,"fold_id","","",16,[[["self"]]]],[10,"fold","","",16,[[["self"]]]],[10,"update_id","","",16,[[["self"]]]],[10,"update","","",16,[[["self"]]]],[10,"convert","","",16,[[["usize"],["self"]]]],[0,"add_sum","haar_kyopro_lib_rust::algebra","",null,null],[3,"AddSum","haar_kyopro_lib_rust::algebra::add_sum","",null,null],[11,"new","","",17,[[],["self"]]],[0,"update_sum","haar_kyopro_lib_rust::algebra","",null,null],[3,"UpdateSum","haar_kyopro_lib_rust::algebra::update_sum","",null,null],[11,"new","","",18,[[],["self"]]],[0,"algo","haar_kyopro_lib_rust","",null,null],[0,"bsearch","haar_kyopro_lib_rust::algo","二分探索",null,null],[5,"lower_bound","haar_kyopro_lib_rust::algo::bsearch","x以上となる最小のindexを求める。",null,[[["t"]],["usize"]]],[5,"upper_bound","","xを超える最小のindexを求める。",null,[[["t"]],["usize"]]],[5,"equal_range","","lower_bound, upper_boundの組を求める。",null,[[["t"]]]],[0,"compressor","haar_kyopro_lib_rust::algo","座標圧縮",null,null],[3,"Compressor","haar_kyopro_lib_rust::algo::compressor","",null,null],[3,"CompressorBuilder","","",null,null],[11,"index","","`value`が何番目の値(0-index)かを返す。 # Complexity Time complexity…",19,[[["t"],["self"]],["usize"]]],[11,"get","","`i`番目の値を返す。 # Complexity Time complexity $O(1)$",19,[[["self"],["usize"]],["t"]]],[11,"compress","","",19,[[["self"]]]],[11,"decompress","","",19,[[["self"]]]],[11,"size","","",19,[[["self"]],["usize"]]],[11,"new","","",20,[[],["self"]]],[11,"add","","",20,[[["self"],["t"]]]],[11,"add_vec","","",20,[[["self"]]]],[11,"build","","",20,[[],["compressor"]]],[0,"enumerate_bitset","haar_kyopro_lib_rust::algo","",null,null],[0,"gray_code","haar_kyopro_lib_rust::algo::enumerate_bitset","",null,null],[5,"gray_code","haar_kyopro_lib_rust::algo::enumerate_bitset::gray_code","",null,[[["u32"]]]],[0,"subset_asc","haar_kyopro_lib_rust::algo::enumerate_bitset","",null,null],[5,"subset_asc","haar_kyopro_lib_rust::algo::enumerate_bitset::subset_asc","",null,[[["u32"]]]],[0,"subset_between","haar_kyopro_lib_rust::algo::enumerate_bitset","",null,null],[5,"subset_between","haar_kyopro_lib_rust::algo::enumerate_bitset::subset_between","",null,[[["u32"]]]],[0,"subset_desc","haar_kyopro_lib_rust::algo::enumerate_bitset","",null,null],[5,"subset_desc","haar_kyopro_lib_rust::algo::enumerate_bitset::subset_desc","",null,[[["u32"]]]],[0,"subset_size_k","haar_kyopro_lib_rust::algo::enumerate_bitset","",null,null],[5,"subset_size_k","haar_kyopro_lib_rust::algo::enumerate_bitset::subset_size_k","",null,[[["u32"]]]],[0,"superset_asc","haar_kyopro_lib_rust::algo::enumerate_bitset","",null,null],[5,"super_asc","haar_kyopro_lib_rust::algo::enumerate_bitset::superset_asc","",null,[[["u32"]]]],[0,"superset_desc","haar_kyopro_lib_rust::algo::enumerate_bitset","",null,null],[5,"superset_desc","haar_kyopro_lib_rust::algo::enumerate_bitset::superset_desc","",null,[[["u32"]]]],[0,"imos_1d","haar_kyopro_lib_rust::algo","",null,null],[3,"Imos1D","haar_kyopro_lib_rust::algo::imos_1d","",null,null],[11,"new","","",21,[[["usize"]],["self"]]],[11,"update","","",21,[[["range",["usize"]],["usize"],["self"],["t"]]]],[11,"build","","",21,[[],["vec"]]],[0,"interval_scheduling","haar_kyopro_lib_rust::algo","区間スケジューリング問題",null,null],[5,"interval_scheduling","haar_kyopro_lib_rust::algo::interval_scheduling","半開区間の集合から共通部分を含まないような部分集合のうち、要素数が最大となるものを求める。 # Complexity…",null,[[],[["usize"],["vec",["usize"]]]]],[0,"inversion_number","haar_kyopro_lib_rust::algo","転倒数",null,null],[5,"inversion_number","haar_kyopro_lib_rust::algo::inversion_number","数列の転倒数を計算する。 # Complexity Time complexity $O(n \\log(n))$",null,[[],["u64"]]],[0,"knapsack","haar_kyopro_lib_rust::algo","ナップサック問題",null,null],[0,"limited","haar_kyopro_lib_rust::algo::knapsack","",null,null],[5,"knapsack_limited","haar_kyopro_lib_rust::algo::knapsack::limited","個数制限付きナップサック問題 # Complexity Time complexity O(n cap…",null,[[["usize"]],["t"]]],[0,"small_quantity","haar_kyopro_lib_rust::algo::knapsack","",null,null],[5,"knapsack_small_quantity","haar_kyopro_lib_rust::algo::knapsack::small_quantity","要素数が小さいナップサック問題 # Complexity Time complexity O(n * 2 ^ (n…",null,[[["w"]],["v"]]],[0,"small_value","haar_kyopro_lib_rust::algo::knapsack","",null,null],[5,"knapsack_small_value","haar_kyopro_lib_rust::algo::knapsack::small_value","価値の総和が小さいナップサック問題 # Complexity Time complexity O(n sum(vs))",null,[[["u64"]],["usize"]]],[0,"small_weight","haar_kyopro_lib_rust::algo::knapsack","",null,null],[5,"knapsack_small_weight","haar_kyopro_lib_rust::algo::knapsack::small_weight","容量が小さいナップサック問題 # Complexity Time complexity O(n cap)",null,[[["usize"]],["t"]]],[0,"unlimited","haar_kyopro_lib_rust::algo::knapsack","",null,null],[5,"knapsack_unlimited","haar_kyopro_lib_rust::algo::knapsack::unlimited","個数制限無しナップサック問題 # Complexity Time complexity O(n cap)",null,[[["usize"]],["t"]]],[0,"lcs","haar_kyopro_lib_rust::algo","最長共通部分列",null,null],[5,"lcs","haar_kyopro_lib_rust::algo::lcs","列a, bの最長共通部分列の一つを求める。",null,[[],[["vec"],["copy"],["partialeq"]]]],[0,"lis","haar_kyopro_lib_rust::algo","最長増加部分列",null,null],[5,"lis","haar_kyopro_lib_rust::algo::lis","列の最長増加部分列の一つを求める。",null,[[],[["usize"],["vec",["usize"]]]]],[0,"max_rect","haar_kyopro_lib_rust::algo","",null,null],[5,"max_rect_in_histogram","haar_kyopro_lib_rust::algo::max_rect","ヒストグラム中の最大面積長方形の面積を計算する。",null,[[],["t"]]],[5,"max_rect","","グリッド上の最大面積長方形の面積を計算する。",null,[[["copy"],["partialeq"]],["usize"]]],[0,"merge","haar_kyopro_lib_rust::algo","",null,null],[5,"inplace_merge_by","haar_kyopro_lib_rust::algo::merge","",null,[[["usize"]]]],[5,"inplace_merge","","",null,[[["usize"]]]],[5,"merge","","",null,[[],[["vec"],["ord"],["copy"]]]],[0,"mo","haar_kyopro_lib_rust::algo","",null,null],[3,"Mo","haar_kyopro_lib_rust::algo::mo","",null,null],[11,"new","","",22,[[["usize"],["box"]],["self"]]],[11,"add","","",22,[[["self"],["usize"]]]],[11,"run","","",22,[[]]],[0,"permutation","haar_kyopro_lib_rust::algo","",null,null],[5,"next_permutation","haar_kyopro_lib_rust::algo::permutation","",null,[[],["bool"]]],[5,"prev_permutation","","",null,[[],["bool"]]],[5,"permutations","","",null,[[["vec"],["ord"],["clone"]]]],[0,"sliding_window","haar_kyopro_lib_rust::algo","スライド最小値",null,null],[5,"sliding_minimum","haar_kyopro_lib_rust::algo::sliding_window","配列のすべての長さkの連続部分列について、その最小値を列挙する。 # Complexity Time…",null,[[["usize"]],[["vec"],["ord"],["copy"]]]],[5,"sliding_maximum","","",null,[[["usize"]],[["vec"],["ord"],["copy"]]]],[0,"subset_sum","haar_kyopro_lib_rust::algo","部分和問題",null,null],[0,"count","haar_kyopro_lib_rust::algo::subset_sum","",null,null],[5,"subset_sum","haar_kyopro_lib_rust::algo::subset_sum::count","部分和問題 (和を達成する組み合わせ数を返す)",null,[[["usize"]],["vec"]]],[0,"limited","haar_kyopro_lib_rust::algo::subset_sum","",null,null],[5,"subset_sum_limited","haar_kyopro_lib_rust::algo::subset_sum::limited","各要素に最大使用回数が定められている部分和問題",null,[[["usize"]],[["vec",["bool"]],["bool"]]]],[0,"two_sat","haar_kyopro_lib_rust::algo","",null,null],[3,"TwoSat","haar_kyopro_lib_rust::algo::two_sat","",null,null],[11,"new","","",23,[[["usize"]],["self"]]],[11,"add_if","","",23,[[["isize"],["self"]]]],[11,"add_or","","",23,[[["isize"],["self"]]]],[11,"not_coexist","","",23,[[["isize"],["self"]]]],[11,"solve","","",23,[[["self"]],[["vec",["bool"]],["option",["vec"]]]]],[0,"static_range_inversions_query","haar_kyopro_lib_rust::algo","",null,null],[3,"StaticRangeInversionsQuery","haar_kyopro_lib_rust::algo::static_range_inversions_query","",null,null],[11,"new","","",24,[[],["self"]]],[11,"add","","",24,[[["self"],["usize"]]]],[11,"solve","","",24,[[["self"]],[["vec",["u64"]],["u64"]]]],[0,"ds","haar_kyopro_lib_rust","データ構造",null,null],[0,"traits","haar_kyopro_lib_rust::ds","",null,null],[8,"Foldable","haar_kyopro_lib_rust::ds::traits","",null,null],[16,"Output","","",25,null],[10,"fold","","",25,[[["idx"],["self"]]]],[8,"FoldableMut","","",null,null],[16,"Output","","",26,null],[10,"fold","","",26,[[["self"],["idx"]]]],[8,"Assignable","","",null,null],[16,"Value","","",27,null],[10,"assign","","",27,[[["self"],["idx"]]]],[8,"Updatable","","",null,null],[16,"Value","","",28,null],[10,"update","","",28,[[["self"],["idx"]]]],[8,"IndexableMut","","",null,null],[16,"Output","","",29,null],[10,"get","","",29,[[["self"],["idx"]]]],[0,"unionfind","haar_kyopro_lib_rust::ds","",null,null],[3,"UnionFind","haar_kyopro_lib_rust::ds::unionfind","",null,null],[11,"new","","",30,[[["usize"]],["self"]]],[11,"root_of","","",30,[[["self"],["usize"]],["usize"]]],[11,"is_same","","",30,[[["self"],["usize"]],["bool"]]],[11,"merge","","",30,[[["self"],["usize"]],["usize"]]],[11,"size_of","","",30,[[["self"],["usize"]],["usize"]]],[11,"count_groups","","",30,[[["self"]],["usize"]]],[11,"get_groups","","",30,[[["self"]],[["vec",["vec"]],["vec",["usize"]]]]],[0,"dual_segtree","haar_kyopro_lib_rust::ds","",null,null],[3,"DualSegmentTree","haar_kyopro_lib_rust::ds::dual_segtree","",null,null],[11,"new","","",31,[[["m"],["usize"]],["self"]]],[11,"index","","",31,[[["self"],["usize"]],["t"]]],[11,"from_vec","","",31,[[["self"]]]],[11,"to_vec","","",31,[[["self"]],["vec"]]],[0,"fenwick","haar_kyopro_lib_rust::ds","",null,null],[3,"FenwickTree","haar_kyopro_lib_rust::ds::fenwick","",null,null],[11,"new","","",32,[[["usize"],["g"]],["self"]]],[0,"fenwick_add","haar_kyopro_lib_rust::ds","",null,null],[3,"FenwickTreeAdd","haar_kyopro_lib_rust::ds::fenwick_add","",null,null],[11,"new","","",33,[[["usize"],["t"]],["self"]]],[0,"lazy_segtree","haar_kyopro_lib_rust::ds","",null,null],[3,"LazySegmentTree","haar_kyopro_lib_rust::ds::lazy_segtree","",null,null],[11,"new","","",34,[[["a"],["usize"]],["self"]]],[0,"lazy_segtree_coeff","haar_kyopro_lib_rust::ds","",null,null],[3,"LazySegmentTreeCoeff","haar_kyopro_lib_rust::ds::lazy_segtree_coeff","係数乗算付き区間加算区間総和遅延セグ木",null,null],[11,"new","","",35,[[["vec"],["usize"]],["self"]]],[11,"init_with_vec","","",35,[[["self"],["vec"]]]],[0,"segtree","haar_kyopro_lib_rust::ds","",null,null],[3,"SegmentTree","haar_kyopro_lib_rust::ds::segtree","",null,null],[11,"new","","",36,[[["m"],["usize"]],["self"]]],[0,"segtree_linear_add","haar_kyopro_lib_rust::ds","",null,null],[3,"SegmentTreeLinearAdd","haar_kyopro_lib_rust::ds::segtree_linear_add","",null,null],[11,"new","","",37,[[["usize"],["t"]],["self"]]],[11,"update","","",37,[[["range",["usize"]],["usize"],["self"]]]],[0,"starry_sky_tree","haar_kyopro_lib_rust::ds","",null,null],[3,"StarrySkyTree","haar_kyopro_lib_rust::ds::starry_sky_tree","区間加算・区間Max(Min)を処理できるデータ構造",null,null],[4,"Mode","","",null,null],[13,"Max","","",38,null],[13,"Min","","",38,null],[11,"new","","",39,[[["usize"],["mode"]],["self"]]],[0,"cumulative_sum_1d","haar_kyopro_lib_rust::ds","",null,null],[3,"CumulativeSum1D","haar_kyopro_lib_rust::ds::cumulative_sum_1d","",null,null],[3,"CumulativeSum1DBuilder","","",null,null],[11,"new","","",40,[[["usize"],["g"]],["self"]]],[11,"update","","",40,[[["self"],["usize"],["t"]],["self"]]],[11,"build","","",40,[[],["cumulativesum1d"]]],[0,"persistent_array","haar_kyopro_lib_rust::ds","",null,null],[3,"PersistentArray","haar_kyopro_lib_rust::ds::persistent_array","",null,null],[11,"new","","",41,[[["usize"],["t"]],["self"]]],[11,"set","","",41,[[["t"],["self"],["usize"]],["self"]]],[11,"get","","",41,[[["self"],["usize"]],["t"]]],[0,"rollbackable_vector","haar_kyopro_lib_rust::ds","",null,null],[3,"RollbackableVec","haar_kyopro_lib_rust::ds::rollbackable_vector","",null,null],[11,"new","","",42,[[],["self"]]],[11,"push","","",42,[[["self"],["t"]]]],[11,"pop","","",42,[[["self"]],["option"]]],[11,"assign","","",42,[[["self"],["usize"],["t"]]]],[11,"rollback","","",42,[[["self"]],["bool"]]],[11,"len","","",42,[[["self"]],["usize"]]],[11,"is_empty","","",42,[[["self"]],["bool"]]],[0,"range_search_tree","haar_kyopro_lib_rust::ds","",null,null],[3,"RangeSearchTree","haar_kyopro_lib_rust::ds::range_search_tree","",null,null],[3,"RangeSearchTreeBuilder","","",null,null],[11,"get","","",43,[[["self"]],["vec"]]],[11,"new","","",44,[[],["self"]]],[11,"add","","",44,[[["i64"],["self"]]]],[11,"build","","",44,[[],["rangesearchtree"]]],[0,"persistent_queue","haar_kyopro_lib_rust::ds","",null,null],[3,"PersistentQueue","haar_kyopro_lib_rust::ds::persistent_queue","",null,null],[11,"new","","",45,[[["t"]],["self"]]],[11,"push","","",45,[[["self"],["t"]],["self"]]],[11,"pop","","",45,[[["self"]],["option"]]],[11,"front","","",45,[[["self"]],[["t"],["option"]]]],[11,"back","","",45,[[["self"]],[["t"],["option"]]]],[11,"is_empty","","",45,[[["self"]],["bool"]]],[11,"len","","",45,[[["self"]],["usize"]]],[0,"swag","haar_kyopro_lib_rust::ds","",null,null],[3,"SlidingWindowAggregation","haar_kyopro_lib_rust::ds::swag","",null,null],[11,"new","","",46,[[["s"]],["self"]]],[11,"fold","","",46,[[["self"]],["option"]]],[11,"push","","",46,[[["self"],["t"]]]],[11,"pop","","",46,[[["self"]]]],[0,"disjoint_sparse_table","haar_kyopro_lib_rust::ds","",null,null],[3,"DisjointSparseTable","haar_kyopro_lib_rust::ds::disjoint_sparse_table","",null,null],[11,"new","","",47,[[["vec"],["s"]],["self"]]],[0,"sparse_table","haar_kyopro_lib_rust::ds","",null,null],[3,"SparseTable","haar_kyopro_lib_rust::ds::sparse_table","",null,null],[11,"new","","",48,[[["a"],["vec"]],["self"]]],[0,"lazy_skew_heap","haar_kyopro_lib_rust::ds","",null,null],[3,"LazySkewHeap","haar_kyopro_lib_rust::ds::lazy_skew_heap","",null,null],[11,"new","","",49,[[],["self"]]],[11,"meld","","",49,[[["lazyskewheap"],["self"]]]],[11,"push","","",49,[[["self"],["t"]]]],[11,"peek","","",49,[[["self"]],[["t"],["option"]]]],[11,"pop","","",49,[[["self"]],["option"]]],[11,"add","","",49,[[["self"],["t"]]]],[11,"len","","",49,[[["self"]],["usize"]]],[11,"is_empty","","",49,[[["self"]],["bool"]]],[0,"skew_heap","haar_kyopro_lib_rust::ds","",null,null],[3,"SkewHeap","haar_kyopro_lib_rust::ds::skew_heap","",null,null],[11,"new","","",50,[[],["self"]]],[11,"meld","","",50,[[["self"],["skewheap"]]]],[11,"push","","",50,[[["self"],["t"]]]],[11,"peek","","",50,[[["self"]],[["t"],["option"]]]],[11,"pop","","",50,[[["self"]],["option"]]],[11,"len","","",50,[[["self"]],["usize"]]],[11,"is_empty","","",50,[[["self"]],["bool"]]],[0,"persistent_stack","haar_kyopro_lib_rust::ds","",null,null],[3,"PersistentStack","haar_kyopro_lib_rust::ds::persistent_stack","",null,null],[11,"new","","",51,[[],["self"]]],[11,"peek","","",51,[[["self"]],[["t"],["option"]]]],[11,"push","","",51,[[["self"],["t"]],["self"]]],[11,"pop","","",51,[[["self"]],["option"]]],[11,"iter","","",51,[[["self"]]]],[0,"cht","haar_kyopro_lib_rust::ds","",null,null],[3,"ConvexHullTrick","haar_kyopro_lib_rust::ds::cht","",null,null],[4,"Mode","","",null,null],[13,"Max","","",52,null],[13,"Min","","",52,null],[11,"new","","",53,[[["mode"]],["self"]]],[11,"add","","",53,[[["self"]]]],[11,"query","","",53,[[["self"],["t"]],["t"]]],[0,"li_chao","haar_kyopro_lib_rust::ds","",null,null],[3,"LiChaoTree","haar_kyopro_lib_rust::ds::li_chao","",null,null],[4,"Mode","","",null,null],[13,"Max","","",54,null],[13,"Min","","",54,null],[11,"new","","",55,[[["mode"]],["self"]]],[11,"add_line","","",55,[[["self"]]]],[11,"add_segment","","",55,[[["self"]]]],[11,"query","","",55,[[["self"],["t"]],["option"]]],[0,"binary_trie","haar_kyopro_lib_rust::ds","",null,null],[3,"BinaryTrie","haar_kyopro_lib_rust::ds::binary_trie","",null,null],[11,"new","","",56,[[],["self"]]],[11,"len","","",56,[[["self"]],["usize"]]],[11,"is_empty","","",56,[[["self"]],["bool"]]],[11,"count","","",56,[[["self"],["u64"]],["usize"]]],[11,"insert","","",56,[[["self"],["u64"]],["usize"]]],[11,"erase","","",56,[[["self"],["u64"]],[["option",["usize"]],["usize"]]]],[11,"min","","",56,[[["self"],["u64"]],[["u64"],["option",["u64"]]]]],[11,"max","","",56,[[["self"],["u64"]],[["u64"],["option",["u64"]]]]],[11,"lower_bound","","",56,[[["self"],["u64"]],["usize"]]],[11,"upper_bound","","",56,[[["self"],["u64"]],["usize"]]],[11,"to_vec","","",56,[[["self"]],[["vec",["u64"]],["u64"]]]],[0,"succinct_dict","haar_kyopro_lib_rust::ds","",null,null],[3,"SuccinctDict","haar_kyopro_lib_rust::ds::succinct_dict","",null,null],[11,"new","","",57,[[["vec",["bool"]],["bool"]],["self"]]],[11,"len","","",57,[[["self"]],["usize"]]],[11,"is_empty","","",57,[[["self"]],["bool"]]],[11,"rank","","[0, index) に含まれる`b`の個数",57,[[["bool"],["self"],["usize"]],["u32"]]],[11,"count","","[l, r) に含まれる`b`の個数",57,[[["range",["usize"]],["usize"],["self"],["bool"]],["u32"]]],[11,"access","","",57,[[["self"],["usize"]],["u32"]]],[11,"select","","nth(1-indexed)番目の`b`の位置",57,[[["bool"],["self"],["usize"]],[["option",["usize"]],["usize"]]]],[0,"geom","haar_kyopro_lib_rust","",null,null],[3,"EpsFloat","haar_kyopro_lib_rust::geom","",null,null],[12,"0","","",58,null],[3,"Vector","","",null,null],[12,"0","","",59,null],[12,"1","","",59,null],[3,"Line","","",null,null],[12,"from","","",60,null],[12,"to","","",60,null],[3,"Circle","","",null,null],[12,"center","","",61,null],[12,"radius","","",61,null],[0,"ccw","","",null,null],[4,"CCW","haar_kyopro_lib_rust::geom::ccw","",null,null],[13,"ONLINE_BACK","","",62,null],[13,"COUNTER_CLOCKWISE","","",62,null],[13,"ON_SEGMENT","","",62,null],[13,"CLOCKWISE","","",62,null],[13,"ONLINE_FRONT","","",62,null],[5,"ccw","","",null,[[["vector"],["eps"]],["ccw"]]],[11,"to_value","","",62,[[],["i32"]]],[0,"intersect_circle_line","haar_kyopro_lib_rust::geom","",null,null],[4,"IntersectCircleLine","haar_kyopro_lib_rust::geom::intersect_circle_line","",null,null],[13,"OUTSIDE","","",63,null],[13,"TANGENT","","",63,null],[13,"CROSSED","","",63,null],[5,"intersect_circle_line","","",null,[[["line"],["eps"],["circle"]]]],[0,"intersect_circle_segment","haar_kyopro_lib_rust::geom","",null,null],[4,"IntersectCircleSegment","haar_kyopro_lib_rust::geom::intersect_circle_segment","",null,null],[13,"INSIDE","","",64,null],[13,"OUTSIDE","","",64,null],[13,"TANGENT","","",64,null],[13,"ONE_CROSSPOINT","","",64,null],[13,"TWO_CROSSPOINTS","","",64,null],[5,"intersect_circle_segment","","",null,[[["line"],["eps"],["circle"]]]],[0,"intersect_circles","haar_kyopro_lib_rust::geom","",null,null],[4,"IntersectCircles","haar_kyopro_lib_rust::geom::intersect_circles","",null,null],[13,"SAME","","",65,null],[13,"INSIDE","","",65,null],[13,"INSCRIBED","","",65,null],[13,"INTERSECTED","","",65,null],[13,"CIRCUMSCRIBED","","",65,null],[13,"OUTSIDE","","",65,null],[5,"intersect_circles","","",null,[[["eps"],["circle"]]]],[11,"num_common_tangent","","",65,[[],[["option",["u32"]],["u32"]]]],[0,"intersect_line_segment","haar_kyopro_lib_rust::geom","",null,null],[4,"IntersectLineSegment","haar_kyopro_lib_rust::geom::intersect_line_segment","",null,null],[13,"LEFTSIDE","","",66,null],[13,"RIGHTSIDE","","",66,null],[13,"OVERLAPPED","","",66,null],[13,"CROSSED","","",66,null],[5,"intersect_line_segment","","",null,[[["line"],["eps"]]]],[0,"intersect_segments","haar_kyopro_lib_rust::geom","",null,null],[4,"IntersectSegments","haar_kyopro_lib_rust::geom::intersect_segments","",null,null],[13,"INTERSECTED","","",67,null],[13,"OVERLAPPED","","",67,null],[13,"NOT_INTERSECTED","","",67,null],[13,"SAME","","",67,null],[5,"intersect_segments","","",null,[[["line"],["eps"]]]],[0,"dist_line_point","haar_kyopro_lib_rust::geom","",null,null],[5,"dist_line_point","haar_kyopro_lib_rust::geom::dist_line_point","",null,[[["vector"],["line"],["eps"]],["eps"]]],[0,"dist_segment_point","haar_kyopro_lib_rust::geom","",null,null],[5,"dist_segment_point","haar_kyopro_lib_rust::geom::dist_segment_point","",null,[[["vector"],["line"],["eps"]],["eps"]]],[0,"dist_segments","haar_kyopro_lib_rust::geom","",null,null],[5,"dist_segments","haar_kyopro_lib_rust::geom::dist_segments","",null,[[["line"],["eps"]],["eps"]]],[0,"area_intersection_circle_polygon","haar_kyopro_lib_rust::geom","",null,null],[5,"area_intersection_circle_polygon","haar_kyopro_lib_rust::geom::area_intersection_circle_polygon","",null,[[["eps"],["circle"]],["eps"]]],[0,"area_intersection_circles","haar_kyopro_lib_rust::geom","",null,null],[5,"area_intersection_circles","haar_kyopro_lib_rust::geom::area_intersection_circles","",null,[[["eps"],["circle"]],["eps"]]],[0,"area_polygon","haar_kyopro_lib_rust::geom","",null,null],[5,"area_polygon","haar_kyopro_lib_rust::geom::area_polygon","",null,[[],["eps"]]],[0,"convex","haar_kyopro_lib_rust::geom","",null,null],[5,"is_convex","haar_kyopro_lib_rust::geom::convex","",null,[[],["bool"]]],[0,"convex_cut","haar_kyopro_lib_rust::geom","",null,null],[5,"convex_cut","haar_kyopro_lib_rust::geom::convex_cut","",null,[[["eps"],["line"]]]],[0,"convex_diameter","haar_kyopro_lib_rust::geom","",null,null],[5,"convex_diameter","haar_kyopro_lib_rust::geom::convex_diameter","",null,[[["vector"],["vec",["vector"]]],["eps"]]],[0,"convex_hull","haar_kyopro_lib_rust::geom","",null,null],[4,"Hull","haar_kyopro_lib_rust::geom::convex_hull","",null,null],[13,"Upper","","",68,null],[13,"Lower","","",68,null],[5,"half_hull","","",null,[[["vector"],["vec",["vector"]],["hull"]],[["vector"],["vec",["vector"]]]]],[5,"convex_hull","","",null,[[["vector"],["vec",["vector"]]],[["vector"],["vec",["vector"]]]]],[0,"point_in_polygon","haar_kyopro_lib_rust::geom","",null,null],[4,"PointPolygon","haar_kyopro_lib_rust::geom::point_in_polygon","",null,null],[13,"INCLUSION","","",69,null],[13,"ON_SEGMENT","","",69,null],[13,"EXCLUSION","","",69,null],[5,"point_in_polygon","","",null,[[["vector"],["eps"]],["pointpolygon"]]],[0,"circumcircle","haar_kyopro_lib_rust::geom","",null,null],[5,"circumcircle","haar_kyopro_lib_rust::geom::circumcircle","",null,[[["vector"],["eps"]],[["eps"],["circle"]]]],[0,"incircle","haar_kyopro_lib_rust::geom","",null,null],[5,"incircle","haar_kyopro_lib_rust::geom::incircle","",null,[[["vector"],["eps"]],[["eps"],["circle"]]]],[0,"common_tangent_circles","haar_kyopro_lib_rust::geom","",null,null],[5,"common_tangent_circles","haar_kyopro_lib_rust::geom::common_tangent_circles","",null,[[["debug"],["eps"],["circle"]],[["vector"],["vec",["vector"]]]]],[0,"tangent_circle","haar_kyopro_lib_rust::geom","",null,null],[5,"tangent_circle","haar_kyopro_lib_rust::geom::tangent_circle","",null,[[["vector"],["eps"],["circle"]],[["vector"],["vec",["vector"]]]]],[0,"closest_pair","haar_kyopro_lib_rust::geom","",null,null],[5,"closest_pair","haar_kyopro_lib_rust::geom::closest_pair","",null,[[["vector"],["vec",["vector"]]],["option"]]],[8,"EpsValue","haar_kyopro_lib_rust::geom","",null,null],[10,"eps","","",70,[[],["f64"]]],[8,"Eps","","",null,null],[10,"eps","","",71,[[],["f64"]]],[10,"sin","","",71,[[],["self"]]],[10,"cos","","",71,[[],["self"]]],[10,"tan","","",71,[[],["self"]]],[10,"acos","","",71,[[],["self"]]],[10,"abs","","",71,[[],["self"]]],[10,"sqrt","","",71,[[],["self"]]],[10,"atan2","","",71,[[],["self"]]],[10,"max","","",71,[[],["self"]]],[10,"min","","",71,[[],["self"]]],[10,"sq","","",71,[[],["self"]]],[11,"new","","",58,[[["f64"]],["self"]]],[11,"abs","","",59,[[],["t"]]],[11,"abs_sq","","",59,[[],["t"]]],[11,"dot","","",59,[[],["t"]]],[11,"cross","","",59,[[],["t"]]],[11,"unit","","",59,[[],["self"]]],[11,"normal","","",59,[[],["self"]]],[11,"angle","","",59,[[],["t"]]],[11,"polar","","",59,[[["t"]],["self"]]],[11,"angle_diff","","",59,[[],["t"]]],[11,"new","","",60,[[["vector"]],["self"]]],[11,"unit","","",60,[[],["vector"]]],[11,"normal","","",60,[[],["vector"]]],[11,"diff","","",60,[[],["vector"]]],[11,"abs","","",60,[[],["t"]]],[11,"dot","","",60,[[],["t"]]],[11,"cross","","",60,[[],["t"]]],[11,"projection","","",60,[[["vector"]],["vector"]]],[11,"reflection","","",60,[[["vector"]],["vector"]]],[11,"is_orthogonal","","",60,[[],["bool"]]],[11,"is_parallel","","",60,[[],["bool"]]],[11,"new","","",61,[[["vector"],["t"]],["self"]]],[0,"graph","haar_kyopro_lib_rust","グラフ一般に関するもの",null,null],[3,"Edge","haar_kyopro_lib_rust::graph","",null,null],[12,"from","","",72,null],[12,"to","","",72,null],[12,"weight","","",72,null],[12,"index","","",72,null],[3,"Graph","","",null,null],[12,"edges","","",73,null],[0,"articulation_points","","関節点の列挙",null,null],[5,"articulation_points","haar_kyopro_lib_rust::graph::articulation_points","",null,[[["lowlink"]],[["usize"],["vec",["usize"]]]]],[0,"bellman_ford","haar_kyopro_lib_rust::graph","負閉路を持つグラフの最短経路 (Bellman-Ford)",null,null],[4,"BFResult","haar_kyopro_lib_rust::graph::bellman_ford","",null,null],[13,"NegInf","","",74,null],[13,"Value","","",74,null],[13,"PosInf","","",74,null],[5,"bellman_ford","","",null,[[["usize"],["graph"]],[["vec",["bfresult"]],["bfresult"]]]],[0,"bipartite","haar_kyopro_lib_rust::graph","二部グラフ判定",null,null],[5,"check_bipartite","haar_kyopro_lib_rust::graph::bipartite","",null,[[["graph"]],[["option"],["vec",["option"]]]]],[0,"bridges","haar_kyopro_lib_rust::graph","橋の列挙",null,null],[5,"bridges","haar_kyopro_lib_rust::graph::bridges","橋の列挙",null,[[["lowlink"]],["vec"]]],[0,"chinese_postman","haar_kyopro_lib_rust::graph","中国人郵便配達問題",null,null],[5,"chinese_postman_problem","haar_kyopro_lib_rust::graph::chinese_postman","Time complexity O(V ^ 2 * 2 ^ V)",null,[[["graph"]],["t"]]],[0,"detect_cycle","haar_kyopro_lib_rust::graph","有向グラフの閉路検出",null,null],[5,"detect_cycle","haar_kyopro_lib_rust::graph::detect_cycle","",null,[[["graph"]],[["option",["vec"]],["vec"]]]],[0,"dijkstra","haar_kyopro_lib_rust::graph","非負重み付き最短経路 (Dijkstra)",null,null],[5,"dijkstra","haar_kyopro_lib_rust::graph::dijkstra","Time complexity O((E + V) log V)",null,[[["graph"]],[["option"],["vec",["option"]]]]],[0,"eulerian","haar_kyopro_lib_rust::graph","(準)Eulerグラフの判定",null,null],[0,"directed","haar_kyopro_lib_rust::graph::eulerian","",null,null],[3,"DirectedEulerianTrail","haar_kyopro_lib_rust::graph::eulerian::directed","",null,null],[11,"new","","",75,[[["usize"]],["self"]]],[11,"add_edge","","",75,[[["self"],["usize"]]]],[11,"solve","","",75,[[],[["option",["vec"]],["vec",["usize"]]]]],[0,"undirected","haar_kyopro_lib_rust::graph::eulerian","",null,null],[3,"UndirectedEulerianTrail","haar_kyopro_lib_rust::graph::eulerian::undirected","",null,null],[11,"new","","",76,[[["usize"]],["self"]]],[11,"add_edge","","",76,[[["self"],["usize"]]]],[11,"solve","","",76,[[],[["option",["vec"]],["vec",["usize"]]]]],[0,"kruskal","haar_kyopro_lib_rust::graph","最小全域木 (Kruskal)",null,null],[5,"kruskal","haar_kyopro_lib_rust::graph::kruskal","",null,[[["graph"]],[["e"],["vec"]]]],[0,"lowlink","haar_kyopro_lib_rust::graph","",null,null],[3,"Lowlink","haar_kyopro_lib_rust::graph::lowlink","",null,null],[12,"size","","",77,null],[12,"ord","","",77,null],[12,"low","","",77,null],[12,"par","","",77,null],[12,"ch","","",77,null],[11,"new","","",77,[[["graph"]],["self"]]],[0,"max_independent_set","haar_kyopro_lib_rust::graph","最大独立集合",null,null],[5,"max_independent_set","haar_kyopro_lib_rust::graph::max_independent_set","",null,[[["vec",["vec"]],["vec",["bool"]]],[["usize"],["vec",["usize"]]]]],[0,"prim","haar_kyopro_lib_rust::graph","最小全域木 (Prim)",null,null],[5,"prim","haar_kyopro_lib_rust::graph::prim","",null,[[["graph"]],[["e"],["vec"]]]],[0,"scc","haar_kyopro_lib_rust::graph","強連結成分分解",null,null],[3,"SCC","haar_kyopro_lib_rust::graph::scc","",null,null],[11,"new","","",78,[[["graph"]],["self"]]],[11,"groups","","",78,[[["self"]],["vec"]]],[11,"to_vec","","",78,[[["self"]],[["usize"],["vec",["usize"]]]]],[0,"tsort","haar_kyopro_lib_rust::graph","トポロジカルソート",null,null],[5,"tsort","haar_kyopro_lib_rust::graph::tsort","Time complexity O(N)",null,[[["graph"]],[["option",["vec"]],["vec",["usize"]]]]],[0,"tsp","haar_kyopro_lib_rust::graph","巡回セールスマン問題",null,null],[5,"tsp","haar_kyopro_lib_rust::graph::tsp","",null,[[["usize"],["graph"]],["option"]]],[0,"two_edge","haar_kyopro_lib_rust::graph","二重辺連結成分分解",null,null],[5,"two_edge_connected_components","haar_kyopro_lib_rust::graph::two_edge","",null,[[["lowlink"]],[["vec",["vec"]],["vec",["usize"]]]]],[0,"warshall_floyd","haar_kyopro_lib_rust::graph","全頂点間最短経路長",null,null],[5,"warshall_floyd","haar_kyopro_lib_rust::graph::warshall_floyd","Time complexity O(n ^ 3)",null,[[["graph"]],[["option",["vec"]],["vec",["vec"]]]]],[0,"psp","haar_kyopro_lib_rust::graph","Project Selection Problem",null,null],[3,"PSP","haar_kyopro_lib_rust::graph::psp","Project Selection Problem",null,null],[11,"new","","",79,[[["usize"]],["self"]]],[11,"penalty_if_red","","頂点iが赤ならばcの損失になる。",79,[[["self"],["usize"],["u64"]]]],[11,"penalty_if_blue","","頂点iが青ならばcの損失になる。",79,[[["self"],["usize"],["u64"]]]],[11,"gain_if_red","","頂点iが赤ならばcの利益を得る。",79,[[["self"],["usize"],["u64"]]]],[11,"gain_if_blue","","頂点iが青ならばcの利益を得る。",79,[[["self"],["usize"],["u64"]]]],[11,"penalty_if_red_blue","","頂点iが赤かつ頂点jが青ならばcの損失となる。",79,[[["self"],["usize"],["u64"]]]],[11,"penalty_if_different","","頂点iとjが異なる色ならばcの損失となる。",79,[[["self"],["usize"],["u64"]]]],[11,"must_be_red","","頂点iは赤でなければならない。",79,[[["self"],["usize"]]]],[11,"must_be_blue","","頂点iは青でなければならない。",79,[[["self"],["usize"]]]],[11,"if_red_then_must_be_red","","頂点iが赤ならば、頂点jも赤でなければならない。",79,[[["self"],["usize"]]]],[11,"gain_if_both_red","","頂点iとjがともに赤ならばcの利益を得る。",79,[[["self"],["usize"],["u64"]]]],[11,"gain_if_both_blue","","頂点iとjがともに青ならばcの利益を得る。",79,[[["self"],["usize"],["u64"]]]],[11,"solve","","must be制約を破った場合、`None`を返す。そうでなければ、利益の最大値を`Some`に包んで返す。",79,[[],[["option",["i64"]],["i64"]]]],[0,"dinic","haar_kyopro_lib_rust::graph","最大流 (Dinic)",null,null],[3,"Dinic","haar_kyopro_lib_rust::graph::dinic","",null,null],[0,"flow","haar_kyopro_lib_rust::graph","",null,null],[8,"MaxFlow","haar_kyopro_lib_rust::graph::flow","",null,null],[16,"Cap","","",80,null],[10,"new","","",80,[[["usize"]],["self"]]],[10,"add_edge","","",80,[[["self"],["usize"]]]],[10,"max_flow","","",80,[[["self"],["usize"]]]],[10,"get_edges","","",80,[[["self"],["usize"]],["vec"]]],[10,"reset","","",80,[[["self"]]]],[0,"ford_fulkerson","haar_kyopro_lib_rust::graph","最大流 (Ford-Fulkerson)",null,null],[3,"FordFulkerson","haar_kyopro_lib_rust::graph::ford_fulkerson","",null,null],[0,"hopcroft_karp","haar_kyopro_lib_rust::graph","二部マッチング (Hopcroft-Karp)",null,null],[3,"Edge","haar_kyopro_lib_rust::graph::hopcroft_karp","",null,null],[3,"HopcroftKarp","","",null,null],[11,"new","","",81,[[["usize"]],["self"]]],[11,"add_edge","","",81,[[["self"],["usize"]]]],[11,"matching","","",81,[[["self"]],["u32"]]],[11,"get_matching","","",81,[[["self"]],["vec"]]],[0,"min_cost_flow","haar_kyopro_lib_rust::graph","最小費用流",null,null],[3,"MinCostFlow","haar_kyopro_lib_rust::graph::min_cost_flow","",null,null],[11,"new","","",82,[[["usize"]],["self"]]],[11,"add_edge","","",82,[[["i64"],["usize"],["self"],["u64"]]]],[11,"min_cost_flow","","",82,[[["self"],["usize"],["u64"]],[["result",["i64"]],["i64"]]]],[0,"bi_match","haar_kyopro_lib_rust::graph","二部マッチング",null,null],[3,"BipartiteMatching","haar_kyopro_lib_rust::graph::bi_match","",null,null],[11,"new","","",83,[[["usize"]],["self"]]],[11,"add_edge","","",83,[[["self"],["usize"]]]],[11,"matching","","",83,[[["self"]],["u64"]]],[8,"EdgeTrait","haar_kyopro_lib_rust::graph","",null,null],[16,"Weight","","",84,null],[10,"from","","",84,[[["self"]],["usize"]]],[10,"to","","",84,[[["self"]],["usize"]]],[10,"weight","","",84,[[["self"]]]],[10,"rev","","",84,[[],["self"]]],[11,"new","","",72,[[["i"],["usize"],["t"]],["self"]]],[11,"new","","",73,[[["usize"]],["self"]]],[11,"add_directed","","",73,[[["self"]]]],[11,"add_undirected","","",73,[[["self"]]]],[11,"len","","",73,[[["self"]],["usize"]]],[11,"is_empty","","",73,[[["self"]],["bool"]]],[0,"macros","haar_kyopro_lib_rust","macro_exportされたmacro置き場",null,null],[0,"chmax","haar_kyopro_lib_rust::macros","",null,null],[0,"chmin","","",null,null],[0,"eps","","",null,null],[0,"ds_macros","","",null,null],[0,"io","","",null,null],[0,"max","","",null,null],[0,"min","","",null,null],[0,"modulo","","",null,null],[0,"mul_vec","","",null,null],[0,"rec","","",null,null],[0,"sort_with","","",null,null],[0,"timer","","",null,null],[0,"trait_alias","","",null,null],[0,"math","haar_kyopro_lib_rust","数学",null,null],[0,"crt","haar_kyopro_lib_rust::math","中国剰余定理",null,null],[5,"crt","haar_kyopro_lib_rust::math::crt","",null,[[],["option"]]],[5,"crt_vec","","",null,[[],["option"]]],[0,"divisor","haar_kyopro_lib_rust::math","約数列挙",null,null],[5,"count_divisors","haar_kyopro_lib_rust::math::divisor","Time complexity O(sqrt n)",null,[[["u64"]],["u64"]]],[5,"enumerate_divisors","","Time complexity O(sqrt n)",null,[[["u64"]],[["vec",["u64"]],["u64"]]]],[0,"ext_gcd","haar_kyopro_lib_rust::math","拡張ユークリッドの互除法",null,null],[5,"ext_gcd","haar_kyopro_lib_rust::math::ext_gcd","",null,[[["u64"]]]],[0,"factorize","haar_kyopro_lib_rust::math","",null,null],[0,"sieve","haar_kyopro_lib_rust::math::factorize","",null,null],[3,"FactorizeSieve","haar_kyopro_lib_rust::math::factorize::sieve","",null,null],[11,"new","","",85,[[["usize"]],["self"]]],[11,"factorize","","",85,[[["self"],["usize"]],[["usize"],["vec",["usize"]]]]],[0,"trial","haar_kyopro_lib_rust::math::factorize","",null,null],[5,"factorize","haar_kyopro_lib_rust::math::factorize::trial","",null,[[["u64"]],["vec"]]],[0,"gcd_lcm","haar_kyopro_lib_rust::math","最大公約数・最小公倍数",null,null],[8,"GcdLcm","haar_kyopro_lib_rust::math::gcd_lcm","",null,null],[16,"Output","","",86,null],[10,"gcd","","",86,[[["self"]]]],[10,"lcm","","",86,[[["self"]]]],[10,"gcd_lcm","","",86,[[["self"]]]],[0,"mod_ops","haar_kyopro_lib_rust::math","",null,null],[0,"enum_inv","haar_kyopro_lib_rust::math::mod_ops","",null,null],[5,"enumerate_mod_inv","haar_kyopro_lib_rust::math::mod_ops::enum_inv","",null,[[["usize"],["u64"]],[["vec",["u64"]],["u64"]]]],[0,"inv","haar_kyopro_lib_rust::math::mod_ops","",null,null],[5,"mod_inv","haar_kyopro_lib_rust::math::mod_ops::inv","",null,[[["u64"]],[["u64"],["option",["u64"]]]]],[0,"log","haar_kyopro_lib_rust::math::mod_ops","",null,null],[5,"mod_log","haar_kyopro_lib_rust::math::mod_ops::log","",null,[[["u64"]],[["u64"],["option",["u64"]]]]],[0,"pow","haar_kyopro_lib_rust::math::mod_ops","",null,null],[5,"mod_pow","haar_kyopro_lib_rust::math::mod_ops::pow","mod累乗 # Complexity Time complexity $O(\\log(p))$",null,[[["u64"]],["u64"]]],[0,"sqrt","haar_kyopro_lib_rust::math::mod_ops","",null,null],[5,"mod_sqrt","haar_kyopro_lib_rust::math::mod_ops::sqrt","",null,[[["u64"]],[["u64"],["option",["u64"]]]]],[0,"nim_product","haar_kyopro_lib_rust::math","",null,null],[5,"nim_product_8","haar_kyopro_lib_rust::math::nim_product","",null,[[["u8"]],["u8"]]],[5,"nim_product_64","","",null,[[["u64"]],["u64"]]],[5,"nim_product_32","","",null,[[["u32"]],["u32"]]],[5,"nim_product_16","","",null,[[["u16"]],["u16"]]],[0,"miller_rabin","haar_kyopro_lib_rust::math","",null,null],[5,"miller_rabin","haar_kyopro_lib_rust::math::miller_rabin","",null,[[["u64"]],["bool"]]],[0,"prime_test","haar_kyopro_lib_rust::math","",null,null],[0,"traits","haar_kyopro_lib_rust::math::prime_test","",null,null],[8,"CheckPrime","haar_kyopro_lib_rust::math::prime_test::traits","",null,null],[10,"is_prime","","",87,[[["self"],["t"]],["bool"]]],[0,"eratosthenes","haar_kyopro_lib_rust::math::prime_test","",null,null],[3,"EratosthenesSieve","haar_kyopro_lib_rust::math::prime_test::eratosthenes","",null,null],[11,"new","","",88,[[["usize"]],["self"]]],[0,"primitive_root","haar_kyopro_lib_rust::math","原始根",null,null],[5,"primitive_root","haar_kyopro_lib_rust::math::primitive_root","",null,[[["u64"]],[["u64"],["option",["u64"]]]]],[0,"ff","haar_kyopro_lib_rust::math","",null,null],[0,"modint","haar_kyopro_lib_rust::math::ff","",null,null],[3,"ModInt","haar_kyopro_lib_rust::math::ff::modint","",null,null],[8,"Modulo","","",null,null],[10,"value","","",89,[[],["u32"]]],[11,"new","","",90,[[["u32"]],["self"]]],[0,"traits","haar_kyopro_lib_rust::math::ff","",null,null],[8,"Pow","haar_kyopro_lib_rust::math::ff::traits","",null,null],[16,"Output","","",91,null],[10,"pow","","",91,[[["u64"]]]],[8,"Inv","","",null,null],[16,"Output","","",92,null],[10,"inv","","",92,[[]]],[8,"Frac","","",null,null],[16,"Output","","",93,null],[10,"frac","","",93,[[["i64"]]]],[8,"FF","","",null,null],[0,"bell_number","haar_kyopro_lib_rust::math","",null,null],[5,"bell_number_table","haar_kyopro_lib_rust::math::bell_number","",null,[[["usize"]],[["vec",["vec"]],["vec"]]]],[0,"binomial_coefficient","haar_kyopro_lib_rust::math","",null,null],[3,"ExtLucas","haar_kyopro_lib_rust::math::binomial_coefficient","",null,null],[3,"BinomialCoefficient","","",null,null],[11,"new","","",94,[[["u64"]],["self"]]],[11,"get","","",94,[[["self"],["u64"]],["u64"]]],[11,"new","","",95,[[["u64"]],["self"]]],[11,"get","","",95,[[["self"],["u64"]],["u64"]]],[0,"factorial","haar_kyopro_lib_rust::math","",null,null],[3,"FactorialTable","haar_kyopro_lib_rust::math::factorial","",null,null],[0,"bell","","",null,null],[11,"bell_number","","",96,[[["self"],["usize"]],["t"]]],[0,"bernoulli","","",null,null],[11,"bernoulli_number","","",96,[[["self"],["usize"]],["vec"]]],[0,"catalan","","",null,null],[11,"catalan_number","","",96,[[["self"],["usize"]],["t"]]],[11,"new","","Time complexity O(n)",96,[[["usize"]],["self"]]],[11,"facto","","nの階乗",96,[[["self"],["usize"]],["t"]]],[11,"inv_facto","","nの階乗の逆元",96,[[["self"],["usize"]],["t"]]],[11,"perm","","n個からk個とりだす順列の個数 (nPk)",96,[[["self"],["usize"]],["t"]]],[11,"comb","","n個からk個とりだす組み合わせの個数 (nCk)",96,[[["self"],["usize"]],["t"]]],[11,"h","","",96,[[["self"],["usize"]],["t"]]],[0,"convolution","haar_kyopro_lib_rust::math","",null,null],[0,"mobius_sub","haar_kyopro_lib_rust::math::convolution","",null,null],[5,"fast_mobius_subset","haar_kyopro_lib_rust::math::convolution::mobius_sub","",null,[[]]],[0,"mobius_super","haar_kyopro_lib_rust::math::convolution","",null,null],[5,"fast_mobius_superset","haar_kyopro_lib_rust::math::convolution::mobius_super","",null,[[]]],[0,"zeta_sub","haar_kyopro_lib_rust::math::convolution","",null,null],[5,"fast_zeta_subset","haar_kyopro_lib_rust::math::convolution::zeta_sub","",null,[[]]],[0,"zeta_super","haar_kyopro_lib_rust::math::convolution","",null,null],[5,"fast_zeta_superset","haar_kyopro_lib_rust::math::convolution::zeta_super","",null,[[]]],[0,"conv_and","haar_kyopro_lib_rust::math::convolution","",null,null],[5,"convolution_and","haar_kyopro_lib_rust::math::convolution::conv_and","",null,[[["vec"]],["vec"]]],[0,"conv_or","haar_kyopro_lib_rust::math::convolution","",null,null],[5,"convolution_or","haar_kyopro_lib_rust::math::convolution::conv_or","",null,[[["vec"]],["vec"]]],[0,"subset_conv","haar_kyopro_lib_rust::math::convolution","",null,null],[5,"subset_convolution","haar_kyopro_lib_rust::math::convolution::subset_conv","",null,[[["vec"]],["vec"]]],[0,"rational","haar_kyopro_lib_rust::math","有理数",null,null],[3,"Rational","haar_kyopro_lib_rust::math::rational","",null,null],[11,"new","","",97,[[["i64"]],["self"]]],[0,"totient","haar_kyopro_lib_rust::math","トーシェント関数",null,null],[5,"totient","haar_kyopro_lib_rust::math::totient","",null,[[["u64"]],["u64"]]],[5,"totient_table","","",null,[[["usize"]],[["usize"],["vec",["usize"]]]]],[0,"berlekamp_massey","haar_kyopro_lib_rust::math","",null,null],[5,"berlekamp_massey","haar_kyopro_lib_rust::math::berlekamp_massey","",null,[[["vec"]],["vec"]]],[0,"linalg","haar_kyopro_lib_rust::math","",null,null],[0,"matrix","haar_kyopro_lib_rust::math::linalg","",null,null],[3,"Matrix","haar_kyopro_lib_rust::math::linalg::matrix","",null,null],[11,"new","","",98,[[["usize"]],["self"]]],[11,"from_vec","","",98,[[["vec",["vec"]],["vec"]],["self"]]],[11,"to_vec","","",98,[[["self"]],[["vec",["vec"]],["vec"]]]],[11,"height","","",98,[[["self"]],["usize"]]],[11,"width","","",98,[[["self"]],["usize"]]],[11,"transpose","","",98,[[],["self"]]],[11,"get_mut","","",98,[[["self"],["usize"]],[["option"],["t"]]]],[0,"square_matrix","haar_kyopro_lib_rust::math::linalg","",null,null],[3,"SquareMatrix","haar_kyopro_lib_rust::math::linalg::square_matrix","",null,null],[8,"SquareMatrixElem","","",null,null],[11,"new","","",99,[[["usize"]],["self"]]],[11,"unit","","",99,[[["usize"]],["self"]]],[11,"from_vec","","",99,[[["vec",["vec"]],["vec"]],["self"]]],[11,"to_vec","","",99,[[["self"]],[["vec",["vec"]],["vec"]]]],[11,"size","","",99,[[["self"]],["usize"]]],[11,"transpose","","",99,[[],["self"]]],[11,"pow","","",99,[[["u64"]],["self"]]],[11,"get_mut","","",99,[[["self"],["usize"]],[["option"],["t"]]]],[11,"straight_mul","","",99,[[],["self"]]],[11,"strassen_mul","","",99,[[],["self"]]],[0,"sum_floor_linear","haar_kyopro_lib_rust::math","$\\sum_{i=0}^{n-1} \\lfloor \\frac{ai+b}{m} \\rfloor$",null,null],[5,"sum_floor_linear","haar_kyopro_lib_rust::math::sum_floor_linear","",null,[[["u64"]],["u64"]]],[0,"misc","haar_kyopro_lib_rust","分類を放置しているもの",null,null],[0,"dice","haar_kyopro_lib_rust::misc","",null,null],[3,"Dice","haar_kyopro_lib_rust::misc::dice","",null,null],[12,"top","","",100,null],[12,"bottom","","",100,null],[12,"front","","",100,null],[12,"back","","",100,null],[12,"right","","",100,null],[12,"left","","",100,null],[11,"new","","",100,[[["t"]],["self"]]],[11,"rot_left","","",100,[[["self"]],["self"]]],[11,"rot_right","","",100,[[["self"]],["self"]]],[11,"rot_front","","",100,[[["self"]],["self"]]],[11,"rot_back","","",100,[[["self"]],["self"]]],[11,"rot_clockwise","","",100,[[["self"]],["self"]]],[11,"rot_counterclockwise","","",100,[[["self"]],["self"]]],[0,"seq","haar_kyopro_lib_rust","",null,null],[0,"edit_distance","haar_kyopro_lib_rust::seq","",null,null],[5,"edit_distance","haar_kyopro_lib_rust::seq::edit_distance","",null,[[],["usize"]]],[0,"kmp","haar_kyopro_lib_rust::seq","",null,null],[3,"KMP","haar_kyopro_lib_rust::seq::kmp","",null,null],[11,"new","","",101,[[["str"]],["self"]]],[11,"matches","","",101,[[["str"],["self"]],[["usize"],["vec",["usize"]]]]],[0,"manacher","haar_kyopro_lib_rust::seq","",null,null],[5,"manacher","haar_kyopro_lib_rust::seq::manacher","",null,[[],[["usize"],["vec",["usize"]]]]],[0,"rle","haar_kyopro_lib_rust::seq","",null,null],[5,"rle","haar_kyopro_lib_rust::seq::rle","",null,[[],["vec"]]],[0,"sa","haar_kyopro_lib_rust::seq","",null,null],[3,"SuffixArray","haar_kyopro_lib_rust::seq::sa","",null,null],[11,"new","","",102,[[["str"]],["self"]]],[11,"to_slice","","",102,[[["self"]]]],[11,"lcp_array","","",102,[[["self"]],[["usize"],["vec",["usize"]]]]],[0,"zalgo","haar_kyopro_lib_rust::seq","",null,null],[5,"zalgo","haar_kyopro_lib_rust::seq::zalgo","",null,[[],[["usize"],["vec",["usize"]]]]],[0,"tree","haar_kyopro_lib_rust","木に関するもの",null,null],[3,"TreeEdge","haar_kyopro_lib_rust::tree","",null,null],[12,"to","","",103,null],[12,"weight","","",103,null],[3,"TreeNode","","",null,null],[12,"index","","",104,null],[12,"parent","","",104,null],[12,"children","","",104,null],[3,"Tree","","",null,null],[12,"nodes","","",105,null],[0,"centroid","","重心列挙",null,null],[5,"centroids","haar_kyopro_lib_rust::tree::centroid","",null,[[["tree"]],[["usize"],["vec",["usize"]]]]],[0,"depth_query","haar_kyopro_lib_rust::tree","",null,null],[3,"TreeDepthQuery","haar_kyopro_lib_rust::tree::depth_query","Tree depth query",null,null],[11,"new","","",106,[[["tree"],["usize"]],["self"]]],[11,"children_query","","",106,[[["self"],["usize"]],["option"]]],[11,"me_query","","",106,[[["self"],["usize"]]]],[11,"ancestor","","",106,[[["self"],["usize"]],[["option",["usize"]],["usize"]]]],[0,"euler_tour","haar_kyopro_lib_rust::tree","",null,null],[3,"EulerTour","haar_kyopro_lib_rust::tree::euler_tour","",null,null],[11,"new","","",107,[[["tree"],["usize"]],["self"]]],[11,"subtree_query","","",107,[[["self"],["usize"]]]],[11,"point_query","","",107,[[["self"],["usize"]],["usize"]]],[0,"hld","haar_kyopro_lib_rust::tree","重軽分解",null,null],[3,"HLD","haar_kyopro_lib_rust::tree::hld","重軽分解",null,null],[11,"new","","",108,[[["tree"],["copy"],["usize"]],["self"]]],[11,"path_query_vertex","","演算は可換性を仮定する。",108,[[["self"],["usize"]],["vec"]]],[11,"path_query_edge","","",108,[[["self"],["usize"]],["vec"]]],[11,"subtree_query_vertex","","",108,[[["self"],["usize"]]]],[11,"subtree_query_edge","","",108,[[["self"],["usize"]]]],[11,"parent","","",108,[[["self"],["usize"]],[["option",["usize"]],["usize"]]]],[11,"get_id","","",108,[[["self"],["usize"]],["usize"]]],[11,"lca","","",108,[[["self"],["usize"]],["usize"]]],[0,"lca","haar_kyopro_lib_rust::tree","最小共通祖先",null,null],[3,"DoublingLCA","haar_kyopro_lib_rust::tree::lca","",null,null],[11,"new","","",109,[[["tree"],["usize"]],["self"]]],[11,"get_lca","","",109,[[["self"],["usize"]],["usize"]]],[0,"rerooting","haar_kyopro_lib_rust::tree","全方位木DP",null,null],[3,"RerootingDP","haar_kyopro_lib_rust::tree::rerooting","",null,null],[11,"new","","",110,[[["box"],["box"],["box"],["t"]],["self"]]],[11,"run","","",110,[[["self"],["tree"]],["vec"]]],[0,"rooting","haar_kyopro_lib_rust::tree","根付き木に変換",null,null],[5,"rooting","haar_kyopro_lib_rust::tree::rooting","",null,[[["tree"],["usize"]],[["str"],["result",["str"]]]]],[0,"tree_dp","haar_kyopro_lib_rust::tree","木DP",null,null],[3,"TreeDP","haar_kyopro_lib_rust::tree::tree_dp","",null,null],[11,"new","","",111,[[["box"],["box"],["box"],["t"]],["self"]]],[11,"run","","",111,[[["usize"],["self"],["tree"]],["vec"]]],[0,"utils","haar_kyopro_lib_rust::tree","",null,null],[5,"tree_distance","haar_kyopro_lib_rust::tree::utils","rootを根としたときの根から各頂点への距離を列挙する。 # Complexity Time complexity…",null,[[["tree"],["usize"]],["vec"]]],[5,"tree_diameter","","木の任意の2頂点の距離の最大値を求める。 # Complexity Time complexity $O(n)$",null,[[["tree"]]]],[5,"tree_height","","木の各頂点について、そこからの距離の最大値を列挙する。 # Complexity Time complexity…",null,[[["tree"]],["vec"]]],[5,"tree_path","","木上の2頂点を結ぶパス上の頂点列を求める。 # Complexity Time complexity $O(n)$",null,[[["tree"],["usize"]],[["usize"],["vec",["usize"]]]]],[11,"neighbors","haar_kyopro_lib_rust::tree","",104,[[["self"]]]],[11,"neighbors_size","","",104,[[["self"]],["usize"]]],[11,"new","","",105,[[["usize"]],["self"]]],[11,"add_undirected","","",105,[[["self"]]]],[11,"add_directed","","",105,[[["self"]]]],[11,"len","","",105,[[["self"]],["usize"]]],[11,"is_empty","","",105,[[["self"]],["bool"]]],[0,"utils","haar_kyopro_lib_rust","",null,null],[0,"join_str","haar_kyopro_lib_rust::utils","",null,null],[8,"JoinStr","haar_kyopro_lib_rust::utils::join_str","",null,null],[10,"join_str","","",112,[[["str"]],["string"]]],[14,"chmax","haar_kyopro_lib_rust","",null,null],[14,"chmin","","",null,null],[14,"eps","","",null,null],[14,"hashset","","",null,null],[14,"btreeset","","",null,null],[14,"hashmap","","",null,null],[14,"btreemap","","",null,null],[14,"get","","",null,null],[14,"input","","",null,null],[14,"io","","",null,null],[14,"max","","",null,null],[14,"min","","",null,null],[14,"modulo","","",null,null],[14,"mul_vec","","",null,null],[14,"rec","","immutableかつ引数を一つのみとる再帰クロージャ",null,null],[14,"sort_with","","",null,null],[14,"timer","","",null,null],[14,"trait_alias","","",null,null],[11,"from","haar_kyopro_lib_rust::algebra::affine","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"vzip","","",6,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::algebra::bitxor","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"vzip","","",7,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::algebra::dihedral","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"vzip","","",9,[[],["v"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"vzip","","",8,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::algebra::dual","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"vzip","","",10,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::algebra::max","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"vzip","","",11,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::algebra::min","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"vzip","","",12,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::algebra::prod","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"vzip","","",13,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::algebra::sum","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"vzip","","",14,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::algebra::update","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"vzip","","",15,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::algebra::add_sum","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"vzip","","",17,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::algebra::update_sum","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"vzip","","",18,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::algo::compressor","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"vzip","","",19,[[],["v"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"vzip","","",20,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::algo::imos_1d","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"vzip","","",21,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::algo::mo","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"vzip","","",22,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::algo::two_sat","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"vzip","","",23,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::algo::static_range_inversions_query","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"vzip","","",24,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::ds::unionfind","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"vzip","","",30,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::ds::dual_segtree","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"vzip","","",31,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::ds::fenwick","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"vzip","","",32,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::ds::fenwick_add","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"vzip","","",33,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::ds::lazy_segtree","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"vzip","","",34,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::ds::lazy_segtree_coeff","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"vzip","","",35,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::ds::segtree","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,[[["self"],["t"]]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"vzip","","",36,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::ds::segtree_linear_add","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"vzip","","",37,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::ds::starry_sky_tree","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"vzip","","",39,[[],["v"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,[[["self"],["t"]]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"vzip","","",38,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::ds::cumulative_sum_1d","",113,[[["t"]],["t"]]],[11,"into","","",113,[[],["u"]]],[11,"to_owned","","",113,[[["self"]],["t"]]],[11,"clone_into","","",113,[[["self"],["t"]]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"try_into","","",113,[[],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"type_id","","",113,[[["self"]],["typeid"]]],[11,"vzip","","",113,[[],["v"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"vzip","","",40,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::ds::persistent_array","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"vzip","","",41,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::ds::rollbackable_vector","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,[[["self"],["t"]]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"vzip","","",42,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::ds::range_search_tree","",43,[[["t"]],["t"]]],[11,"into","","",43,[[],["u"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"vzip","","",43,[[],["v"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,[[["self"],["t"]]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"vzip","","",44,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::ds::persistent_queue","",45,[[["t"]],["t"]]],[11,"into","","",45,[[],["u"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"vzip","","",45,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::ds::swag","",46,[[["t"]],["t"]]],[11,"into","","",46,[[],["u"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"vzip","","",46,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::ds::disjoint_sparse_table","",47,[[["t"]],["t"]]],[11,"into","","",47,[[],["u"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"vzip","","",47,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::ds::sparse_table","",48,[[["t"]],["t"]]],[11,"into","","",48,[[],["u"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"try_into","","",48,[[],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"type_id","","",48,[[["self"]],["typeid"]]],[11,"vzip","","",48,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::ds::lazy_skew_heap","",49,[[["t"]],["t"]]],[11,"into","","",49,[[],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,[[["self"],["t"]]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"try_into","","",49,[[],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"type_id","","",49,[[["self"]],["typeid"]]],[11,"vzip","","",49,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::ds::skew_heap","",50,[[["t"]],["t"]]],[11,"into","","",50,[[],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,[[["self"],["t"]]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"try_into","","",50,[[],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"type_id","","",50,[[["self"]],["typeid"]]],[11,"vzip","","",50,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::ds::persistent_stack","",51,[[["t"]],["t"]]],[11,"into","","",51,[[],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,[[["self"],["t"]]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"try_into","","",51,[[],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"type_id","","",51,[[["self"]],["typeid"]]],[11,"vzip","","",51,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::ds::cht","",53,[[["t"]],["t"]]],[11,"into","","",53,[[],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,[[["self"],["t"]]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"try_into","","",53,[[],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"type_id","","",53,[[["self"]],["typeid"]]],[11,"vzip","","",53,[[],["v"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,[[["self"],["t"]]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"try_into","","",52,[[],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"type_id","","",52,[[["self"]],["typeid"]]],[11,"vzip","","",52,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::ds::li_chao","",55,[[["t"]],["t"]]],[11,"into","","",55,[[],["u"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"try_into","","",55,[[],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"type_id","","",55,[[["self"]],["typeid"]]],[11,"vzip","","",55,[[],["v"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,[[["self"],["t"]]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"try_into","","",54,[[],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"type_id","","",54,[[["self"]],["typeid"]]],[11,"vzip","","",54,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::ds::binary_trie","",56,[[["t"]],["t"]]],[11,"into","","",56,[[],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,[[["self"],["t"]]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"try_into","","",56,[[],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"type_id","","",56,[[["self"]],["typeid"]]],[11,"vzip","","",56,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::ds::succinct_dict","",57,[[["t"]],["t"]]],[11,"into","","",57,[[],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,[[["self"],["t"]]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"try_into","","",57,[[],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"type_id","","",57,[[["self"]],["typeid"]]],[11,"vzip","","",57,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::geom","",58,[[["t"]],["t"]]],[11,"into","","",58,[[],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,[[["self"],["t"]]]],[11,"to_string","","",58,[[["self"]],["string"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"try_into","","",58,[[],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"type_id","","",58,[[["self"]],["typeid"]]],[11,"vzip","","",58,[[],["v"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,[[["self"],["t"]]]],[11,"to_string","","",59,[[["self"]],["string"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"try_into","","",59,[[],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"type_id","","",59,[[["self"]],["typeid"]]],[11,"vzip","","",59,[[],["v"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[],["u"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,[[["self"],["t"]]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"try_into","","",60,[[],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"type_id","","",60,[[["self"]],["typeid"]]],[11,"vzip","","",60,[[],["v"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,[[["self"],["t"]]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"try_into","","",61,[[],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"type_id","","",61,[[["self"]],["typeid"]]],[11,"vzip","","",61,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::geom::ccw","",62,[[["t"]],["t"]]],[11,"into","","",62,[[],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,[[["self"],["t"]]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"try_into","","",62,[[],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"type_id","","",62,[[["self"]],["typeid"]]],[11,"vzip","","",62,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::geom::intersect_circle_line","",63,[[["t"]],["t"]]],[11,"into","","",63,[[],["u"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,[[["self"],["t"]]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"try_into","","",63,[[],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"type_id","","",63,[[["self"]],["typeid"]]],[11,"vzip","","",63,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::geom::intersect_circle_segment","",64,[[["t"]],["t"]]],[11,"into","","",64,[[],["u"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,[[["self"],["t"]]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"try_into","","",64,[[],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"type_id","","",64,[[["self"]],["typeid"]]],[11,"vzip","","",64,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::geom::intersect_circles","",65,[[["t"]],["t"]]],[11,"into","","",65,[[],["u"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,[[["self"],["t"]]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"try_into","","",65,[[],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"type_id","","",65,[[["self"]],["typeid"]]],[11,"vzip","","",65,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::geom::intersect_line_segment","",66,[[["t"]],["t"]]],[11,"into","","",66,[[],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,[[["self"],["t"]]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"try_into","","",66,[[],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"type_id","","",66,[[["self"]],["typeid"]]],[11,"vzip","","",66,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::geom::intersect_segments","",67,[[["t"]],["t"]]],[11,"into","","",67,[[],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,[[["self"],["t"]]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"try_into","","",67,[[],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"type_id","","",67,[[["self"]],["typeid"]]],[11,"vzip","","",67,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::geom::convex_hull","",68,[[["t"]],["t"]]],[11,"into","","",68,[[],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,[[["self"],["t"]]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"try_into","","",68,[[],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"type_id","","",68,[[["self"]],["typeid"]]],[11,"vzip","","",68,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::geom::point_in_polygon","",69,[[["t"]],["t"]]],[11,"into","","",69,[[],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,[[["self"],["t"]]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"try_into","","",69,[[],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"type_id","","",69,[[["self"]],["typeid"]]],[11,"vzip","","",69,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::graph","",72,[[["t"]],["t"]]],[11,"into","","",72,[[],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,[[["self"],["t"]]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"try_into","","",72,[[],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"type_id","","",72,[[["self"]],["typeid"]]],[11,"vzip","","",72,[[],["v"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[],["u"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,[[["self"],["t"]]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"try_into","","",73,[[],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"type_id","","",73,[[["self"]],["typeid"]]],[11,"vzip","","",73,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::graph::bellman_ford","",74,[[["t"]],["t"]]],[11,"into","","",74,[[],["u"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,[[["self"],["t"]]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"try_into","","",74,[[],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"type_id","","",74,[[["self"]],["typeid"]]],[11,"vzip","","",74,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::graph::eulerian::directed","",75,[[["t"]],["t"]]],[11,"into","","",75,[[],["u"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,[[["self"],["t"]]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"try_into","","",75,[[],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"type_id","","",75,[[["self"]],["typeid"]]],[11,"vzip","","",75,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::graph::eulerian::undirected","",76,[[["t"]],["t"]]],[11,"into","","",76,[[],["u"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,[[["self"],["t"]]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"try_into","","",76,[[],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"type_id","","",76,[[["self"]],["typeid"]]],[11,"vzip","","",76,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::graph::lowlink","",77,[[["t"]],["t"]]],[11,"into","","",77,[[],["u"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,[[["self"],["t"]]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"try_into","","",77,[[],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"type_id","","",77,[[["self"]],["typeid"]]],[11,"vzip","","",77,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::graph::scc","",78,[[["t"]],["t"]]],[11,"into","","",78,[[],["u"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"try_into","","",78,[[],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"type_id","","",78,[[["self"]],["typeid"]]],[11,"vzip","","",78,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::graph::psp","",79,[[["t"]],["t"]]],[11,"into","","",79,[[],["u"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,[[["self"],["t"]]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"try_into","","",79,[[],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"type_id","","",79,[[["self"]],["typeid"]]],[11,"vzip","","",79,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::graph::dinic","",114,[[["t"]],["t"]]],[11,"into","","",114,[[],["u"]]],[11,"to_owned","","",114,[[["self"]],["t"]]],[11,"clone_into","","",114,[[["self"],["t"]]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"try_into","","",114,[[],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"type_id","","",114,[[["self"]],["typeid"]]],[11,"vzip","","",114,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::graph::ford_fulkerson","",115,[[["t"]],["t"]]],[11,"into","","",115,[[],["u"]]],[11,"to_owned","","",115,[[["self"]],["t"]]],[11,"clone_into","","",115,[[["self"],["t"]]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"try_into","","",115,[[],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"type_id","","",115,[[["self"]],["typeid"]]],[11,"vzip","","",115,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::graph::hopcroft_karp","",116,[[["t"]],["t"]]],[11,"into","","",116,[[],["u"]]],[11,"to_owned","","",116,[[["self"]],["t"]]],[11,"clone_into","","",116,[[["self"],["t"]]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"try_into","","",116,[[],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"type_id","","",116,[[["self"]],["typeid"]]],[11,"vzip","","",116,[[],["v"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[],["u"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"try_into","","",81,[[],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"type_id","","",81,[[["self"]],["typeid"]]],[11,"vzip","","",81,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::graph::min_cost_flow","",82,[[["t"]],["t"]]],[11,"into","","",82,[[],["u"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,[[["self"],["t"]]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"try_into","","",82,[[],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"type_id","","",82,[[["self"]],["typeid"]]],[11,"vzip","","",82,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::graph::bi_match","",83,[[["t"]],["t"]]],[11,"into","","",83,[[],["u"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"try_into","","",83,[[],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"type_id","","",83,[[["self"]],["typeid"]]],[11,"vzip","","",83,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::math::factorize::sieve","",85,[[["t"]],["t"]]],[11,"into","","",85,[[],["u"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"try_into","","",85,[[],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"type_id","","",85,[[["self"]],["typeid"]]],[11,"vzip","","",85,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::math::prime_test::eratosthenes","",88,[[["t"]],["t"]]],[11,"into","","",88,[[],["u"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"try_into","","",88,[[],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"type_id","","",88,[[["self"]],["typeid"]]],[11,"vzip","","",88,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::math::ff::modint","",90,[[["t"]],["t"]]],[11,"into","","",90,[[],["u"]]],[11,"to_owned","","",90,[[["self"]],["t"]]],[11,"clone_into","","",90,[[["self"],["t"]]]],[11,"to_string","","",90,[[["self"]],["string"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"try_into","","",90,[[],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"type_id","","",90,[[["self"]],["typeid"]]],[11,"vzip","","",90,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::math::binomial_coefficient","",94,[[["t"]],["t"]]],[11,"into","","",94,[[],["u"]]],[11,"to_owned","","",94,[[["self"]],["t"]]],[11,"clone_into","","",94,[[["self"],["t"]]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"try_into","","",94,[[],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"type_id","","",94,[[["self"]],["typeid"]]],[11,"vzip","","",94,[[],["v"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"into","","",95,[[],["u"]]],[11,"to_owned","","",95,[[["self"]],["t"]]],[11,"clone_into","","",95,[[["self"],["t"]]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"try_into","","",95,[[],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"type_id","","",95,[[["self"]],["typeid"]]],[11,"vzip","","",95,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::math::factorial","",96,[[["t"]],["t"]]],[11,"into","","",96,[[],["u"]]],[11,"to_owned","","",96,[[["self"]],["t"]]],[11,"clone_into","","",96,[[["self"],["t"]]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"try_into","","",96,[[],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"type_id","","",96,[[["self"]],["typeid"]]],[11,"vzip","","",96,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::math::rational","",97,[[["t"]],["t"]]],[11,"into","","",97,[[],["u"]]],[11,"to_owned","","",97,[[["self"]],["t"]]],[11,"clone_into","","",97,[[["self"],["t"]]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"try_into","","",97,[[],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"type_id","","",97,[[["self"]],["typeid"]]],[11,"vzip","","",97,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::math::linalg::matrix","",98,[[["t"]],["t"]]],[11,"into","","",98,[[],["u"]]],[11,"to_owned","","",98,[[["self"]],["t"]]],[11,"clone_into","","",98,[[["self"],["t"]]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"try_into","","",98,[[],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"type_id","","",98,[[["self"]],["typeid"]]],[11,"vzip","","",98,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::math::linalg::square_matrix","",99,[[["t"]],["t"]]],[11,"into","","",99,[[],["u"]]],[11,"to_owned","","",99,[[["self"]],["t"]]],[11,"clone_into","","",99,[[["self"],["t"]]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"try_into","","",99,[[],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"type_id","","",99,[[["self"]],["typeid"]]],[11,"vzip","","",99,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::misc::dice","",100,[[["t"]],["t"]]],[11,"into","","",100,[[],["u"]]],[11,"to_owned","","",100,[[["self"]],["t"]]],[11,"clone_into","","",100,[[["self"],["t"]]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"try_into","","",100,[[],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"type_id","","",100,[[["self"]],["typeid"]]],[11,"vzip","","",100,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::seq::kmp","",101,[[["t"]],["t"]]],[11,"into","","",101,[[],["u"]]],[11,"to_owned","","",101,[[["self"]],["t"]]],[11,"clone_into","","",101,[[["self"],["t"]]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"try_into","","",101,[[],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"type_id","","",101,[[["self"]],["typeid"]]],[11,"vzip","","",101,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::seq::sa","",102,[[["t"]],["t"]]],[11,"into","","",102,[[],["u"]]],[11,"to_owned","","",102,[[["self"]],["t"]]],[11,"clone_into","","",102,[[["self"],["t"]]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"try_into","","",102,[[],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"type_id","","",102,[[["self"]],["typeid"]]],[11,"vzip","","",102,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::tree","",103,[[["t"]],["t"]]],[11,"into","","",103,[[],["u"]]],[11,"to_owned","","",103,[[["self"]],["t"]]],[11,"clone_into","","",103,[[["self"],["t"]]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"try_into","","",103,[[],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"type_id","","",103,[[["self"]],["typeid"]]],[11,"vzip","","",103,[[],["v"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"into","","",104,[[],["u"]]],[11,"to_owned","","",104,[[["self"]],["t"]]],[11,"clone_into","","",104,[[["self"],["t"]]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"try_into","","",104,[[],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"type_id","","",104,[[["self"]],["typeid"]]],[11,"vzip","","",104,[[],["v"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"into","","",105,[[],["u"]]],[11,"to_owned","","",105,[[["self"]],["t"]]],[11,"clone_into","","",105,[[["self"],["t"]]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"try_into","","",105,[[],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"type_id","","",105,[[["self"]],["typeid"]]],[11,"vzip","","",105,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::tree::depth_query","",106,[[["t"]],["t"]]],[11,"into","","",106,[[],["u"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"try_into","","",106,[[],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"type_id","","",106,[[["self"]],["typeid"]]],[11,"vzip","","",106,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::tree::euler_tour","",107,[[["t"]],["t"]]],[11,"into","","",107,[[],["u"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"try_into","","",107,[[],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"type_id","","",107,[[["self"]],["typeid"]]],[11,"vzip","","",107,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::tree::hld","",108,[[["t"]],["t"]]],[11,"into","","",108,[[],["u"]]],[11,"to_owned","","",108,[[["self"]],["t"]]],[11,"clone_into","","",108,[[["self"],["t"]]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"try_into","","",108,[[],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"type_id","","",108,[[["self"]],["typeid"]]],[11,"vzip","","",108,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::tree::lca","",109,[[["t"]],["t"]]],[11,"into","","",109,[[],["u"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"try_into","","",109,[[],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"type_id","","",109,[[["self"]],["typeid"]]],[11,"vzip","","",109,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::tree::rerooting","",110,[[["t"]],["t"]]],[11,"into","","",110,[[],["u"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"try_into","","",110,[[],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"type_id","","",110,[[["self"]],["typeid"]]],[11,"vzip","","",110,[[],["v"]]],[11,"from","haar_kyopro_lib_rust::tree::tree_dp","",111,[[["t"]],["t"]]],[11,"into","","",111,[[],["u"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"try_into","","",111,[[],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"type_id","","",111,[[["self"]],["typeid"]]],[11,"vzip","","",111,[[],["v"]]],[11,"zero","haar_kyopro_lib_rust::math::ff::modint","",90,[[]]],[11,"one","","",90,[[]]],[11,"op","haar_kyopro_lib_rust::algebra::affine","",6,[[["self"]]]],[11,"op","haar_kyopro_lib_rust::algebra::bitxor","",7,[[["self"]]]],[11,"op","","",7,[[["self"]]]],[11,"op","","",7,[[["self"]]]],[11,"op","","",7,[[["self"]]]],[11,"op","","",7,[[["self"]]]],[11,"op","","",7,[[["self"]]]],[11,"op","","",7,[[["self"]]]],[11,"op","","",7,[[["self"]]]],[11,"op","","",7,[[["self"]]]],[11,"op","","",7,[[["self"]]]],[11,"op","","",7,[[["self"]]]],[11,"op","","",7,[[["self"]]]],[11,"op","haar_kyopro_lib_rust::algebra::dihedral","",9,[[["self"]]]],[11,"op","haar_kyopro_lib_rust::algebra::dual","",10,[[["self"]]]],[11,"op","haar_kyopro_lib_rust::algebra::max","",11,[[["self"]]]],[11,"op","haar_kyopro_lib_rust::algebra::min","",12,[[["self"]]]],[11,"op","haar_kyopro_lib_rust::algebra::prod","",13,[[["self"]]]],[11,"op","haar_kyopro_lib_rust::algebra::sum","",14,[[["self"]]]],[11,"op","haar_kyopro_lib_rust::algebra::update","",15,[[["self"]]]],[11,"id","haar_kyopro_lib_rust::algebra::affine","",6,[[["self"]]]],[11,"id","haar_kyopro_lib_rust::algebra::bitxor","",7,[[["self"]]]],[11,"id","","",7,[[["self"]]]],[11,"id","","",7,[[["self"]]]],[11,"id","","",7,[[["self"]]]],[11,"id","","",7,[[["self"]]]],[11,"id","","",7,[[["self"]]]],[11,"id","","",7,[[["self"]]]],[11,"id","","",7,[[["self"]]]],[11,"id","","",7,[[["self"]]]],[11,"id","","",7,[[["self"]]]],[11,"id","","",7,[[["self"]]]],[11,"id","","",7,[[["self"]]]],[11,"id","haar_kyopro_lib_rust::algebra::dihedral","",9,[[["self"]]]],[11,"id","haar_kyopro_lib_rust::algebra::dual","",10,[[["self"]]]],[11,"id","haar_kyopro_lib_rust::algebra::max","",11,[[["self"]]]],[11,"id","haar_kyopro_lib_rust::algebra::min","",12,[[["self"]]]],[11,"id","haar_kyopro_lib_rust::algebra::prod","",13,[[["self"]]]],[11,"id","haar_kyopro_lib_rust::algebra::sum","",14,[[["self"]]]],[11,"id","haar_kyopro_lib_rust::algebra::update","",15,[[["self"]]]],[11,"inv","haar_kyopro_lib_rust::algebra::bitxor","",7,[[["self"]]]],[11,"inv","","",7,[[["self"]]]],[11,"inv","","",7,[[["self"]]]],[11,"inv","","",7,[[["self"]]]],[11,"inv","","",7,[[["self"]]]],[11,"inv","","",7,[[["self"]]]],[11,"inv","","",7,[[["self"]]]],[11,"inv","","",7,[[["self"]]]],[11,"inv","","",7,[[["self"]]]],[11,"inv","","",7,[[["self"]]]],[11,"inv","","",7,[[["self"]]]],[11,"inv","","",7,[[["self"]]]],[11,"inv","haar_kyopro_lib_rust::algebra::dihedral","",9,[[["self"]]]],[11,"inv","haar_kyopro_lib_rust::algebra::sum","",14,[[["self"]]]],[11,"fold_id","haar_kyopro_lib_rust::algebra::add_sum","",17,[[["self"]],["t"]]],[11,"fold","","",17,[[["self"],["t"]],["t"]]],[11,"update_id","","",17,[[["self"]],["u"]]],[11,"update","","",17,[[["u"],["self"]],["u"]]],[11,"convert","","",17,[[["usize"],["u"],["self"],["t"]],["t"]]],[11,"fold_id","haar_kyopro_lib_rust::algebra::update_sum","",18,[[["self"]]]],[11,"fold","","",18,[[["self"]]]],[11,"update_id","","",18,[[["self"]]]],[11,"update","","",18,[[["self"]]]],[11,"convert","","",18,[[["usize"],["self"]]]],[11,"fold","haar_kyopro_lib_rust::ds::fenwick","",32,[[["rangeto",["usize"]],["self"],["usize"]]]],[11,"fold","","",32,[[["range",["usize"]],["self"],["usize"]]]],[11,"fold","haar_kyopro_lib_rust::ds::fenwick_add","",33,[[["rangeto",["usize"]],["self"],["usize"]]]],[11,"fold","","",33,[[["range",["usize"]],["self"],["usize"]]]],[11,"fold","haar_kyopro_lib_rust::ds::segtree","",36,[[["range",["usize"]],["self"],["usize"]]]],[11,"fold","haar_kyopro_lib_rust::ds::starry_sky_tree","",39,[[["range",["usize"]],["self"],["usize"]]]],[11,"fold","haar_kyopro_lib_rust::ds::cumulative_sum_1d","Time complexity O(1)",113,[[["range",["usize"]],["self"],["usize"]]]],[11,"fold","haar_kyopro_lib_rust::ds::disjoint_sparse_table","",47,[[["range",["usize"]],["self"],["usize"]]]],[11,"fold","haar_kyopro_lib_rust::ds::sparse_table","",48,[[["range",["usize"]],["self"],["usize"]]]],[11,"fold","haar_kyopro_lib_rust::ds::lazy_segtree","",34,[[["self"],["range",["usize"]],["usize"]]]],[11,"fold","haar_kyopro_lib_rust::ds::lazy_segtree_coeff","",35,[[["self"],["range",["usize"]],["usize"]],["t"]]],[11,"assign","haar_kyopro_lib_rust::ds::segtree","",36,[[["self"],["usize"],["t"]]]],[11,"update","haar_kyopro_lib_rust::ds::dual_segtree","",31,[[["range",["usize"]],["usize"],["self"]]]],[11,"update","haar_kyopro_lib_rust::ds::fenwick","",32,[[["self"],["usize"],["t"]]]],[11,"update","haar_kyopro_lib_rust::ds::fenwick_add","",33,[[["self"],["usize"],["t"]]]],[11,"update","haar_kyopro_lib_rust::ds::lazy_segtree","",34,[[["range",["usize"]],["usize"],["u"],["self"]]]],[11,"update","haar_kyopro_lib_rust::ds::lazy_segtree_coeff","",35,[[["range",["usize"]],["usize"],["self"],["t"]]]],[11,"update","haar_kyopro_lib_rust::ds::segtree","",36,[[["self"],["usize"],["t"]]]],[11,"update","haar_kyopro_lib_rust::ds::starry_sky_tree","",39,[[["range",["usize"]],["usize"],["self"],["t"]]]],[11,"get","haar_kyopro_lib_rust::ds::segtree_linear_add","",37,[[["self"],["usize"]]]],[11,"eps","haar_kyopro_lib_rust::geom","",58,[[],["f64"]]],[11,"sin","","",58,[[],["self"]]],[11,"cos","","",58,[[],["self"]]],[11,"tan","","",58,[[],["self"]]],[11,"acos","","",58,[[],["self"]]],[11,"abs","","",58,[[],["self"]]],[11,"atan2","","",58,[[],["self"]]],[11,"max","","",58,[[],["self"]]],[11,"min","","",58,[[],["self"]]],[11,"sqrt","","",58,[[],["self"]]],[11,"sq","","",58,[[],["self"]]],[11,"new","haar_kyopro_lib_rust::graph::dinic","",114,[[["usize"]],["self"]]],[11,"add_edge","","",114,[[["self"],["usize"]]]],[11,"max_flow","","",114,[[["self"],["usize"]]]],[11,"get_edges","","",114,[[["self"],["usize"]],["vec"]]],[11,"reset","","",114,[[["self"]]]],[11,"new","haar_kyopro_lib_rust::graph::ford_fulkerson","",115,[[["usize"]],["self"]]],[11,"add_edge","","",115,[[["self"],["usize"]]]],[11,"max_flow","","",115,[[["self"],["usize"]]]],[11,"get_edges","","",115,[[["self"],["usize"]],["vec"]]],[11,"reset","","",115,[[["self"]]]],[11,"from","haar_kyopro_lib_rust::graph","",72,[[["self"]],["usize"]]],[11,"to","","",72,[[["self"]],["usize"]]],[11,"weight","","",72,[[["self"]]]],[11,"rev","","",72,[[],["self"]]],[11,"is_prime","haar_kyopro_lib_rust::math::prime_test::eratosthenes","",88,[[["self"],["usize"]],["bool"]]],[11,"pow","haar_kyopro_lib_rust::math::ff::modint","",90,[[["u64"]],["self"]]],[11,"inv","","",90,[[],["self"]]],[11,"frac","","",90,[[["i64"]],["self"]]],[11,"from","haar_kyopro_lib_rust::ds::rollbackable_vector","",42,[[["vec"]],["self"]]],[11,"from","haar_kyopro_lib_rust::geom","",58,[[["f64"]],["self"]]],[11,"from","haar_kyopro_lib_rust::math::ff::modint","",90,[[["i8"]],["self"]]],[11,"from","","",90,[[["i16"]],["self"]]],[11,"from","","",90,[[["i32"]],["self"]]],[11,"from","","",90,[[["i64"]],["self"]]],[11,"from","","",90,[[["i128"]],["self"]]],[11,"from","","",90,[[["isize"]],["self"]]],[11,"from","","",90,[[["u8"]],["self"]]],[11,"from","","",90,[[["u16"]],["self"]]],[11,"from","","",90,[[["u32"]],["self"]]],[11,"from","","",90,[[["u64"]],["self"]]],[11,"from","","",90,[[["u128"]],["self"]]],[11,"from","","",90,[[["usize"]],["self"]]],[11,"from","haar_kyopro_lib_rust::math::rational","",97,[[["i64"]],["self"]]],[11,"clone","haar_kyopro_lib_rust::algebra::affine","",6,[[["self"]],["affine"]]],[11,"clone","haar_kyopro_lib_rust::algebra::bitxor","",7,[[["self"]],["bitxor"]]],[11,"clone","haar_kyopro_lib_rust::algebra::dihedral","",8,[[["self"]],["dihedralvalue"]]],[11,"clone","","",9,[[["self"]],["dihedral"]]],[11,"clone","haar_kyopro_lib_rust::algebra::dual","",10,[[["self"]],["dual"]]],[11,"clone","haar_kyopro_lib_rust::algebra::max","",11,[[["self"]],["max"]]],[11,"clone","haar_kyopro_lib_rust::algebra::min","",12,[[["self"]],["min"]]],[11,"clone","haar_kyopro_lib_rust::algebra::prod","",13,[[["self"]],["prod"]]],[11,"clone","haar_kyopro_lib_rust::algebra::sum","",14,[[["self"]],["sum"]]],[11,"clone","haar_kyopro_lib_rust::algebra::update","",15,[[["self"]],["update"]]],[11,"clone","haar_kyopro_lib_rust::algebra::add_sum","",17,[[["self"]],["addsum"]]],[11,"clone","haar_kyopro_lib_rust::algebra::update_sum","",18,[[["self"]],["updatesum"]]],[11,"clone","haar_kyopro_lib_rust::algo::compressor","",19,[[["self"]],["compressor"]]],[11,"clone","","",20,[[["self"]],["compressorbuilder"]]],[11,"clone","haar_kyopro_lib_rust::ds::segtree","",36,[[["self"]],["segmenttree"]]],[11,"clone","haar_kyopro_lib_rust::ds::starry_sky_tree","",38,[[["self"]],["mode"]]],[11,"clone","haar_kyopro_lib_rust::ds::cumulative_sum_1d","",113,[[["self"]],["cumulativesum1d"]]],[11,"clone","haar_kyopro_lib_rust::ds::rollbackable_vector","",42,[[["self"]],["rollbackablevec"]]],[11,"clone","haar_kyopro_lib_rust::ds::range_search_tree","",44,[[["self"]],["rangesearchtreebuilder"]]],[11,"clone","haar_kyopro_lib_rust::ds::lazy_skew_heap","",49,[[["self"]],["lazyskewheap"]]],[11,"clone","haar_kyopro_lib_rust::ds::skew_heap","",50,[[["self"]],["skewheap"]]],[11,"clone","haar_kyopro_lib_rust::ds::persistent_stack","",51,[[["self"]],["persistentstack"]]],[11,"clone","haar_kyopro_lib_rust::ds::cht","",52,[[["self"]],["mode"]]],[11,"clone","","",53,[[["self"]],["convexhulltrick"]]],[11,"clone","haar_kyopro_lib_rust::ds::li_chao","",54,[[["self"]],["mode"]]],[11,"clone","haar_kyopro_lib_rust::ds::binary_trie","",56,[[["self"]],["binarytrie"]]],[11,"clone","haar_kyopro_lib_rust::ds::succinct_dict","",57,[[["self"]],["succinctdict"]]],[11,"clone","haar_kyopro_lib_rust::geom::ccw","",62,[[["self"]],["ccw"]]],[11,"clone","haar_kyopro_lib_rust::geom::intersect_circle_line","",63,[[["self"]],["intersectcircleline"]]],[11,"clone","haar_kyopro_lib_rust::geom::intersect_circle_segment","",64,[[["self"]],["intersectcirclesegment"]]],[11,"clone","haar_kyopro_lib_rust::geom::intersect_circles","",65,[[["self"]],["intersectcircles"]]],[11,"clone","haar_kyopro_lib_rust::geom::intersect_line_segment","",66,[[["self"]],["intersectlinesegment"]]],[11,"clone","haar_kyopro_lib_rust::geom::intersect_segments","",67,[[["self"]],["intersectsegments"]]],[11,"clone","haar_kyopro_lib_rust::geom::convex_hull","",68,[[["self"]],["hull"]]],[11,"clone","haar_kyopro_lib_rust::geom::point_in_polygon","",69,[[["self"]],["pointpolygon"]]],[11,"clone","haar_kyopro_lib_rust::geom","",58,[[["self"]],["epsfloat"]]],[11,"clone","","",59,[[["self"]],["vector"]]],[11,"clone","","",60,[[["self"]],["line"]]],[11,"clone","","",61,[[["self"]],["circle"]]],[11,"clone","haar_kyopro_lib_rust::graph::bellman_ford","",74,[[["self"]],["bfresult"]]],[11,"clone","haar_kyopro_lib_rust::graph::eulerian::directed","",75,[[["self"]],["directedeuleriantrail"]]],[11,"clone","haar_kyopro_lib_rust::graph::eulerian::undirected","",76,[[["self"]],["undirectedeuleriantrail"]]],[11,"clone","haar_kyopro_lib_rust::graph::lowlink","",77,[[["self"]],["lowlink"]]],[11,"clone","haar_kyopro_lib_rust::graph::psp","",79,[[["self"]],["psp"]]],[11,"clone","haar_kyopro_lib_rust::graph::dinic","",114,[[["self"]],["dinic"]]],[11,"clone","haar_kyopro_lib_rust::graph::ford_fulkerson","",115,[[["self"]],["fordfulkerson"]]],[11,"clone","haar_kyopro_lib_rust::graph::hopcroft_karp","",116,[[["self"]],["edge"]]],[11,"clone","haar_kyopro_lib_rust::graph::min_cost_flow","",82,[[["self"]],["mincostflow"]]],[11,"clone","haar_kyopro_lib_rust::graph","",72,[[["self"]],["edge"]]],[11,"clone","","",73,[[["self"]],["graph"]]],[11,"clone","haar_kyopro_lib_rust::math::ff::modint","",90,[[["self"]],["modint"]]],[11,"clone","haar_kyopro_lib_rust::math::binomial_coefficient","",94,[[["self"]],["extlucas"]]],[11,"clone","","",95,[[["self"]],["binomialcoefficient"]]],[11,"clone","haar_kyopro_lib_rust::math::factorial","",96,[[["self"]],["factorialtable"]]],[11,"clone","haar_kyopro_lib_rust::math::rational","",97,[[["self"]],["rational"]]],[11,"clone","haar_kyopro_lib_rust::math::linalg::matrix","",98,[[["self"]],["matrix"]]],[11,"clone","haar_kyopro_lib_rust::math::linalg::square_matrix","",99,[[["self"]],["squarematrix"]]],[11,"clone","haar_kyopro_lib_rust::misc::dice","",100,[[["self"]],["dice"]]],[11,"clone","haar_kyopro_lib_rust::seq::kmp","",101,[[["self"]],["kmp"]]],[11,"clone","haar_kyopro_lib_rust::seq::sa","",102,[[["self"]],["suffixarray"]]],[11,"clone","haar_kyopro_lib_rust::tree::hld","",108,[[["self"]],["hld"]]],[11,"clone","haar_kyopro_lib_rust::tree","",103,[[["self"]],["treeedge"]]],[11,"clone","","",104,[[["self"]],["treenode"]]],[11,"clone","","",105,[[["self"]],["tree"]]],[11,"default","haar_kyopro_lib_rust::algebra::affine","",6,[[],["affine"]]],[11,"default","haar_kyopro_lib_rust::algebra::bitxor","",7,[[],["bitxor"]]],[11,"default","haar_kyopro_lib_rust::algebra::max","",11,[[],["max"]]],[11,"default","haar_kyopro_lib_rust::algebra::min","",12,[[],["min"]]],[11,"default","haar_kyopro_lib_rust::algebra::prod","",13,[[],["prod"]]],[11,"default","haar_kyopro_lib_rust::algebra::sum","",14,[[],["sum"]]],[11,"default","haar_kyopro_lib_rust::algebra::update","",15,[[],["update"]]],[11,"default","haar_kyopro_lib_rust::algebra::add_sum","",17,[[],["addsum"]]],[11,"default","haar_kyopro_lib_rust::algebra::update_sum","",18,[[],["updatesum"]]],[11,"default","haar_kyopro_lib_rust::algo::compressor","",20,[[],["compressorbuilder"]]],[11,"default","haar_kyopro_lib_rust::ds::rollbackable_vector","",42,[[],["rollbackablevec"]]],[11,"default","haar_kyopro_lib_rust::ds::range_search_tree","",44,[[],["rangesearchtreebuilder"]]],[11,"default","haar_kyopro_lib_rust::ds::persistent_queue","",45,[[],["persistentqueue"]]],[11,"default","haar_kyopro_lib_rust::ds::lazy_skew_heap","",49,[[],["lazyskewheap"]]],[11,"default","haar_kyopro_lib_rust::ds::skew_heap","",50,[[],["skewheap"]]],[11,"default","haar_kyopro_lib_rust::ds::persistent_stack","",51,[[],["persistentstack"]]],[11,"default","haar_kyopro_lib_rust::ds::binary_trie","",56,[[],["binarytrie"]]],[11,"default","haar_kyopro_lib_rust::geom","",58,[[],["epsfloat"]]],[11,"default","","",59,[[],["vector"]]],[11,"default","","",60,[[],["line"]]],[11,"default","","",61,[[],["circle"]]],[11,"default","haar_kyopro_lib_rust::math::ff::modint","",90,[[],["modint"]]],[11,"default","haar_kyopro_lib_rust::math::factorial","",96,[[],["factorialtable"]]],[11,"eq","haar_kyopro_lib_rust::ds::cht","",52,[[["mode"],["self"]],["bool"]]],[11,"eq","haar_kyopro_lib_rust::ds::li_chao","",54,[[["mode"],["self"]],["bool"]]],[11,"eq","haar_kyopro_lib_rust::geom::ccw","",62,[[["ccw"],["self"]],["bool"]]],[11,"eq","haar_kyopro_lib_rust::geom::intersect_circle_line","",63,[[["intersectcircleline"],["self"]],["bool"]]],[11,"eq","haar_kyopro_lib_rust::geom::intersect_circle_segment","",64,[[["intersectcirclesegment"],["self"]],["bool"]]],[11,"eq","haar_kyopro_lib_rust::geom::intersect_circles","",65,[[["self"],["intersectcircles"]],["bool"]]],[11,"eq","haar_kyopro_lib_rust::geom::intersect_line_segment","",66,[[["self"],["intersectlinesegment"]],["bool"]]],[11,"eq","haar_kyopro_lib_rust::geom::intersect_segments","",67,[[["intersectsegments"],["self"]],["bool"]]],[11,"eq","haar_kyopro_lib_rust::geom::convex_hull","",68,[[["self"],["hull"]],["bool"]]],[11,"eq","haar_kyopro_lib_rust::geom::point_in_polygon","",69,[[["pointpolygon"],["self"]],["bool"]]],[11,"eq","haar_kyopro_lib_rust::geom","",58,[[["self"]],["bool"]]],[11,"eq","","",59,[[["self"],["vector"]],["bool"]]],[11,"ne","","",59,[[["self"],["vector"]],["bool"]]],[11,"eq","","",60,[[["line"],["self"]],["bool"]]],[11,"ne","","",60,[[["line"],["self"]],["bool"]]],[11,"eq","","",61,[[["self"],["circle"]],["bool"]]],[11,"ne","","",61,[[["self"],["circle"]],["bool"]]],[11,"eq","haar_kyopro_lib_rust::graph::bellman_ford","",74,[[["self"],["bfresult"]],["bool"]]],[11,"ne","","",74,[[["self"],["bfresult"]],["bool"]]],[11,"eq","haar_kyopro_lib_rust::math::ff::modint","",90,[[["modint"],["self"]],["bool"]]],[11,"ne","","",90,[[["modint"],["self"]],["bool"]]],[11,"eq","haar_kyopro_lib_rust::math::rational","",97,[[["rational"],["self"]],["bool"]]],[11,"ne","","",97,[[["rational"],["self"]],["bool"]]],[11,"eq","haar_kyopro_lib_rust::math::linalg::matrix","",98,[[["self"],["matrix"]],["bool"]]],[11,"ne","","",98,[[["self"],["matrix"]],["bool"]]],[11,"eq","haar_kyopro_lib_rust::math::linalg::square_matrix","",99,[[["self"],["squarematrix"]],["bool"]]],[11,"ne","","",99,[[["self"],["squarematrix"]],["bool"]]],[11,"eq","haar_kyopro_lib_rust::misc::dice","",100,[[["self"],["dice"]],["bool"]]],[11,"ne","","",100,[[["self"],["dice"]],["bool"]]],[11,"partial_cmp","haar_kyopro_lib_rust::geom","",58,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","haar_kyopro_lib_rust::math::rational","",97,[[["self"]],[["ordering"],["option",["ordering"]]]]],[11,"fmt","haar_kyopro_lib_rust::algebra::dihedral","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::ds::cumulative_sum_1d","",113,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::ds::rollbackable_vector","",42,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::ds::persistent_queue","",45,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::ds::lazy_skew_heap","",49,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::ds::skew_heap","",50,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::ds::persistent_stack","",51,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::ds::cht","",52,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",53,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::ds::li_chao","",54,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::ds::binary_trie","",56,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::geom::ccw","",62,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::geom::intersect_circle_line","",63,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::geom::intersect_circle_segment","",64,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::geom::intersect_circles","",65,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::geom::intersect_line_segment","",66,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::geom::intersect_segments","",67,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::geom::point_in_polygon","",69,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::geom","",58,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",59,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",60,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",61,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::graph::bellman_ford","",74,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::graph::lowlink","",77,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::graph::hopcroft_karp","",116,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::graph","",72,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",73,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::math::ff::modint","",90,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::math::factorial","",96,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::math::rational","",97,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::math::linalg::square_matrix","",99,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::misc::dice","",100,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::seq::kmp","",101,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::seq::sa","",102,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::tree::hld","",108,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::tree","",103,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",104,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",105,[[["formatter"],["self"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::geom","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","haar_kyopro_lib_rust::math::ff::modint","",90,[[["formatter"],["self"]],["result"]]],[11,"div","haar_kyopro_lib_rust::geom","",58,[[],["self"]]],[11,"div","","",59,[[["t"]],["self"]]],[11,"div","haar_kyopro_lib_rust::math::ff::modint","",90,[[],["self"]]],[11,"div","haar_kyopro_lib_rust::math::rational","",97,[[],["self"]]],[11,"sub","haar_kyopro_lib_rust::geom","",58,[[],["self"]]],[11,"sub","","",59,[[],["self"]]],[11,"sub","haar_kyopro_lib_rust::math::ff::modint","",90,[[],["self"]]],[11,"sub","haar_kyopro_lib_rust::math::rational","",97,[[],["self"]]],[11,"sub","haar_kyopro_lib_rust::math::linalg::matrix","",98,[[],["self"]]],[11,"sub","haar_kyopro_lib_rust::math::linalg::square_matrix","",99,[[],["self"]]],[11,"add","haar_kyopro_lib_rust::geom","",58,[[],["self"]]],[11,"add","","",59,[[],["self"]]],[11,"add","haar_kyopro_lib_rust::math::ff::modint","",90,[[],["self"]]],[11,"add","haar_kyopro_lib_rust::math::rational","",97,[[],["self"]]],[11,"add","haar_kyopro_lib_rust::math::linalg::matrix","",98,[[],["self"]]],[11,"add","haar_kyopro_lib_rust::math::linalg::square_matrix","",99,[[],["self"]]],[11,"mul","haar_kyopro_lib_rust::geom","",58,[[],["self"]]],[11,"mul","","",59,[[["t"]],["self"]]],[11,"mul","haar_kyopro_lib_rust::math::ff::modint","",90,[[],["self"]]],[11,"mul","haar_kyopro_lib_rust::math::rational","",97,[[],["self"]]],[11,"mul","haar_kyopro_lib_rust::math::linalg::matrix","",98,[[],["self"]]],[11,"mul","haar_kyopro_lib_rust::math::linalg::square_matrix","",99,[[],["self"]]],[11,"neg","haar_kyopro_lib_rust::geom","",58,[[],["self"]]],[11,"neg","haar_kyopro_lib_rust::math::ff::modint","",90,[[],["self"]]],[11,"neg","haar_kyopro_lib_rust::math::rational","",97,[[],["self"]]],[11,"neg","haar_kyopro_lib_rust::math::linalg::matrix","",98,[[],["self"]]],[11,"neg","haar_kyopro_lib_rust::math::linalg::square_matrix","",99,[[],["self"]]],[11,"add_assign","haar_kyopro_lib_rust::geom","",58,[[["self"]]]],[11,"add_assign","haar_kyopro_lib_rust::math::ff::modint","",90,[[["self"]]]],[11,"add_assign","haar_kyopro_lib_rust::math::rational","",97,[[["rational"],["self"]]]],[11,"add_assign","haar_kyopro_lib_rust::math::linalg::matrix","",98,[[["self"]]]],[11,"add_assign","haar_kyopro_lib_rust::math::linalg::square_matrix","",99,[[["self"]]]],[11,"sub_assign","haar_kyopro_lib_rust::geom","",58,[[["self"]]]],[11,"sub_assign","haar_kyopro_lib_rust::math::ff::modint","",90,[[["self"]]]],[11,"sub_assign","haar_kyopro_lib_rust::math::rational","",97,[[["rational"],["self"]]]],[11,"sub_assign","haar_kyopro_lib_rust::math::linalg::matrix","",98,[[["self"]]]],[11,"sub_assign","haar_kyopro_lib_rust::math::linalg::square_matrix","",99,[[["self"]]]],[11,"mul_assign","haar_kyopro_lib_rust::geom","",58,[[["self"]]]],[11,"mul_assign","haar_kyopro_lib_rust::math::ff::modint","",90,[[["self"]]]],[11,"mul_assign","haar_kyopro_lib_rust::math::rational","",97,[[["self"]]]],[11,"mul_assign","haar_kyopro_lib_rust::math::linalg::matrix","",98,[[["self"]]]],[11,"mul_assign","haar_kyopro_lib_rust::math::linalg::square_matrix","",99,[[["self"]]]],[11,"div_assign","haar_kyopro_lib_rust::geom","",58,[[["self"]]]],[11,"div_assign","haar_kyopro_lib_rust::math::ff::modint","",90,[[["self"]]]],[11,"div_assign","haar_kyopro_lib_rust::math::rational","",97,[[["self"]]]],[11,"index","haar_kyopro_lib_rust::ds::segtree","",36,[[["self"],["usize"]]]],[11,"index","haar_kyopro_lib_rust::ds::cumulative_sum_1d","",113,[[["self"],["usize"]]]],[11,"index","haar_kyopro_lib_rust::ds::rollbackable_vector","",42,[[["self"],["usize"]]]],[11,"index","haar_kyopro_lib_rust::math::linalg::matrix","",98,[[["self"],["usize"]]]],[11,"index","haar_kyopro_lib_rust::math::linalg::square_matrix","",99,[[["self"],["usize"]]]],[11,"index","haar_kyopro_lib_rust::seq::sa","",102,[[["self"],["usize"]]]],[11,"sum","haar_kyopro_lib_rust::math::ff::modint","",90,[[["iterator"]],["self"]]],[11,"from_str","haar_kyopro_lib_rust::geom","",58,[[["str"]],["result"]]],[11,"from_str","haar_kyopro_lib_rust::math::ff::modint","",90,[[["str"]],["result"]]]],"p":[[8,"Zero"],[8,"One"],[8,"AlgeStruct"],[8,"BinaryOp"],[8,"Identity"],[8,"Inverse"],[3,"Affine"],[3,"BitXor"],[4,"DihedralValue"],[3,"Dihedral"],[3,"Dual"],[3,"Max"],[3,"Min"],[3,"Prod"],[3,"Sum"],[3,"Update"],[8,"Action"],[3,"AddSum"],[3,"UpdateSum"],[3,"Compressor"],[3,"CompressorBuilder"],[3,"Imos1D"],[3,"Mo"],[3,"TwoSat"],[3,"StaticRangeInversionsQuery"],[8,"Foldable"],[8,"FoldableMut"],[8,"Assignable"],[8,"Updatable"],[8,"IndexableMut"],[3,"UnionFind"],[3,"DualSegmentTree"],[3,"FenwickTree"],[3,"FenwickTreeAdd"],[3,"LazySegmentTree"],[3,"LazySegmentTreeCoeff"],[3,"SegmentTree"],[3,"SegmentTreeLinearAdd"],[4,"Mode"],[3,"StarrySkyTree"],[3,"CumulativeSum1DBuilder"],[3,"PersistentArray"],[3,"RollbackableVec"],[3,"RangeSearchTree"],[3,"RangeSearchTreeBuilder"],[3,"PersistentQueue"],[3,"SlidingWindowAggregation"],[3,"DisjointSparseTable"],[3,"SparseTable"],[3,"LazySkewHeap"],[3,"SkewHeap"],[3,"PersistentStack"],[4,"Mode"],[3,"ConvexHullTrick"],[4,"Mode"],[3,"LiChaoTree"],[3,"BinaryTrie"],[3,"SuccinctDict"],[3,"EpsFloat"],[3,"Vector"],[3,"Line"],[3,"Circle"],[4,"CCW"],[4,"IntersectCircleLine"],[4,"IntersectCircleSegment"],[4,"IntersectCircles"],[4,"IntersectLineSegment"],[4,"IntersectSegments"],[4,"Hull"],[4,"PointPolygon"],[8,"EpsValue"],[8,"Eps"],[3,"Edge"],[3,"Graph"],[4,"BFResult"],[3,"DirectedEulerianTrail"],[3,"UndirectedEulerianTrail"],[3,"Lowlink"],[3,"SCC"],[3,"PSP"],[8,"MaxFlow"],[3,"HopcroftKarp"],[3,"MinCostFlow"],[3,"BipartiteMatching"],[8,"EdgeTrait"],[3,"FactorizeSieve"],[8,"GcdLcm"],[8,"CheckPrime"],[3,"EratosthenesSieve"],[8,"Modulo"],[3,"ModInt"],[8,"Pow"],[8,"Inv"],[8,"Frac"],[3,"ExtLucas"],[3,"BinomialCoefficient"],[3,"FactorialTable"],[3,"Rational"],[3,"Matrix"],[3,"SquareMatrix"],[3,"Dice"],[3,"KMP"],[3,"SuffixArray"],[3,"TreeEdge"],[3,"TreeNode"],[3,"Tree"],[3,"TreeDepthQuery"],[3,"EulerTour"],[3,"HLD"],[3,"DoublingLCA"],[3,"RerootingDP"],[3,"TreeDP"],[8,"JoinStr"],[3,"CumulativeSum1D"],[3,"Dinic"],[3,"FordFulkerson"],[3,"Edge"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);