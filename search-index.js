var searchIndex = JSON.parse('{\
"haar_lib":{"doc":"Rust GitHub last commit","t":"AAOOOOAAOAOOAAOOOOAAAAAOOAOAOOAOOAAAAAAAAAAAAAAAAAAAAAIQQKKKKKDLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIIIIIIIIIIIQILKKKDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFNNNELLFLLLLLLMMDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFAAAAAAAFFFFFFFENNLLLLLLLFLLLLLLDLLLLLLLLLLLDLLLLLLLLLLLFFDLLLLLLLLLLLLLLAAAAAFFFFFFFFFFFFFFFDLLLLLLLLLLLFFFFFDLLLLLLLLLLLLLLLLLLLLLLLLFDDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLFFFDLLLLLLLLLLDLLLLLLLLLLLAAFFENNLLLLLLLLFLLLLLDLLLLLLLLLLLLLFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADLLLLLLLLLLLLLLLLLLLLSDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDINNELLLLLLLLLLLLLLLLLLLLLLLLLLLLDDCLLLLLLLLLLLLLLLLLLLLLLLLLLDDCLLLLLLLLLLLLLLLLLLLLLLLLLLDCLLLLLLLLLLDCCLLLLLLLLLLLLLDLLLLLLLLLLLLLLLDLLLLLLLLLLLLCDLLLLLLLLLLLLLLLLIDLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLIDLLLLLLLLLLLLIDLLLLLLLLLLLLLLLLLLLLLIDNNELLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLRDLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLCDLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLIDLLLLLLLLLLLIDLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLINNEDLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLIIIIQQQIQQKKKKKDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLQIKAAKKAKKDLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLDDDDLLLLLLAAALLLLLLLLAMALLLLLLLLAAAAAALLLLLLAAALLLLLLLLLLLLLLMLLAAAAAALLLLLLLLLLLLLLLLALLMLLAMLLLLLLLLLLLLLLLLLLLLLLFFFENNNNNLLFLLLLLLLLLLLLLLLLLFFFFFFENNLLLLFLLFLLLLLLFFFFNENNLLLLLLLLFLLLLLLLLNENNNNLLLLLLLLFLLLLLLLLLLNNNNENNLLLLLLLLLLFLLLLLLLLLLNENNNLLLLLLLLFLLLLLLLLLNENNNLLLLLLLFLLLLLLLLLLNNNELLLLLLLLLLLFLLLLLFDIDIDDQLLAAAAALLLLLLLLAAALLLLLLLLAAAMAALLLLLLKLLLLLMAMLLLLLALAALLAAKLAKLMLLLLLLLLLLLLAAALLLLLLLLAKLMAFCFFCFFFFFAFFFFAADLLLLLLLLLLLLLLDLLLLLLLLLLLLLLNDDENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFDMLLMLLLLLMLMMMLLLLLFFDDLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLFFFFIFSSDDSDSSLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLMMFAAIDLLLLLLLLLLLILAAAAAAAFFFDLLLLLLLLLLLLLLLLLAADLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAFFAAAAAAAAAAAAAAAADLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFDDLLLLLLLLLLLLLLLLLLLLLLLLLLAAAAAAAFFFFFFFFFFFFDLLLLFLLLMLMMLLLLLFDALALLLALLLLLLLLLLLLLLLLLFAADLLLLLLLLLLFIQKKKFFAAAAAAFFFFFFFFFFFFDLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFAADLLLLLLLLLLIKFFFFFFAAAADLLLLLMLLLLLLMLLLLLDMLLMLLLLLMLMLMLLLLLLLMLLLLFENDNLLLLLLLLMLLLLLLFLLLLLLLLLLMMMAAAAAAAAAIDDLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIIQQQIKKKKKDDLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNENLLLLLLLLLLLLLLLLLLLLLLIQQIKKDLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLALLLLLLLLLIIIIFDDDDIDQLLLLLLLLLLLLAMLLLLLLLAALLLLLKLLLLLLMAMLLLLLLALLLLLLLMAKLLAAKLMLLLALLLLLLLLLLLLLLLALLLLLKLMFDLLLLLLLLLLLLDLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLDLLLLLLLLLLFFDLLLLLLLLLLFFFFAAAAAAAAAAFDLLLLLLLLLLLLLLLLLLLLLLLDMLMLLLLLLLLLLLLLSDLLLLLLLLLLLLLLLLLLFFQIKDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLIK","n":["algebra","algo","btreemap","btreeset","chmax","chmin","ds","flow","for_loop","geom","get","get_time","graph","grid","hashmap","hashset","impl_algebra","input","iter","linalg","macros","matching","math","max","min","misc","mul_vec","num","rec","sort_with","testtools","timer","trait_alias","traits","tree","utils","action","add_sum","affine","bitand","bitor","bitxor","dihedral","dual","max","min","prod","sum","traits","transform","trivial","tuple","update","update_sum","Action","FType","UType","convert","fold","fold_id","update","update_id","AddSum","borrow","borrow_mut","clone","clone_into","convert","default","fold","fold_id","from","into","new","to_owned","try_from","try_into","type_id","update","update_id","vzip","Affine","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","BitAnd","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","into","new","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","BitOr","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","into","new","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","BitXor","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","id","id","id","id","id","id","into","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","new","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","Dihedral","DihedralValue","R","S","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","id","into","into","inv","new","op","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Dual","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","Max","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","id","id","id","id","id","id","into","new","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","Min","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","id","id","id","id","id","id","into","new","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","Prod","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","id","id","id","id","id","id","id","id","into","new","op","op","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","Sum","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","id","id","id","id","id","id","id","id","into","inv","inv","inv","inv","inv","inv","inv","inv","new","op","op","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","AbelianGroup","AbelianMonoid","AlgeStruct","Associative","BinaryOp","Commutative","Exponential","Group","Idempotence","Identity","Inverse","Monoid","Output","Semigroup","exp","id","inv","op","Composition","Permutation","Transformation","apply","apply","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","from","from","from","id","id","into","into","into","into_inner","into_inner","inv","new","op","op","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Trivial","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","into","inv","new","op","to_owned","try_from","try_into","type_id","vzip","Tuple2","Tuple3","Tuple4","Tuple5","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","default","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","id","id","id","id","into","into","into","into","inv","inv","inv","inv","op","op","op","op","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","Update","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","UpdateSum","borrow","borrow_mut","clone","clone_into","convert","default","fold","fold_id","from","into","new","to_owned","try_from","try_into","type_id","update","update_id","vzip","bsearch","bsearch_f","compressor","cycle_finding","edit_distance","enumerate_bitset","golden_search","imos_1d","imos_2d","interval_scheduling","inversion_number","kmp","knapsack","lcs","lis","majority_vote","manacher","max_partial_sum","max_rect","merge","mo","num_subseq","parallel_binary_search","permutation","psp","rle","rolling_hash","sa","shakutori","sliding_window","static_range_freq_query","static_range_inversions_query","subset_sum","ternary_search","two_sat","zalgo","equal_range","lower_bound","upper_bound","AllNg","AllOk","NgOk","SearchResult","borrow","borrow_mut","bsearch_ng_ok","from","into","try_from","try_into","type_id","vzip","ng","ok","Compressor","CompressorBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","compress","decompress","default","extend","from","from","get","index","into","into","new","size","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","cycle_finding","edit_distance","gray_code","subset_asc","subset_between","subset_desc","subset_size_k","superset_asc","superset_desc","gray_code","subset_asc","subset_between","subset_desc","subset_size_k","super_asc","superset_desc","Convex","Downwards","Upwards","borrow","borrow_mut","clone","clone_into","eq","fmt","from","golden_search","into","to_owned","try_from","try_into","type_id","vzip","Imos1D","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","update","vzip","Imos2D","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","update","vzip","interval_scheduling","inversion_number","KMP","borrow","borrow_mut","clone","clone_into","fmt","from","into","matches","new","to_owned","try_from","try_into","type_id","vzip","limited","small_quantity","small_value","small_weight","unlimited","knapsack_limited","knapsack_small_quantity","knapsack_small_value","knapsack_small_weight","knapsack_unlimited","lcs","lis","majority_vote","manacher","max_partial_sum","max_rect","max_rect_in_histogram","inplace_merge","inplace_merge_by","merge","Mo","add","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","num_subseq","parallel_binary_search","next_permutation","permutations","prev_permutation","PSP","borrow","borrow_mut","clone","clone_into","from","gain_if_blue","gain_if_both_blue","gain_if_both_red","gain_if_red","if_red_then_must_be_red","into","must_be_blue","must_be_red","new","penalty_if_blue","penalty_if_different","penalty_if_red","penalty_if_red_blue","solve","to_owned","try_from","try_into","type_id","vzip","rle","RollingHash","Table","borrow","borrow","borrow_mut","borrow_mut","from","from","hash","hash","hash_table","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","SuffixArray","borrow","borrow_mut","clone","clone_into","fmt","from","index","into","lcp_array","new","to_owned","to_slice","try_from","try_into","type_id","vzip","shakutori","sliding_maximum","sliding_minimum","StaticRangeFreqQuery","borrow","borrow_mut","from","into","new","query","try_from","try_into","type_id","vzip","StaticRangeInversionsQuery","add_query","borrow","borrow_mut","from","into","new","solve","try_from","try_into","type_id","vzip","count","limited","subset_sum","subset_sum_limited","Convex","Downwards","Upwards","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","ternary_search","to_owned","try_from","try_into","type_id","vzip","TwoSat","add_if","add_or","borrow","borrow_mut","from","into","new","not_coexist","solve","try_from","try_into","type_id","vzip","zalgo","binary_trie","bitset","cht","cumulative_sum_1d","cumulative_sum_2d","disjoint_sparse_table","dual_segtree","dynamic_dual_segtree","dynamic_segtree","fenwick","fenwick_add","fenwick_on_fenwick","foldable_deque","interval_heap","lazy_segtree","lazy_segtree_coeff","lazy_skew_heap","li_chao","merge_sort_tree","multiset","palindromic_tree","partially_persistent_unionfind","persistent_array","persistent_queue","persistent_segtree","persistent_stack","potential_unionfind","qword_tree","range_search_tree","rollbackable_vector","segtree","segtree_2d","segtree_beats","segtree_linear_add","segtree_linear_add_range_sum","segtree_on_segtree","skew_heap","sparse_table","starry_sky_tree","succinct_dict","traits","unionfind","wavelet_matrix","BinaryTrie","borrow","borrow_mut","clone","clone_into","count","erase","fmt","from","insert","into","is_empty","len","max","min","new","to_owned","try_from","try_into","type_id","vzip","B_SIZE","Bitset","and_count_ones","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","count_ones","count_zeros","flip","fmt","fmt","from","from","into","len","new","same_size_xor_assign","set","test","to_owned","to_string","try_from","try_into","type_id","vzip","ConvexHullTrick","Elem","Max","Min","Mode","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","from","from","into","into","new","query","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","CumulativeSum1D","CumulativeSum1DBuilder","Group","assign","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","fmt","fold","from","from","index","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","CumulativeSum2D","CumulativeSum2DBuilder","Group","assign","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","fmt","fold_2d","from","from","index","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","DisjointSparseTable","Semigroup","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","vzip","DualSegtree","Monoid","Updatable","borrow","borrow_mut","from","from_vec","get","into","new","to_vec","try_from","try_into","type_id","update","vzip","DynamicDualSegtree","borrow","borrow_mut","clone","clone_into","fmt","from","get","into","new","to_owned","try_from","try_into","type_id","update","vzip","DynamicSegtree","assign","borrow","borrow_mut","fmt","fold","from","into","new","try_from","try_into","type_id","vzip","AbelianGroup","FenwickTree","borrow","borrow_mut","clone","clone_into","default","fold","fold_to","from","into","new","to_owned","try_from","try_into","type_id","update","vzip","Elem","FenwickTreeAdd","add","borrow","borrow_mut","fold","fold_to","from","into","new","sub","try_from","try_into","type_id","vzip","FenwickOnFenwick","FenwickOnFenwickBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","default","fold_2d","fold_to_2d","from","from","into","into","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","FoldableDeque","back","borrow","borrow_mut","fold","from","front","into","is_empty","len","new","pop_back","pop_front","push_back","push_front","try_from","try_into","type_id","vzip","IntervalHeap","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","max","min","new","pop_max","pop_min","push","to_owned","try_from","try_into","type_id","vzip","LazySegtree","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","update","vzip","Elem","LazySegtreeCoeff","borrow","borrow_mut","fold","from","init_with_vec","into","new","try_from","try_into","type_id","update","vzip","Elem","LazySkewHeap","add","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","meld","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","Elem","LiChaoTree","Max","Min","Mode","add_line","add_segment","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","from","from","into","into","new","query","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","MergeSortTree","borrow","borrow_mut","from","into","new","sum_le","try_from","try_into","type_id","vzip","MultiSet","borrow","borrow_mut","clone","clone_into","contains","count","default","first","fmt","from","insert","into","is_empty","last","len","new","pop_first","pop_last","remove","to_owned","try_from","try_into","type_id","vzip","Node","PalindromicTree","borrow","borrow","borrow_mut","borrow_mut","count","default","from","from","index","into","into","len","length","new","node_from_strpos","node_of","parent_of","suffix_link_of","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","At","PartiallyPersistentUnionFind","at","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","is_same","latest","merge","new","root_of","size_of","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","PersistentArray","borrow","borrow_mut","clone","clone_into","from","from","get","into","new","set","to_owned","try_from","try_into","type_id","vzip","PersistentQueue","back","borrow","borrow_mut","default","fmt","from","front","into","is_empty","len","new","pop","push","try_from","try_into","type_id","vzip","PersistentSegtree","assign","borrow","borrow_mut","clone","clone_into","fmt","fold","from","from_vec","into","new","to_owned","try_from","try_into","type_id","vzip","PersistentStack","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","iter","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","PotentialUnionFind","borrow","borrow_mut","count_groups","diff","from","get_groups","into","is_same","merge","new","potential_of","root_of","size_of","try_from","try_into","type_id","vzip","MAX","QwordTree","borrow","borrow_mut","contains","default","erase","erase_unchecked","from","insert","insert_unchecked","into","is_empty","len","max","max_le","min","min_ge","new","try_from","try_into","type_id","vzip","RangeSearchTree","RangeSearchTreeBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","default","from","from","into","into","new","search","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","RollbackableVec","as_slice","assign","borrow","borrow_mut","clone","clone_into","default","first","fmt","from","from","index","into","is_empty","last","len","new","pop","push","rollback","to_owned","try_from","try_into","type_id","vzip","Monoid","Segtree","assign","borrow","borrow_mut","clone","clone_into","fold","from","index","into","new","to_owned","try_from","try_into","type_id","update","vzip","Segtree2D","assign","borrow","borrow_mut","fold_2d","from","get","into","new","try_from","try_into","type_id","update","vzip","SegtreeBeats","add","borrow","borrow_mut","chmax","chmin","clone","clone_into","fmt","from","get_max","get_min","get_sum","into","new","new_with_vec","to_owned","try_from","try_into","type_id","vzip","Elem","SegtreeLinearAdd","borrow","borrow_mut","from","get","into","new","try_from","try_into","type_id","update","vzip","Elem","SegtreeLinearAddRangeSum","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","update","vzip","SegtreeOnSegtree","SegtreeOnSegtreeBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","default","fold_2d","from","from","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","SkewHeap","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","meld","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","SparseTable","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","vzip","Elem","Max","Min","Mode","StarrySkyTree","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fold","from","from","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","SuccinctDict","access","borrow","borrow_mut","clone","clone_into","count","from","into","is_empty","len","new","rank","select","to_owned","try_from","try_into","type_id","vzip","Assignable","Foldable","Foldable2D","Indexable","Output","Output","Output","Updatable","Value","Value","assign","fold","fold","get","update","UnionFind","borrow","borrow_mut","count_groups","from","get_groups","into","is_same","merge","new","root_of","size_of","try_from","try_into","type_id","value_of","vzip","with_values","WaveletMatrix","access","borrow","borrow_mut","clone","clone_into","count","from","into","maximum","minimum","new","next_value","prev_value","quantile","range_freq","rank","select","to_owned","try_from","try_into","type_id","vzip","Cap","MaxFlow","add_edge","dinic","ford_fulkerson","get_edges","max_flow","min_cost_flow","new","reset","Dinic","add_edge","borrow","borrow_mut","clone","clone_into","from","get_edges","into","max_flow","new","reset","to_owned","try_from","try_into","type_id","vzip","FordFulkerson","add_edge","borrow","borrow_mut","clone","clone_into","from","get_edges","into","max_flow","new","reset","to_owned","try_from","try_into","type_id","vzip","MinCostFlow","add_edge","borrow","borrow_mut","clone","clone_into","from","into","min_cost_flow","new","to_owned","try_from","try_into","type_id","vzip","Circle","Eps","Line","Vector","abs","abs","abs_sq","add","angle","angle_diff","area_intersection_circle_polygon","area_intersection_circles","area_polygon","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ccw","center","circumcircle","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","closest_pair","common_tangent_circles","convex","convex_cut","convex_diameter","convex_hull","cross","cross","default","default","default","diff","dist_line_point","dist_segment_point","dist_segments","div","dot","dot","eq","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","ge","gt","incircle","intersect_circle_line","intersect_circle_segment","intersect_circles","intersect_line_segment","intersect_segments","into","into","into","into","is_orthogonal","is_parallel","le","lt","mul","ne","new","new","new","normal","normal","partial_cmp","point_in_polygon","polar","projection","radius","reflection","sub","tangent_circle","to","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unit","unit","vzip","vzip","vzip","vzip","area_intersection_circle_polygon","area_intersection_circles","area_polygon","CCW","CLOCKWISE","COUNTER_CLOCKWISE","ONLINE_BACK","ONLINE_FRONT","ON_SEGMENT","borrow","borrow_mut","ccw","clockwise","clone","clone_into","counter_clockwise","eq","fmt","from","into","on_segment","online_back","online_front","to_owned","to_value","try_from","try_into","type_id","vzip","circumcircle","closest_pair","common_tangent_circles","is_convex","convex_cut","convex_diameter","Hull","Lower","Upper","borrow","borrow_mut","clone","clone_into","convex_hull","eq","from","half_hull","into","to_owned","try_from","try_into","type_id","vzip","dist_line_point","dist_segment_point","dist_segments","incircle","CROSSED","IntersectCircleLine","OUTSIDE","TANGENT","borrow","borrow_mut","clone","clone_into","crossed","eq","fmt","from","intersect_circle_line","into","outside","tangent","to_owned","try_from","try_into","type_id","vzip","INSIDE","IntersectCircleSegment","ONE_CROSSPOINT","OUTSIDE","TANGENT","TWO_CROSSPOINTS","borrow","borrow_mut","clone","clone_into","eq","fmt","from","inside","intersect_circle_segment","into","one_crosspoint","outside","tangent","to_owned","try_from","try_into","two_crosspoints","type_id","vzip","CIRCUMSCRIBED","INSCRIBED","INSIDE","INTERSECTED","IntersectCircles","OUTSIDE","SAME","borrow","borrow_mut","circumscribed","clone","clone_into","eq","fmt","from","inscribed","inside","intersect_circles","intersected","into","num_common_tangent","outside","same","to_owned","try_from","try_into","type_id","vzip","CROSSED","IntersectLineSegment","LEFTSIDE","OVERLAPPED","RIGHTSIDE","borrow","borrow_mut","clone","clone_into","crossed","eq","fmt","from","intersect_line_segment","into","leftside","overlapped","rightside","to_owned","try_from","try_into","type_id","vzip","INTERSECTED","IntersectSegments","NOT_INTERSECTED","OVERLAPPED","SAME","borrow","borrow_mut","clone","clone_into","eq","fmt","from","intersect_segments","intersected","into","not_intersected","overlapped","same","to_owned","try_from","try_into","type_id","vzip","EXCLUSION","INCLUSION","ON_SEGMENT","PointPolygon","borrow","borrow_mut","clone","clone_into","eq","exclusion","fmt","from","inclusion","into","on_segment","point_in_polygon","to_owned","try_from","try_into","type_id","vzip","tangent_circle","Directed","Direction","Edge","EdgeTrait","Graph","Undirected","Weight","add","add","articulation_points","bellman_ford","bfs","biconnected","bipartite","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bridges","chinese_postman","chu_liu_edmonds","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cycle","detect_cycle","dijkstra","edges","enumerate_triangles","eulerian","extend","extend","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","functional_graph","index","into","into","into","into","is_empty","kruskal","len","lowlink","max_independent_set","new","new","prim","pseudo_tree","rev","rev","scc","to","to","to","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tsort","tsp","two_edge","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","warshall_floyd","weight","weight","weight","yen","articulation_points","NumInf","bellman_ford","bfs","Lowlink","biconnected","check_bipartite","bridges","chinese_postman_problem","chu_liu_edmonds","directed_shortest","directed_shortest_cycle","detect_cycle","dijkstra","enumerate_triangles","directed","undirected","DirectedEulerianTrail","add_edge","borrow","borrow_mut","clone","clone_into","from","into","new","solve","to_owned","try_from","try_into","type_id","vzip","UndirectedEulerianTrail","add_edge","borrow","borrow_mut","clone","clone_into","from","into","new","solve","to_owned","try_from","try_into","type_id","vzip","Branch","FunctionalGraph","FunctionalGraphBuilder","Kind","Leaf","Loop","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","clone","clone_into","eq","fmt","from","from","from","grp_index_of","into","into","into","kind_of","loops","new","next_of","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","kruskal","Lowlink","back","borrow","borrow_mut","ch","clone","clone_into","fmt","from","into","low","new","ord","par","size","to_owned","try_from","try_into","type_id","vzip","max_independent_set","prim","PseudoTree","PseudoTreeBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","from","from","group_of","into","into","is_in_loop","new","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","SCC","borrow","borrow_mut","from","groups","into","new","to_vec","try_from","try_into","type_id","vzip","tsort","tsp","two_edge_connected_components","warshall_floyd","Elem","yen_algorithm","D","DIR_4","Dir","Grid","L","Position","R","U","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","dx","dy","eq","eq","fmt","fmt","fmt","from","from","from","get","get_mut","into","into","into","iter","iter_mut","mov_strict","new","new","new","to_graph","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","x","y","grid_to_graph","cumsum","join_str","CumSum","_CumSum","borrow","borrow_mut","cumsum","from","into","into_iter","next","try_from","try_into","type_id","vzip","JoinStr","join_str","mod_2","mod_m","mod_p","determinant","gaussian_elim","inverse","matrix","determinant","gaussian_elim","inverse","MatrixMod2","borrow","borrow_mut","clone","clone_into","from","from_vec_bitset","get","index","into","mul","new","to_owned","transpose","try_from","try_into","type_id","vzip","matrix","square_matrix","Matrix","add","add_assign","borrow","borrow_mut","clone","clone_into","eq","from","from_vec_2d","get_mut","height","index","into","mul","mul_assign","neg","new","sub","sub_assign","to_owned","transpose","try_from","try_into","type_id","vzip","width","SquareMatrix","add","add_assign","borrow","borrow_mut","clone","clone_into","eq","from","from_vec","get_mut","index","into","mul","mul_assign","neg","new","pow","size","straight_mul","strassen_mul","sub","sub_assign","to_owned","transpose","try_from","try_into","type_id","unit","vzip","determinant","inverse","determinant","inverse","chmax","chmin","ds_macros","for_loop","get_time","impl_algebra","io","max","min","mul_vec","rec","sort_with","timer","trait_alias","bi_match","hopcroft_karp","BipartiteMatching","add_edge","borrow","borrow_mut","from","into","matching","new","try_from","try_into","type_id","vzip","Edge","HopcroftKarp","add_edge","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","from","from","get_matching","into","into","matching","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","bell_number","berlekamp_massey","binomial_coefficient","convolution","count_coprime","crt","divisor","enumerate_quotients","ext_gcd","factorial","factorial_prime_factor","factorize","gcd_lcm","linear_congruence","miller_rabin","mod_ops","montmort","multipoint_eval","nim_product","ntt","polynomial","polynomial_taylor_shift","prime_test","primitive_root","sum_floor_linear","sum_of_exponential_times_polynomial_limit","totient","totient_sum","bell_number_table","berlekamp_massey","BinomialCoefficient","ExtLucas","borrow","borrow","borrow_mut","borrow_mut","calc","calc","clone","clone","clone_into","clone_into","from","from","into","into","new","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","conv_and","conv_or","mobius_sub","mobius_super","subset_conv","zeta_sub","zeta_super","convolution_and","convolution_or","fast_mobius_subset","fast_mobius_superset","subset_convolution","fast_zeta_subset","fast_zeta_superset","count_coprime","crt","crt_vec","count_divisors","enumerate_divisors","Quotient","borrow","borrow_mut","clone","clone_into","enumerate_quotients","eq","fmt","from","from","into","q","to","to_owned","try_from","try_into","type_id","vzip","ext_gcd","FactorialTable","bell","bell_number","bernoulli","bernoulli_number","borrow","borrow_mut","catalan","catalan_number","clone","clone_into","comb","facto","fmt","from","h","into","inv_facto","new","perm","to_owned","try_from","try_into","type_id","vzip","factorial_prime_factor","sieve","trial","FactorizeSieve","borrow","borrow_mut","factorize","from","into","new","try_from","try_into","type_id","vzip","factorize","GcdLcm","Output","gcd","gcd_lcm","lcm","linear_congruence","miller_rabin","enum_inv","inv","inv_p","log","pow","sqrt","enumerate_mod_inv","mod_inv","mod_inv_p","mod_log","mod_pow","mod_sqrt","montmort","multipoint_eval","nim_product_16","nim_product_32","nim_product_64","nim_product_8","NTT","borrow","borrow_mut","convolve","from","into","new","try_from","try_into","type_id","vzip","Polynomial","PolynomialOperator","add","add_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","coeff_of","constant","deg","divmod","eq","eval","fmt","from","from","from","get_until","into","into","inv","is_empty","len","mul","mul_assign","new","scale","shrink","sq","sub","sub_assign","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","zero","polynomial_taylor_shift","eratosthenes","traits","EratosthenesSieve","borrow","borrow_mut","from","into","is_prime","new","try_from","try_into","type_id","vzip","CheckPrime","is_prime","primitive_root","sum_floor_linear","sum_of_exponential_times_polynomial_limit","totient","totient_table","totient_sum","closed_interval","dice","paren","parse_paren","ClosedInterval","borrow","borrow_mut","clone","clone_into","default","end","eq","fmt","from","into","merge","new","start","to_owned","try_from","try_into","type_id","vzip","Dice","back","borrow","borrow_mut","bottom","clone","clone_into","eq","fmt","from","front","into","left","new","right","rot_back","rot_clockwise","rot_counterclockwise","rot_front","rot_left","rot_right","to_owned","top","try_from","try_into","type_id","vzip","check_paren","Elem","Paren","ParseResult","Value","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","elems","fmt","fmt","from","from","into","into","parse_paren","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","close","inner","open","arithmetic","const_modint","ff","modint","num_inf","one_zero","rational","total_f64","traits","Arithmetic","ConstModInt","ConstModIntBuilder","add","add_assign","algebra","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","div","div_assign","eq","eq","fmt","fmt","frac","from","from","from_i64","from_u64","into","into","inv","mul","mul_assign","neg","new","one","one_zero","pow","sub","sub_assign","to_owned","to_owned","to_string","to_u32","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","zero","Prod","Sum","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","eq","eq","fmt","fmt","from","from","id","id","into","into","inv","op","op","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","FF","FFElem","Inv","Output","Output","Output","Pow","frac","from_i64","from_u64","inv","pow","ModInt","ModIntBuilder","add","add_assign","algebra","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","div","div_assign","eq","eq","fmt","fmt","fmt","frac","from","from","from_i64","from_u64","into","into","inv","mul","mul_assign","neg","new","new","pow","sub","sub_assign","to_owned","to_owned","to_string","to_u32","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Prod","Sum","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","eq","eq","fmt","fmt","from","from","id","id","into","into","inv","new","new","op","op","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Inf","NegInf","NumInf","Value","add","borrow","borrow_mut","clone","clone_into","cmp","eq","fmt","from","into","is_inf","is_neg_inf","is_value","neg","partial_cmp","sub","to_owned","try_from","try_into","type_id","unwrap","vzip","One","Output","Output","Zero","one","zero","Rational","add","add_assign","borrow","borrow_mut","clone","clone_into","cmp","denominator","div","div_assign","eq","fmt","from","from","into","mul","mul_assign","neg","new","numerator","partial_cmp","sub","sub_assign","to_owned","try_from","try_into","type_id","vzip","Totalf64","add","add_assign","borrow","borrow_mut","clone","clone_into","cmp","default","div","div_assign","eq","fmt","from","into","mul","mul_assign","neg","one","one_zero","partial_cmp","sub","sub_assign","to_owned","try_from","try_into","type_id","vzip","zero","Float","Int","Signed","Unsigned","rand_range","RootedTreeBuilder","Tree","TreeBuilder","TreeEdge","TreeEdgeTrait","TreeNode","Weight","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","centroid","children","clone","clone","clone","clone_into","clone_into","clone_into","default","depth_query","euler_tour","extend","extend","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hld","index","into","into","into","into","into","is_empty","lca","len","neighbors","neighbors_size","new","new","new","nodes_iter","parent","rerooting","rev","rev","root","rooted_isomorphism","rooting","to","to","to","to_owned","to_owned","to_owned","tree_dp","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","utils","vzip","vzip","vzip","vzip","vzip","weight","weight","weight","centroids","TreeDepthQuery","ancestor","borrow","borrow_mut","children_query","from","into","me_query","new","try_from","try_into","type_id","vzip","EulerTour","borrow","borrow_mut","from","into","new","point_query","subtree_query","try_from","try_into","type_id","vzip","HLD","borrow","borrow_mut","clone","clone_into","fmt","from","get_id","into","lca","new","parent","path_query_edge","path_query_vertex","subtree_query_edge","subtree_query_vertex","to_owned","try_from","try_into","type_id","vzip","DoublingLCA","ancestor","borrow","borrow_mut","from","into","jump","lca","new","try_from","try_into","type_id","vzip","RerootingDP","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","rooted_isomorphism","rooting","TreeDP","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","tree_diameter","tree_distance","tree_height","tree_path","bits","fastio","linear","nullable_usize","range","swap","transpose","usize_set","xor_shift","yesno","highest_one","FastIO","borrow","borrow_mut","drop","from","getc","into","new","peek","read_chars","read_f64","read_i32","read_i64","read_isize","read_u32","read_u64","read_usize","skip","try_from","try_into","type_id","vzip","write","writeln","Linear","a","apply","b","borrow","borrow_mut","clone","clone_into","fmt","from","into","mov_x","to_owned","try_from","try_into","type_id","vzip","NULL","NullableUsize","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","hash","into","is_null","partial_cmp","to_owned","try_from","try_into","type_id","vzip","range_bounds_to_range","swap_vv","Output","Transpose","transpose","UsizeSet","bitand","bitor","bitxor","borrow","borrow_mut","clone","clone_into","cmp","contains","default","difference","eq","fill","flip","fmt","from","from","hash","intersection","into","is_empty","len","partial_cmp","reset","set","sub","symmetric_difference","to_owned","try_from","try_into","type_id","union","vzip","XorShift","borrow","borrow_mut","clone","clone_into","fmt","from","gen","into","new","to_owned","try_from","try_into","type_id","vzip","YesNo","yesno"],"q":[[0,"haar_lib"],[36,"haar_lib::algebra"],[54,"haar_lib::algebra::action"],[62,"haar_lib::algebra::add_sum"],[81,"haar_lib::algebra::affine"],[99,"haar_lib::algebra::bitand"],[127,"haar_lib::algebra::bitor"],[155,"haar_lib::algebra::bitxor"],[207,"haar_lib::algebra::dihedral"],[241,"haar_lib::algebra::dual"],[259,"haar_lib::algebra::max"],[299,"haar_lib::algebra::min"],[339,"haar_lib::algebra::prod"],[383,"haar_lib::algebra::sum"],[435,"haar_lib::algebra::traits"],[453,"haar_lib::algebra::transform"],[507,"haar_lib::algebra::trivial"],[526,"haar_lib::algebra::tuple"],[598,"haar_lib::algebra::update"],[616,"haar_lib::algebra::update_sum"],[635,"haar_lib::algo"],[671,"haar_lib::algo::bsearch"],[674,"haar_lib::algo::bsearch_f"],[687,"haar_lib::algo::bsearch_f::SearchResult"],[689,"haar_lib::algo::compressor"],[723,"haar_lib::algo::cycle_finding"],[724,"haar_lib::algo::edit_distance"],[725,"haar_lib::algo::enumerate_bitset"],[732,"haar_lib::algo::enumerate_bitset::gray_code"],[733,"haar_lib::algo::enumerate_bitset::subset_asc"],[734,"haar_lib::algo::enumerate_bitset::subset_between"],[735,"haar_lib::algo::enumerate_bitset::subset_desc"],[736,"haar_lib::algo::enumerate_bitset::subset_size_k"],[737,"haar_lib::algo::enumerate_bitset::superset_asc"],[738,"haar_lib::algo::enumerate_bitset::superset_desc"],[739,"haar_lib::algo::golden_search"],[756,"haar_lib::algo::imos_1d"],[768,"haar_lib::algo::imos_2d"],[780,"haar_lib::algo::interval_scheduling"],[781,"haar_lib::algo::inversion_number"],[782,"haar_lib::algo::kmp"],[797,"haar_lib::algo::knapsack"],[802,"haar_lib::algo::knapsack::limited"],[803,"haar_lib::algo::knapsack::small_quantity"],[804,"haar_lib::algo::knapsack::small_value"],[805,"haar_lib::algo::knapsack::small_weight"],[806,"haar_lib::algo::knapsack::unlimited"],[807,"haar_lib::algo::lcs"],[808,"haar_lib::algo::lis"],[809,"haar_lib::algo::majority_vote"],[810,"haar_lib::algo::manacher"],[811,"haar_lib::algo::max_partial_sum"],[812,"haar_lib::algo::max_rect"],[814,"haar_lib::algo::merge"],[817,"haar_lib::algo::mo"],[829,"haar_lib::algo::num_subseq"],[830,"haar_lib::algo::parallel_binary_search"],[831,"haar_lib::algo::permutation"],[834,"haar_lib::algo::psp"],[859,"haar_lib::algo::rle"],[860,"haar_lib::algo::rolling_hash"],[882,"haar_lib::algo::sa"],[899,"haar_lib::algo::shakutori"],[900,"haar_lib::algo::sliding_window"],[902,"haar_lib::algo::static_range_freq_query"],[913,"haar_lib::algo::static_range_inversions_query"],[925,"haar_lib::algo::subset_sum"],[927,"haar_lib::algo::subset_sum::count"],[928,"haar_lib::algo::subset_sum::limited"],[929,"haar_lib::algo::ternary_search"],[946,"haar_lib::algo::two_sat"],[960,"haar_lib::algo::zalgo"],[961,"haar_lib::ds"],[1004,"haar_lib::ds::binary_trie"],[1025,"haar_lib::ds::bitset"],[1057,"haar_lib::ds::cht"],[1090,"haar_lib::ds::cumulative_sum_1d"],[1119,"haar_lib::ds::cumulative_sum_2d"],[1148,"haar_lib::ds::disjoint_sparse_table"],[1160,"haar_lib::ds::dual_segtree"],[1176,"haar_lib::ds::dynamic_dual_segtree"],[1192,"haar_lib::ds::dynamic_segtree"],[1205,"haar_lib::ds::fenwick"],[1223,"haar_lib::ds::fenwick_add"],[1238,"haar_lib::ds::fenwick_on_fenwick"],[1269,"haar_lib::ds::foldable_deque"],[1288,"haar_lib::ds::interval_heap"],[1310,"haar_lib::ds::lazy_segtree"],[1322,"haar_lib::ds::lazy_segtree_coeff"],[1336,"haar_lib::ds::lazy_skew_heap"],[1359,"haar_lib::ds::li_chao"],[1389,"haar_lib::ds::merge_sort_tree"],[1400,"haar_lib::ds::multiset"],[1425,"haar_lib::ds::palindromic_tree"],[1453,"haar_lib::ds::partially_persistent_unionfind"],[1478,"haar_lib::ds::persistent_array"],[1494,"haar_lib::ds::persistent_queue"],[1512,"haar_lib::ds::persistent_segtree"],[1529,"haar_lib::ds::persistent_stack"],[1548,"haar_lib::ds::potential_unionfind"],[1566,"haar_lib::ds::qword_tree"],[1589,"haar_lib::ds::range_search_tree"],[1615,"haar_lib::ds::rollbackable_vector"],[1641,"haar_lib::ds::segtree"],[1659,"haar_lib::ds::segtree_2d"],[1673,"haar_lib::ds::segtree_beats"],[1694,"haar_lib::ds::segtree_linear_add"],[1707,"haar_lib::ds::segtree_linear_add_range_sum"],[1720,"haar_lib::ds::segtree_on_segtree"],[1747,"haar_lib::ds::skew_heap"],[1768,"haar_lib::ds::sparse_table"],[1779,"haar_lib::ds::starry_sky_tree"],[1806,"haar_lib::ds::succinct_dict"],[1825,"haar_lib::ds::traits"],[1840,"haar_lib::ds::unionfind"],[1858,"haar_lib::ds::wavelet_matrix"],[1881,"haar_lib::flow"],[1891,"haar_lib::flow::dinic"],[1908,"haar_lib::flow::ford_fulkerson"],[1925,"haar_lib::flow::min_cost_flow"],[1940,"haar_lib::geom"],[2056,"haar_lib::geom::area_intersection_circle_polygon"],[2057,"haar_lib::geom::area_intersection_circles"],[2058,"haar_lib::geom::area_polygon"],[2059,"haar_lib::geom::ccw"],[2085,"haar_lib::geom::circumcircle"],[2086,"haar_lib::geom::closest_pair"],[2087,"haar_lib::geom::common_tangent_circles"],[2088,"haar_lib::geom::convex"],[2089,"haar_lib::geom::convex_cut"],[2090,"haar_lib::geom::convex_diameter"],[2091,"haar_lib::geom::convex_hull"],[2108,"haar_lib::geom::dist_line_point"],[2109,"haar_lib::geom::dist_segment_point"],[2110,"haar_lib::geom::dist_segments"],[2111,"haar_lib::geom::incircle"],[2112,"haar_lib::geom::intersect_circle_line"],[2133,"haar_lib::geom::intersect_circle_segment"],[2158,"haar_lib::geom::intersect_circles"],[2186,"haar_lib::geom::intersect_line_segment"],[2209,"haar_lib::geom::intersect_segments"],[2232,"haar_lib::geom::point_in_polygon"],[2253,"haar_lib::geom::tangent_circle"],[2254,"haar_lib::graph"],[2355,"haar_lib::graph::articulation_points"],[2356,"haar_lib::graph::bellman_ford"],[2358,"haar_lib::graph::bfs"],[2359,"haar_lib::graph::biconnected"],[2361,"haar_lib::graph::bipartite"],[2362,"haar_lib::graph::bridges"],[2363,"haar_lib::graph::chinese_postman"],[2364,"haar_lib::graph::chu_liu_edmonds"],[2365,"haar_lib::graph::cycle"],[2366,"haar_lib::graph::cycle::directed_shortest"],[2367,"haar_lib::graph::detect_cycle"],[2368,"haar_lib::graph::dijkstra"],[2369,"haar_lib::graph::enumerate_triangles"],[2370,"haar_lib::graph::eulerian"],[2372,"haar_lib::graph::eulerian::directed"],[2387,"haar_lib::graph::eulerian::undirected"],[2402,"haar_lib::graph::functional_graph"],[2444,"haar_lib::graph::kruskal"],[2445,"haar_lib::graph::lowlink"],[2465,"haar_lib::graph::max_independent_set"],[2466,"haar_lib::graph::prim"],[2467,"haar_lib::graph::pseudo_tree"],[2490,"haar_lib::graph::scc"],[2502,"haar_lib::graph::tsort"],[2503,"haar_lib::graph::tsp"],[2504,"haar_lib::graph::two_edge"],[2505,"haar_lib::graph::warshall_floyd"],[2506,"haar_lib::graph::yen"],[2508,"haar_lib::grid"],[2570,"haar_lib::grid::to_graph"],[2571,"haar_lib::iter"],[2573,"haar_lib::iter::cumsum"],[2586,"haar_lib::iter::join_str"],[2588,"haar_lib::linalg"],[2591,"haar_lib::linalg::mod_2"],[2595,"haar_lib::linalg::mod_2::determinant"],[2596,"haar_lib::linalg::mod_2::gaussian_elim"],[2597,"haar_lib::linalg::mod_2::inverse"],[2598,"haar_lib::linalg::mod_2::matrix"],[2616,"haar_lib::linalg::mod_m"],[2618,"haar_lib::linalg::mod_m::matrix"],[2645,"haar_lib::linalg::mod_m::square_matrix"],[2675,"haar_lib::linalg::mod_p"],[2677,"haar_lib::linalg::mod_p::determinant"],[2678,"haar_lib::linalg::mod_p::inverse"],[2679,"haar_lib::macros"],[2693,"haar_lib::matching"],[2695,"haar_lib::matching::bi_match"],[2707,"haar_lib::matching::hopcroft_karp"],[2733,"haar_lib::math"],[2761,"haar_lib::math::bell_number"],[2762,"haar_lib::math::berlekamp_massey"],[2763,"haar_lib::math::binomial_coefficient"],[2791,"haar_lib::math::convolution"],[2798,"haar_lib::math::convolution::conv_and"],[2799,"haar_lib::math::convolution::conv_or"],[2800,"haar_lib::math::convolution::mobius_sub"],[2801,"haar_lib::math::convolution::mobius_super"],[2802,"haar_lib::math::convolution::subset_conv"],[2803,"haar_lib::math::convolution::zeta_sub"],[2804,"haar_lib::math::convolution::zeta_super"],[2805,"haar_lib::math::count_coprime"],[2806,"haar_lib::math::crt"],[2808,"haar_lib::math::divisor"],[2810,"haar_lib::math::enumerate_quotients"],[2828,"haar_lib::math::ext_gcd"],[2829,"haar_lib::math::factorial"],[2854,"haar_lib::math::factorial_prime_factor"],[2855,"haar_lib::math::factorize"],[2857,"haar_lib::math::factorize::sieve"],[2868,"haar_lib::math::factorize::trial"],[2869,"haar_lib::math::gcd_lcm"],[2874,"haar_lib::math::linear_congruence"],[2875,"haar_lib::math::miller_rabin"],[2876,"haar_lib::math::mod_ops"],[2882,"haar_lib::math::mod_ops::enum_inv"],[2883,"haar_lib::math::mod_ops::inv"],[2884,"haar_lib::math::mod_ops::inv_p"],[2885,"haar_lib::math::mod_ops::log"],[2886,"haar_lib::math::mod_ops::pow"],[2887,"haar_lib::math::mod_ops::sqrt"],[2888,"haar_lib::math::montmort"],[2889,"haar_lib::math::multipoint_eval"],[2890,"haar_lib::math::nim_product"],[2894,"haar_lib::math::ntt"],[2905,"haar_lib::math::polynomial"],[2949,"haar_lib::math::polynomial_taylor_shift"],[2950,"haar_lib::math::prime_test"],[2952,"haar_lib::math::prime_test::eratosthenes"],[2963,"haar_lib::math::prime_test::traits"],[2965,"haar_lib::math::primitive_root"],[2966,"haar_lib::math::sum_floor_linear"],[2967,"haar_lib::math::sum_of_exponential_times_polynomial_limit"],[2968,"haar_lib::math::totient"],[2970,"haar_lib::math::totient_sum"],[2971,"haar_lib::misc"],[2975,"haar_lib::misc::closed_interval"],[2994,"haar_lib::misc::dice"],[3021,"haar_lib::misc::paren"],[3022,"haar_lib::misc::parse_paren"],[3052,"haar_lib::misc::parse_paren::Elem"],[3055,"haar_lib::num"],[3064,"haar_lib::num::arithmetic"],[3065,"haar_lib::num::const_modint"],[3116,"haar_lib::num::const_modint::algebra"],[3151,"haar_lib::num::ff"],[3163,"haar_lib::num::modint"],[3211,"haar_lib::num::modint::algebra"],[3248,"haar_lib::num::num_inf"],[3274,"haar_lib::num::one_zero"],[3280,"haar_lib::num::rational"],[3309,"haar_lib::num::total_f64"],[3338,"haar_lib::num::traits"],[3342,"haar_lib::testtools"],[3343,"haar_lib::tree"],[3440,"haar_lib::tree::centroid"],[3441,"haar_lib::tree::depth_query"],[3454,"haar_lib::tree::euler_tour"],[3466,"haar_lib::tree::hld"],[3487,"haar_lib::tree::lca"],[3500,"haar_lib::tree::rerooting"],[3511,"haar_lib::tree::rooted_isomorphism"],[3512,"haar_lib::tree::rooting"],[3513,"haar_lib::tree::tree_dp"],[3524,"haar_lib::tree::utils"],[3528,"haar_lib::utils"],[3538,"haar_lib::utils::bits"],[3539,"haar_lib::utils::fastio"],[3563,"haar_lib::utils::linear"],[3580,"haar_lib::utils::nullable_usize"],[3600,"haar_lib::utils::range"],[3601,"haar_lib::utils::swap"],[3602,"haar_lib::utils::transpose"],[3605,"haar_lib::utils::usize_set"],[3639,"haar_lib::utils::xor_shift"],[3654,"haar_lib::utils::yesno"]],"d":["代数的構造","","","","","","データ構造","フロー問題","","幾何","","","グラフ一般に関するもの","","","","","","","線形代数","macro_exportされたmacro置き場","マッチング問題","数学","","","分類を放置しているもの","","","…","","","","","","木に関するもの","便利そうなもの置き場","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","二分探索","","座標圧縮","循環検出法","編集距離","","黄金分割探索","","","区間スケジューリング問題","転倒数","Knuth-Morris-Pratt法","ナップサック問題","最長共通部分列","最長増加部分列","Boyer-Moore majority vote algorithm","","最大連続部分和","","","Mo’s algorithm","相異なる部分列の総数","並列二分探索","","Project Selection Problem","Run Length Encoding","","Suffix Array","尺取り法","スライド最小値","配列に対する範囲頻度取得クエリ","範囲転倒数取得クエリ","部分和問題","三分探索","2-SAT","","lower_bound, upper_boundの組を求める。","x以上となる最小のindexを求める。","xを超える最小のindexを求める。","","","","","","","二分探索","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","<strong>Time complexity O(n log n)</strong>","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","<code>i</code>番目の値を返す。","<code>value</code>が何番目の値(0-index)かを返す。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","循環検出法","編集距離","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","<strong>Time complexity O(n)</strong>","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity O(n)</strong>","","","","<strong>Time complexity O(1)</strong>","","","","","<strong>Time complexity O(nm)</strong>","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity O(nm)</strong>","","","","<strong>Time complexity O(1)</strong>","","…","数列の転倒数を計算する。","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity O(|s|)</strong>","<strong>Time complexity O(|pat|)</strong>","","","","","","","","","","","個数制限付きナップサック問題","要素数が小さいナップサック問題","価値の総和が小さいナップサック問題","容量が小さいナップサック問題","個数制限無しナップサック問題","列a, bの最長共通部分列の一つを求める。","列の最長増加部分列の一つを求める。","Boyer-Moore majority vote algorithm","<strong>Time complexity O(|s|)</strong>","…","…","…","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","返り値<code>ret</code>に対して、<code>ret[i]</code>は<code>a[0..i]</code>…","","","","","Project Selection Problem","","","","","Returns the argument unchanged.","頂点iが青ならばcの利益を得る。","頂点iとjがともに青ならばcの利益を得る。","頂点iとjがともに赤ならばcの利益を得る。","頂点iが赤ならばcの利益を得る。","頂点iが赤ならば、頂点jも赤…","Calls <code>U::from(self)</code>.","頂点iは青でなければならない。","頂点iは赤でなければならない。","","頂点iが青ならばcの損失になる。","頂点iとjが異なる色ならばcの損失となる。","頂点iが赤ならばcの損失になる。","頂点iが赤かつ頂点jが青…","must be制約を破った場合、<code>None</code>…","","","","","","<strong>Time Complexity O(|a|)</strong>","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","尺取り法","","…","…","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time Complexity O(|a|)</strong>","<strong>Time Complexity O(log |a|)</strong>","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity O(n log n)</strong>","","","","","","","","部分和問題 …","…","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","a → b","a ∨ b","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity O(size)</strong>","¬(a ∧ b)","<strong>Time complexity O(size + E)</strong>","","","","","","","","Convex Hull Trick","1次元累積和","2次元累積和","半群の列の区間演算を行う(O(1))","","","","","","","","","","係数乗算付き区間加算区間総和遅延セグ木","遅延加算付き融合可能ヒープ","Li-Chao tree","Merge-sort Tree","","","部分永続UnionFind","永続配列","永続キュー","永続セグメントツリー","永続スタック","ポテンシャル付きUnionfind","64分木","領域内の点を列挙する","ロールバック可能Vec","","","","区間一次関数加算セグメントツリー","…","","融合可能ヒープ","冪等性と結合性をもつ列の区間取得(O(1))","区間加算・区間Max(Min)","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","…","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","…","","","","","","","","","","","","","","","","","","","","","","","Time complexity O(1)","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Time Complexity O(1)","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","","<strong>Time complexity O(log n)</strong>","Calls <code>U::from(self)</code>.","<strong>Time complexity O(n)</strong>","","","","","<strong>Time complexity O(log n)</strong>","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","使用する点を登録する。","","","","","","","","","","","Time Complexity $O(\\\\log ^ 2 n)$","Time Complexity $O(\\\\log ^ 2 n)$","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Time Complexity $O(\\\\log ^ 2 n)$","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity O(n log n)</strong>","<code>ub</code>以下の総和を求める","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","時刻tでの状態","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","最新時点の状態","","","","Complexity","","","","","","","","","","","","","","Returns the argument unchanged.","","<strong>Time complexity O(log n)</strong>","Calls <code>U::from(self)</code>.","<strong>Time complexity O(n)</strong>","<strong>Time complexity O(log n)</strong>","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","永続スタック","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","　0 ~ 16777215 (2²⁴ - 1) の値の集合を管理する","","","xを含むかどうかを判定する","","xを集合から削除する","Safety","Returns the argument unchanged.","xを集合に加える","Safety","Calls <code>U::from(self)</code>.","集合が空かどうかを判断する","集合に含まれている要素数を返す","最大値を返す","x以下で最大の値を返す","最小値を返す","x以上で最小の値を返す","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","スライスを返す","","","","","","","先頭の要素を返す","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","末尾の要素を返す","","","","","","","","","","","","","<strong>Time complexity O(log n)</strong>","","","","","<strong>Time complexity O(log n)</strong>","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","<strong>Time complexity O(n)</strong>","","","","","<strong>Time complexity O(log n)</strong>","","","<strong>Time complexity O(log w log h)</strong>","","","<strong>Time complexity O(log w log h)</strong>","Returns the argument unchanged.","<strong>Time complexity O(1)</strong>","Calls <code>U::from(self)</code>.","<strong>Time complexity O(wh)</strong>","","","","<strong>Time complexity O(log w log h)</strong>","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","<strong>Time complexity O(log n)</strong>","Calls <code>U::from(self)</code>.","<strong>Time complexity O(n)</strong>","","","","範囲<code>l..r</code>に一次関数<code>ax + b</code>の値を加算する。(<code>x</code>…","","","","","","<strong>Time complexity O(log n)</strong>","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity O(n)</strong>","","","","<strong>Time complexity O(log n)</strong>","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","<strong>Time complexity O(1)</strong>","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity O(n log n)</strong>","","","","","","","","","","","","","","","","<strong>Time complexity O(log n)</strong>","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<strong>Time complexity O(n)</strong>","","","","","","","","<strong>Time complexity O(log n)</strong>","","","","","","","","","[l, r) に含まれる<code>b</code>の個数","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","[0, index) に含まれる<code>b</code>の個数","nth(0-indexed)番目の<code>b</code>の位置","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","<code>index</code>番目の値を得る。","","","","","<code>range</code>に含まれる<code>value</code>の個数。","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>range</code>での最大値","<code>range</code>での最小値","","<code>range</code>で<code>lb</code>以上の最小値","<code>range</code>で<code>ub</code>未満の最大値","<code>range</code>でk(0-indexed)番目に小さい値。","<code>range</code>で<code>lb</code>以上<code>ub</code>未満の値の個数","[0, index)に含まれる<code>value</code>の個数。","<code>nth</code>(0-indexed)番目の<code>value</code>の位置。","","","","","","","","","最大流 (Dinic)","最大流 (Ford-Fulkerson)","","","最小費用流","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","円と多角形の共通部分の面積","2つの円の共通部分の面積","多角形の面積","","","","","","","","","点と線分の位置関係","","三角形の外接円","","","","","","","","","最近点対","2つの円の共通接線","凸多角形の判定","凸多角形の直線での切断","凸多角形の直径","凸包","","","","","","","直線と点の距離","線分と点の距離","2つの線分間の距離","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","三角形の内接円","円と直線の位置関係","円と線分の位置関係","2つの円の位置関係","直線と線分の位置関係","2つの線分の位置関係","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","点と多角形の位置関係","","","","","","点を通る円の接線","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","関節点の列挙","負閉路を持つグラフの最短経路 (Bellman-Ford)","","二重頂点連結分解","二部グラフ判定","","","","","","","","","橋の列挙","中国人郵便配達問題","有向グラフ上の最小有向全域木を求める","","","","","","","","","","有向グラフの閉路検出","非負重み付き最短経路 (Dijkstra)","","","(準)Eulerグラフの判定","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","最小全域木 (Kruskal)","","","最大独立集合","","","最小全域木 (Prim)","","","","強連結成分分解","","","","","","","","","","","","","","","","トポロジカルソート","巡回セールスマン問題","二重辺連結成分分解","","","","","","","","","全頂点間最短経路長","","","","","","","","","","","","橋の列挙","<strong>Time complexity O(V²2ⱽ)</strong>","有向グラフ上の最小有向全域木を求める","…","…","","<strong>Time complexity O((E + V) log V)</strong>","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","…","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Kruskal法","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","最大独立集合を求める","Prim法","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","<strong>Time complexity O(V + E)</strong>","","","","","","トポロジカルソート","","","<strong>Time complexity O(n³)</strong>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","グリッドをグラフに変換する","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","任意mod","mod 素数p","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","素数mod p上での行列式を求める。","素数mod p上での逆行列を求める。","","","","","","","","","","","","","","","二部マッチング","二部マッチング (Hopcroft-Karp)","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","中国剰余定理","約数列挙","","拡張ユークリッドの互除法","","a!の素因数pの個数を求める。","","最大公約数・最小公倍数","","","mod mでの演算","","","","","","","","原始根","∑{i=0 → n-1} ⌊(ai+b)/m⌋","∑{i=0 → ∞} rⁱiᵈ","トーシェント関数","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","約数の個数を数える","約数を列挙する","","","","","","1以上N以下の自然数xについて<code>floor(N/x)</code>…","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","n個からk個とりだす組み合わせの個数 (nCk)","nの階乗","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","nの階乗の逆元","<strong>Time complexity O(n)</strong>","n個からk個とりだす順列の個数 (nPk)","","","","","","a!の素因数pの個数を求める。","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","ax + b = 0 (mod m) を満たすxを求める。","","0,1,..,nの素数mod pでの逆元を列挙する。","mod mでの逆元","素数mod pでの逆元","aˣ = b (mod m)を満たすxを求める。","xᵖ (mod m)を求める。","x² = a (mod p)を満たすxを一つ求める。","0,1,..,nの素数mod pでの逆元を列挙する。","mod mでの逆元","素数mod pでの逆元","aˣ = b (mod m)を満たすxを求める。","xᵖ (mod m)を求める。","x² = a (mod p)を満たすxを一つ求める。","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","∑{i=0 → ∞} rⁱiᵈ","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","括弧列が対応が取れているかを調べる","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","正の無限大、負の無限大をもつ数","","有理数","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","乗算についての単位元をもつ","","","加算についての単位元をもつ","","","","","","","","","","","分母を返す","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","分子を返す","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","浮動小数点型","整数型","符号付きの数値型","非負の数値型","","","","","","","","","","","","","","","","","","","","","重心列挙","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","重軽分解","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","最小共通祖先","","","","","","","","","全方位木DP","","","","","根付き木に変換","","","","","","","木DP","","","","","","","","","","","","","","","","","","","","","","","","","","Tree depth query","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","重軽分解","","","","","","Returns the argument unchanged.","<strong>Time complexity O(1)</strong>","Calls <code>U::from(self)</code>.","<strong>Time complexity O(log n)</strong>","<strong>Time complexity O(n)</strong>","<strong>Time complexity O(1)</strong>","<strong>Time complexity O(log n)</strong>","演算は可換性を仮定する。","<strong>Time complexity O(1)</strong>","<strong>Time complexity O(1)</strong>","","","","","","","<code>a</code>の<code>n</code>個上の祖先を求める。","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","…","<code>a</code>と<code>b</code>の最小共通祖先を求める。","<strong>Time complexity O(n log n)</strong>","","","","","全方位木DP","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","木DP","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","木の任意の2頂点の距離の最大値を求める。","…","…","…","","","","","","","","<code>usize</code>を用いた集合表現","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","",""],"if":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[]],[[]],[[]],[[]],0,[[]],[[]],[[[3,[2,2]]],[[3,[2,2]]]],[[]],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]],[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]],1],[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]]]],[[],[[3,[5,5]]]],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]],[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]]],[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]]]],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]]],[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]]]],[[]],[[]],[[],3],[[]],[[],9],[[],9],[[],10],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]],[0,[4,6,5,[8,[7]]]],[0,[4,6,5,[8,[7]]]]],[[0,[4,6,5,[8,[7]]]]]],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]]],[[0,[4,6,5,[8,[7]]]]]],[[]],0,[[]],[[]],[[[11,[2]]],[[11,[2]]]],[[]],[[],[[11,[5]]]],[[[11,[12]],[11,[12]]],13],[[[11,[14]],15],16],[[]],[[[11,[[0,[17,18,19]]]]]],[[]],[[],11],[[[11,[[0,[4,6,19]]]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[20,[2]]],[[20,[2]]]],[[]],[[],[[20,[5]]]],[[[20,[12]],[20,[12]]],13],[[[20,[14]],15],16],[[]],[[[20,[1]]]],[[[20,[21]]]],[[[20,[22]]]],[[[20,[23]]]],[[[20,[24]]]],[[[20,[7]]]],[[]],[[],20],[[[20,[22]]]],[[[20,[24]]]],[[[20,[21]]]],[[[20,[7]]]],[[[20,[23]]]],[[[20,[1]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[25,[2]]],[[25,[2]]]],[[]],[[],[[25,[5]]]],[[[25,[12]],[25,[12]]],13],[[[25,[14]],15],16],[[]],[[[25,[23]]]],[[[25,[21]]]],[[[25,[22]]]],[[[25,[24]]]],[[[25,[7]]]],[[[25,[1]]]],[[]],[[],25],[[[25,[1]]]],[[[25,[22]]]],[[[25,[23]]]],[[[25,[21]]]],[[[25,[24]]]],[[[25,[7]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[26,[2]]],[[26,[2]]]],[[]],[[],[[26,[5]]]],[[[26,[12]],[26,[12]]],13],[[[26,[14]],15],16],[[]],[[[26,[27]]]],[[[26,[28]]]],[[[26,[29]]]],[[[26,[30]]]],[[[26,[22]]]],[[[26,[21]]]],[[[26,[24]]]],[[[26,[31]]]],[[[26,[32]]]],[[[26,[7]]]],[[[26,[23]]]],[[[26,[1]]]],[[]],[[[26,[32]]]],[[[26,[28]]]],[[[26,[7]]]],[[[26,[30]]]],[[[26,[27]]]],[[[26,[31]]]],[[[26,[22]]]],[[[26,[24]]]],[[[26,[23]]]],[[[26,[1]]]],[[[26,[21]]]],[[[26,[29]]]],[[],26],[[[26,[31]]]],[[[26,[21]]]],[[[26,[7]]]],[[[26,[32]]]],[[[26,[27]]]],[[[26,[28]]]],[[[26,[24]]]],[[[26,[1]]]],[[[26,[23]]]],[[[26,[30]]]],[[[26,[22]]]],[[[26,[29]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[33,33],[34,34],[[]],[[]],[[33,33],13],[[34,34],13],[[33,15],16],[[34,15],16],[[]],[[]],[34],[[]],[[]],[34],[1,34],[34],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,[[]],[[]],[[[35,[2]]],[[35,[2]]]],[[]],[[],[[35,[5]]]],[[[35,[12]],[35,[12]]],13],[[[35,[14]],15],16],[[]],[[[35,[36]]]],[[]],[37,[[35,[37]]]],[[[35,[38]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[39,[2]]],[[39,[2]]]],[[]],[[],[[39,[5]]]],[[[39,[12]],[39,[12]]],13],[[[39,[14]],15],16],[[]],[[[39,[32]]]],[[[39,[30]]]],[[[39,[22]]]],[[[39,[7]]]],[[[39,[23]]]],[[[39,[21]]]],[[[39,[31]]]],[[[39,[29]]]],[[[39,[28]]]],[[[39,[1]]]],[[[39,[24]]]],[[[39,[27]]]],[[]],[[],39],[[[39,[29]]]],[[[39,[32]]]],[[[39,[7]]]],[[[39,[28]]]],[[[39,[23]]]],[[[39,[1]]]],[[[39,[24]]]],[[[39,[22]]]],[[[39,[27]]]],[[[39,[30]]]],[[[39,[21]]]],[[[39,[31]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[40,[2]]],[[40,[2]]]],[[]],[[],[[40,[5]]]],[[[40,[12]],[40,[12]]],13],[[[40,[14]],15],16],[[]],[[[40,[21]]]],[[[40,[31]]]],[[[40,[22]]]],[[[40,[23]]]],[[[40,[32]]]],[[[40,[1]]]],[[[40,[27]]]],[[[40,[29]]]],[[[40,[30]]]],[[[40,[7]]]],[[[40,[28]]]],[[[40,[24]]]],[[]],[[],40],[[[40,[29]]]],[[[40,[1]]]],[[[40,[21]]]],[[[40,[27]]]],[[[40,[32]]]],[[[40,[28]]]],[[[40,[7]]]],[[[40,[31]]]],[[[40,[30]]]],[[[40,[23]]]],[[[40,[24]]]],[[[40,[22]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[41,[2]]],[[41,[2]]]],[[]],[[],[[41,[5]]]],[[[41,[12]],[41,[12]]],13],[[[41,[14]],15],16],[[]],[[[41,[30]]]],[[[41,[22]]]],[[[41,[42]]]],[[[41,[1]]]],[[[41,[7]]]],[[[41,[27]]]],[[[41,[21]]]],[[[41,[31]]]],[[[41,[32]]]],[[[41,[43]]]],[[[41,[24]]]],[[[41,[28]]]],[[[41,[23]]]],[[[41,[29]]]],[[]],[[],41],[[[41,[32]]]],[[[41,[30]]]],[[[41,[43]]]],[[[41,[1]]]],[[[41,[29]]]],[[[41,[22]]]],[[[41,[27]]]],[[[41,[31]]]],[[[41,[7]]]],[[[41,[21]]]],[[[41,[42]]]],[[[41,[23]]]],[[[41,[28]]]],[[[41,[24]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[44,[2]]],[[44,[2]]]],[[]],[[],[[44,[5]]]],[[[44,[12]],[44,[12]]],13],[[[44,[14]],15],16],[[]],[[[44,[30]]]],[[[44,[21]]]],[[[44,[7]]]],[[[44,[32]]]],[[[44,[24]]]],[[[44,[23]]]],[[[44,[42]]]],[[[44,[1]]]],[[[44,[22]]]],[[[44,[31]]]],[[[44,[28]]]],[[[44,[43]]]],[[[44,[27]]]],[[[44,[29]]]],[[]],[[[44,[30]]]],[[[44,[32]]]],[[[44,[31]]]],[[[44,[42]]]],[[[44,[28]]]],[[[44,[27]]]],[[[44,[29]]]],[[[44,[43]]]],[[],44],[[[44,[7]]]],[[[44,[42]]]],[[[44,[31]]]],[[[44,[24]]]],[[[44,[28]]]],[[[44,[30]]]],[[[44,[1]]]],[[[44,[43]]]],[[[44,[22]]]],[[[44,[27]]]],[[[44,[23]]]],[[[44,[21]]]],[[[44,[29]]]],[[[44,[32]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[7],[[]],[[]],[[]],0,0,0,[[45,[46,[2]]],[[46,[2]]]],[[47,[46,[2]]],[[46,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[45,45],[47,47],[[[48,[2]]],[[48,[2]]]],[[]],[[]],[[]],[[45,45],13],[[47,47],13],[[[48,[12]],[48,[12]]],13],[[45,15],16],[[47,15],16],[[[48,[14]],15],16],[[]],[[]],[[]],[[[48,[45]]]],[[[48,[47]]]],[[]],[[]],[[]],[45,[[46,[1]]]],[47,[[46,[1]]]],[[[48,[47]]]],[1,48],[[[48,[45]]]],[[[48,[47]]]],[[]],[[]],[[]],[[],9],[[[46,[1]]],[[49,[45]]]],[[],9],[[[46,[1]]],[[49,[47]]]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[]],[[]],[[]],0,[[]],[[]],[[[50,[2]]],[[50,[2]]]],[[]],[[],[[50,[5]]]],[[[50,[12]],[50,[12]]],13],[[[50,[14]],15],16],[[]],[50],[[]],[50],[[],50],[50],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[51,[2,2]]],[[51,[2,2]]]],[[[52,[2,2,2]]],[[52,[2,2,2]]]],[[[53,[2,2,2,2]]],[[53,[2,2,2,2]]]],[[[54,[2,2,2,2,2]]],[[54,[2,2,2,2,2]]]],[[]],[[]],[[]],[[]],[[],[[51,[5,5]]]],[[],[[52,[5,5,5]]]],[[],[[53,[5,5,5,5]]]],[[],[[54,[5,5,5,5,5]]]],[[[51,[12,12]],[51,[12,12]]],13],[[[52,[12,12,12]],[52,[12,12,12]]],13],[[[53,[12,12,12,12]],[53,[12,12,12,12]]],13],[[[54,[12,12,12,12,12]],[54,[12,12,12,12,12]]],13],[[[51,[14,14]],15],16],[[[52,[14,14,14]],15],16],[[[53,[14,14,14,14]],15],16],[[[54,[14,14,14,14,14]],15],16],[[]],[[]],[[]],[[]],[[[51,[36,36]]]],[[[52,[36,36,36]]]],[[[53,[36,36,36,36]]]],[[[54,[36,36,36,36,36]]]],[[]],[[]],[[]],[[]],[[[51,[55,55]]]],[[[52,[55,55,55]]]],[[[53,[55,55,55,55]]]],[[[54,[55,55,55,55,55]]]],[[[51,[38,38]]]],[[[52,[38,38,38]]]],[[[53,[38,38,38,38]]]],[[[54,[38,38,38,38,38]]]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],0,[[]],[[]],[[[56,[2]]],[[56,[2]]]],[[]],[[],[[56,[5]]]],[[[56,[12]],[56,[12]]],13],[[[56,[14]],15],16],[[]],[56],[[]],[[],56],[56],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[57,[2,2]]],[[57,[2,2]]]],[[]],[[[57,[[0,[4,5,[8,[[0,[6,5,[8,[7]]]]]]]],[0,[6,5,[8,[7]]]]]],1]],[[],[[57,[5,5]]]],[[[57,[[0,[4,5,[8,[[0,[6,5,[8,[7]]]]]]]],[0,[6,5,[8,[7]]]]]]]],[[[57,[[0,[4,5,[8,[[0,[6,5,[8,[7]]]]]]]],[0,[6,5,[8,[7]]]]]]]],[[]],[[]],[[],57],[[]],[[],9],[[],9],[[],10],[[[57,[[0,[4,5,[8,[[0,[6,5,[8,[7]]]]]]]],[0,[6,5,[8,[7]]]]]]]],[[[57,[[0,[4,5,[8,[[0,[6,5,[8,[7]]]]]]]],[0,[6,5,[8,[7]]]]]]]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[58],[58,1],[58,1],0,0,0,0,[[]],[[]],[[[0,[19,59,4,60,61,[8,[24]]]],[0,[19,59,4,60,61,[8,[24]]]],62],[[63,[[0,[19,59,4,60,61,[8,[24]]]]]]]],[[]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,[[[65,[[0,[58,64]]]],[0,[58,64]]]],[[]],[[]],[[]],[[]],[[[65,[[0,[58,64]]]]],[[66,[[0,[58,64]]]]]],[[[66,[2]]],[[66,[2]]]],[[[65,[2]]],[[65,[2]]]],[[]],[[]],[[[66,[[0,[58,64]]]],67],68],[[[66,[[0,[58,64]]]],67],68],[[],[[65,[5]]]],[[[65,[[0,[58,64]]]],67]],[[]],[[]],[[[66,[[0,[58,64]]]],1],[[0,[58,64]]]],[[[66,[[0,[58,64]]]],[0,[58,64]]],1],[[]],[[]],[[],[[65,[[0,[58,64]]]]]],[[[66,[[0,[58,64]]]]],1],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],[[[0,[19,64]],62]],[[],1],0,0,0,0,0,0,0,[22,68],[22,68],[[22,22],68],[22,68],[[22,22],68],[[22,22],68],[[22,22],68],0,0,0,[[]],[[]],[69,69],[[]],[[69,69],13],[[69,15],16],[[]],[[43,43,69,1,62],43],[[]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[71,[[0,[19,70,18,4,60]]]]],[[46,[[0,[19,70,18,4,60]]]]]],[[]],[[]],[1,[[71,[[0,[19,70,18,4,60]]]]]],[[],9],[[],9],[[],10],[[[71,[[0,[19,70,18,4,60]]]],[72,[1]],[0,[19,70,18,4,60]]]],[[]],0,[[]],[[]],[[[73,[[0,[19,70,18,4,60]]]]],[[46,[[46,[[0,[19,70,18,4,60]]]]]]]],[[]],[[]],[[1,1],[[73,[[0,[19,70,18,4,60]]]]]],[[],9],[[],9],[[],10],[[[73,[[0,[19,70,18,4,60]]]],[72,[1]],[72,[1]],[0,[19,70,18,4,60]]]],[[]],[[],[[46,[1]]]],[[],7],0,[[]],[[]],[[[74,[2]]],[[74,[2]]]],[[]],[[[74,[14]],15],16],[[]],[[]],[[[74,[12]]],[[46,[1]]]],[[[46,[12]]],[[74,[12]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,[1,[[0,[5,[8,[1]],19,58,4,6]]]],[[[0,[5,19,4,58]]],[[0,[5,19,4,58]]]],[7,1],[1,[[0,[5,19,58,4]]]],[1,[[0,[5,19,58,4]]]],[[],[[46,[[0,[19,12]]]]]],[[],[[46,[1]]]],[[],49],[[],[[46,[1]]]],[[],49],[[[0,[19,12]]],1],[[]],[1],[1],[[[46,[[0,[58,19]]]],[46,[[0,[58,19]]]]],[[46,[[0,[58,19]]]]]],0,[[75,1,1]],[[]],[[]],[[]],[[]],[[1,1,[76,[62]],[76,[62]],[76,[62]],[76,[62]],[76,[62]]],75],[75],[[],9],[[],9],[[],10],[[]],[7,[[46,[7]]]],[[1,1,77,77,77],[[46,[1]]]],[[],13],[[[46,[[0,[58,19]]]]],68],[[],13],0,[[]],[[]],[78,78],[[]],[[]],[[78,1,7]],[[78,1,1,7]],[[78,1,1,7]],[[78,1,7]],[[78,1,1]],[[]],[[78,1]],[[78,1]],[1,78],[[78,1,7]],[[78,1,1,7]],[[78,1,7]],[[78,1,1,7]],[78,[[49,[32]]]],[[]],[[],9],[[],9],[[],10],[[]],[[],46],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[79,80],7],[[81,[72,[1]]],7],[[79,80],81],[[]],[[]],[[1,7,7],79],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,[[]],[[]],[82,82],[[]],[[82,15],16],[[]],[[82,1]],[[]],[82,[[46,[1]]]],[80,82],[[]],[82],[[],9],[[],9],[[],10],[[]],[[1,77,62,77,77]],[1,[[46,[[0,[58,19]]]]]],[1,[[46,[[0,[58,19]]]]]],0,[[]],[[]],[[]],[[]],[[[46,[[0,[83,64]]]]],[[84,[[0,[83,64]]]]]],[[[84,[[0,[83,64]]]],[72,[1]],[0,[83,64]]],1],[[],9],[[],9],[[],10],[[]],0,[[85,[72,[1]]]],[[]],[[]],[[]],[[]],[[],85],[85,[[46,[7]]]],[[],9],[[],9],[[],10],[[]],0,0,[[1,1],[[46,[[0,[19,[8,[1]],4]]]]]],[[1,1],[[46,[13]]]],0,0,0,[[]],[[]],[86,86],[[]],[[86,86],13],[[86,15],16],[[]],[[]],[[43,43,86,1,62],43],[[]],[[],9],[[],9],[[],10],[[]],0,[[87,30,30]],[[87,30,30]],[[]],[[]],[[]],[[]],[1,87],[[87,30,30]],[87,[[49,[[46,[13]]]]]],[[],9],[[],9],[[],10],[[]],[[],[[46,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[88,88],[[]],[[88,7],1],[[88,7],[[49,[1]]]],[[88,15],16],[[]],[[88,7],1],[[]],[88,13],[88,1],[[88,7],[[49,[7]]]],[[88,7],[[49,[7]]]],[1,88],[[]],[[],9],[[],9],[[],10],[[]],0,0,[[89,89],22],[[89,89]],[[89,89]],[[89,89]],[[89,89]],[[89,89]],[[89,89]],[[]],[[]],[89,89],[[]],[89,22],[89,22],[[89,1]],[[89,15],16],[[89,15],16],[[[46,[13]]],89],[[]],[[]],[89,1],[1,89],[[89,89]],[[89,1,13]],[[89,1],13],[[]],[[],90],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,[[[92,[91]],[93,[91]]]],[[]],[[]],[[]],[[]],[94,94],[[[92,[2]]],[[92,[2]]]],[[]],[[]],[[94,94],13],[[94,15],16],[[[92,[14]],15],16],[[]],[[]],[[]],[[]],[94,[[92,[91]]]],[[[92,[91]],91],91],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,[[[96,[95]],1,19]],[[]],[[]],[[]],[[]],[[[96,[95]]],[[97,[95]]]],[[[97,[[0,[2,95]]]]],[[97,[[0,[2,95]]]]]],[[]],[[[97,[[0,[14,95]]]],15],16],[[[97,[95]],[72,[1]]],19],[[]],[[]],[[[97,[95]],1]],[[]],[[]],[[1,95],[[96,[95]]]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[[96,[95]],1,19]],[[]],[[]],0,0,0,[[[98,[95]],1,1,19]],[[]],[[]],[[]],[[]],[[[98,[95]]],[[99,[95]]]],[[[99,[[0,[2,95]]]]],[[99,[[0,[2,95]]]]]],[[]],[[[99,[[0,[14,95]]]],15],16],[[[99,[95]],[72,[1]],[72,[1]]],19],[[]],[[]],[[[99,[95]]]],[[]],[[]],[[1,1,95],[[98,[95]]]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[[98,[95]],1,1,19]],[[]],[[]],0,0,[[]],[[]],[[[101,[100]],[72,[1]]],[[49,[2]]]],[[]],[[]],[[[46,[2]],100],[[101,[100]]]],[[],9],[[],9],[[],10],[[]],0,0,0,[[]],[[]],[[]],[[[103,[102]]]],[[[103,[102]],1],2],[[]],[[1,102],[[103,[102]]]],[[[103,[102]]],[[46,[2]]]],[[],9],[[],9],[[],10],[[[103,[102]],[72,[1]],2]],[[]],0,[[]],[[]],[[[104,[[0,[2,102]]]]],[[104,[[0,[2,102]]]]]],[[]],[[[104,[[0,[14,102]]]],15],16],[[]],[[[104,[102]],1],2],[[]],[102,[[104,[102]]]],[[]],[[],9],[[],9],[[],10],[[[104,[102]],[72,[1]],2]],[[]],0,[[[105,[102]],1,2]],[[]],[[]],[[[105,[[0,[14,102]]]],15],16],[[[105,[102]],[72,[1]]],2],[[]],[[]],[102,[[105,[102]]]],[[],9],[[],9],[[],10],[[]],0,0,[[]],[[]],[[[107,[[0,[2,106]]]]],[[107,[[0,[2,106]]]]]],[[]],[[],[[107,[[0,[5,106]]]]]],[[[107,[106]],[72,[1]]],2],[[[107,[106]],[108,[1]]],2],[[]],[[]],[[1,106],[[107,[106]]]],[[]],[[],9],[[],9],[[],10],[[[107,[106]],1,2]],[[]],0,0,[[[110,[109]],1,109]],[[]],[[]],[[[110,[109]],[72,[1]]],109],[[[110,[109]],[108,[1]]],109],[[]],[[]],[1,[[110,[109]]]],[[[110,[109]],1,109]],[[],9],[[],9],[[],10],[[]],0,0,[[111,32,32]],[[]],[[]],[[]],[[]],[[111,19],[[112,[19]]]],[111,111],[[[112,[2]]],[[112,[2]]]],[[]],[[]],[[],111],[[[112,[[0,[19,4,60]]]],[72,[32]],[72,[32]]],[[0,[19,4,60]]]],[[[112,[[0,[19,4,60]]]],[108,[32]],[108,[32]]],[[0,[19,4,60]]]],[[]],[[]],[[]],[[]],[[],111],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[[112,[[0,[19,4,60]]]],32,32,[0,[19,4,60]]]],[[]],[[]],0,[[[113,[100]]],[[49,[2]]]],[[]],[[]],[[[113,[100]]],[[49,[2]]]],[[]],[[[113,[100]]],[[49,[2]]]],[[]],[[[113,[100]]],13],[[[113,[100]]],1],[100,[[113,[100]]]],[[[113,[100]]],[[49,[2]]]],[[[113,[100]]],[[49,[2]]]],[[[113,[100]],2]],[[[113,[100]],2]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[114,[2]]],[[114,[2]]]],[[]],[[],[[114,[5]]]],[[[114,[14]],15],16],[[]],[[]],[[[114,[58]]],13],[[[114,[58]]],1],[[[114,[58]]],[[49,[58]]]],[[[114,[58]]],[[49,[58]]]],[[],[[114,[58]]]],[[[114,[58]]],[[49,[58]]]],[[[114,[58]]],[[49,[58]]]],[[[114,[58]],58]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[116,[[0,[2,64]],[0,[2,64]],[0,[2,115]]]],[72,[1]]],[[0,[2,64]]]],[[]],[[]],[[1,[0,[2,115]]],[[116,[[0,[2,64]],[0,[2,64]],[0,[2,115]]]]]],[[],9],[[],9],[[],10],[[[116,[[0,[2,64]],[0,[2,64]],[0,[2,115]]]],[72,[1]],[0,[2,64]]]],[[]],0,0,[[]],[[]],[[[118,[117]],[72,[1]]],117],[[]],[[[118,[117]],[46,[117]]]],[[]],[[1,[46,[117]]],[[118,[117]]]],[[],9],[[],9],[[],10],[[[118,[117]],[72,[1]],117]],[[]],0,0,[[[120,[119]],119]],[[]],[[]],[[[120,[2]]],[[120,[2]]]],[[]],[[],[[120,[5]]]],[[[120,[14]],15],16],[[]],[[]],[[[120,[119]]],13],[[[120,[119]]],1],[[[120,[119]],[120,[119]]]],[[],[[120,[119]]]],[[[120,[119]]],[[49,[119]]]],[[[120,[119]]],[[49,[119]]]],[[[120,[119]],119]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,[[[122,[121]],[93,[121]]]],[[[122,[121]],[93,[121]],[123,[121]]]],[[]],[[]],[[]],[[]],[124,124],[[]],[[124,124],13],[[124,15],16],[[]],[[]],[[]],[[]],[[[46,[121]],124],[[122,[121]]]],[[[122,[121]],121],[[49,[121]]]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,[[]],[[]],[[]],[[]],[[[46,[[0,[19,2,18,4,125,59,58]]]]],[[126,[[0,[19,2,18,4,125,59,58]]]]]],[[[126,[[0,[19,2,18,4,125,59,58]]]],[72,[1]],[0,[19,2,18,4,125,59,58]]],[[0,[19,2,18,4,125,59,58]]]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[127,[2]]],[[127,[2]]]],[[]],[[[127,[[0,[58,64,2]]]],[0,[58,64,2]]],13],[[[127,[[0,[58,64,2]]]],[0,[58,64,2]]],1],[[],[[127,[5]]]],[[[127,[[0,[58,64,2]]]]],[[49,[[0,[58,64,2]]]]]],[[[127,[14]],15],16],[[]],[[[127,[[0,[58,64,2]]]],[0,[58,64,2]]]],[[]],[[[127,[[0,[58,64,2]]]]],13],[[[127,[[0,[58,64,2]]]]],[[49,[[0,[58,64,2]]]]]],[[[127,[[0,[58,64,2]]]]],1],[[],[[127,[[0,[58,64,2]]]]]],[[[127,[[0,[58,64,2]]]]],[[49,[[0,[58,64,2]]]]]],[[[127,[[0,[58,64,2]]]]],[[49,[[0,[58,64,2]]]]]],[[[127,[[0,[58,64,2]]]],[0,[58,64,2]]],13],[[]],[[],9],[[],9],[[],10],[[]],0,0,[[]],[[]],[[]],[[]],[128,1],[[],128],[[]],[[]],[128,1],[[]],[[]],[129,1],[128,30],[80,129],[[129,1],[[49,[128]]]],[[129,1],[[49,[128]]]],[[129,1],[[49,[128]]]],[[129,1],[[49,[128]]]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,[[130,1],131],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[131,1,1],13],[130,131],[[130,1,1]],[1,130],[[131,1],1],[[131,1],1],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,[[]],[[]],[[[132,[2]]],[[132,[2]]]],[[]],[[]],[[[46,[2]]],[[132,[2]]]],[[[132,[2]],1],[[133,[2]]]],[[]],[[1,2],[[132,[2]]]],[[[132,[2]],1,2],[[132,[2]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[134,49],[[]],[[]],[[],[[134,[5]]]],[[[134,[14]],15],16],[[]],[134,49],[[]],[134,13],[134,1],[[],134],[134,[[49,[134]]]],[134,134],[[],9],[[],9],[[],10],[[]],0,[[[135,[[0,[102,2]]]],1,2],[[135,[[0,[102,2]]]]]],[[]],[[]],[[[135,[[0,[2,102]]]]],[[135,[[0,[2,102]]]]]],[[]],[[[135,[[0,[14,102]]]],15],16],[[[135,[[0,[102,2]]]],[72,[1]]],2],[[]],[[[46,[2]],[0,[102,2]]],[[135,[[0,[102,2]]]]]],[[]],[[1,[0,[102,2]]],[[135,[[0,[102,2]]]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[136,[2]]],[[136,[2]]]],[[]],[[],[[136,[5]]]],[[[136,[14]],15],16],[[]],[[]],[136,68],[[],136],[136,49],[136,[[49,[136]]]],[136,136],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[137,[[0,[18,4,60,19]]]]],1],[[[137,[[0,[18,4,60,19]]]],1,1],[[49,[[0,[18,4,60,19]]]]]],[[]],[[[137,[[0,[18,4,60,19]]]]],[[46,[[46,[1]]]]]],[[]],[[[137,[[0,[18,4,60,19]]]],1,1],13],[[[137,[[0,[18,4,60,19]]]],1,1,[0,[18,4,60,19]]],1],[1,[[137,[[0,[18,4,60,19]]]]]],[[[137,[[0,[18,4,60,19]]]],1],[[0,[18,4,60,19]]]],[[[137,[[0,[18,4,60,19]]]],1],1],[[[137,[[0,[18,4,60,19]]]],1],1],[[],9],[[],9],[[],10],[[]],0,0,[[]],[[]],[[138,22],13],[[],138],[[138,22],13],[[138,22]],[[]],[[138,22],13],[[138,22]],[[]],[138,13],[138,1],[138,[[49,[22]]]],[[138,22],[[49,[22]]]],[138,[[49,[22]]]],[[138,22],[[49,[22]]]],[[],138],[[],9],[[],9],[[],10],[[]],0,0,[[[139,[[0,[19,58]]]],[0,[19,58]],[0,[19,58]]]],[[]],[[]],[[]],[[]],[[[139,[[0,[19,58]]]]],[[140,[[0,[19,58]]]]]],[[[139,[2]]],[[139,[2]]]],[[]],[[],[[139,[5]]]],[[]],[[]],[[]],[[]],[[],[[139,[[0,[19,58]]]]]],[[[140,[[0,[19,58]]]]],46],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,[[[141,[2]]]],[[[141,[2]],1,2]],[[]],[[]],[[[141,[2]]],[[141,[2]]]],[[]],[[],[[141,[5]]]],[[[141,[2]]],[[49,[2]]]],[[[141,[14]],15],16],[[]],[46,141],[[141,1]],[[]],[[[141,[2]]],13],[[[141,[2]]],[[49,[2]]]],[[[141,[2]]],1],[[],[[141,[2]]]],[[[141,[2]]],[[49,[2]]]],[[[141,[2]],2]],[[[141,[2]]],13],[[]],[[],9],[[],9],[[],10],[[]],0,0,[[[142,[102]],1,2]],[[]],[[]],[[[142,[[0,[2,102]]]]],[[142,[[0,[2,102]]]]]],[[]],[[[142,[102]],[143,[1]]],2],[[]],[[[142,[102]],1]],[[]],[[1,102],[[142,[102]]]],[[]],[[],9],[[],9],[[],10],[[[142,[102]],1,2]],[[]],0,[[[145,[[0,[102,144]]]],1,1,2]],[[]],[[]],[[[145,[[0,[102,144]]]],[72,[1]],[72,[1]]],2],[[]],[[[145,[[0,[102,144]]]],1,1],2],[[]],[[1,1,[0,[102,144]]],[[145,[[0,[102,144]]]]]],[[],9],[[],9],[[],10],[[[145,[[0,[102,144]]]],1,1,2]],[[]],0,[[146,[72,[1]],32]],[[]],[[]],[[146,[72,[1]],32]],[[146,[72,[1]],32]],[146,146],[[]],[[146,15],16],[[]],[[146,[72,[1]]],32],[[146,[72,[1]]],32],[[146,[72,[1]]],32],[[]],[1,146],[[[46,[32]]],146],[[]],[[],9],[[],9],[[],10],[[]],0,0,[[]],[[]],[[]],[[[148,[147]],1],147],[[]],[1,[[148,[147]]]],[[],9],[[],9],[[],10],[[[148,[147]],[72,[1]],[93,[147]]]],[[]],0,0,[[]],[[]],[[[150,[149]],[72,[1]]],149],[[]],[[]],[1,[[150,[149]]]],[[],9],[[],9],[[],10],[[[150,[149]],[72,[1]],[93,[149]]]],[[]],0,0,[[151,32,32]],[[]],[[]],[[]],[[]],[[151,[0,[102,2]]],[[152,[[0,[102,2]]]]]],[151,151],[[]],[[],151],[[[152,[102]],[72,[32]],[72,[32]]],2],[[]],[[]],[[]],[[]],[[],151],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[[152,[102]],32,32,2]],[[]],[[]],0,[[]],[[]],[[[153,[2]]],[[153,[2]]]],[[]],[[],[[153,[5]]]],[[[153,[14]],15],16],[[]],[[]],[[[153,[58]]],13],[[[153,[58]]],1],[[[153,[58]],[153,[58]]]],[[],[[153,[58]]]],[[[153,[58]]],[[49,[58]]]],[[[153,[58]]],[[49,[58]]]],[[[153,[58]],58]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[156,[[0,[38,154,155]]]],[72,[1]]],[[49,[[0,[2,5]]]]]],[[]],[[]],[[[46,[[0,[2,5]]]],[0,[38,154,155]]],[[156,[[0,[38,154,155]]]]]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[157,157],[[]],[[[159,[158]],[72,[1]]],[[49,[158]]]],[[]],[[]],[[]],[[]],[[1,157],[[159,[158]]]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[[159,[158]],[72,[1]],158]],[[]],[[]],0,[[160,1],7],[[]],[[]],[160,160],[[]],[[160,[72,[1]],13],1],[[]],[[]],[160,13],[160,1],[[[46,[13]]],160],[[160,1,13],1],[[160,1,13],[[49,[1]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[161,1],[[]],[161,[[46,[[46,[1]]]]]],[[]],[[161,1,1],13],[[161,1,1],1],[1,161],[[161,1],1],[[161,1],1],[[],9],[[],9],[[],10],[[161,1],49],[[]],[[1,46,[76,[62]]],161],0,[[162,1],7],[[]],[[]],[162,162],[[]],[[162,[143,[1]],7],1],[[]],[[]],[[162,[143,[1]]],[[49,[7]]]],[[162,[143,[1]]],[[49,[7]]]],[[[46,[7]]],162],[[162,[0,[[143,[1]],2]],7],[[49,[7]]]],[[162,[0,[[143,[1]],2]],7],[[49,[7]]]],[[162,[143,[1]],1],[[49,[7]]]],[[162,[0,[[143,[1]],2]],7,7],1],[[162,1,7],1],[[162,1,7],[[49,[1]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,[[1,1]],0,0,[1,46],[[1,1]],0,[1],[[]],0,[[163,1,1]],[[]],[[]],[163,163],[[]],[[]],[[163,1],46],[[]],[[163,1,1]],[1,163],[163],[[]],[[],9],[[],9],[[],10],[[]],0,[[164,1,1]],[[]],[[]],[164,164],[[]],[[]],[[164,1],46],[[]],[[164,1,1]],[1,164],[164],[[]],[[],9],[[],9],[[],10],[[]],0,[[165,1,1,7,32]],[[]],[[]],[165,165],[[]],[[]],[[]],[[165,1,1,7],[[9,[32]]]],[1,165],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,[166,43],[167,43],[166,43],[[166,166],166],[[166,166],43],[[166,166],43],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[168,168],[166,166],[167,167],[169,169],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[166,166],43],[[167,167],43],[[],166],[[],167],[[],169],[167,166],0,0,0,[[166,43],166],[[166,166],43],[[167,167],43],[[168,43,43],13],[[166,166,168],13],[[167,167,168],13],[[169,169,168],13],[[166,15],16],[[167,15],16],[[169,15],16],[[]],[[]],[[]],[[]],0,[[168,43,43],13],[[168,43,43],13],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[167,167,168],13],[[167,167,168],13],[[168,43,43],13],[[168,43,43],13],[[166,43],166],[[168,43,43],13],[43,168],[[166,166],167],[[166,43],169],[166,166],[167,166],[[168,43,43],[[49,[170]]]],0,[[43,43],166],[[167,166],166],0,[[167,166],166],[[166,166],166],0,0,[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[],10],[166,166],[167,166],[[]],[[]],[[]],[[]],[[169,168],43],[[169,169,168],43],[[],43],0,0,0,0,0,0,[[]],[[]],[[166,166,166,168],171],[171,13],[171,171],[[]],[171,13],[[171,171],13],[[171,15],16],[[]],[[]],[171,13],[171,13],[171,13],[[]],[171,28],[[],9],[[],9],[[],10],[[]],[[166,166,166],169],[[[46,[166]],168],49],[[169,169,168],[[46,[166]]]],[168,13],[[167,168]],[[],43],0,0,0,[[]],[[]],[172,172],[[]],[[[46,[166]],168],[[46,[166]]]],[[172,172],13],[[]],[[[46,[166]],172,168],[[46,[166]]]],[[]],[[]],[[],9],[[],9],[[],10],[[]],[[167,166],43],[[167,166],43],[[167,167],43],[[166,166,166],169],0,0,0,0,[[]],[[]],[173,173],[[]],[173,13],[[173,173],13],[[173,15],16],[[]],[[169,167,168]],[[]],[173,13],[173,13],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,0,[[]],[[]],[174,174],[[]],[[174,174],13],[[174,15],16],[[]],[174,13],[[169,167,168]],[[]],[174,13],[174,13],[174,13],[[]],[[],9],[[],9],[174,13],[[],10],[[]],0,0,0,0,0,0,0,[[]],[[]],[175,13],[175,175],[[]],[[175,175],13],[[175,15],16],[[]],[175,13],[175,13],[[169,169,168]],[175,13],[[]],[175,[[49,[22]]]],[175,13],[175,13],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,[[]],[[]],[176,176],[[]],[176,13],[[176,176],13],[[176,15],16],[[]],[[167,167,168]],[[]],[176,13],[176,13],[176,13],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,[[]],[[]],[177,177],[[]],[[177,177],13],[[177,15],16],[[]],[[167,167,168]],[177,13],[[]],[177,13],[177,13],[177,13],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,[[]],[[]],[178,178],[[]],[[178,178],13],[178,13],[[178,15],16],[[]],[178,13],[[]],[178,13],[[166,168],178],[[]],[[],9],[[],9],[[],10],[[]],[[169,166,168],[[46,[166]]]],0,0,0,0,0,0,0,[[[181,[179,[0,[180,2]]]],[0,[180,2]]]],[[[181,[182,[0,[180,2]]]],[0,[180,2]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[183,[2,2]]],[[183,[2,2]]]],[179,179],[182,182],[[[181,[2,2]]],[[181,[2,2]]]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[[181,[179,[0,[180,2]]]],67]],[[[181,[182,[0,[180,2]]]],67]],[[[183,[14,14]],15],16],[[179,15],16],[[182,15],16],[[[181,[14,14]],15],16],[[],1],[[]],[[[183,[2]]],1],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[181,13],0,[181,1],0,0,[[1,1],183],[1,[[181,[184,[0,[180,2]]]]]],0,0,[[]],[[[183,[2]]],[[183,[2]]]],0,[[],1],[[[183,[2]]],1],0,[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,0,[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],0,[[]],[[[183,[2]]]],0,0,[185,[[46,[1]]]],0,[[[181,[184,180]],1],[[46,[[186,[[0,[19,58,5,4]]]]]]]],[[[181,[184,180]],67],[[46,[[49,[1]]]]]],0,[185,46],[[[181,[182,180]]],[[46,[49]]]],[185,46],[[[181,[182,180]]],[[0,[19,58,4,18]]]],[[[181,[179,180]],1],[[46,[180]]]],0,[[[181,[179,180]],1],[[49,[[46,[180]]]]]],[[[181,[184,180]]],[[49,[[46,[180]]]]]],[[[181,[184,180]]],[[46,[[49,[[0,[4,19,58,18,187]]]]]]]],[[[181,[182,180]]],46],0,0,0,[[[188,[[0,[180,2]]]],[0,[180,2]]]],[[]],[[]],[[[188,[[0,[2,180]]]]],[[188,[[0,[2,180]]]]]],[[]],[[]],[[]],[1,[[188,[[0,[180,2]]]]]],[[[188,[[0,[180,2]]]]],49],[[]],[[],9],[[],9],[[],10],[[]],0,[[[189,[[0,[180,2]]]],[0,[180,2]]]],[[]],[[]],[[[189,[[0,[2,180]]]]],[[189,[[0,[2,180]]]]]],[[]],[[]],[[]],[1,[[189,[[0,[180,2]]]]]],[[[189,[[0,[180,2]]]]],49],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,0,[[190,1,1]],[[]],[[]],[[]],[[]],[[]],[[]],[190,191],[192,192],[[]],[[192,192],13],[[192,15],16],[[]],[[]],[[]],[[191,1],1],[[]],[[]],[[]],[[191,1],192],[191,[[46,[[46,[1]]]]]],[1,190],[[191,1],1],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[[181,[182,[0,[2,180]]]]],[[49,[[46,[[0,[2,180]]]]]]]],0,0,[[]],[[]],0,[185,185],[[]],[[185,15],16],[[]],[[]],0,[[[181,[182,180]]],185],0,0,0,[[]],[[],9],[[],9],[[],10],[[]],[[[181,[182,180]]],[[46,[1]]]],[[[181,[182,180]]],[[49,[[46,[180]]]]]],0,0,[[193,1,1]],[[]],[[]],[[]],[[]],[193,194],[[]],[[]],[[194,1],1],[[]],[[]],[[194,1],13],[1,193],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,[[]],[[]],[[]],[195,[[46,[[46,[1]]]]]],[[]],[[[181,[179,180]]],195],[195,[[46,[1]]]],[[],9],[[],9],[[],10],[[]],[[[181,[179,180]]],[[49,[[46,[1]]]]]],[[[181,[179,180]],1],[[49,[[0,[19,58,4]]]]]],[185,[[46,[[46,[1]]]]]],[[[181,[184,180]]],[[49,[[46,[[46,[[49,[[0,[19,58,4,18]]]]]]]]]]]],0,[[[181,[184,180]],1,1,1],[[46,[49]]]],0,0,0,0,0,0,0,0,[[196,196],196],[[]],[[]],[[]],[[]],[[]],[[]],[197,197],[196,196],[[[198,[2]]],[[198,[2]]]],[[]],[[]],[[]],[[],197],[[],196],0,0,[[197,197],13],[[196,196],13],[[197,15],16],[[196,15],16],[[[198,[14]],15],16],[[]],[[]],[[]],[[198,197]],[[198,197]],[[]],[[]],[[]],[198,68],[198,68],[[197,196,1,1],[[49,[197]]]],[[1,1],197],[[30,30],196],[67,198],0,[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[]],[[]],[[]],0,0,[[1,1,62,62],[[181,[179,[183,[2]]]]]],0,0,0,0,[[]],[[]],[199,[[200,[199]]]],[[]],[[]],[[]],[[[200,[68,[0,[4,2]]]]],49],[[],9],[[],9],[[],10],[[]],0,[[199,80],90],0,0,0,0,0,0,0,[[[46,[89]]],7],[[[46,[89]]]],[[[46,[89]]],[[49,[[46,[89]]]]]],0,[[]],[[]],[201,201],[[]],[[]],[[[46,[89]]],201],[[201,1,1],[[49,[22]]]],[[201,1]],[[]],[[201,201]],[[1,1],201],[[]],[201,201],[[],9],[[],9],[[],10],[[]],0,0,0,[[[203,[202]],[203,[202]]],[[203,[202]]]],[[[203,[202]],[203,[202]]]],[[]],[[]],[[[203,[[0,[2,202]]]]],[[203,[[0,[2,202]]]]]],[[]],[[[203,[[0,[12,202]]]],[203,[[0,[12,202]]]]],13],[[]],[[[46,[[46,[22]]]],202],[[203,[202]]]],[[[203,[202]],1,1],49],[[[203,[202]]],1],[[[203,[202]],1]],[[]],[[[203,[202]],[203,[202]]],[[203,[202]]]],[[[203,[202]],[203,[202]]]],[[[203,[202]]],[[203,[202]]]],[[1,1,202],[[203,[202]]]],[[[203,[202]],[203,[202]]],[[203,[202]]]],[[[203,[202]],[203,[202]]]],[[]],[[[203,[202]]],[[203,[202]]]],[[],9],[[],9],[[],10],[[]],[[[203,[202]]],1],0,[[[204,[202]],[204,[202]]],[[204,[202]]]],[[[204,[202]],[204,[202]]]],[[]],[[]],[[[204,[[0,[2,202]]]]],[[204,[[0,[2,202]]]]]],[[]],[[[204,[[0,[12,202]]]],[204,[[0,[12,202]]]]],13],[[]],[[[46,[[46,[22]]]],202],[[204,[202]]]],[[[204,[202]],1,1],49],[[[204,[202]],1]],[[]],[[[204,[202]],[204,[202]]],[[204,[202]]]],[[[204,[202]],[204,[202]]]],[[[204,[202]]],[[204,[202]]]],[[1,202],[[204,[202]]]],[[[204,[202]],7],[[204,[202]]]],[[[204,[202]]],1],[[[204,[202]],[204,[202]]],[[204,[202]]]],[[[204,[202]],[204,[202]]],[[204,[202]]]],[[[204,[202]],[204,[202]]],[[204,[202]]]],[[[204,[202]],[204,[202]]]],[[]],[[[204,[202]]],[[204,[202]]]],[[],9],[[],9],[[],10],[[1,202],[[204,[202]]]],[[]],0,0,[[[46,[[46,[7]]]],7],7],[[[46,[[46,[7]]]],7],[[49,[[46,[[46,[7]]]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[206,[205]],1,1]],[[]],[[]],[[]],[[]],[[[206,[205]]],7],[[1,1],[[206,[205]]]],[[],9],[[],9],[[],10],[[]],0,0,[[207,1,1]],[[]],[[]],[[]],[[]],[208,208],[[]],[[208,15],16],[[]],[[]],[207,46],[[]],[[]],[207,22],[[1,1],207],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,202],[[46,[46]]]],[[[46,[22]],202],46],0,0,[[]],[[]],[[]],[[]],[[209,7,7],7],[[210,7,7],7],[209,209],[210,210],[[]],[[]],[[]],[[]],[[]],[[]],[[7,7],209],[7,210],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,0,0,0,0,[[[46,[[0,[19,4,60,6]]]],[46,[[0,[19,4,60,6]]]]],[[46,[[0,[19,4,60,6]]]]]],[[[46,[[0,[19,4,60,6]]]],[46,[[0,[19,4,60,6]]]]],[[46,[[0,[19,4,60,6]]]]]],[[]],[[]],[[[46,[[0,[19,5,4,60,6]]]],[46,[[0,[19,5,4,60,6]]]]],[[46,[[0,[19,5,4,60,6]]]]]],[[]],[[]],[[7,7],7],[[],49],[[],49],[7,7],[7,[[46,[7]]]],0,[[]],[[]],[211,211],[[]],[7,[[46,[211]]]],[[211,211],13],[[211,15],16],[[]],0,[[]],0,0,[[]],[[],9],[[],9],[[],10],[[]],[[7,7]],0,0,[[[212,[202]],1,1]],0,[[[212,[202]],1],46],[[]],[[]],0,[[[212,[202]],1]],[[[212,[[0,[2,202]]]]],[[212,[[0,[2,202]]]]]],[[]],[[[212,[202]],1,1]],[[[212,[202]],1]],[[[212,[[0,[14,202]]]],15],16],[[]],[[[212,[202]],1,1]],[[]],[[[212,[202]],1]],[[1,202],[[212,[202]]]],[[[212,[202]],1,1]],[[]],[[],9],[[],9],[[],10],[[]],[[7,7],7],0,0,0,[[]],[[]],[[213,1],[[46,[1]]]],[[]],[[]],[1,213],[[],9],[[],9],[[],10],[[]],[7,46],0,0,[[]],[[]],[[]],[[32,32,7],[[49,[32]]]],[7,13],0,0,0,0,0,0,[[1,7],[[46,[7]]]],[[7,7],[[49,[7]]]],[[7,7],7],[[7,7,7],[[49,[7]]]],[[7,7,7],7],[[7,7],[[49,[7]]]],[[1,7],[[46,[7]]]],[[214,[46,[215]],216],[[46,[215]]]],[[23,23],23],[[22,22],22],[[7,7],7],[[24,24],24],0,[[]],[[]],[[217,[46,[215]],[46,[215]]],[[46,[215]]]],[[]],[[]],[[22,1],217],[[],9],[[],9],[[],10],[[]],0,0,[[216,214,214],214],[[216,214,214]],[[]],[[]],[[]],[[]],[214,214],[[]],[[214,1],215],[215,214],[214,[[49,[1]]]],[[216,214,214]],[[214,214],13],[[214,215],215],[[214,15],16],[[]],[[[46,[215]]],214],[[]],[[214,1],214],[[]],[[]],[[216,214,1],214],[214,13],[214,1],[[216,214,214],214],[[216,214,214]],[217,216],[[216,214,215],214],[214],[[216,214],214],[[216,214,214],214],[[216,214,214]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],[[],214],[[[46,[215]],215,217],[[46,[215]]]],0,0,0,[[]],[[]],[[]],[[]],[[218,1],13],[1,218],[[],9],[[],9],[[],10],[[]],0,[[],13],[7,[[49,[7]]]],[[7,7,7,7],7],[[7,7,7],7],[7,7],[1,[[46,[7]]]],[[7,7],7],0,0,0,0,0,[[]],[[]],[[[219,[2]]],[[219,[2]]]],[[]],[[],[[219,[5]]]],0,[[[219,[12]],[219,[12]]],13],[[[219,[14]],15],16],[[]],[[]],[[[219,[[0,[58,12,19]]]],[219,[[0,[58,12,19]]]]],[[9,[[219,[[0,[58,12,19]]]]]]]],[[],219],0,[[]],[[],9],[[],9],[[],10],[[]],0,0,[[]],[[]],0,[[[220,[2]]],[[220,[2]]]],[[]],[[[220,[12]],[220,[12]]],13],[[[220,[14]],15],16],[[]],0,[[]],0,[[2,2,2,2,2,2],[[220,[2]]]],0,[[[220,[2]]],[[220,[2]]]],[[[220,[2]]],[[220,[2]]]],[[[220,[2]]],[[220,[2]]]],[[[220,[2]]],[[220,[2]]]],[[[220,[2]]],[[220,[2]]]],[[[220,[2]]],[[220,[2]]]],[[]],0,[[],9],[[],9],[[],10],[[]],[[67,[0,[19,64]],[0,[19,64]]],13],0,0,0,0,[[]],[[]],[[]],[[]],[[[221,[2]]],[[221,[2]]]],[[[222,[2]]],[[222,[2]]]],[[]],[[]],0,[[[221,[14]],15],16],[[[222,[14]],15],16],[[]],[[]],[[]],[[]],[[67,[0,[19,64,14]],[0,[19,64,14]]],[[49,[[221,[[0,[19,64,14]]]]]]]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[215,215],215],[[215,215]],0,[[]],[[]],[[]],[[]],[223,223],[215,215],[[]],[[]],[[],223],[[],215],[[215,215],215],[[215,215]],[[223,223],13],[[215,215],13],[[215,15],16],[[215,15],16],[[223,32,32]],[[]],[[]],[[223,32]],[[223,7]],[[]],[[]],[215,215],[[215,215],215],[[215,215]],[215,215],[22,215],[[]],0,[[215,7],215],[[215,215],215],[[215,215]],[[]],[[]],[[],90],[215,22],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[224,224],[225,225],[[]],[[]],[[],224],[[],225],[[224,224],13],[[225,225],13],[[224,15],16],[[225,15],16],[[]],[[]],[224],[225],[[]],[[]],[224],[224],[225],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,0,0,0,0,[[32,32]],[32],[7],[[]],[7],0,0,[[226,226],226],[[226,226]],0,[[]],[[]],[[]],[[]],[227,227],[226,226],[[]],[[]],[[226,226],226],[[226,226]],[[227,227],13],[[226,226],13],[[227,15],16],[[226,15],16],[[226,15],16],[[227,32,32]],[[]],[[]],[[227,32]],[[227,7]],[[]],[[]],[226],[[226,226],226],[[226,226]],[226,226],[22,227],[[22,22],226],[[226,7]],[[226,226],226],[[226,226]],[[]],[[]],[[],90],[226,22],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[228,228],[229,229],[[]],[[]],[[],228],[[],229],[[228,228],13],[[229,229],13],[[228,15],16],[[229,15],16],[[]],[[]],[228],[229],[[]],[[]],[228],[22,228],[22,229],[228],[229],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,0,[[[186,[4]],[186,[4]]],[[186,[4]]]],[[]],[[]],[[[186,[2]]],[[186,[2]]]],[[]],[[[186,[58]],[186,[58]]],170],[[[186,[12]],[186,[12]]],13],[[[186,[14]],15],16],[[]],[[]],[[[186,[19]]],13],[[[186,[19]]],13],[[[186,[19]]],13],[[[186,[230]]],[[186,[230]]]],[[[186,[59]],[186,[59]]],[[49,[170]]]],[[[186,[60]],[186,[60]]],[[186,[60]]]],[[]],[[],9],[[],9],[[],10],[[[186,[19]]],19],[[]],0,0,0,0,[[]],[[]],0,[[231,231],231],[[231,231]],[[]],[[]],[231,231],[[]],[[231,231],170],[231,32],[[231,231],231],[[231,231]],[[231,231],13],[[231,15],16],[[]],[32,231],[[]],[[231,231],231],[[231,231]],[231,231],[[32,32],231],[231,32],[[231,231],[[49,[170]]]],[[231,231],231],[[231,231]],[[]],[[],9],[[],9],[[],10],[[]],0,[[232,232]],[[232,232]],[[]],[[]],[232,232],[[]],[[232,232],170],[[],232],[[232,232]],[[232,232]],[[232,232],13],[[232,15],16],[[]],[[]],[[232,232]],[[232,232]],[232],[[]],0,[[232,232],[[49,[170]]]],[[232,232]],[[232,232]],[[]],[[],9],[[],9],[[],10],[[]],[[]],0,0,0,0,[[233,[72,[[0,[234,59,2]]]]],[[72,[[0,[234,59,2]]]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[236,[[0,[235,2]]]]],[[237,[[0,[235,2]]]]]],[[[238,[[0,[235,2]]]]],[[237,[[0,[235,2]]]]]],0,0,[[[239,[2,2]]],[[239,[2,2]]]],[[[240,[2]]],[[240,[2]]]],[[[237,[2]]],[[237,[2]]]],[[]],[[]],[[]],[[],[[240,[5]]]],0,0,[[[236,[[0,[235,2]]]],67]],[[[238,[[0,[235,2]]]],67]],[[[239,[14,14]],15],16],[[[240,[14]],15],16],[[[237,[14]],15],16],[[],1],[[]],[[]],[[[239,[2]]],1],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[237,13],0,[237,1],[[[240,[235]]],241],[[[240,[235]]],1],[1,[[236,[[0,[235,2]]]]]],[[1,1],[[238,[[0,[235,2]]]]]],[[1,1],239],[237,68],0,0,[[]],[[[239,[2]]],[[239,[2]]]],[237,[[49,[1]]]],0,0,[[],1],[[[239,[2]]],1],0,[[]],[[]],[[]],0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[],10],[[],10],0,[[]],[[]],[[]],[[]],[[]],[[]],[[[239,[2]]]],0,[[[237,[235]]],[[46,[1]]]],0,[[242,1,1],[[49,[1]]]],[[]],[[]],[[242,1,1],49],[[]],[[]],[[242,1]],[[[237,[235]],1],242],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[]],[[]],[[[237,[235]],1],243],[[243,1],1],[[243,1]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[244,244],[[]],[[244,15],16],[[]],[[244,1],1],[[]],[[244,1,1],1],[[[237,[235]],1],244],[[244,1],[[49,[1]]]],[[244,1,1],46],[[244,1,1],46],[[244,1]],[[244,1]],[[]],[[],9],[[],9],[[],10],[[]],0,[[245,1,1],[[49,[1]]]],[[]],[[]],[[]],[[]],[[245,1,1,1],[[49,[1]]]],[[245,1,1],1],[[[237,[235]],1],245],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[]],[[]],[[2,[76,[62]],[76,[62]],[76,[62]]],[[246,[19,2,2]]]],[[[246,[19,2,2]],[237,[235]]],[[46,[2]]]],[[],9],[[],9],[[],10],[[]],[[[237,[235]],1]],[[[237,[235]],1],[[9,[80]]]],0,[[]],[[]],[[]],[[]],[[2,[76,[62]],[76,[62]],[76,[62]]],[[247,[19,2,2]]]],[[[247,[19,2,2]],[237,[235]],1],[[46,[2]]]],[[],9],[[],9],[[],10],[[]],[[[237,[235]]]],[[[237,[235]],1],[[46,[[0,[4,19,5]]]]]],[[[237,[235]]],46],[[[237,[235]],1,1],[[46,[1]]]],0,0,0,0,0,0,0,0,0,0,[7,22],0,[[]],[[]],[248],[[]],[248,[[49,[24]]]],[[]],[[],248],[248,[[49,[24]]]],[248,[[46,[249]]]],[248,43],[248,28],[248,32],[248,30],[248,22],[248,7],[248,1],[248],[[],9],[[],9],[[],10],[[]],[[248,250]],[[248,250]],0,0,[[[93,[[0,[4,6,19]]]],[0,[4,6,19]]],[[0,[4,6,19]]]],0,[[]],[[]],[[[93,[2]]],[[93,[2]]]],[[]],[[[93,[14]],15],16],[[]],[[]],[[[93,[[0,[60,6,19]]]],[0,[60,6,19]]],[[93,[[0,[60,6,19]]]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,[[]],[[]],[251,251],[[]],[[251,251],170],[[],251],[[251,251],13],[[251,15],16],[[]],[[251,252]],[[]],[251,13],[[251,251],[[49,[170]]]],[[]],[[],9],[[],9],[[],10],[[]],[[[143,[1]],1,1]],[[1,1,1,1]],0,0,[[]],0,[[253,253]],[[253,253]],[[253,253]],[[]],[[]],[253,253],[[]],[[253,253],170],[[253,1],13],[[],253],[[253,253],253],[[253,253],13],[1,253],[[253,1],253],[[253,15],16],[[]],[[[46,[1]]],253],[[253,252]],[[253,253],253],[[]],[253,13],[253,1],[[253,253],[[49,[170]]]],[[253,1],253],[[253,1],253],[[253,253]],[[253,253],253],[[]],[[],9],[[],9],[[],10],[[253,253],253],[[]],0,[[]],[[]],[254,254],[[]],[[254,15],16],[[]],[254,7],[[]],[[],254],[[]],[[],9],[[],9],[[],10],[[]],0,[[80,80],80]],"c":[],"p":[[15,"usize"],[8,"Clone"],[3,"AddSum"],[8,"Add"],[8,"Default"],[8,"Mul"],[15,"u64"],[8,"From"],[4,"Result"],[3,"TypeId"],[3,"Affine"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"One"],[8,"Zero"],[8,"Copy"],[3,"BitAnd"],[15,"u128"],[15,"u32"],[15,"u16"],[15,"u8"],[3,"BitOr"],[3,"BitXor"],[15,"i8"],[15,"i32"],[15,"i16"],[15,"isize"],[15,"i128"],[15,"i64"],[4,"DihedralValue"],[3,"Dihedral"],[3,"Dual"],[8,"Identity"],[8,"AlgeStruct"],[8,"BinaryOp"],[3,"Max"],[3,"Min"],[3,"Prod"],[15,"f32"],[15,"f64"],[3,"Sum"],[3,"Transformation"],[3,"Vec"],[3,"Permutation"],[3,"Composition"],[4,"Option"],[3,"Trivial"],[3,"Tuple2"],[3,"Tuple3"],[3,"Tuple4"],[3,"Tuple5"],[8,"Inverse"],[3,"Update"],[3,"UpdateSum"],[8,"Ord"],[8,"PartialOrd"],[8,"Sub"],[8,"Div"],[8,"Fn"],[4,"SearchResult"],[8,"Eq"],[3,"CompressorBuilder"],[3,"Compressor"],[8,"IntoIterator"],[8,"Iterator"],[4,"Convex"],[8,"Signed"],[3,"Imos1D"],[3,"Range"],[3,"Imos2D"],[3,"KMP"],[3,"Mo"],[3,"Box"],[8,"FnMut"],[3,"PSP"],[3,"RollingHash"],[15,"str"],[3,"Table"],[3,"SuffixArray"],[8,"Hash"],[3,"StaticRangeFreqQuery"],[3,"StaticRangeInversionsQuery"],[4,"Convex"],[3,"TwoSat"],[3,"BinaryTrie"],[3,"Bitset"],[3,"String"],[8,"Elem"],[3,"ConvexHullTrick"],[3,"Linear"],[4,"Mode"],[8,"Group"],[3,"CumulativeSum1DBuilder"],[3,"CumulativeSum1D"],[3,"CumulativeSum2DBuilder"],[3,"CumulativeSum2D"],[8,"Semigroup"],[3,"DisjointSparseTable"],[8,"Monoid"],[3,"DualSegtree"],[3,"DynamicDualSegtree"],[3,"DynamicSegtree"],[8,"AbelianGroup"],[3,"FenwickTree"],[3,"RangeTo"],[8,"Elem"],[3,"FenwickTreeAdd"],[3,"FenwickOnFenwickBuilder"],[3,"FenwickOnFenwick"],[3,"FoldableDeque"],[3,"IntervalHeap"],[8,"Action"],[3,"LazySegtree"],[8,"Elem"],[3,"LazySegtreeCoeff"],[8,"Elem"],[3,"LazySkewHeap"],[8,"Elem"],[3,"LiChaoTree"],[3,"RangeInclusive"],[4,"Mode"],[8,"AddAssign"],[3,"MergeSortTree"],[3,"MultiSet"],[3,"Node"],[3,"PalindromicTree"],[3,"PartiallyPersistentUnionFind"],[3,"At"],[3,"PersistentArray"],[3,"Rc"],[3,"PersistentQueue"],[3,"PersistentSegtree"],[3,"PersistentStack"],[3,"PotentialUnionFind"],[3,"QwordTree"],[3,"RangeSearchTreeBuilder"],[3,"RangeSearchTree"],[3,"RollbackableVec"],[3,"Segtree"],[8,"RangeBounds"],[8,"Commutative"],[3,"Segtree2D"],[3,"SegtreeBeats"],[8,"Elem"],[3,"SegtreeLinearAdd"],[8,"Elem"],[3,"SegtreeLinearAddRangeSum"],[3,"SegtreeOnSegtreeBuilder"],[3,"SegtreeOnSegtree"],[3,"SkewHeap"],[8,"Associative"],[8,"Idempotence"],[3,"SparseTable"],[4,"Mode"],[8,"Elem"],[3,"StarrySkyTree"],[3,"SuccinctDict"],[3,"UnionFind"],[3,"WaveletMatrix"],[3,"Dinic"],[3,"FordFulkerson"],[3,"MinCostFlow"],[3,"Vector"],[3,"Line"],[3,"Eps"],[3,"Circle"],[4,"Ordering"],[4,"CCW"],[4,"Hull"],[4,"IntersectCircleLine"],[4,"IntersectCircleSegment"],[4,"IntersectCircles"],[4,"IntersectLineSegment"],[4,"IntersectSegments"],[4,"PointPolygon"],[3,"Directed"],[8,"EdgeTrait"],[3,"Graph"],[3,"Undirected"],[3,"Edge"],[8,"Direction"],[3,"Lowlink"],[4,"NumInf"],[8,"Unsigned"],[3,"DirectedEulerianTrail"],[3,"UndirectedEulerianTrail"],[3,"FunctionalGraphBuilder"],[3,"FunctionalGraph"],[4,"Kind"],[3,"PseudoTreeBuilder"],[3,"PseudoTree"],[3,"SCC"],[3,"Dir"],[3,"Position"],[3,"Grid"],[8,"Sized"],[3,"_CumSum"],[3,"MatrixMod2"],[8,"FF"],[3,"Matrix"],[3,"SquareMatrix"],[8,"MaxFlow"],[3,"BipartiteMatching"],[3,"HopcroftKarp"],[3,"Edge"],[3,"ExtLucas"],[3,"BinomialCoefficient"],[3,"Quotient"],[3,"FactorialTable"],[3,"FactorizeSieve"],[3,"Polynomial"],[3,"ConstModInt"],[3,"PolynomialOperator"],[3,"NTT"],[3,"EratosthenesSieve"],[3,"ClosedInterval"],[3,"Dice"],[3,"ParseResult"],[4,"Elem"],[3,"ConstModIntBuilder"],[3,"Sum"],[3,"Prod"],[3,"ModInt"],[3,"ModIntBuilder"],[3,"Sum"],[3,"Prod"],[8,"Neg"],[3,"Rational"],[3,"Totalf64"],[8,"Rng"],[8,"SampleUniform"],[8,"TreeEdgeTrait"],[3,"TreeBuilder"],[3,"Tree"],[3,"RootedTreeBuilder"],[3,"TreeEdge"],[3,"TreeNode"],[8,"DoubleEndedIterator"],[3,"TreeDepthQuery"],[3,"EulerTour"],[3,"HLD"],[3,"DoublingLCA"],[3,"RerootingDP"],[3,"TreeDP"],[3,"FastIO"],[15,"char"],[8,"Display"],[3,"NullableUsize"],[8,"Hasher"],[3,"UsizeSet"],[3,"XorShift"],[8,"Exponential"],[13,"NgOk"],[8,"Foldable"],[8,"Foldable2D"],[8,"Indexable"],[8,"Assignable"],[8,"Updatable"],[8,"CumSum"],[8,"JoinStr"],[8,"GcdLcm"],[8,"CheckPrime"],[13,"Paren"],[8,"Pow"],[8,"Inv"],[8,"Transpose"],[8,"YesNo"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
