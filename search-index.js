var searchIndex = JSON.parse('{\
"haar_lib":{"doc":"Rust GitHub last commit","t":"AAOOOOAAOAOOAAOOOOOAAAAAOOAOAOOAOOAAAAAAAAAAAAAAAAAAAAAAAAIQQKKKKKDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLMLLLLLLLLLLLMMLLMLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIIIIQIIIIIIIIKKKLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFNNNELLFLLLLLLLLLLMMDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLMFLLLLMLLLLLFFAAAAAAAFFFFFFFENNLLLLLLLFLLLLLLDLLLLLLLLLLLDLLLLLLLLLLLFFDLLLLLLLLLLLLLLAAAAAFFFFFFFFFFFFFFFDLLLLLLLLLLLFFFFFDLLLLLLLLLLLLLLLLLLLLLLLLFDDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLFFFDLLLLLLLLLLDLLLLLLLLLLLAAFFENNLLLLLLLLFLLLLLDLLLLLLLLLLLLLFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADLLLLLLLLLLLLLLLLLLLLSDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDINNELLLLLLLLLLLLLLLLLLLLLLLLLLLLDDCLLLLLLLLLLLLLLLLLLLLLLLLLLDDCLLLLLLLLLLLLLLLLLLLLLLLLLLDCLLLLLLLLLLDCLLLLLLLLLLLLLDLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLDLLLLLLLLLLLLCDLLLLLLLLLLLLLLLLIDLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLIDLLLLLLLLLLLLIDLLLLLLLLLLLLLLLLLLLLLIDNNELLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLDLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLRDLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLCDLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLIDLLLLLLLLLLLIDLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLINNEDLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLIIIIQQQIQQKKKKKDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLQIKAAKKAKKDLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLDDDDLLLLLLAAALLLLLLLLAMALLLLLLLLAAAAAALLLLLLAAALLLLLLLLLLLLLLMLLAAAAAALLLLLLLLLLLLLLLLALLMLLAMLLLLLLLLLLLLLLLLLLLLLLFFFENNNNNLLFLLLLLLLLLLLLLLLLLFFFFFFENNLLLLFLLFLLLLLLFFFFNENNLLLLLLLLFLLLLLLLLNENNNNLLLLLLLLFLLLLLLLLLLNNNNENNLLLLLLLLLLFLLLLLLLLLLNENNNLLLLLLLLFLLLLLLLLLNENNNLLLLLLLFLLLLLLLLLLNNNELLLLLLLLLLLFLLLLLFDIDIDDQLLAAAAALLLLLLLLAAALLLLLLLLAAAMAALLLLLLKLLLLLMAMLLLLLALAALLAAKLAKLMLLLLLLLLLLLLAAALLLLLLLLAKLMAFCFFCFFFFFAFFFFAADLLLLLLLLLLLLLLDLLLLLLLLLLLLLLNDDENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFDMLLMLLLLLMLMMMLLLLLFFDDLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLFFFDLLLLLLLLLLLLLIFSSDDSDSSLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLMMFAAAAILIDLLLLLLLLLLLILIDLLLLLLLLLLLAAAAAAAFFFDLLLLLLLLLLLLLLLLLAADLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAFFAAAAAAAAAAAAAAAAADLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLAAAAAAAAAAAAAAAAAAAAAAAAAAAFFDDLLLLLLLLLLLLLLLLLLLLLLLLLLAAAAAAAFFFFFFFFFFFFDLLLLFLLLMLMMLLLLLFDALALLLALLLLLLLLLLLLLLLLLFAADLLLLLLLLLLFIQKKKFAAAAAAFFFFFFFFFFFFDLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFIAKACDLLLLLLLLLLCDLLLLLLLLLFFFFFFAAAAAFDLLLLLMLLLLLLMLLLLLDMLLMLLLLLMLMLMLLLLLLLMLLLLFENDNLLLLLLLLMLLLLLLFLLLLLLLLLLMMMAAAAAAAAAAIDDLLALLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLALLLLLLLLLLLLLLLLCCQIICCKKKDDLLALLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNENLLLLLLLLLLLLLLLLLLLLLLIIKKIQQIKKDLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLALLLLLLLLLIIIIFDDDDIDQALLLLLLLLLLLLAMLLLLLLLAALLLLLKLLLLLLMAMLLLLLLALLLLLLLLMAKLLAAKLMLLLALLLLLLLLLLLLLLLALLLLLKLMDLLLLLLLLLLFDLLLLLLLLLLLLDLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLDLLLLLLLLLLFFDLLLLLLLLLLFFFFAAAAAAAAAFFFFFFFFAAAAAAAAAAAFDLLLLLLLLLLLLLLLLLLLLLLLIKDMLMLLLLLLLLLLLLLSDLLLLLLLLLLLLLLLLLLFFQIKDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLIK","n":["algebra","algo","btreemap","btreeset","chmax","chmin","ds","flow","for_loop","geom","get","get_time","graph","grid","hashmap","hashset","impl_algebra","impl_ops","input","iter","linalg","macros","matching","math","max","min","misc","mul_vec","num","rec","sort_with","testtools","timer","trait_alias","traits","tree","typical","utils","action","add_sum","affine","affine_sum","bitand","bitor","bitxor","dihedral","dual","max","max_contiguous","min","prod","sum","traits","transform","trivial","tuple","update","update_sum","Action","Lazy","Output","convert","fold","fold_id","update","update_id","AddSum","borrow","borrow_mut","clone","clone_into","convert","default","eq","fmt","fold","fold_id","from","into","new","to_owned","try_from","try_into","type_id","update","update_id","vzip","Affine","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","AffineSum","borrow","borrow_mut","clone","clone_into","convert","default","eq","fmt","fold","fold_id","from","into","new","to_owned","try_from","try_into","type_id","update","update_id","vzip","BitAnd","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","into","new","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","BitOr","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","into","new","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","BitXor","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","id","id","id","id","id","id","into","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","new","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","Dihedral","DihedralValue","R","S","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","id","into","into","inv","new","op","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Dual","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","Max","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","id","id","id","id","id","id","into","new","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","MaxContiguous","MaxContiguousValue","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","count","default","default","eq","eq","fmt","fmt","from","from","id","into","into","left","length","new","op","right","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Min","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","id","id","id","id","id","id","into","new","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","Prod","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","id","id","id","id","id","id","id","id","id","into","new","op","op","op","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","Sum","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","id","id","id","id","id","id","id","id","id","into","inv","inv","inv","inv","inv","inv","inv","inv","inv","new","op","op","op","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","AbelianGroup","AbelianMonoid","Associative","BinaryOp","Commutative","Element","Group","Idempotence","Identity","Inverse","Monoid","Semigroup","Set","Times","id","inv","op","times","Composition","Permutation","Transformation","apply","apply","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","from","from","from","id","id","into","into","into","into_inner","into_inner","inv","new","op","op","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Trivial","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","into","inv","op","to_owned","try_from","try_into","type_id","vzip","Tuple2","Tuple3","Tuple4","Tuple5","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","default","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","id","id","id","id","into","into","into","into","inv","inv","inv","inv","op","op","op","op","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","Update","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","UpdateSum","borrow","borrow_mut","clone","clone_into","convert","default","eq","fmt","fold","fold_id","from","into","new","to_owned","try_from","try_into","type_id","update","update_id","vzip","bsearch","bsearch_f","compressor","cycle_finding","edit_distance","enum_groups","enumerate_bitset","golden_search","imos_1d","imos_2d","interval_scheduling","inversion_number","kmp","knapsack","lcs","lis","majority_vote","manacher","max_partial_sum","max_rect","merge","mo","num_subseq","parallel_binary_search","permutation","psp","rle","rolling_hash","sa","shakutori","sliding_window","static_range_freq_query","static_range_inversions_query","subset_sum","ternary_search","two_sat","zalgo","equal_range","lower_bound","upper_bound","AllNg","AllOk","NgOk","SearchResult","borrow","borrow_mut","bsearch_ng_ok","clone","clone_into","fmt","from","into","to_owned","try_from","try_into","type_id","vzip","ng","ok","Compressor","CompressorBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","compress","decompress","default","extend","from","from","get","index","into","into","new","size","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Rho","borrow","borrow_mut","clone","clone_into","cycle","cycle_finding","eq","fmt","from","into","tail","to_owned","try_from","try_into","type_id","vzip","edit_distance","enum_groups","gray_code","subset_asc","subset_between","subset_desc","subset_size_k","superset_asc","superset_desc","gray_code","subset_asc","subset_between","subset_desc","subset_size_k","super_asc","superset_desc","Convex","Downwards","Upwards","borrow","borrow_mut","clone","clone_into","eq","fmt","from","golden_search","into","to_owned","try_from","try_into","type_id","vzip","Imos1D","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","update","vzip","Imos2D","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","update","vzip","interval_scheduling","inversion_number","KMP","borrow","borrow_mut","clone","clone_into","fmt","from","into","matches","new","to_owned","try_from","try_into","type_id","vzip","limited","small_quantity","small_value","small_weight","unlimited","knapsack_limited","knapsack_small_quantity","knapsack_small_value","knapsack_small_weight","knapsack_unlimited","lcs","lis","majority_vote","manacher","max_partial_sum","max_rect","max_rect_in_histogram","inplace_merge","inplace_merge_by","merge","Mo","add","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","num_subseq","parallel_binary_search","next_permutation","permutations","prev_permutation","PSP","borrow","borrow_mut","clone","clone_into","from","gain_if_blue","gain_if_both_blue","gain_if_both_red","gain_if_red","if_red_then_must_be_red","into","must_be_blue","must_be_red","new","penalty_if_blue","penalty_if_different","penalty_if_red","penalty_if_red_blue","solve","to_owned","try_from","try_into","type_id","vzip","rle","RollingHash","Table","borrow","borrow","borrow_mut","borrow_mut","from","from","hash","hash","hash_table","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","SuffixArray","borrow","borrow_mut","clone","clone_into","fmt","from","index","into","lcp_array","new","to_owned","to_slice","try_from","try_into","type_id","vzip","shakutori","sliding_maximum","sliding_minimum","StaticRangeFreqQuery","borrow","borrow_mut","from","into","new","query","try_from","try_into","type_id","vzip","StaticRangeInversionsQuery","add_query","borrow","borrow_mut","from","into","new","solve","try_from","try_into","type_id","vzip","count","limited","subset_sum","subset_sum_limited","Convex","Downwards","Upwards","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","ternary_search","to_owned","try_from","try_into","type_id","vzip","TwoSat","add_if","add_or","borrow","borrow_mut","from","into","new","not_coexist","solve","try_from","try_into","type_id","vzip","zalgo","binary_trie","bitset","cht","cumulative_sum_1d","cumulative_sum_2d","disjoint_sparse_table","dual_segtree","dynamic_dual_segtree","dynamic_lazy_segtree","dynamic_segtree","fenwick","fenwick_add","fenwick_on_fenwick","foldable_deque","integer_set","interval_heap","lazy_segtree","lazy_segtree_coeff","lazy_skew_heap","li_chao","link_cut_tree","linked_list","merge_sort_tree","multiset","palindromic_tree","partially_persistent_unionfind","persistent_array","persistent_queue","persistent_segtree","persistent_stack","potential_unionfind","qword_tree","range_search_tree","rollbackable_unionfind","rollbackable_vector","segtree","segtree_2d","segtree_beats","segtree_linear_add","segtree_linear_add_range_sum","segtree_on_segtree","skew_heap","sparse_table","splay_tree","starry_sky_tree","succinct_dict","traits","unionfind","wavelet_matrix","BinaryTrie","borrow","borrow_mut","clone","clone_into","count","erase","fmt","from","insert","into","is_empty","len","max","min","new","to_owned","try_from","try_into","type_id","vzip","B_SIZE","Bitset","and_count_ones","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","count_ones","count_zeros","flip","fmt","fmt","from","from","into","len","new","same_size_xor_assign","set","test","to_owned","to_string","try_from","try_into","type_id","vzip","ConvexHullTrick","Elem","Max","Min","Mode","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","from","from","into","into","new","query","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","CumulativeSum1D","CumulativeSum1DBuilder","Group","assign","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","fmt","fold","from","from","index","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","CumulativeSum2D","CumulativeSum2DBuilder","Group","assign","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","fmt","fold_2d","from","from","index","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","DisjointSparseTable","Semigroup","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","vzip","DualSegtree","Monoid","borrow","borrow_mut","from","from_vec","get","into","new","to_vec","try_from","try_into","type_id","update","vzip","DynamicDualSegtree","borrow","borrow_mut","clone","clone_into","fmt","from","get","into","new","to_owned","try_from","try_into","type_id","update","vzip","DynamicLazySegtree","borrow","borrow_mut","clone","clone_into","fmt","fold","from","into","new","to_owned","try_from","try_into","type_id","update","vzip","DynamicSegtree","assign","borrow","borrow_mut","fmt","fold","from","into","new","try_from","try_into","type_id","vzip","AbelianGroup","FenwickTree","borrow","borrow_mut","clone","clone_into","default","fold","fold_to","from","into","new","to_owned","try_from","try_into","type_id","update","vzip","Elem","FenwickTreeAdd","add","borrow","borrow_mut","fold","fold_to","from","into","new","sub","try_from","try_into","type_id","vzip","FenwickOnFenwick","FenwickOnFenwickBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","default","fold_2d","fold_to_2d","from","from","into","into","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","FoldableDeque","back","borrow","borrow_mut","fold","from","front","into","is_empty","len","new","pop_back","pop_front","push_back","push_front","try_from","try_into","type_id","vzip","IntegerSet","borrow","borrow_mut","clone","clone_into","contains","default","fmt","from","insert","interval","into","mex","new","remove","to_owned","try_from","try_into","type_id","vzip","IntervalHeap","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","max","min","new","pop_max","pop_min","push","to_owned","try_from","try_into","type_id","vzip","LazySegtree","borrow","borrow_mut","fold","from","into","new","new_with_vec","try_from","try_into","type_id","update","vzip","Elem","LazySegtreeCoeff","borrow","borrow_mut","fold","from","init_with_vec","into","new","try_from","try_into","type_id","update","vzip","Elem","LazySkewHeap","add","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","meld","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","Elem","LiChaoTree","Max","Min","Mode","add_line","add_segment","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","from","from","into","into","new","query","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","LinkCutTree","borrow","borrow_mut","cut","evert","expose","fold","from","get","into","link","new","set","try_from","try_into","type_id","update","vzip","LinkedListPool","Node","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","concat","default","first_of","from","from","into","into","iter","last_of","new","next_of","prev_of","push","riter","split_after","split_before","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value","vzip","vzip","MergeSortTree","borrow","borrow_mut","from","into","new","sum_count_le","try_from","try_into","type_id","vzip","MultiSet","borrow","borrow_mut","clone","clone_into","contains","count","default","first","fmt","from","insert","into","is_empty","last","len","new","pop_first","pop_last","remove","to_owned","try_from","try_into","type_id","vzip","Node","PalindromicTree","borrow","borrow","borrow_mut","borrow_mut","count","default","from","from","index","into","into","len","length","new","node_from_strpos","node_of","parent_of","suffix_link_of","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","At","PartiallyPersistentUnionFind","at","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","is_same","latest","merge","new","root_of","size_of","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","PersistentArray","borrow","borrow_mut","clone","clone_into","from","from","get","into","new","set","to_owned","try_from","try_into","type_id","vzip","PersistentQueue","back","borrow","borrow_mut","default","fmt","from","front","into","is_empty","len","new","pop","push","try_from","try_into","type_id","vzip","PersistentSegtree","assign","borrow","borrow_mut","clone","clone_into","fmt","fold","from","from_vec","into","new","to_owned","try_from","try_into","type_id","vzip","PersistentStack","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","iter","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","PotentialUnionFind","borrow","borrow_mut","count_groups","diff","from","get_groups","into","is_same","merge","new","potential_of","root_of","size_of","try_from","try_into","type_id","vzip","MAX","QwordTree","borrow","borrow_mut","contains","default","erase","erase_unchecked","from","insert","insert_unchecked","into","is_empty","len","max","max_le","min","min_ge","new","try_from","try_into","type_id","vzip","RangeSearchTree","RangeSearchTreeBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","default","from","from","into","into","new","search","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","RollbackableUnionFind","borrow","borrow_mut","from","into","is_same","merge","new","rollback","root_of","size_of","try_from","try_into","type_id","vzip","RollbackableVec","as_slice","assign","borrow","borrow_mut","clone","clone_into","default","first","fmt","from","from","index","into","is_empty","last","len","new","pop","push","rollback","to_owned","try_from","try_into","type_id","vzip","Monoid","Segtree","assign","borrow","borrow_mut","clone","clone_into","fold","from","index","into","new","to_owned","try_from","try_into","type_id","update","vzip","Segtree2D","assign","borrow","borrow_mut","fold_2d","from","get","into","new","try_from","try_into","type_id","update","vzip","SegtreeBeats","add","borrow","borrow_mut","chmax","chmin","clone","clone_into","fmt","from","into","max","min","new","new_with_vec","sum","to_owned","try_from","try_into","type_id","vzip","Elem","SegtreeLinearAdd","borrow","borrow_mut","from","get","into","new","try_from","try_into","type_id","update","vzip","Elem","SegtreeLinearAddRangeSum","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","update","vzip","SegtreeOnSegtree","SegtreeOnSegtreeBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","default","fold_2d","from","from","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","SkewHeap","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","meld","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","SparseTable","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","vzip","SplayTree","borrow","borrow_mut","drop","fold","for_each","from","get","insert","into","is_empty","len","merge_left","merge_right","new","pop_first","pop_last","push_first","push_last","remove","reverse","set","singleton","split","try_from","try_into","type_id","vzip","Elem","Max","Min","Mode","StarrySkyTree","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fold","from","from","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","SuccinctDict","access","borrow","borrow_mut","clone","clone_into","count","from","into","is_empty","len","new","rank","select","to_owned","try_from","try_into","type_id","vzip","Assignable","Foldable","Foldable2D","Indexable","Output","Output","Output","Updatable","Value","Value","assign","fold","fold","get","update","UnionFind","borrow","borrow_mut","count_groups","from","get_groups","into","is_same","merge","new","root_of","size_of","try_from","try_into","type_id","value_of","vzip","with_values","WaveletMatrix","access","borrow","borrow_mut","clone","clone_into","count","from","into","maximum","minimum","new","next_value","prev_value","quantile","range_freq","rank","select","to_owned","try_from","try_into","type_id","vzip","Cap","MaxFlow","add_edge","dinic","ford_fulkerson","get_edges","max_flow","min_cost_flow","new","reset","Dinic","add_edge","borrow","borrow_mut","clone","clone_into","from","get_edges","into","max_flow","new","reset","to_owned","try_from","try_into","type_id","vzip","FordFulkerson","add_edge","borrow","borrow_mut","clone","clone_into","from","get_edges","into","max_flow","new","reset","to_owned","try_from","try_into","type_id","vzip","MinCostFlow","add_edge","borrow","borrow_mut","clone","clone_into","from","into","min_cost_flow","new","to_owned","try_from","try_into","type_id","vzip","Circle","Eps","Line","Vector","abs","abs","abs_sq","add","angle","angle_diff","area_intersection_circle_polygon","area_intersection_circles","area_polygon","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ccw","center","circumcircle","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","closest_pair","common_tangent_circles","convex","convex_cut","convex_diameter","convex_hull","cross","cross","default","default","default","diff","dist_line_point","dist_segment_point","dist_segments","div","dot","dot","eq","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","ge","gt","incircle","intersect_circle_line","intersect_circle_segment","intersect_circles","intersect_line_segment","intersect_segments","into","into","into","into","is_orthogonal","is_parallel","le","lt","mul","ne","new","new","new","normal","normal","partial_cmp","point_in_polygon","polar","projection","radius","reflection","sub","tangent_circle","to","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unit","unit","vzip","vzip","vzip","vzip","area_intersection_circle_polygon","area_intersection_circles","area_polygon","CCW","CLOCKWISE","COUNTER_CLOCKWISE","ONLINE_BACK","ONLINE_FRONT","ON_SEGMENT","borrow","borrow_mut","ccw","clockwise","clone","clone_into","counter_clockwise","eq","fmt","from","into","on_segment","online_back","online_front","to_owned","to_value","try_from","try_into","type_id","vzip","circumcircle","closest_pair","common_tangent_circles","is_convex","convex_cut","convex_diameter","Hull","Lower","Upper","borrow","borrow_mut","clone","clone_into","convex_hull","eq","from","half_hull","into","to_owned","try_from","try_into","type_id","vzip","dist_line_point","dist_segment_point","dist_segments","incircle","CROSSED","IntersectCircleLine","OUTSIDE","TANGENT","borrow","borrow_mut","clone","clone_into","crossed","eq","fmt","from","intersect_circle_line","into","outside","tangent","to_owned","try_from","try_into","type_id","vzip","INSIDE","IntersectCircleSegment","ONE_CROSSPOINT","OUTSIDE","TANGENT","TWO_CROSSPOINTS","borrow","borrow_mut","clone","clone_into","eq","fmt","from","inside","intersect_circle_segment","into","one_crosspoint","outside","tangent","to_owned","try_from","try_into","two_crosspoints","type_id","vzip","CIRCUMSCRIBED","INSCRIBED","INSIDE","INTERSECTED","IntersectCircles","OUTSIDE","SAME","borrow","borrow_mut","circumscribed","clone","clone_into","eq","fmt","from","inscribed","inside","intersect_circles","intersected","into","num_common_tangent","outside","same","to_owned","try_from","try_into","type_id","vzip","CROSSED","IntersectLineSegment","LEFTSIDE","OVERLAPPED","RIGHTSIDE","borrow","borrow_mut","clone","clone_into","crossed","eq","fmt","from","intersect_line_segment","into","leftside","overlapped","rightside","to_owned","try_from","try_into","type_id","vzip","INTERSECTED","IntersectSegments","NOT_INTERSECTED","OVERLAPPED","SAME","borrow","borrow_mut","clone","clone_into","eq","fmt","from","intersect_segments","intersected","into","not_intersected","overlapped","same","to_owned","try_from","try_into","type_id","vzip","EXCLUSION","INCLUSION","ON_SEGMENT","PointPolygon","borrow","borrow_mut","clone","clone_into","eq","exclusion","fmt","from","inclusion","into","on_segment","point_in_polygon","to_owned","try_from","try_into","type_id","vzip","tangent_circle","Directed","Direction","Edge","EdgeTrait","Graph","Undirected","Weight","add","add","articulation_points","bellman_ford","bfs","biconnected","bipartite","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bridges","chinese_postman","chu_liu_edmonds","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cycle","detect_cycle","dijkstra","edges","enumerate_triangles","eulerian","extend","extend","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","functional_graph","index","into","into","into","into","is_empty","kruskal","len","lowlink","max_independent_set","new","new","prim","pseudo_tree","rev","rev","scc","to","to","to","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tsort","tsp","two_edge","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","warshall_floyd","weight","weight","weight","yen","articulation_points","NumInf","bellman_ford","bfs","Lowlink","biconnected","check_bipartite","bridges","chinese_postman_problem","chu_liu_edmonds","directed_shortest","directed_shortest_cycle","detect_cycle","dijkstra","enumerate_triangles","directed","undirected","DirectedEulerianTrail","add_edge","borrow","borrow_mut","clone","clone_into","from","into","new","solve","to_owned","try_from","try_into","type_id","vzip","UndirectedEulerianTrail","add_edge","borrow","borrow_mut","clone","clone_into","from","into","new","solve","to_owned","try_from","try_into","type_id","vzip","Branch","FunctionalGraph","FunctionalGraphBuilder","Kind","Leaf","Loop","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","clone","clone_into","eq","fmt","from","from","from","grp_index_of","into","into","into","kind_of","loops","new","next_of","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","kruskal","Lowlink","back","borrow","borrow_mut","ch","clone","clone_into","fmt","from","into","low","new","ord","par","size","to_owned","try_from","try_into","type_id","vzip","max_independent_set","prim","PseudoTree","PseudoTreeBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","from","from","group_of","into","into","is_in_loop","new","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","SCC","borrow","borrow_mut","from","groups","into","new","to_vec","try_from","try_into","type_id","vzip","tsort","tsp","two_edge_connected_components","WarshallFloyd","add_edge","borrow","borrow_mut","dist","from","has_negative_loop","into","new","table","try_from","try_into","type_id","vzip","Elem","yen_algorithm","D","DIR_4","Dir","Grid","L","Position","R","U","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","dx","dy","eq","eq","fmt","fmt","fmt","from","from","from","get","get_mut","into","into","into","iter","iter_mut","mov_strict","new","new","new","to_graph","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","x","y","grid_to_graph","collect","cumsum","join_str","reject","CollectVec","collect_vec","CumSum","_CumSum","borrow","borrow_mut","cumsum","from","into","into_iter","next","try_from","try_into","type_id","vzip","JoinStr","join_str","Reject","_Reject","borrow","borrow_mut","from","into","into_iter","next","reject","try_from","try_into","type_id","vzip","mod_2","mod_m","mod_p","determinant","gaussian_elim","inverse","matrix","determinant","gaussian_elim","inverse","MatrixMod2","borrow","borrow_mut","clone","clone_into","from","from_vec_bitset","get","index","into","mul","new","to_owned","transpose","try_from","try_into","type_id","vzip","matrix","square_matrix","Matrix","add","add_assign","borrow","borrow_mut","clone","clone_into","eq","from","from_vec_2d","get_mut","height","index","into","mul","mul_assign","neg","new","sub","sub_assign","to_owned","transpose","try_from","try_into","type_id","vzip","width","SquareMatrix","add","add_assign","borrow","borrow_mut","clone","clone_into","eq","from","from_vec","get_mut","index","into","mul","mul_assign","neg","new","pow","size","straight_mul","strassen_mul","sub","sub_assign","to_owned","transpose","try_from","try_into","type_id","unit","vzip","determinant","inverse","determinant","inverse","chmax","chmin","ds_macros","for_loop","get_time","impl_algebra","impl_ops","io","max","min","mul_vec","rec","sort_with","timer","trait_alias","bi_match","hopcroft_karp","BipartiteMatching","add_edge","borrow","borrow_mut","from","into","matching","new","try_from","try_into","type_id","vzip","Edge","HopcroftKarp","add_edge","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","from","from","get_matching","into","into","matching","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","bell_number","berlekamp_massey","binomial_coefficient","convolution","count_coprime","crt","divisor","enumerate_quotients","ext_gcd","factorial","factorial_prime_factor","factorize","gcd_lcm","linear_congruence","mod_ops","montmort","multipoint_eval","nim_product","ntt","polynomial","polynomial_taylor_shift","prime_test","primitive_root","sum_floor_linear","sum_of_exponential_times_polynomial_limit","totient","totient_sum","bell_number_table","berlekamp_massey","BinomialCoefficient","ExtLucas","borrow","borrow","borrow_mut","borrow_mut","calc","calc","clone","clone","clone_into","clone_into","from","from","into","into","new","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","conv_and","conv_or","mobius_sub","mobius_super","subset_conv","zeta_sub","zeta_super","convolution_and","convolution_or","fast_mobius_subset","fast_mobius_superset","subset_convolution","fast_zeta_subset","fast_zeta_superset","count_coprime","crt","crt_vec","count_divisors","enumerate_divisors","Quotient","borrow","borrow_mut","clone","clone_into","enumerate_quotients","eq","fmt","from","from","into","q","to","to_owned","try_from","try_into","type_id","vzip","ext_gcd","FactorialTable","bell","bell_number","bernoulli","bernoulli_number","borrow","borrow_mut","catalan","catalan_number","clone","clone_into","comb","facto","fmt","from","h","into","inv_facto","new","perm","to_owned","try_from","try_into","type_id","vzip","factorial_prime_factor","sieve","trial","FactorizeSieve","borrow","borrow_mut","factorize","from","into","new","try_from","try_into","type_id","vzip","factorize","GcdLcm","Output","gcd","gcd_lcm","lcm","linear_congruence","enum_inv","inv","inv_p","log","pow","sqrt","enumerate_mod_inv","mod_inv","mod_inv_p","mod_log","mod_pow","mod_sqrt","montmort","multipoint_eval","nim_product_16","nim_product_32","nim_product_64","nim_product_8","NTT","borrow","borrow_mut","convolve","from","into","new","try_from","try_into","type_id","vzip","Polynomial","PolynomialOperator","add","add_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","coeff_of","constant","deg","divmod","eq","eval","fmt","from","from","from","get_until","into","into","inv","is_empty","len","mul","mul_assign","new","scale","shrink","sq","sub","sub_assign","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","zero","polynomial_taylor_shift","CheckPrime","eratosthenes","is_prime","miller_rabin","CheckPrime","EratosthenesSieve","borrow","borrow_mut","from","into","is_prime","new","try_from","try_into","type_id","vzip","CheckPrime","MillerRabin","borrow","borrow_mut","from","into","is_prime","try_from","try_into","type_id","vzip","primitive_root","sum_floor_linear","sum_of_exponential_times_polynomial_limit","totient","totient_table","totient_sum","bitwise_sum_popcount","closed_interval","dice","paren","parse_paren","bitwise_sum_popcount","ClosedInterval","borrow","borrow_mut","clone","clone_into","default","end","eq","fmt","from","into","merge","new","start","to_owned","try_from","try_into","type_id","vzip","Dice","back","borrow","borrow_mut","bottom","clone","clone_into","eq","fmt","from","front","into","left","new","right","rot_back","rot_clockwise","rot_counterclockwise","rot_front","rot_left","rot_right","to_owned","top","try_from","try_into","type_id","vzip","check_paren","Elem","Paren","ParseResult","Value","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","elems","fmt","fmt","from","from","into","into","parse_paren","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","close","inner","open","arithmetic","const_modint","ff","modint","num_inf","one_zero","ops","rational","total_f64","traits","Arithmetic","ConstModInt","ConstModIntBuilder","add","add_assign","algebra","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","div","div_assign","eq","eq","fmt","fmt","frac","from","from","from","from","from_i64","from_u64","impl_ops","into","into","inv","mul","mul_assign","neg","new","one","one_zero","pow","sub","sub_assign","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","value","vzip","vzip","zero","Prod","Sum","Element","FF","FFElem","Inv","Pow","frac","from_i64","from_u64","ModInt","ModIntBuilder","add","add_assign","algebra","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","div","div_assign","eq","eq","fmt","fmt","fmt","frac","from","from","from_i64","from_u64","impl_ops","into","into","inv","mul","mul_assign","neg","new","new","pow","sub","sub_assign","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","value","vzip","vzip","ProdModM","SumModM","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","eq","eq","fmt","fmt","from","from","id","id","into","into","inv","new","new","op","op","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Inf","NegInf","NumInf","Value","add","borrow","borrow_mut","clone","clone_into","cmp","eq","fmt","from","into","is_inf","is_neg_inf","is_value","neg","partial_cmp","sub","to_owned","try_from","try_into","type_id","unwrap","vzip","One","Zero","one","zero","Inv","Output","Output","Pow","inv","pow","Rational","add","add_assign","borrow","borrow_mut","clone","clone_into","cmp","denominator","div","div_assign","eq","fmt","from","from","into","mul","mul_assign","neg","new","numerator","partial_cmp","sub","sub_assign","to_owned","try_from","try_into","type_id","vzip","Totalf64","add","add_assign","borrow","borrow_mut","clone","clone_into","cmp","default","div","div_assign","eq","fmt","from","into","mul","mul_assign","neg","one","one_zero","partial_cmp","sub","sub_assign","to_owned","try_from","try_into","type_id","vzip","zero","Float","Int","Signed","Unsigned","rand_range","RootedTreeBuilder","Tree","TreeBuilder","TreeEdge","TreeEdgeTrait","TreeNode","Weight","auxiliary_tree","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","centroid","children","clone","clone","clone","clone_into","clone_into","clone_into","default","depth_query","euler_tour","extend","extend","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hld","index","into","into","into","into","into","is_empty","lca","len","neighbors","neighbors_size","new","new","new","nodes","nodes_iter","parent","rerooting","rev","rev","root","rooted_isomorphism","rooting","to","to","to","to_owned","to_owned","to_owned","tree_dp","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","utils","vzip","vzip","vzip","vzip","vzip","weight","weight","weight","AuxiliaryTree","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","vzip","centroids","TreeDepthQuery","ancestor","borrow","borrow_mut","children_query","from","into","me_query","new","try_from","try_into","type_id","vzip","EulerTour","borrow","borrow_mut","from","into","new","point_query","subtree_query","try_from","try_into","type_id","vzip","HLD","borrow","borrow_mut","clone","clone_into","fmt","from","get_edge_id","get_id","into","lca","new","parent","path_query_edge","path_query_vertex","subtree_query_edge","subtree_query_vertex","to_owned","try_from","try_into","type_id","vzip","DoublingLCA","ancestor","borrow","borrow_mut","from","into","jump","lca","new","try_from","try_into","type_id","vzip","RerootingDP","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","rooted_isomorphism","rooting","TreeDP","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","tree_diameter","tree_distance","tree_height","tree_path","double_sigma","difference","max","prod","range_prod","range_sum","range_xor","sum","xor","sum_of_sum_of_difference","sum_of_sum_of_max","sum_of_sum_of_prod","sum_of_sum_of_range_prod","sum_of_sum_of_range_sum","sum_of_sum_of_range_xor","sum_of_sum_of_sum","sum_of_sum_of_xor","bits","fastio","is_none_or","linear","nullable_usize","range","swap","transpose","usize_set","xor_shift","yesno","highest_one","FastIO","borrow","borrow_mut","drop","from","getc","into","new","peek","read_chars","read_f64","read_i32","read_i64","read_isize","read_u32","read_u64","read_usize","skip","try_from","try_into","type_id","vzip","write","writeln","IsNoneOr","is_none_or","Linear","a","apply","b","borrow","borrow_mut","clone","clone_into","fmt","from","into","mov_x","to_owned","try_from","try_into","type_id","vzip","NULL","NullableUsize","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","hash","into","is_null","partial_cmp","to_owned","try_from","try_into","type_id","vzip","range_bounds_to_range","swap_vv","Output","Transpose","transpose","UsizeSet","bitand","bitor","bitxor","borrow","borrow_mut","clone","clone_into","cmp","contains","default","difference","eq","fill","flip","fmt","from","from","hash","intersection","into","is_empty","len","partial_cmp","reset","set","sub","symmetric_difference","to_owned","try_from","try_into","type_id","union","vzip","XorShift","borrow","borrow_mut","clone","clone_into","fmt","from","gen","into","new","to_owned","try_from","try_into","type_id","vzip","YesNo","yesno"],"q":[[0,"haar_lib"],[38,"haar_lib::algebra"],[58,"haar_lib::algebra::action"],[66,"haar_lib::algebra::add_sum"],[87,"haar_lib::algebra::affine"],[105,"haar_lib::algebra::affine_sum"],[126,"haar_lib::algebra::bitand"],[154,"haar_lib::algebra::bitor"],[182,"haar_lib::algebra::bitxor"],[234,"haar_lib::algebra::dihedral"],[268,"haar_lib::algebra::dual"],[286,"haar_lib::algebra::max"],[326,"haar_lib::algebra::max_contiguous"],[363,"haar_lib::algebra::min"],[403,"haar_lib::algebra::prod"],[449,"haar_lib::algebra::sum"],[504,"haar_lib::algebra::traits"],[522,"haar_lib::algebra::transform"],[576,"haar_lib::algebra::trivial"],[594,"haar_lib::algebra::tuple"],[666,"haar_lib::algebra::update"],[684,"haar_lib::algebra::update_sum"],[705,"haar_lib::algo"],[742,"haar_lib::algo::bsearch"],[745,"haar_lib::algo::bsearch_f"],[762,"haar_lib::algo::bsearch_f::SearchResult"],[764,"haar_lib::algo::compressor"],[798,"haar_lib::algo::cycle_finding"],[815,"haar_lib::algo::edit_distance"],[816,"haar_lib::algo::enum_groups"],[817,"haar_lib::algo::enumerate_bitset"],[824,"haar_lib::algo::enumerate_bitset::gray_code"],[825,"haar_lib::algo::enumerate_bitset::subset_asc"],[826,"haar_lib::algo::enumerate_bitset::subset_between"],[827,"haar_lib::algo::enumerate_bitset::subset_desc"],[828,"haar_lib::algo::enumerate_bitset::subset_size_k"],[829,"haar_lib::algo::enumerate_bitset::superset_asc"],[830,"haar_lib::algo::enumerate_bitset::superset_desc"],[831,"haar_lib::algo::golden_search"],[848,"haar_lib::algo::imos_1d"],[860,"haar_lib::algo::imos_2d"],[872,"haar_lib::algo::interval_scheduling"],[873,"haar_lib::algo::inversion_number"],[874,"haar_lib::algo::kmp"],[889,"haar_lib::algo::knapsack"],[894,"haar_lib::algo::knapsack::limited"],[895,"haar_lib::algo::knapsack::small_quantity"],[896,"haar_lib::algo::knapsack::small_value"],[897,"haar_lib::algo::knapsack::small_weight"],[898,"haar_lib::algo::knapsack::unlimited"],[899,"haar_lib::algo::lcs"],[900,"haar_lib::algo::lis"],[901,"haar_lib::algo::majority_vote"],[902,"haar_lib::algo::manacher"],[903,"haar_lib::algo::max_partial_sum"],[904,"haar_lib::algo::max_rect"],[906,"haar_lib::algo::merge"],[909,"haar_lib::algo::mo"],[921,"haar_lib::algo::num_subseq"],[922,"haar_lib::algo::parallel_binary_search"],[923,"haar_lib::algo::permutation"],[926,"haar_lib::algo::psp"],[951,"haar_lib::algo::rle"],[952,"haar_lib::algo::rolling_hash"],[974,"haar_lib::algo::sa"],[991,"haar_lib::algo::shakutori"],[992,"haar_lib::algo::sliding_window"],[994,"haar_lib::algo::static_range_freq_query"],[1005,"haar_lib::algo::static_range_inversions_query"],[1017,"haar_lib::algo::subset_sum"],[1019,"haar_lib::algo::subset_sum::count"],[1020,"haar_lib::algo::subset_sum::limited"],[1021,"haar_lib::algo::ternary_search"],[1038,"haar_lib::algo::two_sat"],[1052,"haar_lib::algo::zalgo"],[1053,"haar_lib::ds"],[1102,"haar_lib::ds::binary_trie"],[1123,"haar_lib::ds::bitset"],[1155,"haar_lib::ds::cht"],[1188,"haar_lib::ds::cumulative_sum_1d"],[1217,"haar_lib::ds::cumulative_sum_2d"],[1246,"haar_lib::ds::disjoint_sparse_table"],[1258,"haar_lib::ds::dual_segtree"],[1273,"haar_lib::ds::dynamic_dual_segtree"],[1289,"haar_lib::ds::dynamic_lazy_segtree"],[1305,"haar_lib::ds::dynamic_segtree"],[1318,"haar_lib::ds::fenwick"],[1336,"haar_lib::ds::fenwick_add"],[1351,"haar_lib::ds::fenwick_on_fenwick"],[1382,"haar_lib::ds::foldable_deque"],[1401,"haar_lib::ds::integer_set"],[1421,"haar_lib::ds::interval_heap"],[1443,"haar_lib::ds::lazy_segtree"],[1456,"haar_lib::ds::lazy_segtree_coeff"],[1470,"haar_lib::ds::lazy_skew_heap"],[1493,"haar_lib::ds::li_chao"],[1523,"haar_lib::ds::link_cut_tree"],[1541,"haar_lib::ds::linked_list"],[1578,"haar_lib::ds::merge_sort_tree"],[1589,"haar_lib::ds::multiset"],[1614,"haar_lib::ds::palindromic_tree"],[1642,"haar_lib::ds::partially_persistent_unionfind"],[1667,"haar_lib::ds::persistent_array"],[1683,"haar_lib::ds::persistent_queue"],[1701,"haar_lib::ds::persistent_segtree"],[1718,"haar_lib::ds::persistent_stack"],[1737,"haar_lib::ds::potential_unionfind"],[1755,"haar_lib::ds::qword_tree"],[1778,"haar_lib::ds::range_search_tree"],[1804,"haar_lib::ds::rollbackable_unionfind"],[1819,"haar_lib::ds::rollbackable_vector"],[1845,"haar_lib::ds::segtree"],[1863,"haar_lib::ds::segtree_2d"],[1877,"haar_lib::ds::segtree_beats"],[1898,"haar_lib::ds::segtree_linear_add"],[1911,"haar_lib::ds::segtree_linear_add_range_sum"],[1924,"haar_lib::ds::segtree_on_segtree"],[1951,"haar_lib::ds::skew_heap"],[1972,"haar_lib::ds::sparse_table"],[1983,"haar_lib::ds::splay_tree"],[2011,"haar_lib::ds::starry_sky_tree"],[2038,"haar_lib::ds::succinct_dict"],[2057,"haar_lib::ds::traits"],[2072,"haar_lib::ds::unionfind"],[2090,"haar_lib::ds::wavelet_matrix"],[2113,"haar_lib::flow"],[2123,"haar_lib::flow::dinic"],[2140,"haar_lib::flow::ford_fulkerson"],[2157,"haar_lib::flow::min_cost_flow"],[2172,"haar_lib::geom"],[2288,"haar_lib::geom::area_intersection_circle_polygon"],[2289,"haar_lib::geom::area_intersection_circles"],[2290,"haar_lib::geom::area_polygon"],[2291,"haar_lib::geom::ccw"],[2317,"haar_lib::geom::circumcircle"],[2318,"haar_lib::geom::closest_pair"],[2319,"haar_lib::geom::common_tangent_circles"],[2320,"haar_lib::geom::convex"],[2321,"haar_lib::geom::convex_cut"],[2322,"haar_lib::geom::convex_diameter"],[2323,"haar_lib::geom::convex_hull"],[2340,"haar_lib::geom::dist_line_point"],[2341,"haar_lib::geom::dist_segment_point"],[2342,"haar_lib::geom::dist_segments"],[2343,"haar_lib::geom::incircle"],[2344,"haar_lib::geom::intersect_circle_line"],[2365,"haar_lib::geom::intersect_circle_segment"],[2390,"haar_lib::geom::intersect_circles"],[2418,"haar_lib::geom::intersect_line_segment"],[2441,"haar_lib::geom::intersect_segments"],[2464,"haar_lib::geom::point_in_polygon"],[2485,"haar_lib::geom::tangent_circle"],[2486,"haar_lib::graph"],[2587,"haar_lib::graph::articulation_points"],[2588,"haar_lib::graph::bellman_ford"],[2590,"haar_lib::graph::bfs"],[2591,"haar_lib::graph::biconnected"],[2593,"haar_lib::graph::bipartite"],[2594,"haar_lib::graph::bridges"],[2595,"haar_lib::graph::chinese_postman"],[2596,"haar_lib::graph::chu_liu_edmonds"],[2597,"haar_lib::graph::cycle"],[2598,"haar_lib::graph::cycle::directed_shortest"],[2599,"haar_lib::graph::detect_cycle"],[2600,"haar_lib::graph::dijkstra"],[2601,"haar_lib::graph::enumerate_triangles"],[2602,"haar_lib::graph::eulerian"],[2604,"haar_lib::graph::eulerian::directed"],[2619,"haar_lib::graph::eulerian::undirected"],[2634,"haar_lib::graph::functional_graph"],[2676,"haar_lib::graph::kruskal"],[2677,"haar_lib::graph::lowlink"],[2697,"haar_lib::graph::max_independent_set"],[2698,"haar_lib::graph::prim"],[2699,"haar_lib::graph::pseudo_tree"],[2722,"haar_lib::graph::scc"],[2734,"haar_lib::graph::tsort"],[2735,"haar_lib::graph::tsp"],[2736,"haar_lib::graph::two_edge"],[2737,"haar_lib::graph::warshall_floyd"],[2751,"haar_lib::graph::yen"],[2753,"haar_lib::grid"],[2815,"haar_lib::grid::to_graph"],[2816,"haar_lib::iter"],[2820,"haar_lib::iter::collect"],[2822,"haar_lib::iter::cumsum"],[2835,"haar_lib::iter::join_str"],[2837,"haar_lib::iter::reject"],[2850,"haar_lib::linalg"],[2853,"haar_lib::linalg::mod_2"],[2857,"haar_lib::linalg::mod_2::determinant"],[2858,"haar_lib::linalg::mod_2::gaussian_elim"],[2859,"haar_lib::linalg::mod_2::inverse"],[2860,"haar_lib::linalg::mod_2::matrix"],[2878,"haar_lib::linalg::mod_m"],[2880,"haar_lib::linalg::mod_m::matrix"],[2907,"haar_lib::linalg::mod_m::square_matrix"],[2937,"haar_lib::linalg::mod_p"],[2939,"haar_lib::linalg::mod_p::determinant"],[2940,"haar_lib::linalg::mod_p::inverse"],[2941,"haar_lib::macros"],[2956,"haar_lib::matching"],[2958,"haar_lib::matching::bi_match"],[2970,"haar_lib::matching::hopcroft_karp"],[2996,"haar_lib::math"],[3023,"haar_lib::math::bell_number"],[3024,"haar_lib::math::berlekamp_massey"],[3025,"haar_lib::math::binomial_coefficient"],[3053,"haar_lib::math::convolution"],[3060,"haar_lib::math::convolution::conv_and"],[3061,"haar_lib::math::convolution::conv_or"],[3062,"haar_lib::math::convolution::mobius_sub"],[3063,"haar_lib::math::convolution::mobius_super"],[3064,"haar_lib::math::convolution::subset_conv"],[3065,"haar_lib::math::convolution::zeta_sub"],[3066,"haar_lib::math::convolution::zeta_super"],[3067,"haar_lib::math::count_coprime"],[3068,"haar_lib::math::crt"],[3070,"haar_lib::math::divisor"],[3072,"haar_lib::math::enumerate_quotients"],[3090,"haar_lib::math::ext_gcd"],[3091,"haar_lib::math::factorial"],[3116,"haar_lib::math::factorial_prime_factor"],[3117,"haar_lib::math::factorize"],[3119,"haar_lib::math::factorize::sieve"],[3130,"haar_lib::math::factorize::trial"],[3131,"haar_lib::math::gcd_lcm"],[3136,"haar_lib::math::linear_congruence"],[3137,"haar_lib::math::mod_ops"],[3143,"haar_lib::math::mod_ops::enum_inv"],[3144,"haar_lib::math::mod_ops::inv"],[3145,"haar_lib::math::mod_ops::inv_p"],[3146,"haar_lib::math::mod_ops::log"],[3147,"haar_lib::math::mod_ops::pow"],[3148,"haar_lib::math::mod_ops::sqrt"],[3149,"haar_lib::math::montmort"],[3150,"haar_lib::math::multipoint_eval"],[3151,"haar_lib::math::nim_product"],[3155,"haar_lib::math::ntt"],[3166,"haar_lib::math::polynomial"],[3210,"haar_lib::math::polynomial_taylor_shift"],[3211,"haar_lib::math::prime_test"],[3215,"haar_lib::math::prime_test::eratosthenes"],[3227,"haar_lib::math::prime_test::miller_rabin"],[3238,"haar_lib::math::primitive_root"],[3239,"haar_lib::math::sum_floor_linear"],[3240,"haar_lib::math::sum_of_exponential_times_polynomial_limit"],[3241,"haar_lib::math::totient"],[3243,"haar_lib::math::totient_sum"],[3244,"haar_lib::misc"],[3249,"haar_lib::misc::bitwise_sum_popcount"],[3250,"haar_lib::misc::closed_interval"],[3269,"haar_lib::misc::dice"],[3296,"haar_lib::misc::paren"],[3297,"haar_lib::misc::parse_paren"],[3327,"haar_lib::misc::parse_paren::Elem"],[3330,"haar_lib::num"],[3340,"haar_lib::num::arithmetic"],[3341,"haar_lib::num::const_modint"],[3395,"haar_lib::num::const_modint::algebra"],[3397,"haar_lib::num::ff"],[3405,"haar_lib::num::modint"],[3454,"haar_lib::num::modint::algebra"],[3491,"haar_lib::num::num_inf"],[3517,"haar_lib::num::one_zero"],[3521,"haar_lib::num::ops"],[3527,"haar_lib::num::rational"],[3556,"haar_lib::num::total_f64"],[3585,"haar_lib::num::traits"],[3589,"haar_lib::testtools"],[3590,"haar_lib::tree"],[3689,"haar_lib::tree::auxiliary_tree"],[3700,"haar_lib::tree::centroid"],[3701,"haar_lib::tree::depth_query"],[3714,"haar_lib::tree::euler_tour"],[3726,"haar_lib::tree::hld"],[3748,"haar_lib::tree::lca"],[3761,"haar_lib::tree::rerooting"],[3772,"haar_lib::tree::rooted_isomorphism"],[3773,"haar_lib::tree::rooting"],[3774,"haar_lib::tree::tree_dp"],[3785,"haar_lib::tree::utils"],[3789,"haar_lib::typical"],[3790,"haar_lib::typical::double_sigma"],[3798,"haar_lib::typical::double_sigma::difference"],[3799,"haar_lib::typical::double_sigma::max"],[3800,"haar_lib::typical::double_sigma::prod"],[3801,"haar_lib::typical::double_sigma::range_prod"],[3802,"haar_lib::typical::double_sigma::range_sum"],[3803,"haar_lib::typical::double_sigma::range_xor"],[3804,"haar_lib::typical::double_sigma::sum"],[3805,"haar_lib::typical::double_sigma::xor"],[3806,"haar_lib::utils"],[3817,"haar_lib::utils::bits"],[3818,"haar_lib::utils::fastio"],[3842,"haar_lib::utils::is_none_or"],[3844,"haar_lib::utils::linear"],[3861,"haar_lib::utils::nullable_usize"],[3881,"haar_lib::utils::range"],[3882,"haar_lib::utils::swap"],[3883,"haar_lib::utils::transpose"],[3886,"haar_lib::utils::usize_set"],[3920,"haar_lib::utils::xor_shift"],[3935,"haar_lib::utils::yesno"]],"d":["代数的構造","","","","値を最大値で更新する。","値を最小値で更新する。","データ構造","フロー問題","C言語風のfor文","幾何","","","グラフ一般に関するもの","","","","","","","イテレータ","線形代数","macro_exportされたmacro置き場","マッチング問題","数学","複数の値の最大値を得る。","複数の値の最小値を得る。","分類を放置しているもの","多次元の<code>Vec</code>を作る。","","…","","","","トレイトの別名を作る。","","木に関するもの","","便利そうなもの置き場","","Range Add Range Sum用の代数的構造","一次関数の合成を演算とする代数的構造","Range Affine Range Sum用の代数的構造","論理積を演算とする代数的構造","論理和を演算とする代数的構造","排他的論理和を演算とする代数的構造","二面体群","演算の順序を逆にした代数的構造","最大値を演算とする代数的構造","<code>bool</code>値列の結合による、連続する<code>true</code>…","最小値を演算とする代数的構造","乗算を演算とする代数的構造","加法を演算とする代数的構造","代数的構造に関するトレイトを定義する。","","自明な群","直積","値の更新を演算とする代数的構造","Range Update Range Sum用の代数的構造","","範囲更新の型","範囲取得の型","範囲更新を範囲取得に反映させる。","範囲取得の二項演算","範囲取得のモノイドの単位元","範囲更新の二項演算","範囲更新のモノイドの単位元","Range Add Range Sum用の代数的構造","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>AddSum&lt;T, U&gt;</code>を生成する。","","","","","","","","一次関数の合成を演算とする代数的構造","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","<code>Affine&lt;T&gt;</code>を生成する。","","","","","","","Range Affine Range Sum用の代数的構造","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>AffineSum&lt;T, U&gt;</code>を生成する。","","","","","","","","論理積を演算とする代数的構造","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","<code>BitAnd&lt;T&gt;</code>を生成する。","","","","","","","","","","","","論理和を演算とする代数的構造","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","<code>BitOr&lt;T&gt;</code>を生成する。","","","","","","","","","","","","排他的論理和を演算とする代数的構造","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","<code>BitXor&lt;T&gt;</code>を生成する。","","","","","","","","","","","","","","","","","","二面体群","二面体群の元","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","<code>Dihedral</code>を生成する。","","","","","","","","","","","","演算の順序を逆にした代数的構造","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","<code>Dual&lt;S&gt;</code>を生成する。","","","","","","","最大値を演算とする代数的構造","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","<code>Max&lt;T&gt;</code>を生成する。","","","","","","","","","","","","","","","","","","連続する<code>true</code>列の最大長を管理する。","<code>MaxContiguous</code>の元","","","","","","","","","最大連続長","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","左側最大連続長","区間長","<code>value</code>を値にもつ<code>MaxContiguousValue</code>を生成する。","","右側最大連続長","","","","","","","","","","","最小値を演算とする代数的構造","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","<code>Min&lt;T&gt;</code>を生成する。","","","","","","","","","","","","","","","","","","乗算を演算とする代数的構造","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","<code>Prod&lt;T&gt;</code>を生成する。","","","","","","","","","","","","","","","","","","","","","加法を演算とする代数的構造","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","<code>Sum&lt;T&gt;</code>を生成する。","","","","","","","","","","","","","","","","","","","","","可換群","可換モノイド","結合性をもつ","二項演算をもつ","可換性をもつ","集合の要素の型","群","冪等性をもつ","単位元をもつ","逆元をもつ","モノイド","半群","集合","値に二項演算を複数回適用する。","単位元","逆元","二項演算","<code>n</code>個の値<code>a</code>に二項演算を適用する。","置換や変換の合成を演算とする代数的構造","置換操作","変換操作","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","<code>Composition&lt;T&gt;</code>を生成する。","","","","","","","","","","","","","","","","","","","","自明な群","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","2つの集合の直積","3つの集合の直積","4つの集合の直積","5つの集合の直積","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","値の更新を演算とする代数的構造","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","<code>Update&lt;T&gt;</code>を生成する。","","","","","","","Range Update Range Sum用の代数的構造","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>UpdateSum&lt;T,U&gt;</code>を生成する。","","","","","","","","二分探索","","座標圧縮","循環検出法","編集距離","グループ分けの方法の全列挙","","黄金分割探索","","","区間スケジューリング問題","転倒数","Knuth-Morris-Pratt法","ナップサック問題","最長共通部分列","最長増加部分列","Boyer-Moore majority vote algorithm","","最大連続部分和","","","Mo’s algorithm","相異なる部分列の総数","並列二分探索","","Project Selection Problem","Run Length Encoding","","Suffix Array","尺取り法","スライド最小値","配列に対する範囲頻度取得クエリ","範囲転倒数取得クエリ","部分和問題","三分探索","2-SAT","","lower_bound, upper_boundの組を求める。","x以上となる最小のindexを求める。","xを超える最小のindexを求める。","全体で条件を満たさない。","全体で条件を満たす。","<code>ng</code>以下で条件を満たさず、<code>ok</code>…","<code>bsearch_ng_ok</code>の返り値","","","二分探索","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","条件を満たさない最大値","条件を満たす最小値","座標圧縮のための構造体","<code>Compressor&lt;T&gt;</code>を生成する","座標圧縮対象に<code>value</code>を追加する。","","","","","<strong>Time complexity</strong> $O(n \\\\log n)$","","","","","<code>values</code>の要素をすべて座標圧縮する。","<code>values</code>の要素をすべて復元する。","","座標圧縮対象に<code>values</code>の要素を追加する。","Returns the argument unchanged.","Returns the argument unchanged.","<code>i</code>番目の値を返す。","<code>value</code>が何番目の値(0-index)かを返す。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>CompressorBuilder&lt;T&gt;</code>を生成する。","座標圧縮後の要素の種類数","","","","","","","","","","","<code>cycle_finding</code>の結果","","","","","循環部の長さ","循環検出法","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","先頭の非循環部の長さ","","","","","","編集距離","<code>n</code>…","","","","","","","","","","","","","","","<code>golden_search</code>…","下に凸","上に凸","","","","","","","Returns the argument unchanged.","黄金分割探索","Calls <code>U::from(self)</code>.","","","","","","","","","<strong>Time complexity</strong> $O(n)$","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(n)$","","","","<strong>Time complexity</strong> $O(1)$","","","","","<strong>Time complexity</strong> $O(nm)$","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(nm)$","","","","<strong>Time complexity</strong> $O(1)$","","…","数列の転倒数を計算する。","Knuth-Morris-Pratt法","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity O(|s|)</strong>","<strong>Time complexity O(|pat|)</strong>","","","","","","個数制限付きナップサック問題","要素数が小さいナップサック問題","価値の総和が小さいナップサック問題","容量が小さいナップサック問題","個数制限無しナップサック問題","個数制限付きナップサック問題","要素数が小さいナップサック問題","価値の総和が小さいナップサック問題","容量が小さいナップサック問題","個数制限無しナップサック問題","列a, bの最長共通部分列の一つを求める。","列の最長増加部分列の一つを求める。","Boyer-Moore majority vote algorithm","<strong>Time complexity</strong> $O(|s|)$","…","…","…","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","返り値<code>ret</code>に対して、<code>ret[i]</code>は<code>a[0..i]</code>…","並列二分探索","","","","Project Selection Problem","","","","","Returns the argument unchanged.","頂点iが青ならばcの利益を得る。","頂点iとjがともに青ならばcの利益を得る。","頂点iとjがともに赤ならばcの利益を得る。","頂点iが赤ならばcの利益を得る。","頂点iが赤ならば、頂点jも赤…","Calls <code>U::from(self)</code>.","頂点iは青でなければならない。","頂点iは赤でなければならない。","<code>PSP</code>を生成する。","頂点iが青ならばcの損失になる。","頂点iとjが異なる色ならばcの損失となる。","頂点iが赤ならばcの損失になる。","頂点iが赤かつ頂点jが青…","must be制約を破った場合、<code>None</code>…","","","","","","<strong>Time complexity</strong> $O(|a|)$","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","尺取り法","…","…","…","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(|a|)$","<strong>Time complexity</strong> $O(\\\\log |a|)$","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(n \\\\log n)$","","","","","","部分和問題 …","…","部分和問題 …","…","<code>ternary_search</code>…","下に凸","上に凸","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","三分探索","","","","","","2-SATを解く。","$a \\\\Rightarrow b$","$a \\\\lor b$","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(size)$","$\\\\lnot (a \\\\land b)$","<strong>Time complexity</strong> $O(size + E)$","","","","","","","任意サイズのbit列を扱う。","Convex Hull Trick","1次元累積和","2次元累積和","半群の列の区間取得($O(1)$)ができる。","モノイド列の区間更新・点取得($O(\\\\log n)$, …","","動的遅延セグメント木","","","","","半群で畳み込み可能なdeque","Mexを求められるデータ構造","最大値と最小値を得られるヒープ","モノイド列の区間更新・区間取得($O(\\\\log n)$, …","係数乗算付き区間加算区間総和遅延セグ木","遅延加算付き融合可能ヒープ","Li-Chao tree","Link-Cut Tree","連結リスト","Merge-sort Tree","","","部分永続UnionFind","永続配列","永続キュー","永続セグメントツリー","永続スタック","ポテンシャル付きUnionfind","64分木","領域内の点を列挙する","ロールバック可能Unionfind","ロールバック可能Vec","モノイド列の点更新・区間取得(<em>O</em>(log n), <em>O</em>(log …","","Segment Tree Beats","区間一次関数加算セグメントツリー","…","","融合可能ヒープ","…","Splay Tree","区間加算・区間Max(Min)","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","<code>Bitset</code>内部で扱う型のBit数","任意サイズのbit列を扱う。","","","","","","","","","","","","<code>1</code>が設定されているbitの個数を数える。","<code>0</code>が設定されているbitの個数を数える。","<code>n</code>番目のbitを反転させる。","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","bit列の長さを返す。","長さ<code>n</code>の<code>Bitset</code>を構築する。","","<code>n</code>番目のbitを<code>val</code>で設定する。","<code>n</code>番目のbitが<code>1</code>ならば<code>true</code>を返す。","","","","","","","","<code>ConvexHullTrick&lt;T&gt;</code>がt扱える型","最大値クエリ","最小値クエリ","最大値クエリか最小値クエリかを表す","…","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","…","","","","","","","","","","","1次元の累積和を扱う","<code>CumulativeSum1D</code>を構築する","","<code>i</code>番目に<code>value</code>を代入する","","","","","<code>CumulativeSum1D</code>を構築する","","","","<strong>Time complexity</strong> $O(1)$","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>CumulativeSum1DBuilder</code>を生成する","","","","","","","","群<code>G</code>の演算に<code>i</code>番目の値と<code>value</code>を適用して<code>i</code>…","","","2次元の累積和を扱う","<code>CumulativeSum2D</code>を構築する","","<code>[i][j]</code>番目に<code>value</code>を代入する","","","","","<code>CumulativeSum2D</code>を構築する","","","","<strong>Time Complexity</strong> $O(1)$","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>CumulativeSum2DBuilder</code>を生成する","","","","","","","","群<code>G</code>の演算に<code>[i][j]</code>番目の値と<code>value</code>を適用して…","","","半群の列の区間取得($O(1)$)ができる。","","","","<strong>Time complexity</strong> $O(1)$","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","列<code>seq</code>から<code>DisjointSparseTable&lt;S&gt;</code>を構築する。","","","","","モノイド列の区間更新・点取得($O(\\\\log n)$, …","","","","Returns the argument unchanged.","","<strong>Time complexity</strong> $O(\\\\log n)$","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(n)$","","","","","<strong>Time complexity</strong> $O(\\\\log n)$","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","動的遅延セグメント木","","","","","","範囲<code>s..t</code>で計算を集約する。","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>DynamicLazySegtree&lt;A&gt;</code>を生成する。","","","","","範囲<code>s..t</code>を<code>value</code>で更新する。","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","<code>FenwickTreeAdd&lt;T&gt;</code>が扱える型","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","使用する点を登録する。","","","","","","","","","","","Time Complexity $O(\\\\log ^ 2 n)$","Time Complexity $O(\\\\log ^ 2 n)$","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Time Complexity $O(\\\\log ^ 2 n)$","","","半群で畳み込み可能なdeque","末尾の要素への参照を返す。","","","すべての要素を<code>S</code>…","Returns the argument unchanged.","先頭の要素への参照を返す。","Calls <code>U::from(self)</code>.","要素数が<code>0</code>なら<code>true</code>を返す。","要素数を返す。","空の<code>FoldableDeque&lt;S&gt;</code>を生成する。","末尾の要素を削除して返す。","先頭の要素を削除して返す。","末尾に<code>value</code>を追加する。","先頭に<code>value</code>を追加する。","","","","","…","","","","","<code>x</code>を含むかを判定","","","Returns the argument unchanged.","<code>x</code>を追加する","<code>x</code>を含む半開区間を返す","Calls <code>U::from(self)</code>.","<code>self</code>に含まれない数のうち<code>x</code>以上で最小のもの","空の<code>IntegerSet</code>を生成","<code>x</code>を削除する","","","","","","最大値と最小値を得られるヒープ","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","要素数が<code>0</code>ならば<code>true</code>を返す。","要素数を返す。","最大値の参照を返す。","最小値の参照を返す。","空の<code>IntervalHeap&lt;T&gt;</code>を構築する。","最大値を削除して返す。","最小値を削除して返す。","値<code>item</code>を挿入する。","","","","","","モノイド列の区間更新・区間取得($O(\\\\log n)$, …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","<code>LazySegtreeCoeff&lt;T&gt;</code>が扱える型","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","<code>LazySkewHeap&lt;T&gt;</code>が扱える型","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","<code>LiChaoTree&lt;T&gt;</code>が扱える型","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Link-Cut Tree","","","頂点<code>i</code>と頂点<code>j</code>の間にある辺を削除する。","","","頂点<code>i</code>,<code>j</code>…","Returns the argument unchanged.","頂点<code>k</code>の値を返す。","Calls <code>U::from(self)</code>.","頂点<code>i</code>と頂点<code>j</code>の間に辺を張る。","<code>LinkCutTree&lt;M&gt;</code>を生成する。","頂点<code>k</code>の値を<code>x</code>に変更する。","","","","頂点<code>k</code>の値をモノイドの演算と値<code>x</code>…","","複数の連結リストをまとめたもの","連結リストの内部ノード","","","","","","","","","<code>prev</code>の後ろに<code>next</code>を接続する。","","<code>cur</code>が属する連結リストの先頭を返す。","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>cur</code>から<code>cur</code>…","<code>cur</code>が属する連結リストの末尾を返す。","<code>LinkedListPool</code>を生成する。","<code>cur</code>の次の要素","<code>cur</code>の前の要素","<code>value</code>…","<code>cur</code>から<code>cur</code>…","<code>cur</code>の後ろでリストを切断する。","<code>cur</code>の前でリストを切断する。","","","","","","","","","<code>Node</code>がもつ値","","","Merge-sort Tree","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(n \\\\log n)$","<code>ub</code>以下の総和を求める","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","時刻tでの状態","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","最新時点の状態","","","","Complexity","","","","","","","","","永続配列","","","","","","Returns the argument unchanged.","<strong>Time complexity</strong> $O(\\\\log n)$","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(n)$","<strong>Time complexity</strong> $O(\\\\log n)$","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","永続スタック","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","<code>QwordTree</code>で扱える最大値","　0 ~ 16777215 (2²⁴ - 1) の値の集合を管理する","","","xを含むかどうかを判定する","","xを集合から削除する","Safety","Returns the argument unchanged.","xを集合に加える","Safety","Calls <code>U::from(self)</code>.","集合が空かどうかを判断する","集合に含まれている要素数を返す","最大値を返す","x以下で最大の値を返す","最小値を返す","x以上で最小の値を返す","64分木を生成","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","ロールバック可能Unionfind","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>i</code>と<code>j</code>が同じ素集合に属するかを判定する","<code>i</code>の属する素集合と<code>j</code>…","<code>RollbackableUnionFind</code>を生成する","直前の<code>merge</code>操作を巻き戻す","<code>i</code>の属する素集合の根を返す","<code>i</code>の属する素集合の大きさを返す","","","","","ロールバック可能Vec","スライスを返す","<code>index</code>番目の要素を<code>value</code>に変更する","","","","","","先頭の要素を返す","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","要素が存在しないかを判定する","末尾の要素を返す","現在の要素数を返す","<code>RollbackableVec</code>を生成","末尾の要素を削除して返す","末尾に<code>value</code>を追加","直前の<code>push</code> / <code>pop</code> / <code>assign</code>操作を取り消す","","","","","","","モノイド列の点更新・区間取得(<em>O</em>(log n), <em>O</em>(log …","<strong>Time complexity</strong> $O(\\\\log n)$","","","","","<strong>Time complexity</strong> $O(\\\\log n)$","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(n)$","","","","","<strong>Time complexity</strong> $O(\\\\log n)$","","","<strong>Time complexity</strong> $O(\\\\log w \\\\log h)$","","","<strong>Time complexity</strong> $O(\\\\log w \\\\log h)$","Returns the argument unchanged.","<strong>Time complexity</strong> $O(1)$","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(wh)$","","","","<strong>Time complexity</strong> $O(\\\\log w \\\\log h)$","","Segment Tree Beats","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","<code>SegtreeLinearAdd&lt;T&gt;</code>が扱える型","","","","Returns the argument unchanged.","<strong>Time complexity</strong> $O(\\\\log n)$","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(n)$","","","","範囲<code>l..r</code>に一次関数<code>ax + b</code>の値を加算する。(<code>x</code>…","","<code>SegtreeLinearAddRangeSum&lt;T&gt;</code>が扱える型","","","","<strong>Time complexity</strong> $O(\\\\log n)$","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(n)$","","","","<strong>Time complexity</strong> $O(\\\\log n)$","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","…","","","<strong>Time complexity</strong> $O(1)$","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(n \\\\log n)$","","","","","スプレーツリー","","","","<code>start..end</code>…","","Returns the argument unchanged.","<code>index</code>番目の要素の参照を返す","要素を<code>index</code>番目になるように挿入する","Calls <code>U::from(self)</code>.","スプレーツリーが要素を持たなければ<code>true</code>…","スプレーツリーの要素数を返す","左側にスプレーツリーを結合する","右側にスプレーツリーを結合する","モノイド<code>m</code>をもつ<code>SplayTree&lt;M&gt;</code>を生成","先頭の値を削除する","末尾の値を削除する","先頭に値を追加する","末尾に値を追加する","<code>index</code>番目の要素を削除して、値を返す","<code>start..end</code>の範囲を反転させる","<code>index</code>番目の要素を<code>value</code>に変更する","値<code>value</code>をもつノード一つのみからなる…","左側に<code>index</code>…","","","","","<code>StarrySkyTree&lt;T&gt;</code>が扱える型","","","","","","","","","","","<strong>Time complexity</strong> $O(\\\\log n)$","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(n)$","","","","","","","","<strong>Time complexity</strong> $O(\\\\log n)$","","","","","","","","","[l, r) に含まれる<code>b</code>の個数","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","[0, index) に含まれる<code>b</code>の個数","nth(0-indexed)番目の<code>b</code>の位置","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","<code>index</code>番目の値を得る。","","","","","<code>range</code>に含まれる<code>value</code>の個数。","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>range</code>での最大値","<code>range</code>での最小値","<code>WaveletMatrix</code>を生成","<code>range</code>で<code>lb</code>以上の最小値","<code>range</code>で<code>ub</code>未満の最大値","<code>range</code>でk(0-indexed)番目に小さい値。","<code>range</code>で<code>lb</code>以上<code>ub</code>未満の値の個数","[0, index)に含まれる<code>value</code>の個数。","<code>nth</code>(0-indexed)番目の<code>value</code>の位置。","","","","","","","","","最大流 (Dinic)","最大流 (Ford-Fulkerson)","","","最小費用流","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","円","","直線","","絶対値を計算する","","絶対値の2乗を計算する","","ベクトルのなす角度を返す","","円と多角形の共通部分の面積","2つの円の共通部分の面積","多角形の面積","","","","","","","","","点と線分の位置関係","円の中心","三角形の外接円","","","","","","","","","最近点対","2つの円の共通接線","凸多角形の判定","凸多角形の直線での切断","凸多角形の直径","凸包","外積を計算する","","","","","","直線と点の距離","線分と点の距離","2つの線分間の距離","","内積を計算する","","","","","円が等しいかを判定する","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","三角形の内接円","円と直線の位置関係","円と線分の位置関係","2つの円の位置関係","直線と線分の位置関係","2つの線分の位置関係","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","中心<code>center</code>、半径<code>radius</code>の<code>Circle</code>を生成する","直行するベクトルを返す","","","点と多角形の位置関係","極座標形式で<code>Vector</code>を生成する","","円の半径","","","点を通る円の接線","","","","","","","","","","","","","","","","","","長さを<code>1</code>にしたベクトルを返す","","","","","","円と多角形の共通部分の面積を求める。","2つの円の共通部分の面積を求める","多角形の面積を求める","点と線分の位置関係","…","…","…","…","点が線分上にある。","","","<code>p0</code>から<code>p1</code>に向かう線分に対して、点<code>p2</code>…","<code>CLOCKWISE</code>ならば<code>true</code>を返す。","","","<code>COUNTER_CLOCKWISE</code>ならば<code>true</code>を返す。","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>ON_SEGMENT</code>ならば<code>true</code>を返す。","<code>ONLINE_BACK</code>ならば<code>true</code>を返す。","<code>ONLINE_FRONT</code>ならば<code>true</code>を返す。","","<code>ONLINE_BACK</code>または<code>COUNTER_CLOCKWISE</code>ならば<code>-1</code>…","","","","","三角形(△abc)の外接円を求める","","2つの円の共通接線を求める","多角形<code>ps</code>が凸多角形であれば<code>true</code>を返す。","凸多角形<code>ps</code>を直線<code>l</code>…","凸多角形の直径を求める","凸包の上半分か下半分かを指定する","下半分","上半分","","","","","凸包を求める","","Returns the argument unchanged.","上半分/下半分の凸包を求める","Calls <code>U::from(self)</code>.","","","","","","直線と点の距離を求める","線分と点の距離を求める","2つの線分間の距離を求める","三角形(△abc)の内接円を求める","直線と円が交わっている","円と直線の位置関係","直線が円の外側にある","直線が円に接している","","","","","<code>CROSSED</code>かを判定","","","Returns the argument unchanged.","円と直線の位置関係と交点を求める","Calls <code>U::from(self)</code>.","<code>OUTSIDE</code>かを判定","<code>TANGENT</code>かを判定","","","","","","線分が円の内部にある","円と線分の位置関係","線分が円と一つの交点をもつ","線分が円の外部にある","線分が円に接している","線分が円と二つの交点をもつ","","","","","","","Returns the argument unchanged.","<code>INSIDE</code>かを判定","円と線分の位置関係と交点を求める","Calls <code>U::from(self)</code>.","<code>ONE_CROSSPOINT</code>かを判定","<code>OUTSIDE</code>かを判定","<code>TANGENT</code>かを判定","","","","<code>TWO_CROSSPOINT</code>かを判定","","","…","…","一方の円がもう一方の円の内部にある","2つの円が交差している","2つの円の位置関係","一方の円がもう一方の円の外部にある","2つの円が同じである","","","<code>CIRCUMSCRIBED</code>かを判定","","","","","Returns the argument unchanged.","<code>INSCRIBED</code>かを判定","<code>INSIDE</code>かを判定","2つの円の位置関係と交点を求める","<code>INTERSECTED</code>かを判定","Calls <code>U::from(self)</code>.","2つの円の共通接線の個数を返す。但し、<code>SAME</code>…","<code>OUTSIDE</code>かを判定","<code>SAME</code>かを判定","","","","","","線分が直線と交差している","直線と線分の位置関係","線分が直線の左側にある","線分が直線上にある","線分が直線の右側にある","","","","","<code>CROSSED</code>かを判定","","","Returns the argument unchanged.","直線と線分の位置関係と交点を求める","Calls <code>U::from(self)</code>.","<code>LEFTSIDE</code>かを判定","<code>OVERLAPPED</code>かを判定","<code>RIGHTSIDE</code>かを判定","","","","","","2つの線分が交差している","2つの線分の位置関係","2つの線分が交差していない","2つの線分が重なっている","2つの線分が同一である","","","","","","","Returns the argument unchanged.","2つの線分の位置関係と交点を求める","<code>INTERSECTED</code>かを判定","Calls <code>U::from(self)</code>.","<code>NOT_INTERSECTED</code>かを判定","<code>OVERLAPPED</code>かを判定","<code>SAME</code>かを判定","","","","","","点が多角形の外部にある","点が多角形の内部にある","点が多角形上にある","点と多角形の位置関係","","","","","","<code>EXCLUSION</code>かを判定","","Returns the argument unchanged.","<code>INCLUSION</code>かを判定","Calls <code>U::from(self)</code>.","<code>ON_SEGMENT</code>かを判定","点と多角形の位置関係を求める","","","","","","点<code>p</code>を通る円<code>c</code>の接線を求める","有向辺をもつ。","…","グラフの辺","<code>Graph</code>にもたせる辺の満たすトレイト。","","無向辺をもつ。","辺の重みの型","有向グラフに辺を追加する。","無向グラフに辺を追加する。","関節点の列挙","負閉路を持つグラフの最短経路 (Bellman-Ford)","幅優先探索","二重頂点連結分解","二部グラフ判定","","","","","","","","","橋の列挙","中国人郵便配達問題","有向グラフ上の最小有向全域木を求める","","","","","","","","","","有向グラフの閉路検出","非負重み付き最短経路 (Dijkstra)","","","(準)Eulerグラフの判定","","","","","","","辺の始点","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","辺の始点","","辺の番号など","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","グラフの頂点数が<code>0</code>ならば<code>true</code>を返す。","最小全域木 (Kruskal)","グラフの頂点数を返す。","","最大独立集合","","頂点数が<code>size</code>の空の<code>Graph</code>を構築する。","最小全域木 (Prim)","","逆辺","","強連結成分分解","辺の終点","","辺の終点","","","","","","","","","","","","","トポロジカルソート","巡回セールスマン問題","二重辺連結成分分解","","","","","","","","","全頂点間最短経路長","辺の重み","","辺の重み","","関節点の列挙","","負閉路を持つグラフの最短経路","幅優先探索で辺数が最小の経路を得る。","","二重頂点連結分解","","橋の列挙","<strong>Time complexity</strong> $O(V^2 2^V)$","有向グラフ上の最小有向全域木を求める","…","…","有向グラフの閉路検出","<strong>Time complexity</strong> $O((E + V) \\\\log V)$","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","…","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Kruskal法","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","最大独立集合を求める","Prim法","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(V + E)$","","","","","","トポロジカルソート","","二重辺連結成分分解","グラフの全頂点間の最短距離を管理する。","…","","","<code>from</code>から<code>to</code>への最短距離を返す。","Returns the argument unchanged.","負の閉路があれば<code>true</code>を返す。","Calls <code>U::from(self)</code>.","<code>WarshallFloyd&lt;T&gt;</code>を生成する。","…","","","","","","","","","移動方向","","","","","","","","","","","","","","","","","","","","","x方向の移動量","y方向の移動量","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","グリッドをグラフに変換する","<code>collect_vec</code>を提供する。","<code>cumsum</code>を提供する。","<code>join_str</code>を提供する。","<code>reject</code>を提供する。","<code>collect_vec</code>を提供する。","<code>.collect::&lt;Vec&lt;_&gt;&gt;()</code>と同じ。","<code>cumsum</code>を提供する。","累積和を返すイテレータ。","","","累積和を返すイテレータを生成する。","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","<code>join_str</code>を提供する。","要素を<code>String</code>に変換して、要素間に<code>s</code>…","<code>reject</code>を提供する。","<code>predicate</code>…","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","<code>predicate</code>…","","","","","mod 2","任意mod","mod 素数p","行列式 (mod 2)","","逆行列 (mod 2)","行列 (mod 2)","mod 2上で行列式を求める","","mod 2上で逆行列を求める","行列 (mod 2)","","","","","Returns the argument unchanged.","<code>Bitset</code>の<code>Vec</code>から<code>MatrixMod2</code>を生成する","<code>i</code>行<code>j</code>列の成分を返す","","Calls <code>U::from(self)</code>.","","<code>h</code>行<code>w</code>列の<code>MatrixMod2</code>を生成","","行列の転置を得る","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","行列式 (mod 素数)","逆行列 (mod 素数)","素数mod p上での行列式を求める。","素数mod p上での逆行列を求める。","値を最大値で更新する。","値を最小値で更新する。","","C言語風のfor文","","","","","複数の値の最大値を得る。","複数の値の最小値を得る。","多次元の<code>Vec</code>を作る。","","","","トレイトの別名を作る。","二部マッチング","二部マッチング (Hopcroft-Karp)","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","中国剰余定理","約数列挙","","拡張ユークリッドの互除法","階乗","a!の素因数pの個数を求める。","素因数分解","最大公約数・最小公倍数","","mod mでの演算","完全順列の個数を列挙する。","多項式の多点評価","","","$\\\\mathbb{F}_p$上の多項式","多項式$f(x)$に対して、$f(x + …","素数判定","原始根","$\\\\sum_{i=0}^{n-1} \\\\lfloor \\\\frac{ai+b}{m} \\\\rfloor$","$\\\\sum_{i=0}^{\\\\infty} r^ii^d$","トーシェント関数","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>n</code>以下の自然数で、<code>m</code>…","","","約数の個数を数える","約数を列挙する","","","","","","1以上N以下の自然数xについて<code>floor(N/x)</code>…","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","有限体上での階乗の計算を行う構造体。","","ベル数","","","","","","","","","n個からk個とりだす組み合わせの個数 (${}_n …","nの階乗","","Returns the argument unchanged.","n個から重複を許してk個選ぶ場合の数 (${}_n …","Calls <code>U::from(self)</code>.","nの階乗の逆元","<strong>Time complexity</strong> $O(n)$","n個からk個とりだす順列の個数 (${}_n \\\\mathrm{ …","","","","","","a!の素因数pの個数を求める。","","試し割り素因数分解","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","試し割り素因数分解","最大公約数・最小公倍数","","最大公約数を求める。","最大公約数と最小公倍数を求める。","最小公倍数を求める。","ax + b = 0 (mod m) を満たすxを求める。","0,1,..,nの素数mod pでの逆元を列挙する。","mod mでの逆元","素数mod pでの逆元","aˣ = b (mod m)を満たすxを求める。","xᵖ (mod m)を求める。","x² = a (mod p)を満たすxを一つ求める。","0,1,..,nの素数mod pでの逆元を列挙する。","mod mでの逆元","素数mod pでの逆元","aˣ = b (mod m)を満たすxを求める。","xᵖ (mod m)を求める。","x² = a (mod p)を満たすxを一つ求める。","長さ<code>0</code>から<code>n</code>…","多項式の多点評価","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","$\\\\mathbb{F}_p$上の多項式","多項式の演算を扱う。","多項式<code>a</code>と多項式<code>b</code>の和を返す。","多項式<code>a</code>に多項式<code>b</code>を足す。","","","","","","","$x^i$の係数を得る。","定数項のみをもつ多項式を生成する。","多項式の次数を返す。","多項式<code>a</code>の多項式<code>b</code>による商と剰余を返す。","","多項式に値<code>p</code>を代入した結果を求める。","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","多項式<code>a</code>と多項式<code>b</code>の積を返す。","多項式<code>a</code>に多項式<code>b</code>を掛ける。","<code>NTT&lt;P&gt;</code>を基に<code>PolynomialOperator&lt;P&gt;</code>を生成する。","多項式<code>a</code>の<code>k</code>倍を返す。","","多項式<code>a</code>の2乗を返す。","多項式<code>a</code>と多項式<code>b</code>の差を返す。","多項式<code>a</code>から多項式<code>b</code>を引く。","","","","","","","","","","零多項式を得る。","多項式 <code>p</code> = $f(x) = a_0 + a_1x + \\\\cdots + …","素数判定","Eratosthenesの篩","<code>value</code>が素数ならば<code>true</code>を返す。","Miller-Rabin素数判定法","","Eratosthenesの篩","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","<code>size</code>までの自然数の素数判定ができる…","","","","","","Miller-Rabin素数判定法","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","原始根","$\\\\sum_{i=0}^{n-1} \\\\lfloor \\\\frac{ai+b}{m} \\\\rfloor$","$\\\\sum_{i=0}^{\\\\infty} r^ii^d$","<code>n</code>と互いに素である自然数の個数を求める。","<code>n</code>…","","","","","","","…","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","括弧列が対応が取れているかを調べる","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","四則演算ができる型","コンパイル時にmod Mが決まるModInt","有限体","実行時にmod Mが決まるModInt","正の無限大、負の無限大をもつ数","加法と乗法の単位元を定める。","","有理数","全順序を実装した<code>f64</code>","","四則演算ができる型","<code>M</code>で剰余をとる構造体。","<code>ConstModInt&lt;M&gt;</code>を生成するための構造体。","","","<code>ConstModInt&lt;M&gt;</code>の代数的構造","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","<code>ConstModInt&lt;M&gt;</code>を生成する。","","<code>One</code>と<code>Zero</code>を実装する。","","","","","","","","","","","","","内部の値を取り出す。","","","","","","有限体の元の型","有限体","有限体の元","","","<code>a/b</code>を生成する。","<code>i64</code>から生成する。","<code>u64</code>から生成する。","<code>modulo</code>を法として剰余をとる構造体。","<code>ModInt</code>を生成するための構造体。","","","<code>ModInt</code>の代数的構造","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","<code>modulo</code>を法とする<code>ModIntBuilder</code>を生成する。","<code>value</code>を値にもち、<code>modulo</code>を法とする<code>ModInt</code>…","","","","","","","","","","","","","内部の値を取り出す。","","","<code>mod m</code>上の乗法","<code>mod m</code>上の加法","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","<code>m</code>を法とした<code>SumModM</code>を生成する。","<code>m</code>を法とした<code>ProdModM</code>を生成する。","","","","","","","","","","","","","正の無限大","負の無限大","正の無限大、負の無限大をもつ数","有限の値","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>self</code>が<code>Inf</code>かを判定する。","<code>self</code>が<code>NegInf</code>かを判定する。","<code>self</code>が<code>Value(T)</code>かを判定する。","","","","","","","","<code>self</code>が<code>Value</code>ならばその中身を取り出す。","","乗算についての単位元をもつ。","加算についての単位元をもつ。","乗法の単位元を返す。","加法の単位元を返す。","乗法の逆元","<code>pow</code>の結果の型","<code>inv</code>の結果の型","累乗","<code>self</code>の乗法の逆元を求める。","<code>self</code>の<code>p</code>乗を求める。","有理数","","","","","","","","分母を返す","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","<code>numerator / denominator</code>を表す有理数を生成する","分子を返す","","","","","","","","","全順序を実装した<code>f64</code>","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","<code>One</code>と<code>Zero</code>を実装する。","","","","","","","","","","浮動小数点型","整数型","符号付きの数値型","非負の数値型","","","","","","","","","Auxiliary Tree","","","","","","","","","","","","","重心列挙","","","","","","","","","Tree depth query","Euler tour","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","重軽分解","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","最小共通祖先","","","","","","","","","","全方位木DP","","","","","根付き木に変換","","","","","","","木DP","","","","","","","","","","","","","","","","","","","","","","","","","Auxiliary Tree","","","頂点集合<code>vs</code>からAuxiliaryTreeを構築する。","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>AuxiliaryTree</code>を生成する。","","","","","木の重心を列挙する","…","頂点<code>i</code>の<code>k</code>個遡った祖先の頂点を返す。","","","頂点<code>i</code>から深さ<code>d</code>…","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","頂点<code>i</code>に対応する区間を返す。","根を<code>root</code>とする<code>tree</code>を基に、<code>TreeDepthQuery</code>…","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","重軽分解","","","","","","Returns the argument unchanged.","<strong>Time complexity</strong> $O(1)$","<strong>Time complexity</strong> $O(1)$","Calls <code>U::from(self)</code>.","<strong>Time complexity</strong> $O(\\\\log n)$","<strong>Time complexity</strong> $O(n)$","<strong>Time complexity</strong> $O(1)$","<strong>Time complexity</strong> $O(\\\\log n)$","演算は可換性を仮定する。","<strong>Time complexity</strong> $O(1)$","<strong>Time complexity</strong> $O(1)$","","","","","","ダブリングによる最小共通祖先","<code>a</code>の<code>n</code>個上の祖先を求める。","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","…","<code>a</code>と<code>b</code>の最小共通祖先を求める。","<strong>Time complexity</strong> $O(n \\\\log n)$","","","","","全方位木DP","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>RerootingDP</code>を構築する。","<code>tree</code>上で、全方位DPを実行する。","","","","","","","木DP","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>TreeDP</code>を構築する。","<code>root</code>を根にして、<code>tree</code>上でDPを実行する。","","","","","木の任意の2頂点の距離の最大値を求める。","…","…","…","","2要素の差の絶対値の総和","2要素の最大値の総和","2要素の積の総和","区間積の総和","区間和の総和","区間XORの総和","2要素の和の総和","2要素のXORの総和","2要素の差の絶対値の総和","2要素の最大値の総和","2要素の積の総和","区間積の総和","区間和の総和","区間XORの総和","2要素の和の総和","2要素のXORの総和","","","","","","","","","<code>usize</code>を用いた集合表現","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","タプルの<code>Vec</code>を<code>Vec</code>のタプルに変換する。","","<code>usize</code>のビット数個の要素をもつ集合を表す。","","","","","","","","","<code>i</code>が集合に含まれているかを判定する。","","<code>self</code>から<code>rhs</code>を引いた差集合を返す。","","<code>0</code>から<code>n</code>までを要素に含む集合を得る。","<code>i</code>が集合に含まれていなければ、<code>i</code>…","","Returns the argument unchanged.","","","2つの集合の共通部分を返す。","Calls <code>U::from(self)</code>.","集合が空かを判定する。","集合の大きさを返す。","","<code>i</code>を削除した集合を返す。","<code>i</code>を追加した集合を返す。","","2つの集合の対象差を返す。","","","","","2つの集合の和集合を返す。","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,111,111,111,111,111,111,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,0,34,34,34,35,34,35,34,35,34,35,34,35,34,35,34,35,35,34,35,35,35,35,34,35,34,35,34,35,34,35,34,35,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,0,41,42,41,42,41,42,41,42,41,41,42,41,42,41,42,41,42,42,41,42,41,41,41,42,41,41,42,41,42,41,42,41,42,41,42,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,0,0,0,0,38,0,0,0,0,0,0,0,0,37,59,39,267,0,0,0,49,51,49,51,52,49,51,52,49,51,52,49,51,52,49,51,52,49,51,52,49,51,52,52,52,49,51,52,49,51,52,52,52,52,49,51,52,49,49,51,51,52,49,51,52,49,51,52,49,51,52,0,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,0,0,0,0,55,56,57,58,55,56,57,58,55,56,57,58,55,56,57,58,55,56,57,58,55,56,57,58,55,56,57,58,55,56,57,58,55,56,57,58,55,56,57,58,55,56,57,58,55,56,57,58,55,56,57,58,55,56,57,58,55,56,57,58,55,56,57,58,55,56,57,58,0,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,67,67,0,67,67,0,67,67,67,67,67,67,67,67,67,67,268,268,0,0,69,70,69,70,69,69,70,69,70,69,70,70,69,69,70,69,70,70,70,69,69,70,70,69,70,69,70,69,70,69,70,69,0,73,73,73,73,73,0,73,73,73,73,73,73,73,73,73,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,75,75,75,75,75,75,75,75,0,75,75,75,75,75,75,0,77,77,77,77,77,77,77,77,77,77,77,0,79,79,79,79,79,79,79,79,79,79,79,0,0,0,80,80,80,80,80,80,80,80,80,80,80,80,80,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,81,81,81,81,81,81,81,81,81,81,0,0,0,0,0,0,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,0,0,0,84,86,84,86,84,86,84,86,84,84,86,84,84,86,84,86,84,86,84,86,0,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,0,0,0,0,89,89,89,89,89,89,89,89,89,89,0,90,90,90,90,90,90,90,90,90,90,90,0,0,0,0,0,91,91,91,91,91,91,91,91,91,91,0,91,91,91,91,91,0,92,92,92,92,92,92,92,92,92,92,92,92,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,94,0,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,0,0,99,99,0,97,99,97,99,97,99,97,99,97,99,99,97,99,97,99,97,97,97,99,97,99,97,99,97,99,97,99,97,0,0,0,101,101,102,101,102,101,102,102,102,102,101,102,102,101,102,101,102,101,102,101,102,101,102,101,101,102,0,0,0,103,103,104,103,104,103,104,104,104,104,103,104,104,103,104,103,104,103,104,103,104,103,104,103,103,104,0,0,106,106,106,106,106,106,106,106,106,106,0,0,109,109,109,109,109,109,109,109,109,109,109,109,109,0,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,0,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,0,113,113,113,113,113,113,113,113,113,113,113,113,0,0,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,0,0,118,118,118,118,118,118,118,118,118,118,118,118,118,0,0,119,119,120,119,120,119,119,120,119,120,119,120,120,119,120,119,120,119,119,120,119,120,119,120,119,120,120,119,120,0,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,0,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,0,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,0,124,124,124,124,124,124,124,124,124,124,124,124,0,0,126,126,126,126,126,126,126,126,126,126,126,126,0,0,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,0,0,132,132,0,130,130,130,132,130,132,132,132,132,132,130,132,130,132,130,130,132,130,132,130,132,130,132,130,132,0,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,0,0,134,135,134,135,134,135,134,135,135,135,135,134,135,134,135,135,135,135,135,135,135,135,135,135,134,135,134,135,134,135,134,135,134,134,135,0,137,137,137,137,137,137,137,137,137,137,0,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,0,0,140,139,140,139,139,139,140,139,139,140,139,140,139,140,140,140,140,140,140,139,140,139,140,139,140,139,0,0,141,141,142,141,142,141,142,141,142,142,141,141,141,142,142,141,142,141,142,141,142,141,142,0,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,0,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,0,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,0,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,0,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,0,0,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,0,0,150,151,150,151,150,150,150,150,150,151,150,151,150,150,151,150,151,150,151,150,151,150,151,150,0,152,152,152,152,152,152,152,152,152,152,152,152,152,152,0,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,0,0,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,0,156,156,156,156,156,156,156,156,156,156,156,156,156,0,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,0,0,159,159,159,159,159,159,159,159,159,159,159,0,0,161,161,161,161,161,161,161,161,161,161,161,0,0,162,163,162,163,162,162,162,162,162,163,163,162,163,162,162,162,163,162,163,162,163,162,163,163,162,0,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,0,166,166,166,166,166,166,166,166,166,166,0,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,0,168,168,0,0,170,168,170,168,168,168,170,170,168,170,168,170,168,170,168,170,168,170,168,170,170,168,0,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,0,0,0,0,269,270,271,0,272,273,272,269,270,271,273,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,0,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,217,0,217,0,0,217,217,0,217,217,0,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,0,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,0,176,176,176,176,176,176,176,176,176,176,176,176,176,176,0,0,0,0,177,178,177,177,177,177,0,0,0,179,177,178,180,179,177,178,180,0,180,0,179,177,178,180,179,177,178,180,0,0,0,0,0,0,177,178,177,178,180,178,0,0,0,177,177,178,179,177,178,180,177,178,180,179,177,178,180,178,179,179,0,0,0,0,0,0,179,177,178,180,178,178,179,179,177,179,179,178,180,177,178,179,0,177,178,180,178,177,0,178,179,177,178,180,179,177,178,180,179,177,178,180,179,177,178,180,177,178,179,177,178,180,0,0,0,0,182,182,182,182,182,182,182,0,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,0,0,0,0,0,0,0,183,183,183,183,183,183,0,183,183,0,183,183,183,183,183,183,0,0,0,0,184,0,184,184,184,184,184,184,184,184,184,184,0,184,184,184,184,184,184,184,184,185,0,185,185,185,185,185,185,185,185,185,185,185,185,0,185,185,185,185,185,185,185,185,185,185,186,186,186,186,0,186,186,186,186,186,186,186,186,186,186,186,186,0,186,186,186,186,186,186,186,186,186,186,187,0,187,187,187,187,187,187,187,187,187,187,187,0,187,187,187,187,187,187,187,187,187,188,0,188,188,188,188,188,188,188,188,188,188,0,188,188,188,188,188,188,188,188,188,188,189,189,189,0,189,189,189,189,189,189,189,189,189,189,189,0,189,189,189,189,189,0,0,0,0,0,0,0,191,192,192,0,0,0,0,0,194,190,193,192,194,190,193,192,0,0,0,194,190,193,192,194,190,193,192,0,0,0,192,0,0,192,192,194,190,193,192,191,194,194,190,193,192,194,0,194,194,190,193,192,192,0,192,0,0,194,192,0,0,191,194,0,191,194,194,194,190,193,192,194,190,193,192,194,190,193,192,0,0,0,194,190,193,192,194,190,193,192,0,191,194,194,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,198,198,198,198,198,198,198,198,198,198,198,198,198,0,199,199,199,199,199,199,199,199,199,199,199,199,199,199,202,0,0,0,202,202,200,200,201,202,200,201,202,200,202,202,202,202,200,201,202,201,200,201,202,201,201,200,201,202,200,201,202,200,201,202,200,201,202,200,201,202,0,0,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,0,0,0,0,203,203,204,203,204,203,203,204,204,203,204,204,203,203,204,203,204,203,204,203,204,0,205,205,205,205,205,205,205,205,205,205,205,0,0,0,0,206,206,206,206,206,206,206,206,206,206,206,206,206,0,0,207,207,0,0,207,0,207,207,207,208,207,209,208,207,209,208,207,209,208,207,209,208,207,207,207,208,207,208,207,209,208,207,209,209,209,208,207,209,209,209,208,208,207,209,0,208,207,209,208,207,209,208,207,209,208,207,209,208,207,209,208,208,0,0,0,0,0,0,274,0,0,211,211,275,211,211,211,211,211,211,211,211,0,276,0,0,212,212,212,212,212,212,277,212,212,212,212,0,0,0,0,0,0,0,0,0,0,0,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,0,0,0,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,0,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,218,218,218,218,218,218,218,218,218,218,218,0,0,219,219,220,219,220,220,220,220,219,220,219,219,220,219,219,220,219,220,219,220,219,220,219,220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,222,221,222,221,222,221,222,221,222,221,222,221,222,221,222,221,222,221,222,221,222,221,222,221,222,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,223,223,223,223,0,223,223,223,223,223,223,223,223,223,223,223,223,0,0,0,224,0,224,224,224,0,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,0,0,0,0,225,225,225,225,225,225,225,225,225,225,0,0,278,278,278,278,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,228,228,228,228,228,228,228,228,228,0,0,227,227,227,226,227,226,226,226,226,226,226,227,226,226,226,227,226,226,226,227,226,227,226,226,227,227,227,227,226,227,227,227,226,227,226,227,226,227,226,227,226,226,0,0,0,279,0,0,0,229,229,229,229,229,229,229,229,229,229,0,0,230,230,230,230,230,230,230,230,230,0,0,0,0,0,0,0,0,0,0,0,0,0,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,0,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,0,0,234,0,234,233,234,233,234,233,234,233,234,233,233,234,233,234,233,234,0,233,234,233,234,233,234,233,234,233,234,280,280,280,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,0,235,45,235,45,235,45,235,45,235,45,45,45,235,45,45,45,235,235,45,45,45,235,235,0,235,45,45,45,45,45,45,45,0,45,45,45,235,45,45,235,45,235,45,235,45,45,235,45,45,0,0,214,0,0,0,0,214,214,214,0,0,236,236,0,237,236,237,236,237,236,237,236,236,236,237,236,237,236,236,237,237,236,237,237,0,237,236,236,236,236,236,237,236,236,236,236,237,236,236,237,236,237,236,237,236,236,237,236,0,0,238,239,238,239,238,239,238,239,238,239,238,239,238,239,238,239,238,239,238,239,238,238,239,238,239,238,239,238,239,238,239,238,239,238,239,197,197,0,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,0,0,18,5,0,281,282,0,282,281,0,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,0,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,0,242,242,242,242,242,242,242,242,242,0,0,0,0,0,0,0,0,0,0,0,245,0,246,248,249,250,247,246,248,249,250,247,246,248,0,250,249,250,247,249,250,247,250,0,0,246,248,249,250,247,245,246,248,249,249,250,247,249,0,249,246,248,249,250,247,247,0,247,250,250,246,248,249,247,247,250,0,245,249,247,0,0,245,249,249,249,250,247,0,246,248,249,250,247,246,248,249,250,247,246,248,249,250,247,0,246,248,249,250,247,245,249,249,0,252,252,252,252,252,252,252,252,252,252,0,0,253,253,253,253,253,253,253,253,253,253,253,253,0,254,254,254,254,254,254,254,254,254,254,254,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,256,256,256,256,256,256,256,256,256,256,256,256,0,257,257,257,257,257,257,257,257,257,257,0,0,0,258,258,258,258,258,258,258,258,258,258,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,0,283,0,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,263,0,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,0,0,284,0,284,0,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,0,266,266,266,266,266,266,266,266,266,266,266,266,266,266,0,285],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[]],[[]],[[]],[[]],0,[[]],[[]],[[[3,[2,2]]],[[3,[2,2]]]],[[]],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]],1]],[[],[[3,[9,9]]]],[[[3,[10,10]],[3,[10,10]]],11],[[[3,[12,12]],13],14],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]]]],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]]]],[[]],[[]],[[],3],[[]],[[],15],[[],15],[[],16],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]]]],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]]]],[[]],0,[[]],[[]],[[[17,[2]]],[[17,[2]]]],[[]],[[],[[17,[9]]]],[[[17,[10]],[17,[10]]],11],[[[17,[12]],13],14],[[]],[[[17,[[0,[18,5,19]]]]]],[[]],[[],17],[[[17,[[0,[4,6,19]]]]]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[20,[2,2]]],[[20,[2,2]]]],[[]],[[[20,[[0,[4,6,5,19,[8,[[0,[4,6,5,18,19,[8,[7]]]]]]]],[0,[4,6,5,18,19,[8,[7]]]]]],1]],[[],[[20,[9,9]]]],[[[20,[10,10]],[20,[10,10]]],11],[[[20,[12,12]],13],14],[[[20,[[0,[4,6,5,19,[8,[[0,[4,6,5,18,19,[8,[7]]]]]]]],[0,[4,6,5,18,19,[8,[7]]]]]]]],[[[20,[[0,[4,6,5,19,[8,[[0,[4,6,5,18,19,[8,[7]]]]]]]],[0,[4,6,5,18,19,[8,[7]]]]]]]],[[]],[[]],[[],20],[[]],[[],15],[[],15],[[],16],[[[20,[[0,[4,6,5,19,[8,[[0,[4,6,5,18,19,[8,[7]]]]]]]],[0,[4,6,5,18,19,[8,[7]]]]]]]],[[[20,[[0,[4,6,5,19,[8,[[0,[4,6,5,18,19,[8,[7]]]]]]]],[0,[4,6,5,18,19,[8,[7]]]]]]]],[[]],0,[[]],[[]],[[[21,[2]]],[[21,[2]]]],[[]],[[],[[21,[9]]]],[[[21,[10]],[21,[10]]],11],[[[21,[12]],13],14],[[]],[[[21,[7]]]],[[[21,[22]]]],[[[21,[1]]]],[[[21,[23]]]],[[[21,[24]]]],[[[21,[25]]]],[[]],[[],21],[[[21,[22]]]],[[[21,[24]]]],[[[21,[25]]]],[[[21,[23]]]],[[[21,[1]]]],[[[21,[7]]]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[26,[2]]],[[26,[2]]]],[[]],[[],[[26,[9]]]],[[[26,[10]],[26,[10]]],11],[[[26,[12]],13],14],[[]],[[[26,[1]]]],[[[26,[23]]]],[[[26,[7]]]],[[[26,[25]]]],[[[26,[22]]]],[[[26,[24]]]],[[]],[[],26],[[[26,[1]]]],[[[26,[7]]]],[[[26,[25]]]],[[[26,[22]]]],[[[26,[23]]]],[[[26,[24]]]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[27,[2]]],[[27,[2]]]],[[]],[[],[[27,[9]]]],[[[27,[10]],[27,[10]]],11],[[[27,[12]],13],14],[[]],[[[27,[22]]]],[[[27,[28]]]],[[[27,[29]]]],[[[27,[30]]]],[[[27,[25]]]],[[[27,[31]]]],[[[27,[32]]]],[[[27,[1]]]],[[[27,[7]]]],[[[27,[23]]]],[[[27,[33]]]],[[[27,[24]]]],[[]],[[[27,[33]]]],[[[27,[28]]]],[[[27,[29]]]],[[[27,[25]]]],[[[27,[22]]]],[[[27,[23]]]],[[[27,[7]]]],[[[27,[32]]]],[[[27,[31]]]],[[[27,[1]]]],[[[27,[24]]]],[[[27,[30]]]],[[],27],[[[27,[28]]]],[[[27,[23]]]],[[[27,[30]]]],[[[27,[22]]]],[[[27,[24]]]],[[[27,[32]]]],[[[27,[25]]]],[[[27,[31]]]],[[[27,[33]]]],[[[27,[29]]]],[[[27,[7]]]],[[[27,[1]]]],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[34,34],[35,35],[[]],[[]],[[34,34],11],[[35,35],11],[[34,13],14],[[35,13],14],[[]],[[]],[35],[[]],[[]],[35],[1,35],[35],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,[[]],[[]],[[[36,[2]]],[[36,[2]]]],[[]],[[],[[36,[9]]]],[[[36,[10]],[36,[10]]],11],[[[36,[12]],13],14],[[]],[[[36,[37]]]],[[]],[38,[[36,[38]]]],[[[36,[39]]]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[40,[2]]],[[40,[2]]]],[[]],[[],[[40,[9]]]],[[[40,[10]],[40,[10]]],11],[[[40,[12]],13],14],[[]],[[[40,[23]]]],[[[40,[7]]]],[[[40,[25]]]],[[[40,[24]]]],[[[40,[31]]]],[[[40,[29]]]],[[[40,[1]]]],[[[40,[22]]]],[[[40,[33]]]],[[[40,[30]]]],[[[40,[28]]]],[[[40,[32]]]],[[]],[[],40],[[[40,[33]]]],[[[40,[30]]]],[[[40,[22]]]],[[[40,[25]]]],[[[40,[24]]]],[[[40,[31]]]],[[[40,[1]]]],[[[40,[29]]]],[[[40,[7]]]],[[[40,[32]]]],[[[40,[23]]]],[[[40,[28]]]],[[]],[[],15],[[],15],[[],16],[[]],0,0,[[]],[[]],[[]],[[]],[41,41],[42,42],[[]],[[]],0,[[],41],[[],42],[[41,41],11],[[42,42],11],[[41,13],14],[[42,13],14],[[]],[[]],[42],[[]],[[]],0,0,[11,41],[42],0,[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,[[]],[[]],[[[43,[2]]],[[43,[2]]]],[[]],[[],[[43,[9]]]],[[[43,[10]],[43,[10]]],11],[[[43,[12]],13],14],[[]],[[[43,[30]]]],[[[43,[28]]]],[[[43,[25]]]],[[[43,[31]]]],[[[43,[24]]]],[[[43,[32]]]],[[[43,[1]]]],[[[43,[22]]]],[[[43,[33]]]],[[[43,[29]]]],[[[43,[7]]]],[[[43,[23]]]],[[]],[[],43],[[[43,[33]]]],[[[43,[29]]]],[[[43,[7]]]],[[[43,[32]]]],[[[43,[30]]]],[[[43,[28]]]],[[[43,[22]]]],[[[43,[31]]]],[[[43,[25]]]],[[[43,[1]]]],[[[43,[23]]]],[[[43,[24]]]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[44,[2]]],[[44,[2]]]],[[]],[[],[[44,[9]]]],[[[44,[10]],[44,[10]]],11],[[[44,[12]],13],14],[[]],[[[44,[30]]]],[[[44,[1]]]],[[[44,[32]]]],[[[44,[25]]]],[[[44,[22]]]],[[[44,[23]]]],[[[44,[45]]]],[[[44,[31]]]],[[[44,[46]]]],[[[44,[47]]]],[[[44,[28]]]],[[[44,[24]]]],[[[44,[29]]]],[[[44,[33]]]],[[[44,[7]]]],[[]],[[],44],[[[44,[7]]]],[[[44,[45]]]],[[[44,[33]]]],[[[44,[30]]]],[[[44,[28]]]],[[[44,[23]]]],[[[44,[1]]]],[[[44,[25]]]],[[[44,[32]]]],[[[44,[47]]]],[[[44,[24]]]],[[[44,[29]]]],[[[44,[22]]]],[[[44,[46]]]],[[[44,[31]]]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[48,[2]]],[[48,[2]]]],[[]],[[],[[48,[9]]]],[[[48,[10]],[48,[10]]],11],[[[48,[12]],13],14],[[]],[[[48,[24]]]],[[[48,[7]]]],[[[48,[33]]]],[[[48,[45]]]],[[[48,[25]]]],[[[48,[28]]]],[[[48,[30]]]],[[[48,[32]]]],[[[48,[47]]]],[[[48,[31]]]],[[[48,[46]]]],[[[48,[29]]]],[[[48,[22]]]],[[[48,[23]]]],[[[48,[1]]]],[[]],[[[48,[29]]]],[[[48,[33]]]],[[[48,[47]]]],[[[48,[45]]]],[[[48,[28]]]],[[[48,[30]]]],[[[48,[46]]]],[[[48,[32]]]],[[[48,[31]]]],[[],48],[[[48,[33]]]],[[[48,[25]]]],[[[48,[23]]]],[[[48,[30]]]],[[[48,[46]]]],[[[48,[1]]]],[[[48,[45]]]],[[[48,[47]]]],[[[48,[24]]]],[[[48,[29]]]],[[[48,[32]]]],[[[48,[28]]]],[[[48,[7]]]],[[[48,[22]]]],[[[48,[31]]]],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[7],0,0,0,[[49,[50,[2]]],[[50,[2]]]],[[51,[50,[2]]],[[50,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[49,49],[51,51],[[[52,[2]]],[[52,[2]]]],[[]],[[]],[[]],[[49,49],11],[[51,51],11],[[[52,[10]],[52,[10]]],11],[[49,13],14],[[51,13],14],[[[52,[12]],13],14],[[]],[[]],[[]],[[[52,[49]]]],[[[52,[51]]]],[[]],[[]],[[]],[49,[[50,[1]]]],[51,[[50,[1]]]],[[[52,[51]]]],[1,52],[[[52,[51]]]],[[[52,[49]]]],[[]],[[]],[[]],[[],15],[[[50,[1]]],[[53,[49]]]],[[],15],[[[50,[1]]],[[53,[51]]]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[]],[[]],[[]],0,[[]],[[]],[54,54],[[]],[[],54],[[54,54],11],[[54,13],14],[[]],[54],[[]],[54],[54],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[55,[2,2]]],[[55,[2,2]]]],[[[56,[2,2,2]]],[[56,[2,2,2]]]],[[[57,[2,2,2,2]]],[[57,[2,2,2,2]]]],[[[58,[2,2,2,2,2]]],[[58,[2,2,2,2,2]]]],[[]],[[]],[[]],[[]],[[],[[55,[9,9]]]],[[],[[56,[9,9,9]]]],[[],[[57,[9,9,9,9]]]],[[],[[58,[9,9,9,9,9]]]],[[[55,[10,10]],[55,[10,10]]],11],[[[56,[10,10,10]],[56,[10,10,10]]],11],[[[57,[10,10,10,10]],[57,[10,10,10,10]]],11],[[[58,[10,10,10,10,10]],[58,[10,10,10,10,10]]],11],[[[55,[12,12]],13],14],[[[56,[12,12,12]],13],14],[[[57,[12,12,12,12]],13],14],[[[58,[12,12,12,12,12]],13],14],[[]],[[]],[[]],[[]],[[[55,[37,37]]]],[[[56,[37,37,37]]]],[[[57,[37,37,37,37]]]],[[[58,[37,37,37,37,37]]]],[[]],[[]],[[]],[[]],[[[55,[59,59]]]],[[[56,[59,59,59]]]],[[[57,[59,59,59,59]]]],[[[58,[59,59,59,59,59]]]],[[[55,[39,39]]]],[[[56,[39,39,39]]]],[[[57,[39,39,39,39]]]],[[[58,[39,39,39,39,39]]]],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[]],0,[[]],[[]],[[[60,[2]]],[[60,[2]]]],[[]],[[],[[60,[9]]]],[[[60,[10]],[60,[10]]],11],[[[60,[12]],13],14],[[]],[60],[[]],[[],60],[60],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[61,[2,2]]],[[61,[2,2]]]],[[]],[[[61,[[0,[4,5,[8,[[0,[6,[8,[7]]]]]]]],[0,[6,[8,[7]]]]]],1]],[[],[[61,[9,9]]]],[[[61,[10,10]],[61,[10,10]]],11],[[[61,[12,12]],13],14],[[[61,[[0,[4,5,[8,[[0,[6,[8,[7]]]]]]]],[0,[6,[8,[7]]]]]]]],[[[61,[[0,[4,5,[8,[[0,[6,[8,[7]]]]]]]],[0,[6,[8,[7]]]]]]]],[[]],[[]],[[],61],[[]],[[],15],[[],15],[[],16],[[[61,[[0,[4,5,[8,[[0,[6,[8,[7]]]]]]]],[0,[6,[8,[7]]]]]]]],[[[61,[[0,[4,5,[8,[[0,[6,[8,[7]]]]]]]],[0,[6,[8,[7]]]]]]]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[62],[62,1],[62,1],0,0,0,0,[[]],[[]],[[[0,[19,63,4,64,65,[8,[24]]]],[0,[19,63,4,64,65,[8,[24]]]],66],[[67,[[0,[19,63,4,64,65,[8,[24]]]]]]]],[[[67,[2]]],[[67,[2]]]],[[]],[[[67,[12]],13],14],[[]],[[]],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,[[[69,[[0,[62,68]]]],[0,[62,68]]]],[[]],[[]],[[]],[[]],[[[69,[[0,[62,68]]]]],[[70,[[0,[62,68]]]]]],[[[70,[2]]],[[70,[2]]]],[[[69,[2]]],[[69,[2]]]],[[]],[[]],[[[70,[[0,[62,68]]]],71],72],[[[70,[[0,[62,68]]]],71],72],[[],[[69,[9]]]],[[[69,[[0,[62,68]]]],71]],[[]],[[]],[[[70,[[0,[62,68]]]],1],[[0,[62,68]]]],[[[70,[[0,[62,68]]]],[0,[62,68]]],1],[[]],[[]],[[],[[69,[[0,[62,68]]]]]],[[[70,[[0,[62,68]]]]],1],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,[[]],[[]],[73,73],[[]],0,[[[0,[19,68]],66],73],[[73,73],11],[[73,13],14],[[]],[[]],0,[[]],[[],15],[[],15],[[],16],[[]],[[],1],[[1,74]],0,0,0,0,0,0,0,[25,72],[25,72],[[25,25],72],[25,72],[[25,25],72],[[25,25],72],[[25,25],72],0,0,0,[[]],[[]],[75,75],[[]],[[75,75],11],[[75,13],14],[[]],[[47,47,75,1,66],47],[[]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[77,[[0,[19,76,5,4,64]]]]],[[50,[[0,[19,76,5,4,64]]]]]],[[]],[[]],[1,[[77,[[0,[19,76,5,4,64]]]]]],[[],15],[[],15],[[],16],[[[77,[[0,[19,76,5,4,64]]]],[78,[1]],[0,[19,76,5,4,64]]]],[[]],0,[[]],[[]],[[[79,[[0,[19,76,5,4,64]]]]],[[50,[[50,[[0,[19,76,5,4,64]]]]]]]],[[]],[[]],[[1,1],[[79,[[0,[19,76,5,4,64]]]]]],[[],15],[[],15],[[],16],[[[79,[[0,[19,76,5,4,64]]]],[78,[1]],[78,[1]],[0,[19,76,5,4,64]]]],[[]],[[],[[50,[1]]]],[[],7],0,[[]],[[]],[[[80,[2]]],[[80,[2]]]],[[]],[[[80,[12]],13],14],[[]],[[]],[[[80,[10]]],[[50,[1]]]],[[[50,[10]]],[[80,[10]]]],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,[1,[[0,[9,[8,[1]],19,62,4,6]]]],[[[0,[9,19,4,62]]],[[0,[9,19,4,62]]]],[7,1],[1,[[0,[9,19,62,4]]]],[1,[[0,[9,19,62,4]]]],[[],[[50,[[0,[19,10]]]]]],[[],[[50,[1]]]],[[],53],[[],[[50,[1]]]],[[],53],[[[0,[19,10]]],1],[[]],[1],[1],[[[50,[[0,[62,19]]]],[50,[[0,[62,19]]]]],[[50,[[0,[62,19]]]]]],0,[[81,1,1]],[[]],[[]],[[]],[[]],[[1,1,[82,[66]],[82,[66]],[82,[66]],[82,[66]],[82,[66]]],81],[81],[[],15],[[],15],[[],16],[[]],[7,[[50,[7]]]],[[1,1,74,74,74],[[50,[1]]]],[[],11],[[[50,[[0,[62,19]]]]],72],[[],11],0,[[]],[[]],[83,83],[[]],[[]],[[83,1,7]],[[83,1,1,7]],[[83,1,1,7]],[[83,1,7]],[[83,1,1]],[[]],[[83,1]],[[83,1]],[1,83],[[83,1,7]],[[83,1,1,7]],[[83,1,7]],[[83,1,1,7]],[83,[[53,[32]]]],[[]],[[],15],[[],15],[[],16],[[]],[[],50],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[84,85],7],[[86,[78,[1]]],7],[[84,85],86],[[]],[[]],[[1,7,7],84],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,[[]],[[]],[87,87],[[]],[[87,13],14],[[]],[[87,1]],[[]],[87,[[50,[1]]]],[85,87],[[]],[87],[[],15],[[],15],[[],16],[[]],[[1,74,66,74,74]],[1,[[50,[[0,[62,19]]]]]],[1,[[50,[[0,[62,19]]]]]],0,[[]],[[]],[[]],[[]],[[[50,[[0,[88,68]]]]],[[89,[[0,[88,68]]]]]],[[[89,[[0,[88,68]]]],[78,[1]],[0,[88,68]]],1],[[],15],[[],15],[[],16],[[]],0,[[90,[78,[1]]]],[[]],[[]],[[]],[[]],[[],90],[90,[[50,[7]]]],[[],15],[[],15],[[],16],[[]],0,0,[[1,1],[[50,[[0,[19,[8,[1]],4]]]]]],[[1,1],[[50,[11]]]],0,0,0,[[]],[[]],[91,91],[[]],[[91,91],11],[[91,13],14],[[]],[[]],[[47,47,91,1,66],47],[[]],[[],15],[[],15],[[],16],[[]],0,[[92,33,33]],[[92,33,33]],[[]],[[]],[[]],[[]],[1,92],[[92,33,33]],[92,[[53,[[50,[11]]]]]],[[],15],[[],15],[[],16],[[]],[[],[[50,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[93,93],[[]],[[93,7],1],[[93,7],[[53,[1]]]],[[93,13],14],[[]],[[93,7],1],[[]],[93,11],[93,1],[[93,7],[[53,[7]]]],[[93,7],[[53,[7]]]],[1,93],[[]],[[],15],[[],15],[[],16],[[]],0,0,[[94,94],25],[[94,94]],[[94,94]],[[94,94]],[[94,94]],[[94,94]],[[94,94]],[[]],[[]],[94,94],[[]],[94,25],[94,25],[[94,1]],[[94,13],14],[[94,13],14],[[]],[[[50,[11]]],94],[[]],[94,1],[1,94],[[94,94]],[[94,1,11]],[[94,1],11],[[]],[[],95],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,[[[97,[96]],[98,[96]]]],[[]],[[]],[[]],[[]],[99,99],[[[97,[2]]],[[97,[2]]]],[[]],[[]],[[99,99],11],[[99,13],14],[[[97,[12]],13],14],[[]],[[]],[[]],[[]],[99,[[97,[96]]]],[[[97,[96]],96],96],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,0,0,[[[101,[100]],1]],[[]],[[]],[[]],[[]],[[[101,[100]]],[[102,[100]]]],[[[102,[[0,[2,100]]]]],[[102,[[0,[2,100]]]]]],[[]],[[[102,[[0,[12,100]]]],13],14],[[[102,[100]],[78,[1]]]],[[]],[[]],[[[102,[100]],1]],[[]],[[]],[[1,100],[[101,[100]]]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[[101,[100]],1]],[[]],[[]],0,0,0,[[[103,[100]],1,1]],[[]],[[]],[[]],[[]],[[[103,[100]]],[[104,[100]]]],[[[104,[[0,[2,100]]]]],[[104,[[0,[2,100]]]]]],[[]],[[[104,[[0,[12,100]]]],13],14],[[[104,[100]],[78,[1]],[78,[1]]]],[[]],[[]],[[[104,[100]]]],[[]],[[]],[[1,1,100],[[103,[100]]]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[[103,[100]],1,1]],[[]],[[]],0,0,[[]],[[]],[[[106,[105]],[107,[1]]],53],[[]],[[]],[[50,105],[[106,[105]]]],[[],15],[[],15],[[],16],[[]],0,0,[[]],[[]],[[]],[[[109,[108]]]],[[[109,[108]],1]],[[]],[[1,108],[[109,[108]]]],[[[109,[108]]],50],[[],15],[[],15],[[],16],[[[109,[108]],[107,[1]]]],[[]],0,[[]],[[]],[[[110,[[0,[2,108]]]]],[[110,[[0,[2,108]]]]]],[[]],[[[110,[[0,[12,108]]]],13],14],[[]],[[[110,[108]],1]],[[]],[108,[[110,[108]]]],[[]],[[],15],[[],15],[[],16],[[[110,[108]],[78,[1]]]],[[]],0,[[]],[[]],[[[112,[[0,[2,111]]]]],[[112,[[0,[2,111]]]]]],[[]],[[[112,[[0,[12,111]]]],13],14],[[[112,[[0,[111,19]]]],[78,[1]]]],[[]],[[]],[[[0,[111,19]]],[[112,[[0,[111,19]]]]]],[[]],[[],15],[[],15],[[],16],[[[112,[[0,[111,19]]]],[78,[1]]]],[[]],0,[[[113,[108]],1]],[[]],[[]],[[[113,[[0,[12,108]]]],13],14],[[[113,[108]],[78,[1]]]],[[]],[[]],[108,[[113,[108]]]],[[],15],[[],15],[[],16],[[]],0,0,[[]],[[]],[[[115,[[0,[2,114]]]]],[[115,[[0,[2,114]]]]]],[[]],[[],[[115,[[0,[9,114]]]]]],[[[115,[114]],[78,[1]]]],[[[115,[114]],[116,[1]]]],[[]],[[]],[[1,114],[[115,[114]]]],[[]],[[],15],[[],15],[[],16],[[[115,[114]],1]],[[]],0,0,[[[118,[117]],1,117]],[[]],[[]],[[[118,[117]],[78,[1]]],117],[[[118,[117]],[116,[1]]],117],[[]],[[]],[1,[[118,[117]]]],[[[118,[117]],1,117]],[[],15],[[],15],[[],16],[[]],0,0,[[119,32,32]],[[]],[[]],[[]],[[]],[[119,19],[[120,[19]]]],[119,119],[[[120,[2]]],[[120,[2]]]],[[]],[[]],[[],119],[[[120,[[0,[19,4,64]]]],[78,[32]],[78,[32]]],[[0,[19,4,64]]]],[[[120,[[0,[19,4,64]]]],[116,[32]],[116,[32]]],[[0,[19,4,64]]]],[[]],[[]],[[]],[[]],[[],119],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[[120,[[0,[19,4,64]]]],32,32,[0,[19,4,64]]]],[[]],[[]],0,[[[121,[105]]],53],[[]],[[]],[[[121,[105]]],53],[[]],[[[121,[105]]],53],[[]],[[[121,[105]]],11],[[[121,[105]]],1],[105,[[121,[105]]]],[[[121,[105]]],53],[[[121,[105]]],53],[[[121,[105]]]],[[[121,[105]]]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[122,122],[[]],[[122,7],11],[[],122],[[122,13],14],[[]],[[122,7]],[[122,7],53],[[]],[[122,7],7],[[],122],[[122,7]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[123,[2]]],[[123,[2]]]],[[]],[[],[[123,[9]]]],[[[123,[12]],13],14],[[]],[[]],[[[123,[62]]],11],[[[123,[62]]],1],[[[123,[62]]],[[53,[62]]]],[[[123,[62]]],[[53,[62]]]],[[],[[123,[62]]]],[[[123,[62]]],[[53,[62]]]],[[[123,[62]]],[[53,[62]]]],[[[123,[62]],62]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[124,[[0,[111,19]]]],[107,[1]]]],[[]],[[]],[[1,[0,[111,19]]],[[124,[[0,[111,19]]]]]],[[50,[0,[111,19]]],[[124,[[0,[111,19]]]]]],[[],15],[[],15],[[],16],[[[124,[[0,[111,19]]]],[107,[1]]]],[[]],0,0,[[]],[[]],[[[126,[125]],[107,[1]]],125],[[]],[[[126,[125]],[50,[125]]]],[[]],[[1,[50,[125]]],[[126,[125]]]],[[],15],[[],15],[[],16],[[[126,[125]],[107,[1]],125]],[[]],0,0,[[[128,[127]],127]],[[]],[[]],[[[128,[2]]],[[128,[2]]]],[[]],[[],[[128,[9]]]],[[[128,[12]],13],14],[[]],[[]],[[[128,[127]]],11],[[[128,[127]]],1],[[[128,[127]],[128,[127]]]],[[],[[128,[127]]]],[[[128,[127]]],[[53,[127]]]],[[[128,[127]]],[[53,[127]]]],[[[128,[127]],127]],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,[[[130,[129]],[98,[129]]]],[[[130,[129]],[98,[129]],[131,[129]]]],[[]],[[]],[[]],[[]],[132,132],[[]],[[132,132],11],[[132,13],14],[[]],[[]],[[]],[[]],[[[50,[129]],132],[[130,[129]]]],[[[130,[129]],129],[[53,[129]]]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,[[]],[[]],[[[133,[[0,[108,19]]]],1,1]],[[[133,[[0,[108,19]]]],1]],[[[133,[[0,[108,19]]]],1]],[[[133,[[0,[108,19]]]],1,1]],[[]],[[[133,[[0,[108,19]]]],1]],[[]],[[[133,[[0,[108,19]]]],1,1]],[[[0,[108,19]],1],[[133,[[0,[108,19]]]]]],[[[133,[[0,[108,19]]]],1]],[[],15],[[],15],[[],16],[[[133,[[0,[108,19]]]],1]],[[]],0,0,[[]],[[]],[[]],[[]],[[[134,[2]]],[[134,[2]]]],[[[135,[2]]],[[135,[2]]]],[[]],[[]],[[135,1,1],11],[[],[[135,[9]]]],[[135,1],1],[[]],[[]],[[]],[[]],[[135,1],72],[[135,1],1],[[],135],[[135,1],[[53,[1]]]],[[135,1],[[53,[1]]]],[135],[[135,1],72],[[135,1]],[[135,1]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],0,[[]],[[]],0,[[]],[[]],[[]],[[]],[[[50,[[0,[19,2,5,4,136,63,62]]]]],[[137,[[0,[19,2,5,4,136,63,62]]]]]],[[[137,[[0,[19,2,5,4,136,63,62]]]],[107,[1]],[0,[19,2,5,4,136,63,62]]]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[138,[2]]],[[138,[2]]]],[[]],[[[138,[[0,[62,68,2]]]],[0,[62,68,2]]],11],[[[138,[[0,[62,68,2]]]],[0,[62,68,2]]],1],[[],[[138,[9]]]],[[[138,[[0,[62,68,2]]]]],[[53,[[0,[62,68,2]]]]]],[[[138,[12]],13],14],[[]],[[[138,[[0,[62,68,2]]]],[0,[62,68,2]]]],[[]],[[[138,[[0,[62,68,2]]]]],11],[[[138,[[0,[62,68,2]]]]],[[53,[[0,[62,68,2]]]]]],[[[138,[[0,[62,68,2]]]]],1],[[],[[138,[[0,[62,68,2]]]]]],[[[138,[[0,[62,68,2]]]]],[[53,[[0,[62,68,2]]]]]],[[[138,[[0,[62,68,2]]]]],[[53,[[0,[62,68,2]]]]]],[[[138,[[0,[62,68,2]]]],[0,[62,68,2]]],11],[[]],[[],15],[[],15],[[],16],[[]],0,0,[[]],[[]],[[]],[[]],[139,1],[[],139],[[]],[[]],[139,1],[[]],[[]],[140,1],[139,33],[85,140],[[140,1],[[53,[139]]]],[[140,1],[[53,[139]]]],[[140,1],[[53,[139]]]],[[140,1],[[53,[139]]]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,0,[[141,1],142],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[142,1,1],11],[141,142],[[141,1,1]],[1,141],[[142,1],1],[[142,1],1],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,[[]],[[]],[[[143,[2]]],[[143,[2]]]],[[]],[[[50,[2]]],[[143,[2]]]],[[]],[[[143,[2]],1],[[144,[2]]]],[[]],[[1,2],[[143,[2]]]],[[[143,[2]],1,2],[[143,[2]]]],[[]],[[],15],[[],15],[[],16],[[]],0,[145,53],[[]],[[]],[[],[[145,[9]]]],[[[145,[12]],13],14],[[]],[145,53],[[]],[145,11],[145,1],[[],145],[145,[[53,[145]]]],[145,145],[[],15],[[],15],[[],16],[[]],0,[[[146,[[0,[108,2]]]],1],[[146,[[0,[108,2]]]]]],[[]],[[]],[[[146,[[0,[2,108]]]]],[[146,[[0,[2,108]]]]]],[[]],[[[146,[[0,[12,108]]]],13],14],[[[146,[[0,[108,2]]]],[107,[1]]]],[[]],[[50,[0,[108,2]]],[[146,[[0,[108,2]]]]]],[[]],[[1,[0,[108,2]]],[[146,[[0,[108,2]]]]]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[147,[2]]],[[147,[2]]]],[[]],[[],[[147,[9]]]],[[[147,[12]],13],14],[[]],[[]],[147,72],[[],147],[147,53],[147,[[53,[147]]]],[147,147],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[148,[[0,[5,4,64,19]]]]],1],[[[148,[[0,[5,4,64,19]]]],1,1],[[53,[[0,[5,4,64,19]]]]]],[[]],[[[148,[[0,[5,4,64,19]]]]],[[50,[[50,[1]]]]]],[[]],[[[148,[[0,[5,4,64,19]]]],1,1],11],[[[148,[[0,[5,4,64,19]]]],1,1,[0,[5,4,64,19]]],1],[1,[[148,[[0,[5,4,64,19]]]]]],[[[148,[[0,[5,4,64,19]]]],1],[[0,[5,4,64,19]]]],[[[148,[[0,[5,4,64,19]]]],1],1],[[[148,[[0,[5,4,64,19]]]],1],1],[[],15],[[],15],[[],16],[[]],0,0,[[]],[[]],[[149,25],11],[[],149],[[149,25],11],[[149,25]],[[]],[[149,25],11],[[149,25]],[[]],[149,11],[149,1],[149,[[53,[25]]]],[[149,25],[[53,[25]]]],[149,[[53,[25]]]],[[149,25],[[53,[25]]]],[[],149],[[],15],[[],15],[[],16],[[]],0,0,[[[150,[[0,[19,62]]]],[0,[19,62]],[0,[19,62]]]],[[]],[[]],[[]],[[]],[[[150,[[0,[19,62]]]]],[[151,[[0,[19,62]]]]]],[[[150,[2]]],[[150,[2]]]],[[]],[[],[[150,[9]]]],[[]],[[]],[[]],[[]],[[],[[150,[[0,[19,62]]]]]],[[[151,[[0,[19,62]]]]],50],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,[[]],[[]],[[]],[[]],[[152,1,1],11],[[152,1,1],1],[1,152],[152,11],[[152,1],1],[[152,1],1],[[],15],[[],15],[[],16],[[]],0,[[[153,[2]]]],[[[153,[2]],1,2]],[[]],[[]],[[[153,[2]]],[[153,[2]]]],[[]],[[],[[153,[9]]]],[[[153,[2]]],[[53,[2]]]],[[[153,[12]],13],14],[50,153],[[]],[[153,1]],[[]],[[[153,[2]]],11],[[[153,[2]]],[[53,[2]]]],[[[153,[2]]],1],[[],[[153,[2]]]],[[[153,[2]]],[[53,[2]]]],[[[153,[2]],2]],[[[153,[2]]],11],[[]],[[],15],[[],15],[[],16],[[]],0,0,[[[154,[108]],1]],[[]],[[]],[[[154,[[0,[2,108]]]]],[[154,[[0,[2,108]]]]]],[[]],[[[154,[108]],[107,[1]]]],[[]],[[[154,[108]],1]],[[]],[[1,108],[[154,[108]]]],[[]],[[],15],[[],15],[[],16],[[[154,[108]],1]],[[]],0,[[[156,[[0,[108,155]]]],1,1]],[[]],[[]],[[[156,[[0,[108,155]]]],[78,[1]],[78,[1]]]],[[]],[[[156,[[0,[108,155]]]],1,1]],[[]],[[1,1,[0,[108,155]]],[[156,[[0,[108,155]]]]]],[[],15],[[],15],[[],16],[[[156,[[0,[108,155]]]],1,1]],[[]],0,[[157,[107,[1]],32]],[[]],[[]],[[157,[107,[1]],32]],[[157,[107,[1]],32]],[157,157],[[]],[[157,13],14],[[]],[[]],[[157,[107,[1]]],32],[[157,[107,[1]]],32],[1,157],[[[50,[32]]],157],[[157,[107,[1]]],32],[[]],[[],15],[[],15],[[],16],[[]],0,0,[[]],[[]],[[]],[[[159,[158]],1],158],[[]],[1,[[159,[158]]]],[[],15],[[],15],[[],16],[[[159,[158]],[107,[1]],[98,[158]]]],[[]],0,0,[[]],[[]],[[[161,[160]],[107,[1]]],160],[[]],[[]],[1,[[161,[160]]]],[[],15],[[],15],[[],16],[[[161,[160]],[107,[1]],[98,[160]]]],[[]],0,0,[[162,32,32]],[[]],[[]],[[]],[[]],[[162,[0,[108,19]]],[[163,[[0,[108,19]]]]]],[162,162],[[]],[[],162],[[[163,[108]],[78,[32]],[78,[32]]]],[[]],[[]],[[]],[[]],[[],162],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[[163,[108]],32,32]],[[]],[[]],0,[[]],[[]],[[[164,[2]]],[[164,[2]]]],[[]],[[],[[164,[9]]]],[[[164,[12]],13],14],[[]],[[]],[[[164,[62]]],11],[[[164,[62]]],1],[[[164,[62]],[164,[62]]]],[[],[[164,[62]]]],[[[164,[62]]],[[53,[62]]]],[[[164,[62]]],[[53,[62]]]],[[[164,[62]],62]],[[]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[166,[[0,[105,165]]]],[107,[1]]],53],[[]],[[]],[[50,[0,[105,165]]],[[166,[[0,[105,165]]]]]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[[167,[108]]]],[[[167,[[0,[108,19]]]],[78,[1]]]],[[[167,[[0,[108,19]]]],74]],[[]],[[[167,[[0,[108,19]]]],1],53],[[[167,[[0,[108,19]]]],1]],[[]],[[[167,[[0,[108,19]]]]],11],[[[167,[[0,[108,19]]]]],1],[[[167,[[0,[108,19]]]],[167,[[0,[108,19]]]]]],[[[167,[[0,[108,19]]]],[167,[[0,[108,19]]]]]],[[[0,[108,19]]],[[167,[[0,[108,19]]]]]],[[[167,[[0,[108,19]]]]],53],[[[167,[[0,[108,19]]]]],53],[[[167,[[0,[108,19]]]]]],[[[167,[[0,[108,19]]]]]],[[[167,[[0,[108,19]]]],1],53],[[[167,[[0,[108,19]]]],[78,[1]]]],[[[167,[[0,[108,19]]]],1]],[[[0,[108,19]]],[[167,[[0,[108,19]]]]]],[[[167,[[0,[108,19]]]],1]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[168,168],[[]],[[[170,[169]],[107,[1]]],[[53,[169]]]],[[]],[[]],[[]],[[]],[[1,168],[[170,[169]]]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[[170,[169]],[107,[1]],169]],[[]],[[]],0,[[171,1],7],[[]],[[]],[171,171],[[]],[[171,[78,[1]],11],1],[[]],[[]],[171,11],[171,1],[[[50,[11]]],171],[[171,1,11],1],[[171,1,11],[[53,[1]]]],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[172,1],[[]],[172,[[50,[[50,[1]]]]]],[[]],[[172,1,1],11],[[172,1,1],1],[1,172],[[172,1],1],[[172,1],1],[[],15],[[],15],[[],16],[[172,1],53],[[]],[[1,50,[82,[66]]],172],0,[[173,1],7],[[]],[[]],[173,173],[[]],[[173,[107,[1]],7],1],[[]],[[]],[[173,[107,[1]]],[[53,[7]]]],[[173,[107,[1]]],[[53,[7]]]],[[[50,[7]]],173],[[173,[0,[[107,[1]],2]],7],[[53,[7]]]],[[173,[0,[[107,[1]],2]],7],[[53,[7]]]],[[173,[107,[1]],1],[[53,[7]]]],[[173,[0,[[107,[1]],2]],7,7],1],[[173,1,7],1],[[173,1,7],[[53,[1]]]],[[]],[[],15],[[],15],[[],16],[[]],0,0,[[1,1]],0,0,[1,50],[[1,1]],0,[1],[[]],0,[[174,1,1]],[[]],[[]],[174,174],[[]],[[]],[[174,1],50],[[]],[[174,1,1]],[1,174],[174],[[]],[[],15],[[],15],[[],16],[[]],0,[[175,1,1]],[[]],[[]],[175,175],[[]],[[]],[[175,1],50],[[]],[[175,1,1]],[1,175],[175],[[]],[[],15],[[],15],[[],16],[[]],0,[[176,1,1,7,32]],[[]],[[]],[176,176],[[]],[[]],[[]],[[176,1,1,7],[[15,[32]]]],[1,176],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,[177,47],[178,47],[177,47],[[177,177],177],[[177,177],47],[[177,177],47],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[179,179],[177,177],[178,178],[180,180],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[177,177],47],[[178,178],47],[[],177],[[],178],[[],180],[178,177],0,0,0,[[177,47],177],[[177,177],47],[[178,178],47],[[179,47,47],11],[[177,177,179],11],[[178,178,179],11],[[180,180,179],11],[[177,13],14],[[178,13],14],[[180,13],14],[[]],[[]],[[]],[[]],0,[[179,47,47],11],[[179,47,47],11],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[178,178,179],11],[[178,178,179],11],[[179,47,47],11],[[179,47,47],11],[[177,47],177],[[179,47,47],11],[47,179],[[177,177],178],[[177,47],180],[177,177],[178,177],[[179,47,47],[[53,[181]]]],0,[[47,47],177],[[178,177],177],0,[[178,177],177],[[177,177],177],0,0,[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[177,177],[178,177],[[]],[[]],[[]],[[]],[[180,179],47],[[180,180,179],47],[[],47],0,0,0,0,0,0,[[]],[[]],[[177,177,177,179],182],[182,11],[182,182],[[]],[182,11],[[182,182],11],[[182,13],14],[[]],[[]],[182,11],[182,11],[182,11],[[]],[182,31],[[],15],[[],15],[[],16],[[]],[[177,177,177],180],[[[50,[177]],179],53],[[180,180,179],[[50,[177]]]],[179,11],[[178,179]],[[],47],0,0,0,[[]],[[]],[183,183],[[]],[[[50,[177]],179],[[50,[177]]]],[[183,183],11],[[]],[[[50,[177]],183,179],[[50,[177]]]],[[]],[[]],[[],15],[[],15],[[],16],[[]],[[178,177],47],[[178,177],47],[[178,178],47],[[177,177,177],180],0,0,0,0,[[]],[[]],[184,184],[[]],[184,11],[[184,184],11],[[184,13],14],[[]],[[180,178,179]],[[]],[184,11],[184,11],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,0,[[]],[[]],[185,185],[[]],[[185,185],11],[[185,13],14],[[]],[185,11],[[180,178,179]],[[]],[185,11],[185,11],[185,11],[[]],[[],15],[[],15],[185,11],[[],16],[[]],0,0,0,0,0,0,0,[[]],[[]],[186,11],[186,186],[[]],[[186,186],11],[[186,13],14],[[]],[186,11],[186,11],[[180,180,179]],[186,11],[[]],[186,[[53,[25]]]],[186,11],[186,11],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,[[]],[[]],[187,187],[[]],[187,11],[[187,187],11],[[187,13],14],[[]],[[178,178,179]],[[]],[187,11],[187,11],[187,11],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,[[]],[[]],[188,188],[[]],[[188,188],11],[[188,13],14],[[]],[[178,178,179]],[188,11],[[]],[188,11],[188,11],[188,11],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,[[]],[[]],[189,189],[[]],[[189,189],11],[189,11],[[189,13],14],[[]],[189,11],[[]],[189,11],[[177,179],189],[[]],[[],15],[[],15],[[],16],[[]],[[180,177,179],[[50,[177]]]],0,0,0,0,0,0,0,[[[192,[190,[0,[191,2]]]],[0,[191,2]]]],[[[192,[193,[0,[191,2]]]],[0,[191,2]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[194,[2,2]]],[[194,[2,2]]]],[190,190],[193,193],[[[192,[2,2]]],[[192,[2,2]]]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[[192,[190,[0,[191,2]]]],71]],[[[192,[193,[0,[191,2]]]],71]],[[[194,[12,12]],13],14],[[190,13],14],[[193,13],14],[[[192,[12,12]],13],14],[[],1],[[[194,[2]]],1],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[192,11],0,[192,1],0,0,[[1,1],194],[1,[[192,[195,[0,[191,2]]]]]],0,0,[[]],[[[194,[2]]],[[194,[2]]]],0,[[],1],[[[194,[2]]],1],0,[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],0,0,0,[[],16],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[]],0,[[]],[[[194,[2]]]],0,0,[196,[[50,[1]]]],0,[[[192,[195,191]],1],[[50,[197]]]],[[[192,[195,191]],71],[[50,[53]]]],0,[196,50],[[[192,[193,191]]],[[50,[53]]]],[196,50],[[[192,[193,191]]]],[[[192,[190,191]],1],[[50,[191]]]],0,[[[192,[190,191]],1],[[53,[[50,[191]]]]]],[[[192,[195,191]]],[[53,[[50,[191]]]]]],[[[192,[195,191]]],[[50,[53]]]],[[[192,[193,191]]],50],0,0,0,[[[198,[[0,[191,2]]]],[0,[191,2]]]],[[]],[[]],[[[198,[[0,[2,191]]]]],[[198,[[0,[2,191]]]]]],[[]],[[]],[[]],[1,[[198,[[0,[191,2]]]]]],[[[198,[[0,[191,2]]]]],53],[[]],[[],15],[[],15],[[],16],[[]],0,[[[199,[[0,[191,2]]]],[0,[191,2]]]],[[]],[[]],[[[199,[[0,[2,191]]]]],[[199,[[0,[2,191]]]]]],[[]],[[]],[[]],[1,[[199,[[0,[191,2]]]]]],[[[199,[[0,[191,2]]]]],53],[[]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,0,[[200,1,1]],[[]],[[]],[[]],[[]],[[]],[[]],[200,201],[202,202],[[]],[[202,202],11],[[202,13],14],[[]],[[]],[[]],[[201,1],1],[[]],[[]],[[]],[[201,1],202],[201,[[50,[[50,[1]]]]]],[1,200],[[201,1],1],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[[192,[193,191]]],[[53,[[50,[191]]]]]],0,0,[[]],[[]],0,[196,196],[[]],[[196,13],14],[[]],[[]],0,[[[192,[193,191]]],196],0,0,0,[[]],[[],15],[[],15],[[],16],[[]],[[[192,[193,191]]],[[50,[1]]]],[[[192,[193,191]]],[[53,[[50,[191]]]]]],0,0,[[203,1,1]],[[]],[[]],[[]],[[]],[203,204],[[]],[[]],[[204,1],1],[[]],[[]],[[204,1],11],[1,203],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,[[]],[[]],[[]],[205,[[50,[[50,[1]]]]]],[[]],[[[192,[190,191]]],205],[205,[[50,[1]]]],[[],15],[[],15],[[],16],[[]],[[[192,[190,191]]],[[53,[[50,[1]]]]]],[[[192,[190,191]],1],53],[196,[[50,[[50,[1]]]]]],0,[[[206,[[0,[19,62,4,5]]]],1,1,[0,[19,62,4,5]]]],[[]],[[]],[[[206,[[0,[19,62,4,5]]]],1,1],[[53,[[0,[19,62,4,5]]]]]],[[]],[[[206,[[0,[19,62,4,5]]]]],11],[[]],[[[192,[195,191]]],[[206,[[0,[19,62,4,5]]]]]],[[[206,[[0,[19,62,4,5]]]]],[[53,[[50,[[50,[[53,[[0,[19,62,4,5]]]]]]]]]]]],[[],15],[[],15],[[],16],[[]],0,[[[192,[195,191]],1,1,1],[[50,[53]]]],0,0,0,0,0,0,0,0,[[207,207],207],[[]],[[]],[[]],[[]],[[]],[[]],[208,208],[207,207],[[[209,[2]]],[[209,[2]]]],[[]],[[]],[[]],[[],208],[[],207],0,0,[[208,208],11],[[207,207],11],[[208,13],14],[[207,13],14],[[[209,[12]],13],14],[[]],[[]],[[]],[[209,208]],[[209,208]],[[]],[[]],[[]],[209,72],[209,72],[[208,207,1,1],[[53,[208]]]],[[1,1],208],[[33,33],207],[71,209],0,[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[]],[[]],[[]],0,0,[[1,1,66,66],[[192,[190,[194,[2]]]]]],0,0,0,0,0,[210,50],0,0,[[]],[[]],[[210,19,74],[[211,[210,19,74]]]],[[]],[[]],[[]],[[[211,[72,19,74]]],53],[[],15],[[],15],[[],16],[[]],0,[[210,85],95],0,0,[[]],[[]],[[]],[[]],[[]],[[[212,[72,74]]],53],[[210,74],[[212,[210,74]]]],[[],15],[[],15],[[],16],[[]],0,0,0,0,0,0,0,[[[50,[94]]],7],[[[50,[94]]]],[[[50,[94]]],[[53,[[50,[94]]]]]],0,[[]],[[]],[213,213],[[]],[[]],[[[50,[94]]],213],[[213,1,1],[[53,[25]]]],[[213,1]],[[]],[[213,213]],[[1,1],213],[[]],[213,213],[[],15],[[],15],[[],16],[[]],0,0,0,[[[215,[214]],[215,[214]]],[[215,[214]]]],[[[215,[214]],[215,[214]]]],[[]],[[]],[[[215,[[0,[2,214]]]]],[[215,[[0,[2,214]]]]]],[[]],[[[215,[[0,[10,214]]]],[215,[[0,[10,214]]]]],11],[[]],[[[50,[[50,[25]]]],214],[[215,[214]]]],[[[215,[214]],1,1],53],[[[215,[214]]],1],[[[215,[214]],1]],[[]],[[[215,[214]],[215,[214]]],[[215,[214]]]],[[[215,[214]],[215,[214]]]],[[[215,[214]]],[[215,[214]]]],[[1,1,214],[[215,[214]]]],[[[215,[214]],[215,[214]]],[[215,[214]]]],[[[215,[214]],[215,[214]]]],[[]],[[[215,[214]]],[[215,[214]]]],[[],15],[[],15],[[],16],[[]],[[[215,[214]]],1],0,[[[216,[214]],[216,[214]]],[[216,[214]]]],[[[216,[214]],[216,[214]]]],[[]],[[]],[[[216,[[0,[2,214]]]]],[[216,[[0,[2,214]]]]]],[[]],[[[216,[[0,[10,214]]]],[216,[[0,[10,214]]]]],11],[[]],[[[50,[[50,[25]]]],214],[[216,[214]]]],[[[216,[214]],1,1],53],[[[216,[214]],1]],[[]],[[[216,[214]],[216,[214]]],[[216,[214]]]],[[[216,[214]],[216,[214]]]],[[[216,[214]]],[[216,[214]]]],[[1,214],[[216,[214]]]],[[[216,[214]],7],[[216,[214]]]],[[[216,[214]]],1],[[[216,[214]],[216,[214]]],[[216,[214]]]],[[[216,[214]],[216,[214]]],[[216,[214]]]],[[[216,[214]],[216,[214]]],[[216,[214]]]],[[[216,[214]],[216,[214]]]],[[]],[[[216,[214]]],[[216,[214]]]],[[],15],[[],15],[[],16],[[1,214],[[216,[214]]]],[[]],0,0,[[[50,[[50,[7]]]],7],7],[[[50,[[50,[7]]]],7],[[53,[[50,[[50,[7]]]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[218,[217]],1,1]],[[]],[[]],[[]],[[]],[[[218,[217]]],7],[[1,1],[[218,[217]]]],[[],15],[[],15],[[],16],[[]],0,0,[[219,1,1]],[[]],[[]],[[]],[[]],[220,220],[[]],[[220,13],14],[[]],[[]],[219,50],[[]],[[]],[219,25],[[1,1],219],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,214],[[50,[50]]]],[[[50,[25]],214],50],0,0,[[]],[[]],[[]],[[]],[[221,7,7],7],[[222,7,7],7],[221,221],[222,222],[[]],[[]],[[]],[[]],[[]],[[]],[[7,7],221],[7,222],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,0,0,0,0,0,0,[[[50,[[0,[19,4,64,6]]]],[50,[[0,[19,4,64,6]]]]],[[50,[[0,[19,4,64,6]]]]]],[[[50,[[0,[19,4,64,6]]]],[50,[[0,[19,4,64,6]]]]],[[50,[[0,[19,4,64,6]]]]]],[[]],[[]],[[[50,[[0,[19,9,4,64,6]]]],[50,[[0,[19,9,4,64,6]]]]],[[50,[[0,[19,9,4,64,6]]]]]],[[]],[[]],[[7,7],7],[[],53],[[],53],[7,7],[7,[[50,[7]]]],0,[[]],[[]],[223,223],[[]],[7,[[50,[223]]]],[[223,223],11],[[223,13],14],[[]],0,[[]],0,0,[[]],[[],15],[[],15],[[],16],[[]],[[7,7]],0,0,[[[224,[214]],1,1]],0,[[[224,[214]],1],50],[[]],[[]],0,[[[224,[214]],1]],[[[224,[[0,[2,214]]]]],[[224,[[0,[2,214]]]]]],[[]],[[[224,[214]],1,1]],[[[224,[214]],1]],[[[224,[[0,[12,214]]]],13],14],[[]],[[[224,[214]],1,1]],[[]],[[[224,[214]],1]],[[1,214],[[224,[214]]]],[[[224,[214]],1,1]],[[]],[[],15],[[],15],[[],16],[[]],[[7,7],7],0,0,0,[[]],[[]],[[225,1],[[50,[1]]]],[[]],[[]],[1,225],[[],15],[[],15],[[],16],[[]],[7,50],0,0,[[]],[[]],[[]],[[32,32,7],[[53,[32]]]],0,0,0,0,0,0,[[1,7],[[50,[7]]]],[[7,7],[[53,[7]]]],[[7,7],7],[[7,7,7],[[53,[7]]]],[[7,7,7],7],[[7,7],[[53,[7]]]],[[1,7],[[50,[7]]]],[[226,[50,[45]],227],[[50,[45]]]],[[23,23],23],[[25,25],25],[[7,7],7],[[24,24],24],0,[[]],[[]],[[228,[50,[45]],[50,[45]]],[[50,[45]]]],[[]],[[]],[[25,1],228],[[],15],[[],15],[[],16],[[]],0,0,[[227,226,226],226],[[227,226,226]],[[]],[[]],[[]],[[]],[226,226],[[]],[[226,1],45],[45,226],[226,[[53,[1]]]],[[227,226,226]],[[226,226],11],[[226,45],45],[[226,13],14],[[]],[[]],[[[50,[45]]],226],[[226,1],226],[[]],[[]],[[227,226,1],226],[226,11],[226,1],[[227,226,226],226],[[227,226,226]],[228,227],[[227,226,45],226],[226],[[227,226],226],[[227,226,226],226],[[227,226,226]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],[[],226],[[[50,[45]],45,228],[[50,[45]]]],0,0,[[],11],0,0,0,[[]],[[]],[[]],[[]],[[229,1],11],[1,229],[[],15],[[],15],[[],16],[[]],0,0,[[]],[[]],[[]],[[]],[[230,7],11],[[],15],[[],15],[[],16],[[]],[7,[[53,[7]]]],[[7,7,7,7],7],[[7,7,7],7],[7,7],[1,[[50,[7]]]],[[7,7],7],0,0,0,0,0,[7],0,[[]],[[]],[[[231,[2]]],[[231,[2]]]],[[]],[[],[[231,[9]]]],0,[[[231,[10]],[231,[10]]],11],[[[231,[12]],13],14],[[]],[[]],[[[231,[[0,[62,10,19]]]],[231,[[0,[62,10,19]]]]],[[15,[[231,[[0,[62,10,19]]]]]]]],[[],231],0,[[]],[[],15],[[],15],[[],16],[[]],0,0,[[]],[[]],0,[[[232,[2]]],[[232,[2]]]],[[]],[[[232,[10]],[232,[10]]],11],[[[232,[12]],13],14],[[]],0,[[]],0,[[2,2,2,2,2,2],[[232,[2]]]],0,[[[232,[2]]],[[232,[2]]]],[[[232,[2]]],[[232,[2]]]],[[[232,[2]]],[[232,[2]]]],[[[232,[2]]],[[232,[2]]]],[[[232,[2]]],[[232,[2]]]],[[[232,[2]]],[[232,[2]]]],[[]],0,[[],15],[[],15],[[],16],[[]],[[71,[0,[19,68]],[0,[19,68]]],11],0,0,0,0,[[]],[[]],[[]],[[]],[[[233,[2]]],[[233,[2]]]],[[[234,[2]]],[[234,[2]]]],[[]],[[]],0,[[[233,[12]],13],14],[[[234,[12]],13],14],[[]],[[]],[[]],[[]],[[71,[0,[19,68,12]],[0,[19,68,12]]],[[53,[[233,[[0,[19,68,12]]]]]]]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[45,45]],[[45,45]],0,[[]],[[]],[[]],[[]],[235,235],[45,45],[[]],[[]],[[],235],[[],45],[[45,45]],[[45,45]],[[235,235],11],[[45,45],11],[[45,13],14],[[45,13],14],[[235,32,32]],[[]],[7,45],[[]],[1,45],[[235,32]],[[235,7]],0,[[]],[[]],[45,45],[[45,45]],[[45,45]],[45],[25,45],[[],45],0,[[45,7],45],[[45,45]],[[45,45]],[[]],[[]],[[],95],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[45,25],[[]],[[]],[[],45],0,0,0,0,0,0,0,[[32,32]],[32],[7],0,0,[[236,236]],[[236,236]],0,[[]],[[]],[[]],[[]],[237,237],[236,236],[[]],[[]],[[236,236]],[[236,236]],[[237,237],11],[[236,236],11],[[237,13],14],[[236,13],14],[[236,13],14],[[237,32,32]],[[]],[[]],[[237,32]],[[237,7]],0,[[]],[[]],[236],[[236,236]],[[236,236]],[236,236],[25,237],[[25,25],236],[[236,7]],[[236,236]],[[236,236]],[[]],[[]],[[],95],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[236,25],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[238,238],[239,239],[[]],[[]],[[],238],[[],239],[[238,238],11],[[239,239],11],[[238,13],14],[[239,13],14],[[]],[[]],[238],[239],[[]],[[]],[238],[25,238],[25,239],[238],[239],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[]],[[]],0,0,0,0,[[[197,[4]],[197,[4]]],[[197,[4]]]],[[]],[[]],[[[197,[2]]],[[197,[2]]]],[[]],[[[197,[62]],[197,[62]]],181],[[[197,[10]],[197,[10]]],11],[[[197,[12]],13],14],[[]],[[]],[[[197,[19]]],11],[[[197,[19]]],11],[[[197,[19]]],11],[[[197,[240]]],[[197,[240]]]],[[[197,[63]],[197,[63]]],[[53,[181]]]],[[[197,[64]],[197,[64]]],[[197,[64]]]],[[]],[[],15],[[],15],[[],16],[[[197,[19]]],19],[[]],0,0,[[]],[[]],0,0,0,0,[[]],[7],0,[[241,241]],[[241,241]],[[]],[[]],[241,241],[[]],[[241,241],181],[241,32],[[241,241]],[[241,241]],[[241,241],11],[[241,13],14],[[]],[32,241],[[]],[[241,241]],[[241,241]],[241],[[32,32],241],[241,32],[[241,241],[[53,[181]]]],[[241,241]],[[241,241]],[[]],[[],15],[[],15],[[],16],[[]],0,[[242,242]],[[242,242]],[[]],[[]],[242,242],[[]],[[242,242],181],[[],242],[[242,242]],[[242,242]],[[242,242],11],[[242,13],14],[[]],[[]],[[242,242]],[[242,242]],[242],[[],242],0,[[242,242],[[53,[181]]]],[[242,242]],[[242,242]],[[]],[[],15],[[],15],[[],16],[[]],[[],242],0,0,0,0,[[243,[78,[[0,[244,63,2]]]]],[[78,[[0,[244,63,2]]]]]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[246,[[0,[245,2]]]]],[[247,[[0,[245,2]]]]]],[[[248,[[0,[245,2]]]]],[[247,[[0,[245,2]]]]]],0,0,[[[249,[2,2]]],[[249,[2,2]]]],[[[250,[2]]],[[250,[2]]]],[[[247,[2]]],[[247,[2]]]],[[]],[[]],[[]],[[],[[250,[9]]]],0,0,[[[246,[[0,[245,2]]]],71]],[[[248,[[0,[245,2]]]],71]],[[[249,[12,12]],13],14],[[[250,[12]],13],14],[[[247,[12]],13],14],[[],1],[[]],[[]],[[[249,[2]]],1],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[247,11],0,[247,1],[[[250,[245]]],251],[[[250,[245]]],1],[1,[[246,[[0,[245,2]]]]]],[[1,1],[[248,[[0,[245,2]]]]]],[[1,1],249],[[247,1],250],[247,72],0,0,[[]],[[[249,[2]]],[[249,[2]]]],[247,[[53,[1]]]],0,0,[[],1],[[[249,[2]]],1],0,[[]],[[]],[[]],0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],0,[[]],[[]],[[]],[[]],[[]],[[]],[[[249,[2]]]],0,0,[[]],[[]],[[252,[50,[1]],66],[[50,[1]]]],[[]],[[]],[[[247,[245]],1],252],[[],15],[[],15],[[],16],[[]],[[[247,[245]]],[[50,[1]]]],0,[[253,1,1],[[53,[1]]]],[[]],[[]],[[253,1,1],53],[[]],[[]],[[253,1]],[[[247,[245]],1],253],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[]],[[]],[[[247,[245]],1],254],[[254,1],1],[[254,1]],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[255,255],[[]],[[255,13],14],[[]],[[255,1,1],[[53,[1]]]],[[255,1],1],[[]],[[255,1,1],1],[[[247,[245]],1],255],[[255,1],[[53,[1]]]],[[255,1,1],50],[[255,1,1],50],[[255,1]],[[255,1]],[[]],[[],15],[[],15],[[],16],[[]],0,[[256,1,1],[[53,[1]]]],[[]],[[]],[[]],[[]],[[256,1,1,1],[[53,[1]]]],[[256,1,1],1],[[[247,[245]],1],256],[[],15],[[],15],[[],16],[[]],0,[[]],[[]],[[]],[[]],[[2,[82,[66]],[82,[66]],[82,[66]]],[[257,[19,2,2]]]],[[[257,[19,2,2]],[247,[245]]],[[50,[2]]]],[[],15],[[],15],[[],16],[[]],[[[247,[245]],1]],[[[247,[245]],1],[[15,[85]]]],0,[[]],[[]],[[]],[[]],[[2,[82,[66]],[82,[66]],[82,[66]]],[[258,[19,2,2]]]],[[[258,[19,2,2]],[247,[245]],1],[[50,[2]]]],[[],15],[[],15],[[],16],[[]],[[[247,[245]]]],[[[247,[245]],1],50],[[[247,[245]]],50],[[[247,[245]],1,1],[[50,[1]]]],0,0,0,0,0,0,0,0,0,[[[50,[32]]],32],[[[50,[32]]],32],[[[50,[[0,[19,6,136,5]]]]],[[0,[19,6,136,5]]]],[[[50,[[0,[19,6,5,4,136]]]]],[[0,[19,6,5,4,136]]]],[[[50,[32]]],32],[[[50,[7]]],22],[[[50,[[0,[19,4,5]]]]],[[0,[19,4,5]]]],[[[50,[7]]],22],0,0,0,0,0,0,0,0,0,0,0,[7,25],0,[[]],[[]],[259],[[]],[259,[[53,[24]]]],[[]],[[],259],[259,[[53,[24]]]],[259,[[50,[260]]]],[259,47],[259,31],[259,32],[259,33],[259,25],[259,7],[259,1],[259],[[],15],[[],15],[[],16],[[]],[[259,261]],[[259,261]],0,[262,11],0,0,[[[98,[[0,[4,6,19]]]],[0,[4,6,19]]],[[0,[4,6,19]]]],0,[[]],[[]],[[[98,[2]]],[[98,[2]]]],[[]],[[[98,[12]],13],14],[[]],[[]],[[[98,[[0,[64,6,19]]]],[0,[64,6,19]]],[[98,[[0,[64,6,19]]]]]],[[]],[[],15],[[],15],[[],16],[[]],0,0,[[]],[[]],[263,263],[[]],[[263,263],181],[[],263],[[263,263],11],[[263,13],14],[[]],[[263,264]],[[]],[263,11],[[263,263],[[53,[181]]]],[[]],[[],15],[[],15],[[],16],[[]],[[[107,[1]],1,1]],[[1,1,1,1]],0,0,[[]],0,[[265,265]],[[265,265]],[[265,265]],[[]],[[]],[265,265],[[]],[[265,265],181],[[265,1],11],[[],265],[[265,265],265],[[265,265],11],[1,265],[[265,1],265],[[265,13],14],[[]],[[[50,[1]]],265],[[265,264]],[[265,265],265],[[]],[265,11],[265,1],[[265,265],[[53,[181]]]],[[265,1],265],[[265,1],265],[[265,265]],[[265,265],265],[[]],[[],15],[[],15],[[],16],[[265,265],265],[[]],0,[[]],[[]],[266,266],[[]],[[266,13],14],[[]],[266,7],[[]],[[],266],[[]],[[],15],[[],15],[[],16],[[]],0,[[85,85],85]],"c":[],"p":[[15,"usize"],[8,"Clone"],[3,"AddSum"],[8,"Add"],[8,"Zero"],[8,"Mul"],[15,"u64"],[8,"From"],[8,"Default"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[3,"Affine"],[8,"One"],[8,"Copy"],[3,"AffineSum"],[3,"BitAnd"],[15,"u128"],[15,"u16"],[15,"u8"],[15,"u32"],[3,"BitOr"],[3,"BitXor"],[15,"i16"],[15,"i8"],[15,"i128"],[15,"i32"],[15,"i64"],[15,"isize"],[4,"DihedralValue"],[3,"Dihedral"],[3,"Dual"],[8,"Identity"],[8,"Set"],[8,"BinaryOp"],[3,"Max"],[3,"MaxContiguousValue"],[3,"MaxContiguous"],[3,"Min"],[3,"Prod"],[3,"ConstModInt"],[15,"f32"],[15,"f64"],[3,"Sum"],[3,"Transformation"],[3,"Vec"],[3,"Permutation"],[3,"Composition"],[4,"Option"],[3,"Trivial"],[3,"Tuple2"],[3,"Tuple3"],[3,"Tuple4"],[3,"Tuple5"],[8,"Inverse"],[3,"Update"],[3,"UpdateSum"],[8,"Ord"],[8,"PartialOrd"],[8,"Sub"],[8,"Div"],[8,"Fn"],[4,"SearchResult"],[8,"Eq"],[3,"CompressorBuilder"],[3,"Compressor"],[8,"IntoIterator"],[8,"Iterator"],[3,"Rho"],[8,"FnMut"],[4,"Convex"],[8,"Signed"],[3,"Imos1D"],[3,"Range"],[3,"Imos2D"],[3,"KMP"],[3,"Mo"],[3,"Box"],[3,"PSP"],[3,"RollingHash"],[15,"str"],[3,"Table"],[3,"SuffixArray"],[8,"Hash"],[3,"StaticRangeFreqQuery"],[3,"StaticRangeInversionsQuery"],[4,"Convex"],[3,"TwoSat"],[3,"BinaryTrie"],[3,"Bitset"],[3,"String"],[8,"Elem"],[3,"ConvexHullTrick"],[3,"Linear"],[4,"Mode"],[8,"Group"],[3,"CumulativeSum1DBuilder"],[3,"CumulativeSum1D"],[3,"CumulativeSum2DBuilder"],[3,"CumulativeSum2D"],[8,"Semigroup"],[3,"DisjointSparseTable"],[8,"RangeBounds"],[8,"Monoid"],[3,"DualSegtree"],[3,"DynamicDualSegtree"],[8,"Action"],[3,"DynamicLazySegtree"],[3,"DynamicSegtree"],[8,"AbelianGroup"],[3,"FenwickTree"],[3,"RangeTo"],[8,"Elem"],[3,"FenwickTreeAdd"],[3,"FenwickOnFenwickBuilder"],[3,"FenwickOnFenwick"],[3,"FoldableDeque"],[3,"IntegerSet"],[3,"IntervalHeap"],[3,"LazySegtree"],[8,"Elem"],[3,"LazySegtreeCoeff"],[8,"Elem"],[3,"LazySkewHeap"],[8,"Elem"],[3,"LiChaoTree"],[3,"RangeInclusive"],[4,"Mode"],[3,"LinkCutTree"],[3,"Node"],[3,"LinkedListPool"],[8,"AddAssign"],[3,"MergeSortTree"],[3,"MultiSet"],[3,"Node"],[3,"PalindromicTree"],[3,"PartiallyPersistentUnionFind"],[3,"At"],[3,"PersistentArray"],[3,"Rc"],[3,"PersistentQueue"],[3,"PersistentSegtree"],[3,"PersistentStack"],[3,"PotentialUnionFind"],[3,"QwordTree"],[3,"RangeSearchTreeBuilder"],[3,"RangeSearchTree"],[3,"RollbackableUnionFind"],[3,"RollbackableVec"],[3,"Segtree"],[8,"Commutative"],[3,"Segtree2D"],[3,"SegtreeBeats"],[8,"Elem"],[3,"SegtreeLinearAdd"],[8,"Elem"],[3,"SegtreeLinearAddRangeSum"],[3,"SegtreeOnSegtreeBuilder"],[3,"SegtreeOnSegtree"],[3,"SkewHeap"],[8,"Idempotence"],[3,"SparseTable"],[3,"SplayTree"],[4,"Mode"],[8,"Elem"],[3,"StarrySkyTree"],[3,"SuccinctDict"],[3,"UnionFind"],[3,"WaveletMatrix"],[3,"Dinic"],[3,"FordFulkerson"],[3,"MinCostFlow"],[3,"Vector"],[3,"Line"],[3,"Eps"],[3,"Circle"],[4,"Ordering"],[4,"CCW"],[4,"Hull"],[4,"IntersectCircleLine"],[4,"IntersectCircleSegment"],[4,"IntersectCircles"],[4,"IntersectLineSegment"],[4,"IntersectSegments"],[4,"PointPolygon"],[3,"Directed"],[8,"EdgeTrait"],[3,"Graph"],[3,"Undirected"],[3,"Edge"],[8,"Direction"],[3,"Lowlink"],[4,"NumInf"],[3,"DirectedEulerianTrail"],[3,"UndirectedEulerianTrail"],[3,"FunctionalGraphBuilder"],[3,"FunctionalGraph"],[4,"Kind"],[3,"PseudoTreeBuilder"],[3,"PseudoTree"],[3,"SCC"],[3,"WarshallFloyd"],[3,"Dir"],[3,"Position"],[3,"Grid"],[8,"Sized"],[3,"_CumSum"],[3,"_Reject"],[3,"MatrixMod2"],[8,"FF"],[3,"Matrix"],[3,"SquareMatrix"],[8,"MaxFlow"],[3,"BipartiteMatching"],[3,"HopcroftKarp"],[3,"Edge"],[3,"ExtLucas"],[3,"BinomialCoefficient"],[3,"Quotient"],[3,"FactorialTable"],[3,"FactorizeSieve"],[3,"Polynomial"],[3,"PolynomialOperator"],[3,"NTT"],[3,"EratosthenesSieve"],[3,"MillerRabin"],[3,"ClosedInterval"],[3,"Dice"],[3,"ParseResult"],[4,"Elem"],[3,"ConstModIntBuilder"],[3,"ModInt"],[3,"ModIntBuilder"],[3,"SumModM"],[3,"ProdModM"],[8,"Neg"],[3,"Rational"],[3,"Totalf64"],[8,"Rng"],[8,"SampleUniform"],[8,"TreeEdgeTrait"],[3,"TreeBuilder"],[3,"Tree"],[3,"RootedTreeBuilder"],[3,"TreeEdge"],[3,"TreeNode"],[8,"DoubleEndedIterator"],[3,"AuxiliaryTree"],[3,"TreeDepthQuery"],[3,"EulerTour"],[3,"HLD"],[3,"DoublingLCA"],[3,"RerootingDP"],[3,"TreeDP"],[3,"FastIO"],[15,"char"],[8,"Display"],[8,"FnOnce"],[3,"NullableUsize"],[8,"Hasher"],[3,"UsizeSet"],[3,"XorShift"],[8,"Times"],[13,"NgOk"],[8,"Foldable"],[8,"Foldable2D"],[8,"Indexable"],[8,"Assignable"],[8,"Updatable"],[8,"CollectVec"],[8,"CumSum"],[8,"JoinStr"],[8,"Reject"],[8,"GcdLcm"],[8,"CheckPrime"],[13,"Paren"],[8,"Pow"],[8,"Inv"],[8,"IsNoneOr"],[8,"Transpose"],[8,"YesNo"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
