var searchIndex = JSON.parse('{\
"haar_lib":{"doc":"Rust GitHub last commit","t":"AAOOOOAOOAOOAAOOOOAAOOAOOOOAOOAAAAAAAAAAAAAAAAIQQKKKKKDLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDENNLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIIIIIIIIQIKKKDLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFNNNELLFLLLLLLMMDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFAAAAAAAFFFFFFFDLLLLLLLLLLLDLLLLLLLLLLLFFDLLLLLLLLLLLLLLAAAAAFFFFFFFFFFFFFFFDLLLLLLLLLLLFFFFFDLLLLLLLLLLLLLLLLLLLLLLLLFDDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLFFDLLLLLLLLLLDLLLLLLLLLLLAAFFDLLLLLLLLLLLLLFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADLLLLLLLLLLLLLLLLLLLLLLLLDINNELLLLLLLLLLLLLLLLLLLLLLLLLLLLDDCCLLLLLLLLLLLLLLLLLLLLLLLLLDDCCLLLLLLLLLLLLLLLLLLLLLLLLLDCCLLLLLLLLLLDCCLLLLLLLLLLLLLDCCCLLLLLLLLLLLLLLLLIDCCLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLDCLLLLLLLLLLLICDCLLLLLLLLLLLLIDLLLLLLLLLLLLLLLLLLLLLIDNNELLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLRDLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLCCCDCLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLICDLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLICNNEDCLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLIIIIQQQIQQKKKKKDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLDDDDLLLLLLAAALLLLLLLLAMALLLLLLLLAAAAAALLLLLLAAALLLLLLLLLLLLLLMLLAAAAAALLLLLLLLLLLLLLLLALLMLLAMLLLLLLLLLLLLLLLLLLLLLLFFFENNNNNLLFLLLLLLLLLLLLLLLLLFFFFFFENNLLLLFLLFLLLLLLFFFFNENNLLLLLLLLFLLLLLLLLNENNNNLLLLLLLLFLLLLLLLLLLNNNNENNLLLLLLLLLLFLLLLLLLLLLNENNNLLLLLLLLFLLLLLLLLLNENNNLLLLLLLFLLLLLLLLLLNNNELLLLLLLLLLLFLLLLLFDIDIDDQLLAAAAAALLLLLLLLAAALLLLLLLLAAAAMAALLALLLLAKLLLLLMAAMLLLLLALAAALLAAKLAKLMLLLLLLLLLLLLAAALLLLLLLLAKLMAFCFFDLLLLLLLLLLLCFFFFFAFFFDLLLLLLLLLLLLLLLLFAADLLLLLLLLLLLLLLDLLLLLLLLLLLLLLQIKKKKKDLLLLLLLLLLLLLLLLNDDENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLFDMLLMLLLLLMLMMMLLLLLFDLLLLLLLLLLLLLLFDLLLMMLFLLLLDLLLLLLLLLLLFFFFIFSSDDSDSSLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLMMFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFDDLLLLLLLLLLLLLLLLLLLLLLLLLLAAAAAAAFFFFFFFFFFFFDLLLLFLLLMLMMLLLLLFDALALLLALLLLLLLLLLLLLLLLLLFAADLLLLLLLLLLFAAADCCCCCCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCCCDICCCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLIIIQQQIKKKIQKKKAAAAAAAFFFFFDLLLLLLLLLLLLLLLLLLLLLLLLLLLDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFAAAAAAFFFFFFFFFFFAADLLLLLLLLLLIKFDLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFAAADMLLMLLLLLMLMLMLLLLLLLMLLLLFENDNLLLLLLLLMLLLLLLFLLLLLLLLLLMMMFAAIIIIIQQIKKDDIDQLLLLLLAMLLLLLLAALLLLLKLLLLMAMLLLLALLLLLMMAKLAAKLMLLLALLLLLLLLLALLLKLMFDLLLLLLLLLLLLDLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLDLLLLLLLLLLFFDLLLLLLLLLLFFFFAAAAAAAAAAAFDLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLIKDMLMLLLLLLLLLLLLLNNENLLLLLLLLLLLLLLLLLLLLLLFDLLLLLLLLLLLLLLLLLLLLLLLLLLLQIKDLLLLLLLLLLLLLLIK","n":["algebra","algo","btreemap","btreeset","chmax","chmin","ds","eps","for_loop","geom","get","get_time","graph","grid","hashmap","hashset","impl_algebra","input","macros","math","max","min","misc","modulo","mul_vec","rec","sort_with","testtools","timer","trait_alias","traits","tree","utils","action","add_sum","affine","bitxor","dihedral","dual","max","min","prod","sum","traits","update","update_sum","Action","FType","UType","convert","fold","fold_id","update","update_id","AddSum","borrow","borrow_mut","clone","clone_into","convert","default","fold","fold_id","from","into","new","to_owned","try_from","try_into","type_id","update","update_id","vzip","Affine","borrow","borrow_mut","clone","clone_into","default","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","BitXor","borrow","borrow_mut","clone","clone_into","default","from","id","id","id","id","id","id","id","id","id","id","id","id","into","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","new","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","Dihedral","DihedralValue","R","S","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","fmt","from","from","id","into","into","inv","new","op","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Dual","borrow","borrow_mut","clone","clone_into","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","Max","borrow","borrow_mut","clone","clone_into","default","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","Min","borrow","borrow_mut","clone","clone_into","default","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","Prod","borrow","borrow_mut","clone","clone_into","default","from","id","id","id","id","id","id","id","id","id","id","id","id","id","id","into","new","op","op","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","Sum","borrow","borrow_mut","clone","clone_into","default","from","id","id","id","id","id","id","id","id","id","id","id","id","id","id","into","inv","inv","inv","inv","inv","inv","inv","inv","new","op","op","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","AlgeStruct","Associative","BinaryOp","Commutative","Group","Idempotence","Identity","Inverse","Monoid","Output","Semigroup","id","inv","op","Update","borrow","borrow_mut","clone","clone_into","default","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","UpdateSum","borrow","borrow_mut","clone","clone_into","convert","default","fold","fold_id","from","into","new","to_owned","try_from","try_into","type_id","update","update_id","vzip","bsearch","bsearch_f","compressor","edit_distance","enumerate_bitset","imos_1d","imos_2d","interval_scheduling","inversion_number","kmp","knapsack","lcs","lis","majority_vote","manacher","max_partial_sum","max_rect","merge","mo","num_subseq","parallel_binary_search","permutation","psp","rle","rolling_hash","sa","sliding_window","static_range_freq_query","static_range_inversions_query","subset_sum","two_sat","zalgo","equal_range","lower_bound","upper_bound","AllNg","AllOk","NgOk","SearchResult","borrow","borrow_mut","bsearch_ng_ok","from","into","try_from","try_into","type_id","vzip","ng","ok","Compressor","CompressorBuilder","add","add_vec","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","compress","decompress","default","from","from","get","index","into","into","new","size","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","edit_distance","gray_code","subset_asc","subset_between","subset_desc","subset_size_k","superset_asc","superset_desc","gray_code","subset_asc","subset_between","subset_desc","subset_size_k","super_asc","superset_desc","Imos1D","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","update","vzip","Imos2D","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","update","vzip","interval_scheduling","inversion_number","KMP","borrow","borrow_mut","clone","clone_into","fmt","from","into","matches","new","to_owned","try_from","try_into","type_id","vzip","limited","small_quantity","small_value","small_weight","unlimited","knapsack_limited","knapsack_small_quantity","knapsack_small_value","knapsack_small_weight","knapsack_unlimited","lcs","lis","majority_vote","manacher","max_partial_sum","max_rect","max_rect_in_histogram","inplace_merge","inplace_merge_by","merge","Mo","add","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","num_subseq","parallel_binary_search","next_permutation","permutations","prev_permutation","PSP","borrow","borrow_mut","clone","clone_into","from","gain_if_blue","gain_if_both_blue","gain_if_both_red","gain_if_red","if_red_then_must_be_red","into","must_be_blue","must_be_red","new","penalty_if_blue","penalty_if_different","penalty_if_red","penalty_if_red_blue","solve","to_owned","try_from","try_into","type_id","vzip","rle","RollingHash","Table","borrow","borrow","borrow_mut","borrow_mut","from","from","hash","hash","hash_table","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","SuffixArray","borrow","borrow_mut","clone","clone_into","fmt","from","index","into","lcp_array","new","to_owned","to_slice","try_from","try_into","type_id","vzip","sliding_maximum","sliding_minimum","StaticRangeFreqQuery","borrow","borrow_mut","from","into","new","query","try_from","try_into","type_id","vzip","StaticRangeInversionsQuery","add_query","borrow","borrow_mut","from","into","new","solve","try_from","try_into","type_id","vzip","count","limited","subset_sum","subset_sum_limited","TwoSat","add_if","add_or","borrow","borrow_mut","from","into","new","not_coexist","solve","try_from","try_into","type_id","vzip","zalgo","binary_trie","cht","cumulative_sum_1d","cumulative_sum_2d","disjoint_sparse_table","dual_segtree","fenwick","fenwick_add","fenwick_on_fenwick","foldable_deque","interval_heap","lazy_segtree","lazy_segtree_coeff","lazy_skew_heap","li_chao","multiset","partially_persistent_unionfind","persistent_array","persistent_queue","persistent_stack","qword_tree","range_search_tree","rollbackable_vector","segtree","segtree_beats","segtree_linear_add","segtree_on_segtree","skew_heap","sparse_table","starry_sky_tree","succinct_dict","traits","unionfind","wavelet_matrix","BinaryTrie","borrow","borrow_mut","clone","clone_into","count","default","erase","fmt","from","insert","into","is_empty","len","lower_bound","max","min","new","to_owned","to_vec","try_from","try_into","type_id","upper_bound","vzip","ConvexHullTrick","Elem","Max","Min","Mode","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","from","from","into","into","new","query","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","CumulativeSum1D","CumulativeSum1DBuilder","Foldable","Group","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","fmt","fold","from","from","index","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","CumulativeSum2D","CumulativeSum2DBuilder","Foldable2D","Group","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","fmt","fold","from","from","index","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","DisjointSparseTable","Foldable","Semigroup","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","vzip","DualSegtree","Monoid","Updatable","borrow","borrow_mut","from","from_vec","get","into","new","to_vec","try_from","try_into","type_id","update","vzip","FenwickTree","Foldable","Group","Updatable","borrow","borrow_mut","clone","clone_into","default","fold","fold","from","into","new","to_owned","try_from","try_into","type_id","update","vzip","Elem","FenwickTreeAdd","Foldable","Updatable","add","borrow","borrow_mut","fold","fold","from","into","new","sub","try_from","try_into","type_id","vzip","FenwickOnFenwick","FenwickOnFenwickBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","default","fold","fold_to","from","from","into","into","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","FoldableDeque","back","borrow","borrow_mut","fold","from","front","into","is_empty","len","new","pop_back","pop_front","push_back","push_front","try_from","try_into","type_id","vzip","IntervalHeap","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","max","min","new","pop_max","pop_min","push","to_owned","try_from","try_into","type_id","vzip","LazySegtree","Updatable","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","update","vzip","Elem","Foldable","LazySegtreeCoeff","Updatable","borrow","borrow_mut","fold","from","init_with_vec","into","new","try_from","try_into","type_id","update","vzip","Elem","LazySkewHeap","add","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","meld","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","Elem","LiChaoTree","Max","Min","Mode","add_line","add_segment","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","from","from","into","into","new","query","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","MultiSet","borrow","borrow_mut","clone","clone_into","contains","count","default","first","fmt","from","insert","into","is_empty","last","len","new","pop_first","pop_last","remove","to_owned","try_from","try_into","type_id","vzip","At","PartiallyPersistentUnionFind","at","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","is_same","latest","merge","new","root_of","size_of","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","PersistentArray","borrow","borrow_mut","from","get","into","new","set","try_from","try_into","type_id","vzip","PersistentQueue","back","borrow","borrow_mut","default","fmt","from","front","into","is_empty","len","new","pop","push","try_from","try_into","type_id","vzip","PersistentStack","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","iter","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","MAX","QwordTree","borrow","borrow_mut","contains","default","erase","erase_unchecked","from","insert","insert_unchecked","into","is_empty","len","max","max_le","min","min_ge","new","try_from","try_into","type_id","vzip","RangeSearchTree","RangeSearchTreeBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","default","from","from","into","into","new","search","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","RollbackableVec","assign","borrow","borrow_mut","clone","clone_into","default","fmt","from","from","index","into","is_empty","len","new","pop","push","rollback","to_owned","try_from","try_into","type_id","vzip","Assignable","Foldable","Monoid","Segtree","Updatable","assign","borrow","borrow_mut","clone","clone_into","fold","from","index","into","new","to_owned","try_from","try_into","type_id","update","vzip","SegtreeBeats","add","borrow","borrow_mut","chmax","chmin","clone","clone_into","fmt","from","get_max","get_min","get_sum","into","new","new_with_vec","to_owned","try_from","try_into","type_id","vzip","Elem","Indexable","SegtreeLinearAdd","borrow","borrow_mut","from","get","into","new","try_from","try_into","type_id","update","vzip","SegtreeOnSegtree","SegtreeOnSegtreeBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","default","fold","from","from","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","SkewHeap","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","meld","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","SparseTable","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","vzip","Elem","Foldable","Max","Min","Mode","StarrySkyTree","Updatable","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fold","from","from","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","SuccinctDict","access","borrow","borrow_mut","clone","clone_into","count","from","into","is_empty","len","new","rank","select","to_owned","try_from","try_into","type_id","vzip","Assignable","Foldable","Foldable2D","Indexable","Output","Output","Output","Updatable","Value","Value","assign","fold","fold","get","update","UnionFind","borrow","borrow_mut","count_groups","from","get_groups","into","is_same","merge","new","new_with_values","root_of","size_of","try_from","try_into","type_id","value_of","vzip","WaveletMatrix","access","borrow","borrow_mut","clone","clone_into","count","from","into","maximum","minimum","new","next_value","prev_value","quantile","range_freq","rank","select","to_owned","try_from","try_into","type_id","vzip","Circle","Eps","Line","Vector","abs","abs","abs_sq","add","angle","angle_diff","area_intersection_circle_polygon","area_intersection_circles","area_polygon","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ccw","center","circumcircle","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","closest_pair","common_tangent_circles","convex","convex_cut","convex_diameter","convex_hull","cross","cross","default","default","default","diff","dist_line_point","dist_segment_point","dist_segments","div","dot","dot","eq","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","ge","gt","incircle","intersect_circle_line","intersect_circle_segment","intersect_circles","intersect_line_segment","intersect_segments","into","into","into","into","is_orthogonal","is_parallel","le","lt","mul","ne","new","new","new","normal","normal","partial_cmp","point_in_polygon","polar","projection","radius","reflection","sub","tangent_circle","to","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unit","unit","vzip","vzip","vzip","vzip","area_intersection_circle_polygon","area_intersection_circles","area_polygon","CCW","CLOCKWISE","COUNTER_CLOCKWISE","ONLINE_BACK","ONLINE_FRONT","ON_SEGMENT","borrow","borrow_mut","ccw","clockwise","clone","clone_into","counter_clockwise","eq","fmt","from","into","on_segment","online_back","online_front","to_owned","to_value","try_from","try_into","type_id","vzip","circumcircle","closest_pair","common_tangent_circles","is_convex","convex_cut","convex_diameter","Hull","Lower","Upper","borrow","borrow_mut","clone","clone_into","convex_hull","eq","from","half_hull","into","to_owned","try_from","try_into","type_id","vzip","dist_line_point","dist_segment_point","dist_segments","incircle","CROSSED","IntersectCircleLine","OUTSIDE","TANGENT","borrow","borrow_mut","clone","clone_into","crossed","eq","fmt","from","intersect_circle_line","into","outside","tangent","to_owned","try_from","try_into","type_id","vzip","INSIDE","IntersectCircleSegment","ONE_CROSSPOINT","OUTSIDE","TANGENT","TWO_CROSSPOINTS","borrow","borrow_mut","clone","clone_into","eq","fmt","from","inside","intersect_circle_segment","into","one_crosspoint","outside","tangent","to_owned","try_from","try_into","two_crosspoints","type_id","vzip","CIRCUMSCRIBED","INSCRIBED","INSIDE","INTERSECTED","IntersectCircles","OUTSIDE","SAME","borrow","borrow_mut","circumscribed","clone","clone_into","eq","fmt","from","inscribed","inside","intersect_circles","intersected","into","num_common_tangent","outside","same","to_owned","try_from","try_into","type_id","vzip","CROSSED","IntersectLineSegment","LEFTSIDE","OVERLAPPED","RIGHTSIDE","borrow","borrow_mut","clone","clone_into","crossed","eq","fmt","from","intersect_line_segment","into","leftside","overlapped","rightside","to_owned","try_from","try_into","type_id","vzip","INTERSECTED","IntersectSegments","NOT_INTERSECTED","OVERLAPPED","SAME","borrow","borrow_mut","clone","clone_into","eq","fmt","from","intersect_segments","intersected","into","not_intersected","overlapped","same","to_owned","try_from","try_into","type_id","vzip","EXCLUSION","INCLUSION","ON_SEGMENT","PointPolygon","borrow","borrow_mut","clone","clone_into","eq","exclusion","fmt","from","inclusion","into","on_segment","point_in_polygon","to_owned","try_from","try_into","type_id","vzip","tangent_circle","Directed","Direction","Edge","EdgeTrait","Graph","Undirected","Weight","add","add","articulation_points","bellman_ford","bfs","bi_match","biconnected","bipartite","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bridges","chinese_postman","chu_liu_edmonds","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cycle","detect_cycle","dijkstra","dinic","edges","enumerate_triangles","eulerian","extend","extend","flow","fmt","fmt","fmt","fmt","ford_fulkerson","from","from","from","from","from","from","from","functional_graph","hopcroft_karp","index","into","into","into","into","is_empty","kruskal","len","lowlink","max_independent_set","min_cost_flow","new","new","prim","pseudo_tree","rev","rev","scc","to","to","to","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tsort","tsp","two_edge","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","warshall_floyd","weight","weight","weight","yen","articulation_points","NumInf","bellman_ford","bfs","BipartiteMatching","add_edge","borrow","borrow_mut","from","into","matching","new","try_from","try_into","type_id","vzip","Lowlink","biconnected","check_bipartite","bridges","chinese_postman_problem","chu_liu_edmonds","directed_shortest","directed_shortest_cycle","detect_cycle","dijkstra","Dinic","add_edge","borrow","borrow_mut","clone","clone_into","from","get_edges","into","max_flow","new","reset","to_owned","try_from","try_into","type_id","vzip","enumerate_triangles","directed","undirected","DirectedEulerianTrail","add_edge","borrow","borrow_mut","clone","clone_into","from","into","new","solve","to_owned","try_from","try_into","type_id","vzip","UndirectedEulerianTrail","add_edge","borrow","borrow_mut","clone","clone_into","from","into","new","solve","to_owned","try_from","try_into","type_id","vzip","Cap","MaxFlow","add_edge","get_edges","max_flow","new","reset","FordFulkerson","add_edge","borrow","borrow_mut","clone","clone_into","from","get_edges","into","max_flow","new","reset","to_owned","try_from","try_into","type_id","vzip","Branch","FunctionalGraph","FunctionalGraphBuilder","Kind","Leaf","Loop","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","clone","clone_into","eq","fmt","from","from","from","grp_index_of","into","into","into","kind_of","loops","new","next_of","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Edge","HopcroftKarp","add_edge","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","from","from","get_matching","into","into","matching","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","kruskal","Lowlink","back","borrow","borrow_mut","ch","clone","clone_into","fmt","from","into","low","new","ord","par","size","to_owned","try_from","try_into","type_id","vzip","max_independent_set","MinCostFlow","add_edge","borrow","borrow_mut","clone","clone_into","from","into","min_cost_flow","new","to_owned","try_from","try_into","type_id","vzip","prim","PseudoTree","borrow","borrow_mut","from","group","in_loop","into","pseudo_tree","try_from","try_into","type_id","vzip","SCC","borrow","borrow_mut","from","groups","into","new","to_vec","try_from","try_into","type_id","vzip","tsort","tsp","two_edge_connected_components","warshall_floyd","Elem","yen_algorithm","D","DIR_4","Dir","Grid","L","Position","R","U","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","dx","dy","eq","eq","fmt","fmt","fmt","from","from","from","get","into","into","into","iter","iter_mut","mov_strict","new","new","new","to_graph","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","x","y","grid_to_graph","chmax","chmin","ds_macros","eps","for_loop","get_time","impl_algebra","io","max","min","modulo","mul_vec","rec","sort_with","timer","trait_alias","bell_number","berlekamp_massey","binomial_coefficient","convolution","count_coprime","crt","divisor","enumerate_quotients","ext_gcd","factorial","factorial_prime_factor","factorize","ff","gcd_lcm","linalg","miller_rabin","mod_ops","montmort","nim_product","prime_test","primitive_root","rational","sum_floor_linear","sum_of_exponential_times_polynomial_limit","totient","totient_sum","bell_number_table","berlekamp_massey","BinomialCoefficient","ExtLucas","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","from","from","get","get","into","into","new","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","conv_and","conv_or","mobius_sub","mobius_super","subset_conv","zeta_sub","zeta_super","convolution_and","convolution_or","fast_mobius_subset","fast_mobius_superset","subset_convolution","fast_zeta_subset","fast_zeta_superset","count_coprime","crt","crt_vec","count_divisors","enumerate_divisors","Quotient","borrow","borrow_mut","clone","clone_into","enumerate_quotients","eq","fmt","from","from","into","q","to","to_owned","try_from","try_into","type_id","vzip","ext_gcd","FactorialTable","bell","bell_number","bernoulli","bernoulli_number","borrow","borrow_mut","catalan","catalan_number","clone","clone_into","comb","default","facto","fmt","from","h","into","inv_facto","new","perm","to_owned","try_from","try_into","type_id","vzip","factorial_prime_factor","sieve","trial","FactorizeSieve","borrow","borrow_mut","factorize","from","into","new","try_from","try_into","type_id","vzip","factorize","const_modint","modint","traits","ConstModInt","FF","Frac","Inv","One","Pow","Zero","add","add_assign","borrow","borrow_mut","clone","clone_into","default","div","div_assign","eq","fmt","fmt","frac","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","into","inv","mul","mul_assign","neg","new","one","pow","sub","sub_assign","sum","to_owned","to_string","try_from","try_into","type_id","vzip","zero","FF","Frac","Inv","ModInt","Modulo","One","Pow","Zero","add","add_assign","borrow","borrow_mut","clone","clone_into","default","div","div_assign","eq","fmt","fmt","frac","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","into","inv","mul","mul_assign","neg","new","one","pow","sub","sub_assign","sum","to_owned","to_string","try_from","try_into","type_id","value","vzip","zero","FF","Frac","Inv","Output","Output","Output","Pow","frac","inv","pow","GcdLcm","Output","gcd","gcd_lcm","lcm","determinant_mod_2","determinant_p","gaussian_elim_mod_2","inverse_mod_2","inverse_p","matrix","square_matrix","determinant_mod_2","determinant_p","gaussian_elim_mod_2","inverse_mod_2","inverse_p","Matrix","add","add_assign","borrow","borrow_mut","clone","clone_into","eq","from","from_vec","get_mut","height","index","into","mul","mul_assign","neg","new","sub","sub_assign","to_owned","to_vec","transpose","try_from","try_into","type_id","vzip","width","SquareMatrix","SquareMatrixElem","add","add_assign","borrow","borrow_mut","clone","clone_into","eq","fmt","from","from_vec","get_mut","index","into","mul","mul_assign","neg","new","pow","size","straight_mul","strassen_mul","sub","sub_assign","to_owned","to_vec","transpose","try_from","try_into","type_id","unit","vzip","miller_rabin","enum_inv","inv","inv_p","log","pow","sqrt","enumerate_mod_inv","mod_inv","mod_inv_p","mod_log","mod_pow","mod_sqrt","montmort","nim_product_16","nim_product_32","nim_product_64","nim_product_8","eratosthenes","traits","EratosthenesSieve","borrow","borrow_mut","from","into","is_prime","new","try_from","try_into","type_id","vzip","CheckPrime","is_prime","primitive_root","Rational","add","add_assign","borrow","borrow_mut","clone","clone_into","div","div_assign","eq","fmt","from","from","into","mul","mul_assign","neg","new","partial_cmp","sub","sub_assign","to_owned","try_from","try_into","type_id","vzip","sum_floor_linear","sum_of_exponential_times_polynomial_limit","totient","totient_table","totient_sum","dice","paren","parse_paren","Dice","back","borrow","borrow_mut","bottom","clone","clone_into","eq","fmt","from","front","into","left","new","right","rot_back","rot_clockwise","rot_counterclockwise","rot_front","rot_left","rot_right","to_owned","top","try_from","try_into","type_id","vzip","check_paren","Elem","Paren","ParseResult","Value","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","elems","fmt","fmt","from","from","into","into","parse_paren","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","close","inner","open","rand_range","num","one_zero","Float","Int","Signed","Unsigned","One","Output","Output","Zero","one","zero","Tree","TreeEdge","TreeEdgeTrait","TreeNode","Weight","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","centroid","children","clone","clone","clone","clone_into","clone_into","clone_into","depth_query","euler_tour","extend","extend_rooted","fmt","fmt","fmt","from","from","from","from","from","from","hld","index","into","into","into","is_empty","lca","len","neighbors","neighbors_size","new","new","nodes","parent","rerooting","rev","rev","rooted_isomorphism","rooting","to","to","to","to_owned","to_owned","to_owned","tree_dp","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","utils","vzip","vzip","vzip","weight","weight","weight","centroids","TreeDepthQuery","ancestor","borrow","borrow_mut","children_query","from","into","me_query","new","try_from","try_into","type_id","vzip","EulerTour","borrow","borrow_mut","from","into","new","point_query","subtree_query","try_from","try_into","type_id","vzip","HLD","borrow","borrow_mut","clone","clone_into","fmt","from","get_id","into","lca","new","parent","path_query_edge","path_query_vertex","subtree_query_edge","subtree_query_vertex","to_owned","try_from","try_into","type_id","vzip","DoublingLCA","ancestor","borrow","borrow_mut","from","get_lca","into","jump","new","try_from","try_into","type_id","vzip","RerootingDP","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","rooted_isomorphism","rooting","TreeDP","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","tree_diameter","tree_distance","tree_height","tree_path","bits","bitset","fastio","join_str","linear","num_inf","swap","total_f64","transpose","xor_shift","yesno","highest_one","Bitset","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","flip","fmt","from","into","len","new","set","test","to_owned","try_from","try_into","type_id","vzip","FastIO","borrow","borrow_mut","drop","from","getc","into","new","peek","read_chars","read_f64","read_i32","read_i64","read_isize","read_u32","read_u64","read_usize","skip","try_from","try_into","type_id","vzip","write","writeln","JoinStr","join_str","Linear","a","apply","b","borrow","borrow_mut","clone","clone_into","fmt","from","into","mov_x","to_owned","try_from","try_into","type_id","vzip","Inf","NegInf","NumInf","Value","add","borrow","borrow_mut","clone","clone_into","cmp","eq","fmt","from","into","is_inf","is_neg_inf","is_value","neg","partial_cmp","sub","to_owned","try_from","try_into","type_id","unwrap","vzip","swap_vv","Totalf64","add","add_assign","borrow","borrow_mut","clone","clone_into","cmp","default","div","div_assign","eq","fmt","from","into","mul","mul_assign","neg","one","partial_cmp","sub","sub_assign","to_owned","try_from","try_into","type_id","vzip","zero","Output","Transpose","transpose","XorShift","borrow","borrow_mut","clone","clone_into","fmt","from","gen","into","new","to_owned","try_from","try_into","type_id","vzip","YesNo","yesno"],"q":[[0,"haar_lib"],[33,"haar_lib::algebra"],[46,"haar_lib::algebra::action"],[54,"haar_lib::algebra::add_sum"],[73,"haar_lib::algebra::affine"],[89,"haar_lib::algebra::bitxor"],[139,"haar_lib::algebra::dihedral"],[170,"haar_lib::algebra::dual"],[185,"haar_lib::algebra::max"],[201,"haar_lib::algebra::min"],[217,"haar_lib::algebra::prod"],[259,"haar_lib::algebra::sum"],[309,"haar_lib::algebra::traits"],[323,"haar_lib::algebra::update"],[339,"haar_lib::algebra::update_sum"],[358,"haar_lib::algo"],[390,"haar_lib::algo::bsearch"],[393,"haar_lib::algo::bsearch_f"],[406,"haar_lib::algo::bsearch_f::SearchResult"],[408,"haar_lib::algo::compressor"],[442,"haar_lib::algo::edit_distance"],[443,"haar_lib::algo::enumerate_bitset"],[450,"haar_lib::algo::enumerate_bitset::gray_code"],[451,"haar_lib::algo::enumerate_bitset::subset_asc"],[452,"haar_lib::algo::enumerate_bitset::subset_between"],[453,"haar_lib::algo::enumerate_bitset::subset_desc"],[454,"haar_lib::algo::enumerate_bitset::subset_size_k"],[455,"haar_lib::algo::enumerate_bitset::superset_asc"],[456,"haar_lib::algo::enumerate_bitset::superset_desc"],[457,"haar_lib::algo::imos_1d"],[469,"haar_lib::algo::imos_2d"],[481,"haar_lib::algo::interval_scheduling"],[482,"haar_lib::algo::inversion_number"],[483,"haar_lib::algo::kmp"],[498,"haar_lib::algo::knapsack"],[503,"haar_lib::algo::knapsack::limited"],[504,"haar_lib::algo::knapsack::small_quantity"],[505,"haar_lib::algo::knapsack::small_value"],[506,"haar_lib::algo::knapsack::small_weight"],[507,"haar_lib::algo::knapsack::unlimited"],[508,"haar_lib::algo::lcs"],[509,"haar_lib::algo::lis"],[510,"haar_lib::algo::majority_vote"],[511,"haar_lib::algo::manacher"],[512,"haar_lib::algo::max_partial_sum"],[513,"haar_lib::algo::max_rect"],[515,"haar_lib::algo::merge"],[518,"haar_lib::algo::mo"],[530,"haar_lib::algo::num_subseq"],[531,"haar_lib::algo::parallel_binary_search"],[532,"haar_lib::algo::permutation"],[535,"haar_lib::algo::psp"],[560,"haar_lib::algo::rle"],[561,"haar_lib::algo::rolling_hash"],[583,"haar_lib::algo::sa"],[600,"haar_lib::algo::sliding_window"],[602,"haar_lib::algo::static_range_freq_query"],[613,"haar_lib::algo::static_range_inversions_query"],[625,"haar_lib::algo::subset_sum"],[627,"haar_lib::algo::subset_sum::count"],[628,"haar_lib::algo::subset_sum::limited"],[629,"haar_lib::algo::two_sat"],[643,"haar_lib::algo::zalgo"],[644,"haar_lib::ds"],[678,"haar_lib::ds::binary_trie"],[703,"haar_lib::ds::cht"],[736,"haar_lib::ds::cumulative_sum_1d"],[765,"haar_lib::ds::cumulative_sum_2d"],[794,"haar_lib::ds::disjoint_sparse_table"],[807,"haar_lib::ds::dual_segtree"],[823,"haar_lib::ds::fenwick"],[843,"haar_lib::ds::fenwick_add"],[860,"haar_lib::ds::fenwick_on_fenwick"],[891,"haar_lib::ds::foldable_deque"],[910,"haar_lib::ds::interval_heap"],[932,"haar_lib::ds::lazy_segtree"],[945,"haar_lib::ds::lazy_segtree_coeff"],[961,"haar_lib::ds::lazy_skew_heap"],[984,"haar_lib::ds::li_chao"],[1014,"haar_lib::ds::multiset"],[1039,"haar_lib::ds::partially_persistent_unionfind"],[1064,"haar_lib::ds::persistent_array"],[1076,"haar_lib::ds::persistent_queue"],[1094,"haar_lib::ds::persistent_stack"],[1113,"haar_lib::ds::qword_tree"],[1136,"haar_lib::ds::range_search_tree"],[1162,"haar_lib::ds::rollbackable_vector"],[1185,"haar_lib::ds::segtree"],[1206,"haar_lib::ds::segtree_beats"],[1227,"haar_lib::ds::segtree_linear_add"],[1241,"haar_lib::ds::segtree_on_segtree"],[1268,"haar_lib::ds::skew_heap"],[1289,"haar_lib::ds::sparse_table"],[1300,"haar_lib::ds::starry_sky_tree"],[1329,"haar_lib::ds::succinct_dict"],[1348,"haar_lib::ds::traits"],[1363,"haar_lib::ds::unionfind"],[1381,"haar_lib::ds::wavelet_matrix"],[1404,"haar_lib::geom"],[1520,"haar_lib::geom::area_intersection_circle_polygon"],[1521,"haar_lib::geom::area_intersection_circles"],[1522,"haar_lib::geom::area_polygon"],[1523,"haar_lib::geom::ccw"],[1549,"haar_lib::geom::circumcircle"],[1550,"haar_lib::geom::closest_pair"],[1551,"haar_lib::geom::common_tangent_circles"],[1552,"haar_lib::geom::convex"],[1553,"haar_lib::geom::convex_cut"],[1554,"haar_lib::geom::convex_diameter"],[1555,"haar_lib::geom::convex_hull"],[1572,"haar_lib::geom::dist_line_point"],[1573,"haar_lib::geom::dist_segment_point"],[1574,"haar_lib::geom::dist_segments"],[1575,"haar_lib::geom::incircle"],[1576,"haar_lib::geom::intersect_circle_line"],[1597,"haar_lib::geom::intersect_circle_segment"],[1622,"haar_lib::geom::intersect_circles"],[1650,"haar_lib::geom::intersect_line_segment"],[1673,"haar_lib::geom::intersect_segments"],[1696,"haar_lib::geom::point_in_polygon"],[1717,"haar_lib::geom::tangent_circle"],[1718,"haar_lib::graph"],[1825,"haar_lib::graph::articulation_points"],[1826,"haar_lib::graph::bellman_ford"],[1828,"haar_lib::graph::bfs"],[1829,"haar_lib::graph::bi_match"],[1841,"haar_lib::graph::biconnected"],[1843,"haar_lib::graph::bipartite"],[1844,"haar_lib::graph::bridges"],[1845,"haar_lib::graph::chinese_postman"],[1846,"haar_lib::graph::chu_liu_edmonds"],[1847,"haar_lib::graph::cycle"],[1848,"haar_lib::graph::cycle::directed_shortest"],[1849,"haar_lib::graph::detect_cycle"],[1850,"haar_lib::graph::dijkstra"],[1851,"haar_lib::graph::dinic"],[1868,"haar_lib::graph::enumerate_triangles"],[1869,"haar_lib::graph::eulerian"],[1871,"haar_lib::graph::eulerian::directed"],[1886,"haar_lib::graph::eulerian::undirected"],[1901,"haar_lib::graph::flow"],[1908,"haar_lib::graph::ford_fulkerson"],[1925,"haar_lib::graph::functional_graph"],[1967,"haar_lib::graph::hopcroft_karp"],[1993,"haar_lib::graph::kruskal"],[1994,"haar_lib::graph::lowlink"],[2014,"haar_lib::graph::max_independent_set"],[2015,"haar_lib::graph::min_cost_flow"],[2030,"haar_lib::graph::prim"],[2031,"haar_lib::graph::pseudo_tree"],[2043,"haar_lib::graph::scc"],[2055,"haar_lib::graph::tsort"],[2056,"haar_lib::graph::tsp"],[2057,"haar_lib::graph::two_edge"],[2058,"haar_lib::graph::warshall_floyd"],[2059,"haar_lib::graph::yen"],[2061,"haar_lib::grid"],[2122,"haar_lib::grid::to_graph"],[2123,"haar_lib::macros"],[2139,"haar_lib::math"],[2165,"haar_lib::math::bell_number"],[2166,"haar_lib::math::berlekamp_massey"],[2167,"haar_lib::math::binomial_coefficient"],[2195,"haar_lib::math::convolution"],[2202,"haar_lib::math::convolution::conv_and"],[2203,"haar_lib::math::convolution::conv_or"],[2204,"haar_lib::math::convolution::mobius_sub"],[2205,"haar_lib::math::convolution::mobius_super"],[2206,"haar_lib::math::convolution::subset_conv"],[2207,"haar_lib::math::convolution::zeta_sub"],[2208,"haar_lib::math::convolution::zeta_super"],[2209,"haar_lib::math::count_coprime"],[2210,"haar_lib::math::crt"],[2212,"haar_lib::math::divisor"],[2214,"haar_lib::math::enumerate_quotients"],[2232,"haar_lib::math::ext_gcd"],[2233,"haar_lib::math::factorial"],[2259,"haar_lib::math::factorial_prime_factor"],[2260,"haar_lib::math::factorize"],[2262,"haar_lib::math::factorize::sieve"],[2273,"haar_lib::math::factorize::trial"],[2274,"haar_lib::math::ff"],[2277,"haar_lib::math::ff::const_modint"],[2329,"haar_lib::math::ff::modint"],[2383,"haar_lib::math::ff::traits"],[2393,"haar_lib::math::gcd_lcm"],[2398,"haar_lib::math::linalg"],[2405,"haar_lib::math::linalg::determinant_mod_2"],[2406,"haar_lib::math::linalg::determinant_p"],[2407,"haar_lib::math::linalg::gaussian_elim_mod_2"],[2408,"haar_lib::math::linalg::inverse_mod_2"],[2409,"haar_lib::math::linalg::inverse_p"],[2410,"haar_lib::math::linalg::matrix"],[2438,"haar_lib::math::linalg::square_matrix"],[2471,"haar_lib::math::miller_rabin"],[2472,"haar_lib::math::mod_ops"],[2478,"haar_lib::math::mod_ops::enum_inv"],[2479,"haar_lib::math::mod_ops::inv"],[2480,"haar_lib::math::mod_ops::inv_p"],[2481,"haar_lib::math::mod_ops::log"],[2482,"haar_lib::math::mod_ops::pow"],[2483,"haar_lib::math::mod_ops::sqrt"],[2484,"haar_lib::math::montmort"],[2485,"haar_lib::math::nim_product"],[2489,"haar_lib::math::prime_test"],[2491,"haar_lib::math::prime_test::eratosthenes"],[2502,"haar_lib::math::prime_test::traits"],[2504,"haar_lib::math::primitive_root"],[2505,"haar_lib::math::rational"],[2531,"haar_lib::math::sum_floor_linear"],[2532,"haar_lib::math::sum_of_exponential_times_polynomial_limit"],[2533,"haar_lib::math::totient"],[2535,"haar_lib::math::totient_sum"],[2536,"haar_lib::misc"],[2539,"haar_lib::misc::dice"],[2566,"haar_lib::misc::paren"],[2567,"haar_lib::misc::parse_paren"],[2597,"haar_lib::misc::parse_paren::Elem"],[2600,"haar_lib::testtools"],[2601,"haar_lib::traits"],[2603,"haar_lib::traits::num"],[2607,"haar_lib::traits::one_zero"],[2613,"haar_lib::tree"],[2687,"haar_lib::tree::centroid"],[2688,"haar_lib::tree::depth_query"],[2701,"haar_lib::tree::euler_tour"],[2713,"haar_lib::tree::hld"],[2734,"haar_lib::tree::lca"],[2747,"haar_lib::tree::rerooting"],[2758,"haar_lib::tree::rooted_isomorphism"],[2759,"haar_lib::tree::rooting"],[2760,"haar_lib::tree::tree_dp"],[2771,"haar_lib::tree::utils"],[2775,"haar_lib::utils"],[2786,"haar_lib::utils::bits"],[2787,"haar_lib::utils::bitset"],[2811,"haar_lib::utils::fastio"],[2835,"haar_lib::utils::join_str"],[2837,"haar_lib::utils::linear"],[2854,"haar_lib::utils::num_inf"],[2880,"haar_lib::utils::swap"],[2881,"haar_lib::utils::total_f64"],[2909,"haar_lib::utils::transpose"],[2912,"haar_lib::utils::xor_shift"],[2927,"haar_lib::utils::yesno"]],"d":["代数的構造","","","","","","データ構造","","","幾何","","","グラフ一般に関するもの","","","","","","macro_exportされたmacro置き場","数学","","","分類を放置しているもの","","","…","","","","","","木に関するもの","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","二分探索","","座標圧縮","","","","","区間スケジューリング問題","転倒数","Knuth-Morris-Pratt法","ナップサック問題","最長共通部分列","最長増加部分列","Boyer-Moore majority vote algorithm","","最大連続部分和","","","","相異なる部分列の総数","並列二分探索","","Project Selection Problem","Run Length Encoding","","","スライド最小値","配列に対する範囲頻度取得クエリ","範囲転倒数取得クエリ","部分和問題","","","lower_bound, upper_boundの組を求める。","x以上となる最小のindexを求める。","xを超える最小のindexを求める。","","","","","","","二分探索","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","<code>i</code>番目の値を返す。","<code>value</code>が何番目の値(0-index)かを返す。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","…","数列の転倒数を計算する。","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","個数制限付きナップサック問題","要素数が小さいナップサック問題","価値の総和が小さいナップサック問題","容量が小さいナップサック問題","個数制限無しナップサック問題","列a, bの最長共通部分列の一つを求める。","列の最長増加部分列の一つを求める。","","","…","…","…","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","返り値<code>ret</code>に対して、<code>ret[i]</code>は<code>a[0..i]</code>…","","","","","Project Selection Problem","","","","","Returns the argument unchanged.","頂点iが青ならばcの利益を得る。","頂点iとjがともに青ならばcの利益を得る。","頂点iとjがともに赤ならばcの利益を得る。","頂点iが赤ならばcの利益を得る。","頂点iが赤ならば、頂点jも赤…","Calls <code>U::from(self)</code>.","頂点iは青でなければならない。","頂点iは赤でなければならない。","","頂点iが青ならばcの損失になる。","頂点iとjが異なる色ならばcの損失となる。","頂点iが赤ならばcの損失になる。","頂点iが赤かつ頂点jが青…","must be制約を破った場合、<code>None</code>…","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","…","…","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Time Complexity $O(|a|)$","Time Complexity $O(log |a|)$","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","部分和問題 …","…","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Convex Hull Trick","1次元累積和","2次元累積和","半群の列の区間演算を行う(O(1))","","","","","","","","係数乗算付き区間加算区間総和遅延セグ木","遅延加算付き融合可能ヒープ","Li-Chao tree","","部分永続UnionFind","永続配列","永続キュー","永続スタック","64分木","領域内の点を列挙する","ロールバック可能Vec","","","区間一次関数加算セグメントツリー","","融合可能ヒープ","冪等性と結合性をもつ列の区間取得(O(1))","区間加算・区間Max(Min)","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","…","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","…","","","","","","","","","","","","","","","","","","","","","","","Time complexity O(1)","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Time Complexity O(1)","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","使用する点を登録する。","","","","","","","","","","","Time Complexity $O(\\\\log ^ 2 n)$","Time Complexity $O(\\\\log ^ 2 n)$","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Time Complexity $O(\\\\log ^ 2 n)$","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","時刻tでの状態","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","最新時点の状態","","","","Complexity","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","永続スタック","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","　0 ~ 16777215 ($2^24 - 1$) の値の集合を管理する","","","xを含むかどうかを判定する","","xを集合から削除する","Safety","Returns the argument unchanged.","xを集合に加える","Safety","Calls <code>U::from(self)</code>.","集合が空かどうかを判断する","集合に含まれている要素数を返す","最大値を返す","x以下で最大の値を返す","最小値を返す","x以上で最小の値を返す","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","範囲<code>l..r</code>に一次関数<code>ax + b</code>の値を加算する。(<code>x</code>…","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","[l, r) に含まれる<code>b</code>の個数","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","[0, index) に含まれる<code>b</code>の個数","nth(0-indexed)番目の<code>b</code>の位置","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","<code>index</code>番目の値を得る。","","","","","<code>range</code>に含まれる<code>value</code>の個数。","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>range</code>での最大値","<code>range</code>での最小値","","<code>range</code>で<code>lb</code>以上の最小値","<code>range</code>で<code>ub</code>未満の最大値","<code>range</code>でk(0-indexed)番目に小さい値。","<code>range</code>で<code>lb</code>以上<code>ub</code>未満の値の個数","[0, index)に含まれる<code>value</code>の個数。","<code>nth</code>(0-indexed)番目の<code>value</code>の位置。","","","","","","","","","","","","","","","","円と多角形の共通部分の面積","2つの円の共通部分の面積","多角形の面積","","","","","","","","","点と線分の位置関係","","三角形の外接円","","","","","","","","","最近点対","2つの円の共通接線","凸多角形の判定","凸多角形の直線での切断","凸多角形の直径","凸包","","","","","","","直線と点の距離","線分と点の距離","2つの線分間の距離","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","三角形の内接円","円と直線の位置関係","円と線分の位置関係","2つの円の位置関係","直線と線分の位置関係","2つの線分の位置関係","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","点と多角形の位置関係","","","","","","点を通る円の接線","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","関節点の列挙","負閉路を持つグラフの最短経路 (Bellman-Ford)","","二部マッチング","二重頂点連結分解","二部グラフ判定","","","","","","","","","橋の列挙","中国人郵便配達問題","有向グラフ上の最小有向全域木を求める","","","","","","","","","","有向グラフの閉路検出","非負重み付き最短経路 (Dijkstra)","最大流 (Dinic)","","","(準)Eulerグラフの判定","","","","","","","","最大流 (Ford-Fulkerson)","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","二部マッチング (Hopcroft-Karp)","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","最小全域木 (Kruskal)","","","最大独立集合","最小費用流","","","最小全域木 (Prim)","","","","強連結成分分解","","","","","","","","","","","","","","","","トポロジカルソート","巡回セールスマン問題","二重辺連結成分分解","","","","","","","","","全頂点間最短経路長","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","橋の列挙","Time complexity O(V ^ 2 * 2 ^ V)","有向グラフ上の最小有向全域木を求める","…","…","","Time complexity O((E + V) log V)","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","…","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","最大独立集合を求める","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Time complexity O(N)","","","Time complexity O(n ^ 3)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","グリッドをグラフに変換する","","","","","","","","","","","","","","","","","","","","","","中国剰余定理","約数列挙","","拡張ユークリッドの互除法","","$a!$の素因数pの個数を求める。","","","最大公約数・最小公倍数","","","mod mでの演算","","","","原始根","有理数","$\\\\sum_{i=0}^{n-1} \\\\lfloor \\\\frac{ai+b}{m} \\\\rfloor$","$\\\\sum_{i=0}^{\\\\infty} r^ii^d$","トーシェント関数","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Time complexity O(sqrt n)","Time complexity O(sqrt n)","","","","","","1以上N以下の自然数xについて<code>floor(N/x)</code>…","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","n個からk個とりだす組み合わせの個数 (nCk)","","nの階乗","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","nの階乗の逆元","Time complexity O(n)","n個からk個とりだす順列の個数 (nPk)","","","","","","$a!$の素因数pの個数を求める。","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","素数mod p上での行列式を求める。 $O(n^3)$","","","素数mod p上での逆行列を求める。 $O(n^3)$","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","0,1,..,nの素数mod pでの逆元を列挙する。","mod mでの逆元","素数mod pでの逆元","$a^x = b \\\\bmod m$を満たすxを求める。","$x^p \\\\bmod m$を求める。","$x^2 = a \\\\bmod p$を満たすxを一つ求める。","0,1,..,nの素数mod pでの逆元を列挙する。","mod mでの逆元","素数mod pでの逆元","$a^x = b \\\\bmod m$を満たすxを求める。","$x^p \\\\bmod m$を求める。","$x^2 = a \\\\bmod p$を満たすxを一つ求める。","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","$\\\\sum_{i=0}^{\\\\infty} r^ii^d$","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","括弧列が対応が取れているかを調べる","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","浮動小数点型","整数型","符号付きの数値型","非負の数値型","乗算についての単位元をもつ","","","加算についての単位元をもつ","","","","","","","","","","","","","","重心列挙","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","重軽分解","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","最小共通祖先","","","","","","","","全方位木DP","","","","根付き木に変換","","","","","","","木DP","","","","","","","","","","","","","","","","","","Tree depth query","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","重軽分解","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","演算は可換性を仮定する。","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","…","","","","","","全方位木DP","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","木の任意の2頂点の距離の最大値を求める。","…","…","…","","","","","","正の無限大、負の無限大をもつ数","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,97,97,97,97,97,97,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,26,26,26,27,26,27,26,27,26,27,26,26,27,27,26,27,27,27,27,26,27,26,27,26,27,26,27,26,27,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,0,0,0,0,0,0,0,0,32,0,31,211,33,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,47,47,0,47,47,0,47,47,47,47,47,47,212,212,0,0,49,49,51,49,51,49,49,51,49,51,49,51,51,49,51,49,51,51,51,49,49,51,51,49,51,49,51,49,51,49,51,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,54,54,54,54,54,54,54,54,54,54,0,57,57,57,57,57,57,57,57,57,57,57,0,0,0,58,58,58,58,58,58,58,58,58,58,58,58,58,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,62,62,62,62,62,62,62,62,62,62,0,0,0,0,0,0,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,0,0,0,67,69,67,69,67,69,67,69,67,67,69,67,67,69,67,69,67,69,67,69,0,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,0,0,0,72,72,72,72,72,72,72,72,72,72,0,73,73,73,73,73,73,73,73,73,73,73,0,0,0,0,0,74,74,74,74,74,74,74,74,74,74,74,74,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,0,0,79,79,0,77,79,77,79,77,79,77,79,77,79,79,77,79,77,79,77,77,77,79,77,79,77,79,77,79,77,79,77,0,0,0,0,81,82,81,82,81,82,82,82,82,81,82,82,81,82,81,82,81,82,81,82,81,82,81,81,82,0,0,0,0,83,84,83,84,83,84,84,84,84,83,84,84,83,84,83,84,83,84,83,84,83,84,83,83,84,0,0,0,86,86,86,86,86,86,86,86,86,86,0,0,0,88,88,88,88,88,88,88,88,88,88,88,88,88,0,0,0,0,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,0,0,0,0,92,92,92,92,92,92,92,92,92,92,92,92,92,0,0,93,93,94,93,94,93,93,94,93,94,93,94,94,93,94,93,94,93,93,94,93,94,93,94,93,94,94,93,94,0,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,0,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,0,0,98,98,98,98,98,98,98,98,98,98,98,0,0,0,0,100,100,100,100,100,100,100,100,100,100,100,100,0,0,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,0,0,106,106,0,104,104,104,106,104,106,106,106,106,106,104,106,104,106,104,104,106,104,106,104,106,104,106,104,106,0,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,0,0,108,108,109,108,109,108,109,108,109,109,108,108,108,109,109,108,109,108,109,108,109,108,109,0,110,110,110,110,110,110,110,110,110,110,110,0,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,0,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,0,0,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,0,0,114,115,114,115,114,114,114,114,114,115,114,115,114,114,115,114,115,114,115,114,115,114,115,114,0,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,0,0,0,0,0,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,0,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,0,0,0,121,121,121,121,121,121,121,121,121,121,121,0,0,122,123,122,123,122,122,122,122,122,123,123,122,123,122,122,122,123,122,123,122,123,122,123,123,122,0,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,0,125,125,125,125,125,125,125,125,125,125,0,0,126,126,0,0,0,128,126,128,126,126,126,128,128,126,128,126,128,126,128,126,128,126,128,126,128,128,126,0,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,0,0,0,0,213,214,215,0,216,217,216,213,214,215,217,0,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,0,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,0,0,0,0,132,133,132,132,132,132,0,0,0,134,132,133,135,134,132,133,135,0,135,0,134,132,133,135,134,132,133,135,0,0,0,0,0,0,132,133,132,133,135,133,0,0,0,132,132,133,134,132,133,135,132,133,135,134,132,133,135,133,134,134,0,0,0,0,0,0,134,132,133,135,133,133,134,134,132,134,134,133,135,132,133,134,0,132,133,135,133,132,0,133,134,132,133,135,134,132,133,135,134,132,133,135,134,132,133,135,132,133,134,132,133,135,0,0,0,0,137,137,137,137,137,137,137,0,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,0,0,0,0,0,0,0,138,138,138,138,138,138,0,138,138,0,138,138,138,138,138,138,0,0,0,0,139,0,139,139,139,139,139,139,139,139,139,139,0,139,139,139,139,139,139,139,139,140,0,140,140,140,140,140,140,140,140,140,140,140,140,0,140,140,140,140,140,140,140,140,140,140,141,141,141,141,0,141,141,141,141,141,141,141,141,141,141,141,141,0,141,141,141,141,141,141,141,141,141,141,142,0,142,142,142,142,142,142,142,142,142,142,142,0,142,142,142,142,142,142,142,142,142,143,0,143,143,143,143,143,143,143,143,143,143,0,143,143,143,143,143,143,143,143,143,143,144,144,144,0,144,144,144,144,144,144,144,144,144,144,144,0,144,144,144,144,144,0,0,0,0,0,0,0,146,147,147,0,0,0,0,0,0,149,145,148,147,149,145,148,147,0,0,0,149,145,148,147,149,145,148,147,0,0,0,0,147,0,0,147,147,0,149,145,148,147,0,146,149,149,145,148,147,149,0,0,149,149,145,148,147,147,0,147,0,0,0,149,147,0,0,146,149,0,146,149,149,149,145,148,147,149,145,148,147,149,145,148,147,0,0,0,149,145,148,147,149,145,148,147,0,146,149,149,0,0,0,0,0,0,154,154,154,154,154,154,154,154,154,154,154,0,0,0,0,0,0,0,0,0,0,0,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,0,0,0,0,157,157,157,157,157,157,157,157,157,157,157,157,157,157,0,158,158,158,158,158,158,158,158,158,158,158,158,158,158,153,0,153,153,153,153,153,0,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,162,0,0,0,162,162,160,160,161,162,160,161,162,160,162,162,162,162,160,161,162,161,160,161,162,161,161,160,161,162,160,161,162,160,161,162,160,161,162,160,161,162,0,0,163,163,164,163,164,164,164,164,163,164,163,163,164,163,163,164,163,164,163,164,163,164,163,164,0,0,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,0,0,165,165,165,165,165,165,165,165,165,165,165,165,165,165,0,0,166,166,166,166,166,166,0,166,166,166,166,0,167,167,167,167,167,167,167,167,167,167,167,0,0,0,0,0,0,168,168,0,0,168,0,168,168,168,169,168,170,169,168,170,169,168,170,169,168,170,169,168,168,168,169,168,169,168,170,169,168,170,170,169,168,170,170,170,169,169,168,170,0,169,168,170,169,168,170,169,168,170,169,168,170,169,168,170,169,169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,175,176,175,176,175,176,175,176,175,176,175,176,175,176,175,176,175,176,175,176,175,176,175,176,175,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,177,177,177,0,177,177,177,177,177,177,177,177,177,177,177,177,0,0,0,178,0,178,178,178,0,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,0,0,0,0,179,179,179,179,179,179,179,179,179,179,0,0,0,0,0,0,0,0,0,0,0,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,0,0,0,0,0,0,0,0,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,182,183,183,0,0,0,218,219,220,0,220,219,218,0,221,221,221,221,0,0,0,0,0,0,0,0,0,0,0,0,0,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,0,0,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,188,188,188,188,188,188,188,188,188,188,0,222,0,0,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,0,0,0,0,0,0,0,0,0,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,0,0,192,0,192,191,192,191,192,191,192,191,192,191,191,192,191,192,191,192,0,191,192,191,192,191,192,191,192,191,192,223,223,223,0,0,0,0,0,0,0,0,13,12,0,12,13,0,0,0,0,198,195,196,197,195,196,197,0,196,195,196,197,195,196,197,0,0,197,197,195,196,197,198,195,195,196,197,195,0,195,195,196,197,197,0,197,196,196,195,197,197,196,0,198,195,0,0,198,195,195,195,196,197,0,195,196,197,195,196,197,195,196,197,0,195,196,197,198,195,195,0,0,200,200,200,200,200,200,200,200,200,200,200,200,0,201,201,201,201,201,201,201,201,201,201,201,0,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,0,203,203,203,203,203,203,203,203,203,203,203,203,0,204,204,204,204,204,204,204,204,204,204,0,0,0,205,205,205,205,205,205,205,205,205,205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,0,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,0,224,0,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,152,152,0,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,0,0,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,225,0,225,0,210,210,210,210,210,210,210,210,210,210,210,210,210,210,0,226],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[]],[[]],[[]],[[]],0,[[]],[[]],[[[3,[2,2]]],[[3,[2,2]]]],[[]],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]],[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]],1],[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]]]],[[],[[3,[5,5]]]],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]],[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]]],[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]]]],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]]],[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]]]],[[]],[[]],[[],3],[[]],[[],9],[[],9],[[],10],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]],[0,[4,6,5,[8,[7]]]],[0,[4,6,5,[8,[7]]]]],[[0,[4,6,5,[8,[7]]]]]],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]]],[[0,[4,6,5,[8,[7]]]]]],[[]],0,[[]],[[]],[[[11,[2]]],[[11,[2]]]],[[]],[[],[[11,[5]]]],[[]],[[[11,[[0,[12,13,14]]]]]],[[]],[[],11],[[[11,[[0,[4,6,14]]]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[15,[2]]],[[15,[2]]]],[[]],[[],[[15,[5]]]],[[]],[[[15,[16]]]],[[[15,[17]]]],[[[15,[18]]]],[[[15,[19]]]],[[[15,[20]]]],[[[15,[21]]]],[[[15,[22]]]],[[[15,[1]]]],[[[15,[23]]]],[[[15,[24]]]],[[[15,[25]]]],[[[15,[7]]]],[[]],[[[15,[18]]]],[[[15,[23]]]],[[[15,[19]]]],[[[15,[21]]]],[[[15,[20]]]],[[[15,[16]]]],[[[15,[25]]]],[[[15,[7]]]],[[[15,[24]]]],[[[15,[1]]]],[[[15,[22]]]],[[[15,[17]]]],[[],15],[[[15,[20]]]],[[[15,[21]]]],[[[15,[22]]]],[[[15,[25]]]],[[[15,[23]]]],[[[15,[1]]]],[[[15,[18]]]],[[[15,[16]]]],[[[15,[24]]]],[[[15,[19]]]],[[[15,[7]]]],[[[15,[17]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[26,26],[27,27],[[]],[[]],[[26,28],29],[[]],[[]],[27],[[]],[[]],[27],[1,27],[27],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,[[]],[[]],[[[30,[2]]],[[30,[2]]]],[[]],[[]],[[[30,[31]]]],[[]],[32,[[30,[32]]]],[[[30,[33]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[34,[2]]],[[34,[2]]]],[[]],[[],[[34,[5]]]],[[]],[34],[[]],[[],34],[[[34,[[0,[35,14]]]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[36,[2]]],[[36,[2]]]],[[]],[[],[[36,[5]]]],[[]],[36],[[]],[[],36],[[[36,[[0,[35,14]]]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[37,[2]]],[[37,[2]]]],[[]],[[],[[37,[5]]]],[[]],[[[37,[22]]]],[[[37,[25]]]],[[[37,[23]]]],[[[37,[24]]]],[[[37,[18]]]],[[[37,[20]]]],[[[37,[38]]]],[[[37,[21]]]],[[[37,[7]]]],[[[37,[1]]]],[[[37,[39]]]],[[[37,[17]]]],[[[37,[16]]]],[[[37,[19]]]],[[]],[[],37],[[[37,[38]]]],[[[37,[24]]]],[[[37,[7]]]],[[[37,[19]]]],[[[37,[25]]]],[[[37,[39]]]],[[[37,[23]]]],[[[37,[21]]]],[[[37,[17]]]],[[[37,[18]]]],[[[37,[20]]]],[[[37,[16]]]],[[[37,[1]]]],[[[37,[22]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[40,[2]]],[[40,[2]]]],[[]],[[],[[40,[5]]]],[[]],[[[40,[39]]]],[[[40,[20]]]],[[[40,[24]]]],[[[40,[21]]]],[[[40,[16]]]],[[[40,[22]]]],[[[40,[7]]]],[[[40,[1]]]],[[[40,[38]]]],[[[40,[19]]]],[[[40,[17]]]],[[[40,[18]]]],[[[40,[23]]]],[[[40,[25]]]],[[]],[[[40,[18]]]],[[[40,[22]]]],[[[40,[24]]]],[[[40,[25]]]],[[[40,[23]]]],[[[40,[39]]]],[[[40,[38]]]],[[[40,[20]]]],[[],40],[[[40,[21]]]],[[[40,[16]]]],[[[40,[18]]]],[[[40,[24]]]],[[[40,[38]]]],[[[40,[7]]]],[[[40,[25]]]],[[[40,[39]]]],[[[40,[23]]]],[[[40,[17]]]],[[[40,[1]]]],[[[40,[22]]]],[[[40,[20]]]],[[[40,[19]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],0,[[]],[[]],[[[41,[2]]],[[41,[2]]]],[[]],[[],[[41,[5]]]],[[]],[41],[[]],[[],41],[41],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[42,[2,2]]],[[42,[2,2]]]],[[]],[[[42,[[0,[4,5,[8,[[0,[6,5,[8,[7]]]]]]]],[0,[6,5,[8,[7]]]]]],1]],[[],[[42,[5,5]]]],[[[42,[[0,[4,5,[8,[[0,[6,5,[8,[7]]]]]]]],[0,[6,5,[8,[7]]]]]]]],[[[42,[[0,[4,5,[8,[[0,[6,5,[8,[7]]]]]]]],[0,[6,5,[8,[7]]]]]]]],[[]],[[]],[[],42],[[]],[[],9],[[],9],[[],10],[[[42,[[0,[4,5,[8,[[0,[6,5,[8,[7]]]]]]]],[0,[6,5,[8,[7]]]]]]]],[[[42,[[0,[4,5,[8,[[0,[6,5,[8,[7]]]]]]]],[0,[6,5,[8,[7]]]]]]]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[35],[35,1],[35,1],0,0,0,0,[[]],[[]],[[[0,[14,43,4,44,45,[8,[19]]]],[0,[14,43,4,44,45,[8,[19]]]],46],[[47,[[0,[14,43,4,44,45,[8,[19]]]]]]]],[[]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,[[[49,[[0,[2,35,48]]]],[0,[2,35,48]]]],[[[49,[[0,[2,35,48]]]],50]],[[]],[[]],[[]],[[]],[[[49,[[0,[2,35,48]]]]],[[51,[[0,[2,35,48]]]]]],[[[51,[2]]],[[51,[2]]]],[[[49,[2]]],[[49,[2]]]],[[]],[[]],[[[51,[[0,[2,35,48]]]],50],52],[[[51,[[0,[2,35,48]]]],50],52],[[],[[49,[5]]]],[[]],[[]],[[[51,[[0,[2,35,48]]]],1],[[0,[2,35,48]]]],[[[51,[[0,[2,35,48]]]],[0,[2,35,48]]],1],[[]],[[]],[[],[[49,[[0,[2,35,48]]]]]],[[[51,[[0,[2,35,48]]]]],1],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],[[],1],0,0,0,0,0,0,0,[21,52],[21,52],[[21,21],52],[21,52],[[21,21],52],[[21,21],52],[[21,21],52],0,[[]],[[]],[[[54,[[0,[14,53,13,4,44]]]]],[[55,[[0,[14,53,13,4,44]]]]]],[[]],[[]],[1,[[54,[[0,[14,53,13,4,44]]]]]],[[],9],[[],9],[[],10],[[[54,[[0,[14,53,13,4,44]]]],[56,[1]],[0,[14,53,13,4,44]]]],[[]],0,[[]],[[]],[[[57,[[0,[14,53,13,4,44]]]]],[[55,[[55,[[0,[14,53,13,4,44]]]]]]]],[[]],[[]],[[1,1],[[57,[[0,[14,53,13,4,44]]]]]],[[],9],[[],9],[[],10],[[[57,[[0,[14,53,13,4,44]]]],[56,[1]],[56,[1]],[0,[14,53,13,4,44]]]],[[]],[[],[[55,[1]]]],[[],7],0,[[]],[[]],[[[58,[2]]],[[58,[2]]]],[[]],[[[58,[59]],28],29],[[]],[[]],[[[58,[[0,[60,2]]]]],[[55,[1]]]],[[[55,[[0,[60,2]]]]],[[58,[[0,[60,2]]]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,[1,[[0,[5,[8,[1]],14,35,4,6]]]],[[[0,[5,14,4,35]]],[[0,[5,14,4,35]]]],[7,1],[1,[[0,[5,14,35,4]]]],[1,[[0,[5,14,35,4]]]],[[],[[55,[[0,[14,60]]]]]],[[],[[55,[1]]]],[[],61],[[],[[55,[1]]]],[[],61],[[[0,[14,60]]],1],[[]],[1],[1],[[[55,[[0,[35,14]]]],[55,[[0,[35,14]]]]],[[55,[[0,[35,14]]]]]],0,[[62,1,1]],[[]],[[]],[[]],[[]],[[1,1,[63,[46]],[63,[46]],[63,[46]],[63,[46]],[63,[46]]],62],[62],[[],9],[[],9],[[],10],[[]],[7,[[55,[7]]]],[[1,1,64,64,64],[[55,[1]]]],[[],65],[[[55,[[0,[35,14]]]]],52],[[],65],0,[[]],[[]],[66,66],[[]],[[]],[[66,1,7]],[[66,1,1,7]],[[66,1,1,7]],[[66,1,7]],[[66,1,1]],[[]],[[66,1]],[[66,1]],[1,66],[[66,1,7]],[[66,1,1,7]],[[66,1,7]],[[66,1,1,7]],[66,[[61,[23]]]],[[]],[[],9],[[],9],[[],10],[[]],[[],55],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[67,68],7],[[69,[56,[1]]],7],[[67,68],69],[[]],[[]],[[1,7,7],67],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,[[]],[[]],[70,70],[[]],[[70,28],29],[[]],[[70,1]],[[]],[70,[[55,[1]]]],[68,70],[[]],[70],[[],9],[[],9],[[],10],[[]],[1,[[55,[[0,[35,14]]]]]],[1,[[55,[[0,[35,14]]]]]],0,[[]],[[]],[[]],[[]],[[[55,[[0,[71,48]]]]],[[72,[[0,[71,48]]]]]],[[[72,[[0,[71,48]]]],[56,[1]],[0,[71,48]]],1],[[],9],[[],9],[[],10],[[]],0,[[73,[56,[1]]]],[[]],[[]],[[]],[[]],[[],73],[73,[[55,[7]]]],[[],9],[[],9],[[],10],[[]],0,0,[[1,1],[[55,[[0,[14,[8,[1]],4]]]]]],[[1,1],[[55,[65]]]],0,[[74,22,22]],[[74,22,22]],[[]],[[]],[[]],[[]],[1,74],[[74,22,22]],[74,[[61,[[55,[65]]]]]],[[],9],[[],9],[[],10],[[]],[[],[[55,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[75,75],[[]],[[75,7],1],[[],75],[[75,7],[[61,[1]]]],[[75,28],29],[[]],[[75,7],1],[[]],[75,65],[75,1],[[75,7],1],[[75,7],[[61,[7]]]],[[75,7],[[61,[7]]]],[[],75],[[]],[75,[[55,[7]]]],[[],9],[[],9],[[],10],[[75,7],1],[[]],0,0,0,0,0,[[[77,[76]],[78,[76]]]],[[]],[[]],[[]],[[]],[79,79],[[[77,[2]]],[[77,[2]]]],[[]],[[]],[[79,79],65],[[79,28],29],[[[77,[59]],28],29],[[]],[[]],[[]],[[]],[79,[[77,[76]]]],[[[77,[76]],76],76],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[[81,[80]]],[[82,[80]]]],[[[82,[[0,[2,80]]]]],[[82,[[0,[2,80]]]]]],[[]],[[[82,[[0,[59,80]]]],28],29],[[[82,[80]],[56,[1]]]],[[]],[[]],[[[82,[80]],1]],[[]],[[]],[[1,80],[[81,[80]]]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[[81,[80]],1,14]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[[83,[80]]],[[84,[80]]]],[[[84,[[0,[2,80]]]]],[[84,[[0,[2,80]]]]]],[[]],[[[84,[[0,[59,80]]]],28],29],[[[84,[80]],[56,[1]],[56,[1]]]],[[]],[[]],[[[84,[80]]]],[[]],[[]],[[1,1,80],[[83,[80]]]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[[83,[80]],1,1,14]],[[]],[[]],0,0,0,[[]],[[]],[[[86,[85]],[56,[1]]]],[[]],[[]],[[[55,[2]],85],[[86,[85]]]],[[],9],[[],9],[[],10],[[]],0,0,0,[[]],[[]],[[]],[[[88,[87]]]],[[[88,[87]],1],2],[[]],[[1,87],[[88,[87]]]],[[[88,[87]]],[[55,[2]]]],[[],9],[[],9],[[],10],[[[88,[87]],[56,[1]]]],[[]],0,0,0,0,[[]],[[]],[[[89,[[0,[2,80]]]]],[[89,[[0,[2,80]]]]]],[[]],[[],[[89,[[0,[5,80]]]]]],[[[89,[80]],[56,[1]]]],[[[89,[80]],[90,[1]]]],[[]],[[]],[[1,80],[[89,[80]]]],[[]],[[],9],[[],9],[[],10],[[[89,[80]],1,2]],[[]],0,0,0,0,[[[92,[91]],1,91]],[[]],[[]],[[[92,[91]],[90,[1]]]],[[[92,[91]],[56,[1]]]],[[]],[[]],[1,[[92,[91]]]],[[[92,[91]],1,91]],[[],9],[[],9],[[],10],[[]],0,0,[[93,23,23]],[[]],[[]],[[]],[[]],[[93,14],[[94,[14]]]],[93,93],[[[94,[2]]],[[94,[2]]]],[[]],[[]],[[],93],[[[94,[[0,[14,4,44]]]],[56,[23]],[56,[23]]],[[0,[14,4,44]]]],[[[94,[[0,[14,4,44]]]],[90,[23]],[90,[23]]],[[0,[14,4,44]]]],[[]],[[]],[[]],[[]],[[],93],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[[94,[[0,[14,4,44]]]],23,23,[0,[14,4,44]]]],[[]],[[]],0,[[[95,[85]]],[[61,[2]]]],[[]],[[]],[[[95,[85]]],[[61,[2]]]],[[]],[[[95,[85]]],[[61,[2]]]],[[]],[[[95,[85]]],65],[[[95,[85]]],1],[85,[[95,[85]]]],[[[95,[85]]],[[61,[2]]]],[[[95,[85]]],[[61,[2]]]],[[[95,[85]],2]],[[[95,[85]],2]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[96,[2]]],[[96,[2]]]],[[]],[[],[[96,[5]]]],[[[96,[59]],28],29],[[]],[[]],[[[96,[35]]],65],[[[96,[35]]],1],[[[96,[35]]],[[61,[35]]]],[[[96,[35]]],[[61,[35]]]],[[],[[96,[35]]]],[[[96,[35]]],[[61,[35]]]],[[[96,[35]]],[[61,[35]]]],[[[96,[35]],35]],[[]],[[],9],[[],9],[[],10],[[]],0,0,[[]],[[]],[[[98,[[0,[2,48]],[0,[2,48]],[0,[2,97]]]],[56,[1]]],[[0,[2,48]]]],[[]],[[]],[[1,[0,[2,97]]],[[98,[[0,[2,48]],[0,[2,48]],[0,[2,97]]]]]],[[],9],[[],9],[[],10],[[[98,[[0,[2,48]],[0,[2,48]],[0,[2,97]]]],[56,[1]],[0,[2,48]]]],[[]],0,0,0,0,[[]],[[]],[[[100,[99]],[56,[1]]],99],[[]],[[[100,[99]],[55,[99]]]],[[]],[[1,[55,[99]]],[[100,[99]]]],[[],9],[[],9],[[],10],[[[100,[99]],[56,[1]],99]],[[]],0,0,[[[102,[101]],101]],[[]],[[]],[[[102,[2]]],[[102,[2]]]],[[]],[[],[[102,[5]]]],[[[102,[59]],28],29],[[]],[[]],[[[102,[101]]],65],[[[102,[101]]],1],[[[102,[101]],[102,[101]]]],[[],[[102,[101]]]],[[[102,[101]]],[[61,[101]]]],[[[102,[101]]],[[61,[101]]]],[[[102,[101]],101]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,[[[104,[103]],[78,[103]]]],[[[104,[103]],[78,[103]],[105,[103]]]],[[]],[[]],[[]],[[]],[106,106],[[]],[[106,106],65],[[106,28],29],[[]],[[]],[[]],[[]],[[[55,[103]],106],[[104,[103]]]],[[[104,[103]],103],[[61,[103]]]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,[[]],[[]],[[[107,[2]]],[[107,[2]]]],[[]],[[[107,[[0,[35,48,2]]]],[0,[35,48,2]]],65],[[[107,[[0,[35,48,2]]]],[0,[35,48,2]]],1],[[],[[107,[5]]]],[[[107,[[0,[35,48,2]]]]],[[61,[[0,[35,48,2]]]]]],[[[107,[59]],28],29],[[]],[[[107,[[0,[35,48,2]]]],[0,[35,48,2]]]],[[]],[[[107,[[0,[35,48,2]]]]],65],[[[107,[[0,[35,48,2]]]]],[[61,[[0,[35,48,2]]]]]],[[[107,[[0,[35,48,2]]]]],1],[[],[[107,[[0,[35,48,2]]]]]],[[[107,[[0,[35,48,2]]]]],[[61,[[0,[35,48,2]]]]]],[[[107,[[0,[35,48,2]]]]],[[61,[[0,[35,48,2]]]]]],[[[107,[[0,[35,48,2]]]],[0,[35,48,2]]],65],[[]],[[],9],[[],9],[[],10],[[]],0,0,[[108,1],109],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[109,1,1],65],[108,109],[[108,1,1]],[1,108],[[109,1],1],[[109,1],1],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,[[]],[[]],[[]],[[[110,[2]],1],2],[[]],[[1,2],[[110,[2]]]],[[[110,[2]],1,2],[[110,[2]]]],[[],9],[[],9],[[],10],[[]],0,[111,61],[[]],[[]],[[],[[111,[5]]]],[[[111,[59]],28],29],[[]],[111,61],[[]],[111,65],[111,1],[[],111],[111,[[61,[111]]]],[111,111],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[112,[2]]],[[112,[2]]]],[[]],[[],[[112,[5]]]],[[[112,[59]],28],29],[[]],[[]],[112,52],[[],112],[112,61],[112,[[61,[112]]]],[112,112],[[]],[[],9],[[],9],[[],10],[[]],0,0,[[]],[[]],[[113,21],65],[[],113],[[113,21],65],[[113,21]],[[]],[[113,21],65],[[113,21]],[[]],[113,65],[113,1],[113,[[61,[21]]]],[[113,21],[[61,[21]]]],[113,[[61,[21]]]],[[113,21],[[61,[21]]]],[[],113],[[],9],[[],9],[[],10],[[]],0,0,[[[114,[[0,[14,35]]]],[0,[14,35]],[0,[14,35]]]],[[]],[[]],[[]],[[]],[[[114,[[0,[14,35]]]]],[[115,[[0,[14,35]]]]]],[[[114,[2]]],[[114,[2]]]],[[]],[[],[[114,[5]]]],[[]],[[]],[[]],[[]],[[],[[114,[[0,[14,35]]]]]],[[[115,[[0,[14,35]]]]],55],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,[[[116,[2]],1,2]],[[]],[[]],[[[116,[2]]],[[116,[2]]]],[[]],[[],[[116,[5]]]],[[[116,[59]],28],29],[[]],[55,116],[[116,1]],[[]],[[[116,[2]]],65],[[[116,[2]]],1],[[],[[116,[2]]]],[[[116,[2]]],[[61,[2]]]],[[[116,[2]],2]],[[[116,[2]]],65],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,[[[117,[87]],1,2]],[[]],[[]],[[[117,[[0,[2,87]]]]],[[117,[[0,[2,87]]]]]],[[]],[[[117,[87]],[118,[1]]]],[[]],[[[117,[87]],1]],[[]],[[1,87],[[117,[87]]]],[[]],[[],9],[[],9],[[],10],[[[117,[87]],1,2]],[[]],0,[[119,[56,[1]],23]],[[]],[[]],[[119,[56,[1]],23]],[[119,[56,[1]],23]],[119,119],[[]],[[119,28],29],[[]],[[119,[56,[1]]],23],[[119,[56,[1]]],23],[[119,[56,[1]]],23],[[]],[1,119],[[[55,[23]]],119],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,[[]],[[]],[[]],[[[121,[120]],1]],[[]],[1,[[121,[120]]]],[[],9],[[],9],[[],10],[[[121,[120]],[56,[1]],[78,[120]]]],[[]],0,0,[[122,23,23]],[[]],[[]],[[]],[[]],[[122,[0,[87,2]]],[[123,[[0,[87,2]]]]]],[122,122],[[]],[[],122],[[[123,[87]],[56,[23]],[56,[23]]],2],[[]],[[]],[[]],[[]],[[],122],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[[123,[87]],23,23,2]],[[]],[[]],0,[[]],[[]],[[[124,[2]]],[[124,[2]]]],[[]],[[],[[124,[5]]]],[[[124,[59]],28],29],[[]],[[]],[[[124,[35]]],65],[[[124,[35]]],1],[[[124,[35]],[124,[35]]]],[[],[[124,[35]]]],[[[124,[35]]],[[61,[35]]]],[[[124,[35]]],[[61,[35]]]],[[[124,[35]],35]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[125,[33]],[56,[1]]]],[[]],[[]],[[[55,[[0,[2,5]]]],33],[[125,[33]]]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[126,126],[[]],[[[128,[127]],[56,[1]]]],[[]],[[]],[[]],[[]],[[1,126],[[128,[127]]]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[[128,[127]],[56,[1]],127]],[[]],[[]],0,[[129,1],7],[[]],[[]],[129,129],[[]],[[129,[56,[1]],65],1],[[]],[[]],[129,65],[129,1],[[[55,[65]]],129],[[129,1,65],1],[[129,1,65],[[61,[1]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[130,1],[[]],[130,[[55,[[55,[1]]]]]],[[]],[[130,1,1],65],[[130,1,1],1],[1,130],[[1,55,[63,[46]]],130],[[130,1],1],[[130,1],1],[[],9],[[],9],[[],10],[[130,1],61],[[]],0,[[131,1],7],[[]],[[]],[131,131],[[]],[[131,[118,[1]],7],1],[[]],[[]],[[131,[118,[1]]],[[61,[7]]]],[[131,[118,[1]]],[[61,[7]]]],[[[55,[7]]],131],[[131,[0,[[118,[1]],2]],7],[[61,[7]]]],[[131,[0,[[118,[1]],2]],7],[[61,[7]]]],[[131,[118,[1]],1],[[61,[7]]]],[[131,[0,[[118,[1]],2]],7,7],1],[[131,1,7],1],[[131,1,7],[[61,[1]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,[132,38],[133,38],[132,38],[[132,132],132],[[132,132],38],[[132,132],38],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[134,134],[132,132],[133,133],[135,135],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[132,132],38],[[133,133],38],[[],132],[[],133],[[],135],[133,132],0,0,0,[[132,38],132],[[132,132],38],[[133,133],38],[[134,38,38],65],[[132,132,134],65],[[133,133,134],65],[[135,135,134],65],[[132,28],29],[[133,28],29],[[135,28],29],[[]],[[]],[[]],[[]],0,[[134,38,38],65],[[134,38,38],65],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[133,133,134],65],[[133,133,134],65],[[134,38,38],65],[[134,38,38],65],[[132,38],132],[[134,38,38],65],[38,134],[[132,132],133],[[132,38],135],[132,132],[133,132],[[134,38,38],[[61,[136]]]],0,[[38,38],132],[[133,132],132],0,[[133,132],132],[[132,132],132],0,0,[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[],10],[132,132],[133,132],[[]],[[]],[[]],[[]],[[135,134],38],[[135,135,134],38],[[],38],0,0,0,0,0,0,[[]],[[]],[[132,132,132,134],137],[137,65],[137,137],[[]],[137,65],[[137,137],65],[[137,28],29],[[]],[[]],[137,65],[137,65],[137,65],[[]],[137,25],[[],9],[[],9],[[],10],[[]],[[132,132,132],135],[[[55,[132]],134],61],[[135,135,134],[[55,[132]]]],[134,65],[[133,134]],[[[55,[132]]],38],0,0,0,[[]],[[]],[138,138],[[]],[[[55,[132]],134],[[55,[132]]]],[[138,138],65],[[]],[[[55,[132]],138,134],[[55,[132]]]],[[]],[[]],[[],9],[[],9],[[],10],[[]],[[133,132],38],[[133,132],38],[[133,133],38],[[132,132,132],135],0,0,0,0,[[]],[[]],[139,139],[[]],[139,65],[[139,139],65],[[139,28],29],[[]],[[135,133,134]],[[]],[139,65],[139,65],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,0,[[]],[[]],[140,140],[[]],[[140,140],65],[[140,28],29],[[]],[140,65],[[135,133,134]],[[]],[140,65],[140,65],[140,65],[[]],[[],9],[[],9],[140,65],[[],10],[[]],0,0,0,0,0,0,0,[[]],[[]],[141,65],[141,141],[[]],[[141,141],65],[[141,28],29],[[]],[141,65],[141,65],[[135,135,134]],[141,65],[[]],[141,[[61,[21]]]],[141,65],[141,65],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,[[]],[[]],[142,142],[[]],[142,65],[[142,142],65],[[142,28],29],[[]],[[133,133,134]],[[]],[142,65],[142,65],[142,65],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,[[]],[[]],[143,143],[[]],[[143,143],65],[[143,28],29],[[]],[[133,133,134]],[143,65],[[]],[143,65],[143,65],[143,65],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,[[]],[[]],[144,144],[[]],[[144,144],65],[144,65],[[144,28],29],[[]],[144,65],[[]],[144,65],[[132,134],144],[[]],[[],9],[[],9],[[],10],[[]],[[135,132,134],[[55,[132]]]],0,0,0,0,0,0,0,[[[147,[145,[0,[146,2]]]],[0,[146,2]]]],[[[147,[148,[0,[146,2]]]],[0,[146,2]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[149,[2,2]]],[[149,[2,2]]]],[145,145],[148,148],[[[147,[2,2]]],[[147,[2,2]]]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[[147,[148,[0,[146,2]]]],50]],[[[147,[145,[0,[146,2]]]],50]],0,[[[149,[59,59]],28],29],[[145,28],29],[[148,28],29],[[[147,[59,59]],28],29],0,[[],1],[[]],[[[149,[2]]],1],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[147,65],0,[147,1],0,0,0,[[1,1],149],[1,[[147,[150,[0,[146,2]]]]]],0,0,[[]],[[[149,[2]]],[[149,[2]]]],0,[[],1],[[[149,[2]]],1],0,[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,0,[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],0,[[]],[[[149,[2]]]],0,0,[151,[[55,[1]]]],0,[[[147,[150,146]],1],[[55,[[152,[[0,[14,35,5,4]]]]]]]],[[[147,[150,146]],50],[[55,[[61,[1]]]]]],0,[[[154,[153]],1,1]],[[]],[[]],[[]],[[]],[[[154,[153]]],7],[[1,1],[[154,[153]]]],[[],9],[[],9],[[],10],[[]],0,[151,55],[[[147,[148,146]]],[[55,[61]]]],[151,55],[[[147,[148,146]]],[[0,[13,14,35,4]]]],[[[147,[145,146]],1],[[55,[146]]]],0,[[[147,[145,146]],1],[[61,[[55,[146]]]]]],[[[147,[150,146]]],[[61,[[55,[146]]]]]],[[[147,[150,146]]],[[55,[[61,[[0,[4,14,35,13,155]]]]]]]],0,[[156,1,1]],[[]],[[]],[156,156],[[]],[[]],[[156,1],55],[[]],[[156,1,1]],[1,156],[156],[[]],[[],9],[[],9],[[],10],[[]],[[[147,[148,146]]],55],0,0,0,[[[157,[[0,[146,2]]]],[0,[146,2]]]],[[]],[[]],[[[157,[[0,[2,146]]]]],[[157,[[0,[2,146]]]]]],[[]],[[]],[[]],[1,[[157,[[0,[146,2]]]]]],[[[157,[[0,[146,2]]]]],61],[[]],[[],9],[[],9],[[],10],[[]],0,[[158,1,1]],[[]],[[]],[158,158],[[]],[[]],[[]],[1,158],[158,[[61,[[55,[1]]]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,[[1,1]],[1,55],[[1,1]],[1],[[]],0,[[159,1,1]],[[]],[[]],[159,159],[[]],[[]],[[159,1],55],[[]],[[159,1,1]],[1,159],[159],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,0,[[160,1,1]],[[]],[[]],[[]],[[]],[[]],[[]],[160,161],[162,162],[[]],[[162,162],65],[[162,28],29],[[]],[[]],[[]],[[161,1],1],[[]],[[]],[[]],[[161,1],162],[161,[[55,[[55,[1]]]]]],[1,160],[[161,1],1],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[]],[[]],[[]],0,0,[[163,1,1]],[[]],[[]],[[]],[[]],[164,164],[[]],[[164,28],29],[[]],[[]],[163,55],[[]],[[]],[163,21],[[1,1],163],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],[[[147,[148,[0,[2,146]]]]],[[55,[[0,[2,146]]]]]],0,0,[[]],[[]],0,[151,151],[[]],[[151,28],29],[[]],[[]],0,[[[147,[148,146]]],151],0,0,0,[[]],[[],9],[[],9],[[],10],[[]],[[[147,[148,146]]],[[55,[1]]]],0,[[165,1,1,7,23]],[[]],[[]],[165,165],[[]],[[]],[[]],[[165,1,1,7],[[9,[23]]]],[1,165],[[]],[[],9],[[],9],[[],10],[[]],[[[147,[148,146]]],[[55,[146]]]],0,[[]],[[]],[[]],0,0,[[]],[[[147,[148,146]]],166],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[]],[167,[[55,[[55,[1]]]]]],[[]],[[[147,[145,146]]],167],[167,[[55,[1]]]],[[],9],[[],9],[[],10],[[]],[[[147,[145,146]]],[[61,[[55,[1]]]]]],[[[147,[145,146]],1],[[61,[[0,[14,35,4]]]]]],[151,[[55,[[55,[1]]]]]],[[[147,[150,146]]],[[61,[[55,[[55,[[61,[[0,[4,14,35,13]]]]]]]]]]]],0,[[[147,[150,146]],1,1,1],[[55,[61]]]],0,0,0,0,0,0,0,0,[[168,168],168],[[]],[[]],[[]],[[]],[[]],[[]],[169,169],[168,168],[[[170,[2]]],[[170,[2]]]],[[]],[[]],[[]],[[],169],[[],168],0,0,[[169,169],65],[[168,168],65],[[169,28],29],[[168,28],29],[[[170,[59]],28],29],[[]],[[]],[[]],[[170,169]],[[]],[[]],[[]],[170,52],[170,52],[[169,168,1,1],[[61,[169]]]],[[1,1],169],[[22,22],168],[50,170],0,[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[]],[[]],[[]],0,0,[[1,1,46,46],[[147,[145,[149,[2]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[55,[[55,[[0,[171,[8,[1]]]]]]]]]],[[[55,[[0,[[8,[7]],5,14,60,4,45,6,172,173,174]]]]],[[55,[[0,[[8,[7]],5,14,60,4,45,6,172,173,174]]]]]],0,0,[[]],[[]],[[]],[[]],[175,175],[176,176],[[]],[[]],[[]],[[]],[[175,7,7],7],[[176,7,7],7],[[]],[[]],[[7,7],175],[7,176],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,0,0,0,0,[[[55,[[0,[14,4,44,6]]]],[55,[[0,[14,4,44,6]]]]],[[55,[[0,[14,4,44,6]]]]]],[[[55,[[0,[14,4,44,6]]]],[55,[[0,[14,4,44,6]]]]],[[55,[[0,[14,4,44,6]]]]]],[[]],[[]],[[[55,[[0,[14,5,4,44,6]]]],[55,[[0,[14,5,4,44,6]]]]],[[55,[[0,[14,5,4,44,6]]]]]],[[]],[[]],[[7,7],7],[[],61],[[],61],[7,7],[7,[[55,[7]]]],0,[[]],[[]],[177,177],[[]],[7,[[55,[177]]]],[[177,177],65],[[177,28],29],[[]],0,[[]],0,0,[[]],[[],9],[[],9],[[],10],[[]],[[7,7]],0,0,[[[178,[[0,[171,[8,[1]]]]]],1,1],[[0,[171,[8,[1]]]]]],0,[[[178,[[0,[171,[8,[1]]]]]],1],[[55,[[0,[171,[8,[1]]]]]]]],[[]],[[]],0,[[[178,[[0,[171,[8,[1]]]]]],1],[[0,[171,[8,[1]]]]]],[[[178,[2]]],[[178,[2]]]],[[]],[[[178,[[0,[171,[8,[1]]]]]],1,1],[[0,[171,[8,[1]]]]]],[[],[[178,[5]]]],[[[178,[[0,[171,[8,[1]]]]]],1],[[0,[171,[8,[1]]]]]],[[[178,[59]],28],29],[[]],[[[178,[[0,[171,[8,[1]]]]]],1,1],[[0,[171,[8,[1]]]]]],[[]],[[[178,[[0,[171,[8,[1]]]]]],1],[[0,[171,[8,[1]]]]]],[1,[[178,[[0,[171,[8,[1]]]]]]]],[[[178,[[0,[171,[8,[1]]]]]],1,1],[[0,[171,[8,[1]]]]]],[[]],[[],9],[[],9],[[],10],[[]],[[7,7],7],0,0,0,[[]],[[]],[[179,1],[[55,[1]]]],[[]],[[]],[1,179],[[],9],[[],9],[[],10],[[]],[7,55],0,0,0,0,0,0,0,0,0,0,[[180,180],180],[[180,180]],[[]],[[]],[180,180],[[]],[[],180],[[180,180],180],[[180,180]],[[180,180],65],[[180,28],29],[[180,28],29],[[23,23],180],[1,180],[17,180],[20,180],[22,180],[18,180],[25,180],[[]],[16,180],[24,180],[7,180],[19,180],[23,180],[21,180],[68,[[9,[180]]]],[[]],[180,180],[[180,180],180],[[180,180]],[180,180],[21,180],[[]],[[180,7],180],[[180,180],180],[[180,180]],[52,180],[[]],[[],181],[[],9],[[],9],[[],10],[[]],[[]],0,0,0,0,0,0,0,0,[[[183,[182]],[183,[182]]],[[183,[182]]]],[[[183,[[0,[182,14]]]],[183,[[0,[182,14]]]]]],[[]],[[]],[[[183,[2]]],[[183,[2]]]],[[]],[[],[[183,[5]]]],[[[183,[182]],[183,[182]]],[[183,[182]]]],[[[183,[[0,[182,14]]]],[183,[[0,[182,14]]]]]],[[[183,[60]],[183,[60]]],65],[[[183,[182]],28],29],[[[183,[182]],28],29],[[23,23],[[183,[182]]]],[23,[[183,[182]]]],[21,[[183,[182]]]],[1,[[183,[182]]]],[16,[[183,[182]]]],[20,[[183,[182]]]],[17,[[183,[182]]]],[22,[[183,[182]]]],[25,[[183,[182]]]],[19,[[183,[182]]]],[[]],[7,[[183,[182]]]],[24,[[183,[182]]]],[18,[[183,[182]]]],[68,[[9,[[183,[182]]]]]],[[]],[[[183,[182]]],[[183,[182]]]],[[[183,[182]],[183,[182]]],[[183,[182]]]],[[[183,[[0,[182,14]]]],[183,[[0,[182,14]]]]]],[[[183,[182]]],[[183,[182]]]],[21,[[183,[182]]]],[[]],[[[183,[182]],7],[[183,[182]]]],[[[183,[182]],[183,[182]]],[[183,[182]]]],[[[183,[[0,[182,14]]]],[183,[[0,[182,14]]]]]],[52,[[183,[182]]]],[[]],[[],181],[[],9],[[],9],[[],10],[[],21],[[]],[[]],0,0,0,0,0,0,0,[[23,23]],[[]],[7],0,0,[[]],[[]],[[]],0,0,0,0,0,0,0,[[[55,[184]]],7],[[[55,[[55,[7]]]],7],7],[[[55,[184]]]],[[[55,[184]]],[[61,[[55,[184]]]]]],[[[55,[[55,[7]]]],7],[[61,[[55,[[55,[7]]]]]]]],0,[[[185,[[0,[14,4]]]],[185,[[0,[14,4]]]]],[[185,[[0,[14,4]]]]]],[[[185,[[0,[14,4]]]],[185,[[0,[14,4]]]]]],[[]],[[]],[[[185,[2]]],[[185,[2]]]],[[]],[[[185,[60]],[185,[60]]],65],[[]],[[[55,[[55,[[0,[14,5]]]]]]],[[185,[[0,[14,5]]]]]],[[[185,[[0,[14,5]]]],1,1],[[61,[[0,[14,5]]]]]],[[[185,[[0,[14,5]]]]],1],[[185,1]],[[]],[[[185,[[0,[14,5,4,6]]]],[185,[[0,[14,5,4,6]]]]],[[185,[[0,[14,5,4,6]]]]]],[[[185,[[0,[14,5,4,6]]]],[185,[[0,[14,5,4,6]]]]]],[[[185,[[0,[14,172]]]]],[[185,[[0,[14,172]]]]]],[[1,1],[[185,[[0,[14,5]]]]]],[[[185,[[0,[14,44]]]],[185,[[0,[14,44]]]]],[[185,[[0,[14,44]]]]]],[[[185,[[0,[14,44]]]],[185,[[0,[14,44]]]]]],[[]],[[[185,[[0,[14,5]]]]],[[55,[[55,[[0,[14,5]]]]]]]],[[[185,[[0,[14,5]]]]],[[185,[[0,[14,5]]]]]],[[],9],[[],9],[[],10],[[]],[[[185,[[0,[14,5]]]]],1],0,0,[[[187,[186]],[187,[186]]],[[187,[186]]]],[[[187,[186]],[187,[186]]]],[[]],[[]],[[[187,[2]]],[[187,[2]]]],[[]],[[[187,[60]],[187,[60]]],65],[[[187,[59]],28],29],[[]],[[[55,[[55,[186]]]]],[[187,[186]]]],[[[187,[186]],1,1],[[61,[186]]]],[[187,1]],[[]],[[[187,[186]],[187,[186]]],[[187,[186]]]],[[[187,[186]],[187,[186]]]],[[[187,[[0,[186,172]]]]],[[187,[[0,[186,172]]]]]],[1,[[187,[186]]]],[[[187,[186]],7],[[187,[186]]]],[[[187,[186]]],1],[[[187,[186]],[187,[186]]],[[187,[186]]]],[[[187,[186]],[187,[186]]],[[187,[186]]]],[[[187,[186]],[187,[186]]],[[187,[186]]]],[[[187,[186]],[187,[186]]]],[[]],[[[187,[186]]],[[55,[[55,[186]]]]]],[[[187,[186]]],[[187,[186]]]],[[],9],[[],9],[[],10],[1,[[187,[186]]]],[[]],[7,65],0,0,0,0,0,0,[[1,7],[[55,[7]]]],[[7,7],[[61,[7]]]],[[7,7],7],[[7,7,7],[[61,[7]]]],[[7,7,7],7],[[7,7],[[61,[7]]]],[[1,7],[[55,[7]]]],[[16,16],16],[[21,21],21],[[7,7],7],[[19,19],19],0,0,0,[[]],[[]],[[]],[[]],[[188,1],65],[1,188],[[],9],[[],9],[[],10],[[]],0,[[],65],[7,[[61,[7]]]],0,[[189,189],189],[[189,189]],[[]],[[]],[189,189],[[]],[[189,189],189],[[189,189]],[[189,189],65],[[189,28],29],[[]],[23,189],[[]],[[189,189],189],[[189,189]],[189,189],[[23,23],189],[[189,189],[[61,[136]]]],[[189,189],189],[[189,189]],[[]],[[],9],[[],9],[[],10],[[]],[[7,7,7,7],7],[[7,7,7],7],[7,7],[1,[[55,[7]]]],[[7,7],7],0,0,0,0,0,[[]],[[]],0,[[[190,[2]]],[[190,[2]]]],[[]],[[[190,[60]],[190,[60]]],65],[[[190,[59]],28],29],[[]],0,[[]],0,[[2,2,2,2,2,2],[[190,[2]]]],0,[[[190,[2]]],[[190,[2]]]],[[[190,[2]]],[[190,[2]]]],[[[190,[2]]],[[190,[2]]]],[[[190,[2]]],[[190,[2]]]],[[[190,[2]]],[[190,[2]]]],[[[190,[2]]],[[190,[2]]]],[[]],0,[[],9],[[],9],[[],10],[[]],[[50,[0,[14,48]],[0,[14,48]]],65],0,0,0,0,[[]],[[]],[[]],[[]],[[[191,[2]]],[[191,[2]]]],[[[192,[2]]],[[192,[2]]]],[[]],[[]],0,[[[191,[59]],28],29],[[[192,[59]],28],29],[[]],[[]],[[]],[[]],[[52,[0,[14,48,59]],[0,[14,48,59]]],[[61,[[191,[[0,[14,48,59]]]]]]]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,[[193,[56,[[0,[194,43,2]]]]],[[56,[[0,[194,43,2]]]]]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[195,[2,2]]],[[195,[2,2]]]],[[[196,[2]]],[[196,[2]]]],[[[197,[2]]],[[197,[2]]]],[[]],[[]],[[]],0,0,[[[197,[[0,[198,2]]]],50]],[[[197,[[0,[198,2]]]],50]],[[[195,[59,59]],28],29],[[[196,[59]],28],29],[[[197,[59]],28],29],[[],1],[[]],[[[195,[2]]],1],[[]],[[]],0,0,0,[[]],[[]],[[]],[197,65],0,[197,1],[[[196,[198]]],199],[[[196,[198]]],1],[[1,1],195],[1,[[197,[[0,[198,2]]]]]],0,0,0,[[]],[[[195,[2]]],[[195,[2]]]],0,0,[[],1],[[[195,[2]]],1],0,[[]],[[]],[[]],0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],0,[[]],[[]],[[]],[[]],[[[195,[2]]]],0,[[[197,[198]]],[[55,[1]]]],0,[[200,1,1],[[61,[1]]]],[[]],[[]],[[200,1,1],61],[[]],[[]],[[200,1]],[[[197,[198]],1],200],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[]],[[]],[[[197,[198]],1],201],[[201,1],1],[[201,1]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[202,202],[[]],[[202,28],29],[[]],[[202,1],1],[[]],[[202,1,1],1],[[[197,[198]],1],202],[[202,1],[[61,[1]]]],[[202,1,1],55],[[202,1,1],55],[[202,1]],[[202,1]],[[]],[[],9],[[],9],[[],10],[[]],0,[[203,1,1],[[61,[1]]]],[[]],[[]],[[]],[[203,1,1],1],[[]],[[203,1,1,1],[[61,[1]]]],[[[197,[198]],1],203],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[]],[[]],[[2,[63,[46]],[63,[46]],[63,[46]]],[[204,[14,2]]]],[[[204,[14,2]],[197,[198]]],[[55,[2]]]],[[],9],[[],9],[[],10],[[]],[[[197,[198]],1]],[[[197,[198]],1],[[9,[68]]]],0,[[]],[[]],[[]],[[]],[[2,[63,[46]],[63,[46]],[63,[46]]],[[205,[14,2]]]],[[[205,[14,2]],[197,[198]],1],[[55,[2]]]],[[],9],[[],9],[[],10],[[]],[[[197,[198]]]],[[[197,[198]],1],[[55,[[0,[4,14,5]]]]]],[[[197,[198]]],55],[[[197,[198]],1,1],[[55,[1]]]],0,0,0,0,0,0,0,0,0,0,0,[7,21],0,[[184,184]],[[184,184]],[[184,184]],[[184,184]],[[184,184]],[[184,184]],[[]],[[]],[184,184],[[]],[[184,1]],[[184,28],29],[[]],[[]],[184,1],[1,184],[[184,1,65]],[[184,1],65],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[206],[[]],[206,[[61,[19]]]],[[]],[[],206],[206,[[61,[19]]]],[206,[[55,[207]]]],[206,38],[206,25],[206,23],[206,22],[206,21],[206,7],[206,1],[206],[[],9],[[],9],[[],10],[[]],[[206,208]],[[206,208]],0,[68,181],0,0,[[[78,[[0,[4,6,14]]]],[0,[4,6,14]]],[[0,[4,6,14]]]],0,[[]],[[]],[[[78,[2]]],[[78,[2]]]],[[]],[[[78,[59]],28],29],[[]],[[]],[[[78,[[0,[44,6,14]]]],[0,[44,6,14]]],[[78,[[0,[44,6,14]]]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,[[[152,[4]],[152,[4]]],[[152,[4]]]],[[]],[[]],[[[152,[2]]],[[152,[2]]]],[[]],[[[152,[35]],[152,[35]]],136],[[[152,[60]],[152,[60]]],65],[[[152,[59]],28],29],[[]],[[]],[[[152,[14]]],65],[[[152,[14]]],65],[[[152,[14]]],65],[[[152,[172]]],[[152,[172]]]],[[[152,[43]],[152,[43]]],[[61,[136]]]],[[[152,[44]],[152,[44]]],[[152,[44]]]],[[]],[[],9],[[],9],[[],10],[[[152,[14]]],14],[[]],[[1,1,1,1]],0,[[209,209]],[[209,209]],[[]],[[]],[209,209],[[]],[[209,209],136],[[],209],[[209,209]],[[209,209]],[[209,209],65],[[209,28],29],[[]],[[]],[[209,209]],[[209,209]],[209],[[]],[[209,209],[[61,[136]]]],[[209,209]],[[209,209]],[[]],[[],9],[[],9],[[],10],[[]],[[]],0,0,[[]],0,[[]],[[]],[210,210],[[]],[[210,28],29],[[]],[210,7],[[]],[[],210],[[]],[[],9],[[],9],[[],10],[[]],0,[[68,68],68]],"c":[],"p":[[15,"usize"],[8,"Clone"],[3,"AddSum"],[8,"Add"],[8,"Default"],[8,"Mul"],[15,"u64"],[8,"From"],[4,"Result"],[3,"TypeId"],[3,"Affine"],[8,"One"],[8,"Zero"],[8,"Copy"],[3,"BitXor"],[15,"u16"],[15,"u128"],[15,"i128"],[15,"u8"],[15,"i16"],[15,"u32"],[15,"isize"],[15,"i64"],[15,"i8"],[15,"i32"],[4,"DihedralValue"],[3,"Dihedral"],[3,"Formatter"],[6,"Result"],[3,"Dual"],[8,"Identity"],[8,"AlgeStruct"],[8,"BinaryOp"],[3,"Max"],[8,"Ord"],[3,"Min"],[3,"Prod"],[15,"f64"],[15,"f32"],[3,"Sum"],[3,"Update"],[3,"UpdateSum"],[8,"PartialOrd"],[8,"Sub"],[8,"Div"],[8,"Fn"],[4,"SearchResult"],[8,"Eq"],[3,"CompressorBuilder"],[8,"IntoIterator"],[3,"Compressor"],[8,"Iterator"],[8,"Signed"],[3,"Imos1D"],[3,"Vec"],[3,"Range"],[3,"Imos2D"],[3,"KMP"],[8,"Debug"],[8,"PartialEq"],[4,"Option"],[3,"Mo"],[3,"Box"],[8,"FnMut"],[15,"bool"],[3,"PSP"],[3,"RollingHash"],[15,"str"],[3,"Table"],[3,"SuffixArray"],[8,"Hash"],[3,"StaticRangeFreqQuery"],[3,"StaticRangeInversionsQuery"],[3,"TwoSat"],[3,"BinaryTrie"],[8,"Elem"],[3,"ConvexHullTrick"],[3,"Linear"],[4,"Mode"],[8,"Group"],[3,"CumulativeSum1DBuilder"],[3,"CumulativeSum1D"],[3,"CumulativeSum2DBuilder"],[3,"CumulativeSum2D"],[8,"Semigroup"],[3,"DisjointSparseTable"],[8,"Monoid"],[3,"DualSegtree"],[3,"FenwickTree"],[3,"RangeTo"],[8,"Elem"],[3,"FenwickTreeAdd"],[3,"FenwickOnFenwickBuilder"],[3,"FenwickOnFenwick"],[3,"FoldableDeque"],[3,"IntervalHeap"],[8,"Action"],[3,"LazySegtree"],[8,"Elem"],[3,"LazySegtreeCoeff"],[8,"Elem"],[3,"LazySkewHeap"],[8,"Elem"],[3,"LiChaoTree"],[3,"RangeInclusive"],[4,"Mode"],[3,"MultiSet"],[3,"PartiallyPersistentUnionFind"],[3,"At"],[3,"PersistentArray"],[3,"PersistentQueue"],[3,"PersistentStack"],[3,"QwordTree"],[3,"RangeSearchTreeBuilder"],[3,"RangeSearchTree"],[3,"RollbackableVec"],[3,"Segtree"],[8,"RangeBounds"],[3,"SegtreeBeats"],[8,"Elem"],[3,"SegtreeLinearAdd"],[3,"SegtreeOnSegtreeBuilder"],[3,"SegtreeOnSegtree"],[3,"SkewHeap"],[3,"SparseTable"],[4,"Mode"],[8,"Elem"],[3,"StarrySkyTree"],[3,"SuccinctDict"],[3,"UnionFind"],[3,"WaveletMatrix"],[3,"Vector"],[3,"Line"],[3,"Eps"],[3,"Circle"],[4,"Ordering"],[4,"CCW"],[4,"Hull"],[4,"IntersectCircleLine"],[4,"IntersectCircleSegment"],[4,"IntersectCircles"],[4,"IntersectLineSegment"],[4,"IntersectSegments"],[4,"PointPolygon"],[3,"Directed"],[8,"EdgeTrait"],[3,"Graph"],[3,"Undirected"],[3,"Edge"],[8,"Direction"],[3,"Lowlink"],[4,"NumInf"],[8,"MaxFlow"],[3,"BipartiteMatching"],[8,"Unsigned"],[3,"Dinic"],[3,"DirectedEulerianTrail"],[3,"UndirectedEulerianTrail"],[3,"FordFulkerson"],[3,"FunctionalGraphBuilder"],[3,"FunctionalGraph"],[4,"Kind"],[3,"HopcroftKarp"],[3,"Edge"],[3,"MinCostFlow"],[3,"PseudoTree"],[3,"SCC"],[3,"Dir"],[3,"Position"],[3,"Grid"],[8,"FF"],[8,"Neg"],[8,"AddAssign"],[8,"SubAssign"],[3,"ExtLucas"],[3,"BinomialCoefficient"],[3,"Quotient"],[3,"FactorialTable"],[3,"FactorizeSieve"],[3,"ConstModInt"],[3,"String"],[8,"Modulo"],[3,"ModInt"],[3,"Bitset"],[3,"Matrix"],[8,"SquareMatrixElem"],[3,"SquareMatrix"],[3,"EratosthenesSieve"],[3,"Rational"],[3,"Dice"],[3,"ParseResult"],[4,"Elem"],[8,"Rng"],[8,"SampleUniform"],[3,"TreeEdge"],[3,"TreeNode"],[3,"Tree"],[8,"TreeEdgeTrait"],[8,"DoubleEndedIterator"],[3,"TreeDepthQuery"],[3,"EulerTour"],[3,"HLD"],[3,"DoublingLCA"],[3,"RerootingDP"],[3,"TreeDP"],[3,"FastIO"],[15,"char"],[8,"Display"],[3,"Totalf64"],[3,"XorShift"],[8,"Inverse"],[13,"NgOk"],[8,"Foldable"],[8,"Foldable2D"],[8,"Indexable"],[8,"Assignable"],[8,"Updatable"],[8,"Pow"],[8,"Inv"],[8,"Frac"],[8,"GcdLcm"],[8,"CheckPrime"],[13,"Paren"],[8,"JoinStr"],[8,"Transpose"],[8,"YesNo"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
