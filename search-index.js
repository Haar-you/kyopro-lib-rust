var searchIndex = JSON.parse('{\
"haar_kyopro_lib_rust":{"doc":"","t":[0,0,14,14,14,14,0,14,0,14,0,14,14,14,14,0,0,14,14,0,14,14,14,0,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,16,16,10,10,10,10,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,16,16,8,10,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,8,8,8,8,8,8,16,8,10,10,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,5,5,5,5,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,5,5,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,0,0,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,13,13,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,8,16,16,16,8,16,16,10,10,10,10,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,8,3,8,3,3,10,11,11,11,11,10,11,11,11,11,11,11,0,0,0,10,11,11,11,11,11,11,11,11,11,0,12,0,11,11,11,11,11,11,11,11,0,0,0,0,0,0,10,11,11,11,11,11,11,11,11,0,0,0,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,0,0,0,0,0,0,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,12,11,10,11,10,11,10,11,11,11,11,10,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,4,13,13,13,13,13,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,4,13,13,11,11,11,11,5,11,11,5,11,11,11,11,11,11,5,5,5,5,13,4,13,13,11,11,11,11,11,11,11,5,11,11,11,11,11,11,13,4,13,13,13,13,11,11,11,11,11,11,11,5,11,11,11,11,11,11,13,13,13,13,4,13,13,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,13,4,13,13,13,11,11,11,11,11,11,11,5,11,11,11,11,11,11,13,4,13,13,13,11,11,11,11,11,11,11,5,11,11,11,11,11,11,13,13,13,4,11,11,11,11,11,11,11,11,5,11,11,11,11,11,5,3,8,3,16,11,11,0,0,0,0,11,11,11,11,0,0,11,11,11,11,0,0,0,12,0,0,11,11,0,10,11,11,11,12,0,12,11,11,11,0,11,0,0,0,11,11,0,0,10,11,0,10,11,12,11,11,11,11,11,11,0,0,0,11,11,11,11,0,10,11,12,5,4,13,13,13,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,8,10,10,10,10,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,3,11,11,12,11,11,11,11,11,12,11,12,12,12,11,11,11,11,11,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,3,0,11,0,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,3,11,11,11,11,11,11,11,11,11,11,5,0,0,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,8,8,8,16,16,16,8,10,10,10,8,16,10,10,10,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,0,0,0,0,5,5,5,5,5,5,5,5,5,0,0,3,11,11,11,11,11,11,11,11,11,11,8,10,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,0,3,12,11,11,12,11,11,11,11,11,12,11,12,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,0,0,0,0,0,0,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,3,3,3,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,0,0,11,11,11,11,11,11,0,12,11,11,11,11,0,11,11,11,11,12,12,0,0,12,11,11,11,0,11,11,11,11,11,11,11,11,11,0,11,11,11,12,5,3,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,5,3,11,11,11,11,11,11,11,11,11,11,5,5,5,5,0,8,10],"n":["algebra","algo","btreemap","btreeset","chmax","chmin","ds","eps","geom","get","graph","hashmap","hashset","input","io","macros","math","max","min","misc","modulo","mul_vec","rec","seq","sort_with","timer","trait_alias","tree","utils","action","add_sum","affine","bitxor","dihedral","dual","max","min","one_zero","prod","sum","traits","update","update_sum","Action","FType","UType","convert","fold","fold_id","update","update_id","AddSum","borrow","borrow_mut","clone","clone_into","convert","default","fold","fold_id","from","into","new","to_owned","try_from","try_into","type_id","update","update_id","vzip","Affine","borrow","borrow_mut","clone","clone_into","default","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","BitXor","borrow","borrow_mut","clone","clone_into","default","from","id","id","id","id","id","id","id","id","id","id","id","id","into","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","new","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","Dihedral","DihedralValue","R","S","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","fmt","from","from","id","into","into","inv","new","op","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","0","Dual","borrow","borrow_mut","clone","clone_into","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","Max","borrow","borrow_mut","clone","clone_into","default","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","Min","borrow","borrow_mut","clone","clone_into","default","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","One","Output","Output","Zero","one","zero","Prod","borrow","borrow_mut","clone","clone_into","default","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","Sum","borrow","borrow_mut","clone","clone_into","default","from","id","into","inv","new","op","to_owned","try_from","try_into","type_id","vzip","AlgeStruct","Associative","BinaryOp","Commutative","Group","Idempotence","Identity","Inverse","Monoid","Output","Semigroup","id","inv","op","Update","borrow","borrow_mut","clone","clone_into","default","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","UpdateSum","borrow","borrow_mut","clone","clone_into","convert","default","fold","fold_id","from","into","new","to_owned","try_from","try_into","type_id","update","update_id","vzip","bsearch","compressor","enumerate_bitset","imos_1d","interval_scheduling","inversion_number","knapsack","lcs","lis","max_rect","merge","mo","permutation","sliding_window","subset_sum","two_sat","equal_range","lower_bound","upper_bound","Compressor","CompressorBuilder","add","add_vec","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","compress","decompress","default","from","from","get","index","into","into","new","size","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","gray_code","subset_asc","subset_between","subset_desc","subset_size_k","superset_asc","superset_desc","gray_code","subset_asc","subset_between","subset_desc","subset_size_k","super_asc","superset_desc","Imos1D","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","update","vzip","interval_scheduling","inversion_number","limited","small_quantity","small_value","small_weight","unlimited","knapsack_limited","knapsack_small_quantity","knapsack_small_value","knapsack_small_weight","knapsack_unlimited","lcs","lis","max_rect","max_rect_in_histogram","inplace_merge","inplace_merge_by","merge","Mo","add","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","next_permutation","permutations","prev_permutation","sliding_maximum","sliding_minimum","count","limited","subset_sum","subset_sum_limited","TwoSat","add_if","add_or","borrow","borrow_mut","from","into","new","not_coexist","solve","try_from","try_into","type_id","vzip","binary_trie","cht","cumulative_sum_1d","disjoint_sparse_table","dual_segtree","fenwick","lazy_segtree","lazy_segtree_coeff","lazy_skew_heap","li_chao","persistent_array","persistent_queue","persistent_stack","range_search_tree","rollbackable_vector","segtree","segtree_linear_add","skew_heap","sparse_table","starry_sky_tree","succinct_dict","swag","traits","unionfind","BinaryTrie","borrow","borrow_mut","clone","clone_into","count","default","erase","fmt","from","insert","into","is_empty","len","lower_bound","max","min","new","to_owned","to_vec","try_from","try_into","type_id","upper_bound","vzip","ConvexHullTrick","Max","Min","Mode","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","from","from","into","into","new","query","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","CumulativeSum1D","CumulativeSum1DBuilder","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","fmt","fold","from","from","index","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","DisjointSparseTable","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","vzip","DualSegmentTree","borrow","borrow_mut","from","from_vec","index","into","new","to_vec","try_from","try_into","type_id","update","vzip","FenwickTree","borrow","borrow_mut","fold","fold","from","into","new","try_from","try_into","type_id","update","vzip","LazySegmentTree","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","update","vzip","LazySegmentTreeCoeff","borrow","borrow_mut","fold","from","init_with_vec","into","new","try_from","try_into","type_id","update","vzip","LazySkewHeap","add","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","meld","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","LiChaoTree","Max","Min","Mode","add_line","add_segment","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","from","from","into","into","new","query","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","PersistentArray","borrow","borrow_mut","from","get","into","new","set","try_from","try_into","type_id","vzip","PersistentQueue","back","borrow","borrow_mut","default","fmt","from","front","into","is_empty","len","new","pop","push","try_from","try_into","type_id","vzip","PersistentStack","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","iter","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","RangeSearchTree","RangeSearchTreeBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","default","from","from","get","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","RollbackableVec","assign","borrow","borrow_mut","clone","clone_into","default","fmt","from","from","index","into","is_empty","len","new","pop","push","rollback","to_owned","try_from","try_into","type_id","vzip","SegmentTree","assign","borrow","borrow_mut","clone","clone_into","fold","from","index","into","new","to_owned","try_from","try_into","type_id","update","vzip","SegmentTreeLinearAdd","borrow","borrow_mut","from","get","into","new","try_from","try_into","type_id","update","vzip","SkewHeap","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","meld","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","SparseTable","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","vzip","Max","Min","Mode","StarrySkyTree","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fold","from","from","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","SuccinctDict","access","borrow","borrow_mut","clone","clone_into","count","from","into","is_empty","len","new","rank","select","to_owned","try_from","try_into","type_id","vzip","SlidingWindowAggregation","borrow","borrow_mut","fold","from","into","new","pop","push","try_from","try_into","type_id","vzip","Assignable","Foldable","FoldableMut","IndexableMut","Output","Output","Output","Updatable","Value","Value","assign","fold","fold","get","update","UnionFind","borrow","borrow_mut","count_groups","from","get_groups","into","is_same","merge","new","root_of","size_of","try_from","try_into","type_id","vzip","0","0","1","Circle","Eps","EpsFloat","EpsValue","Line","Vector","abs","abs","abs","abs","abs_sq","acos","acos","add","add","add_assign","angle","angle_diff","area_intersection_circle_polygon","area_intersection_circles","area_polygon","atan2","atan2","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ccw","center","circumcircle","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","closest_pair","common_tangent_circles","convex","convex_cut","convex_diameter","convex_hull","cos","cos","cross","cross","default","default","default","default","diff","dist_line_point","dist_segment_point","dist_segments","div","div","div_assign","dot","dot","eps","eps","eps","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_str","incircle","intersect_circle_line","intersect_circle_segment","intersect_circles","intersect_line_segment","intersect_segments","into","into","into","into","is_orthogonal","is_parallel","max","max","min","min","mul","mul","mul_assign","ne","ne","ne","neg","new","new","new","normal","normal","partial_cmp","point_in_polygon","polar","projection","radius","reflection","sin","sin","sq","sq","sqrt","sqrt","sub","sub","sub_assign","tan","tan","tangent_circle","to","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unit","unit","vzip","vzip","vzip","vzip","area_intersection_circle_polygon","area_intersection_circles","area_polygon","CCW","CLOCKWISE","COUNTER_CLOCKWISE","ONLINE_BACK","ONLINE_FRONT","ON_SEGMENT","borrow","borrow_mut","ccw","clone","clone_into","eq","fmt","from","into","to_owned","to_value","try_from","try_into","type_id","vzip","circumcircle","closest_pair","common_tangent_circles","is_convex","convex_cut","convex_diameter","Hull","Lower","Upper","borrow","borrow_mut","clone","clone_into","convex_hull","eq","from","half_hull","into","to_owned","try_from","try_into","type_id","vzip","dist_line_point","dist_segment_point","dist_segments","incircle","CROSSED","IntersectCircleLine","OUTSIDE","TANGENT","borrow","borrow_mut","clone","clone_into","eq","fmt","from","intersect_circle_line","into","to_owned","try_from","try_into","type_id","vzip","INSIDE","IntersectCircleSegment","ONE_CROSSPOINT","OUTSIDE","TANGENT","TWO_CROSSPOINTS","borrow","borrow_mut","clone","clone_into","eq","fmt","from","intersect_circle_segment","into","to_owned","try_from","try_into","type_id","vzip","CIRCUMSCRIBED","INSCRIBED","INSIDE","INTERSECTED","IntersectCircles","OUTSIDE","SAME","borrow","borrow_mut","clone","clone_into","eq","fmt","from","intersect_circles","into","num_common_tangent","to_owned","try_from","try_into","type_id","vzip","CROSSED","IntersectLineSegment","LEFTSIDE","OVERLAPPED","RIGHTSIDE","borrow","borrow_mut","clone","clone_into","eq","fmt","from","intersect_line_segment","into","to_owned","try_from","try_into","type_id","vzip","INTERSECTED","IntersectSegments","NOT_INTERSECTED","OVERLAPPED","SAME","borrow","borrow_mut","clone","clone_into","eq","fmt","from","intersect_segments","into","to_owned","try_from","try_into","type_id","vzip","EXCLUSION","INCLUSION","ON_SEGMENT","PointPolygon","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","point_in_polygon","to_owned","try_from","try_into","type_id","vzip","tangent_circle","Edge","EdgeTrait","Graph","Weight","add_directed","add_undirected","articulation_points","bellman_ford","bi_match","bipartite","borrow","borrow","borrow_mut","borrow_mut","bridges","chinese_postman","clone","clone","clone_into","clone_into","detect_cycle","dijkstra","dinic","edges","eulerian","flow","fmt","fmt","ford_fulkerson","from","from","from","from","from","hopcroft_karp","index","into","into","is_empty","kruskal","len","lowlink","max_independent_set","min_cost_flow","new","new","prim","psp","rev","rev","scc","to","to","to","to_owned","to_owned","try_from","try_from","try_into","try_into","tsort","tsp","two_edge","type_id","type_id","vzip","vzip","warshall_floyd","weight","weight","weight","articulation_points","BFResult","NegInf","PosInf","Value","bellman_ford","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","ne","to_owned","try_from","try_into","type_id","vzip","0","BipartiteMatching","add_edge","borrow","borrow_mut","from","into","matching","new","try_from","try_into","type_id","vzip","check_bipartite","bridges","chinese_postman_problem","detect_cycle","dijkstra","Dinic","add_edge","borrow","borrow_mut","clone","clone_into","from","get_edges","into","max_flow","new","reset","to_owned","try_from","try_into","type_id","vzip","directed","undirected","DirectedEulerianTrail","add_edge","borrow","borrow_mut","clone","clone_into","from","into","new","solve","to_owned","try_from","try_into","type_id","vzip","UndirectedEulerianTrail","add_edge","borrow","borrow_mut","clone","clone_into","from","into","new","solve","to_owned","try_from","try_into","type_id","vzip","Cap","MaxFlow","add_edge","get_edges","max_flow","new","reset","FordFulkerson","add_edge","borrow","borrow_mut","clone","clone_into","from","get_edges","into","max_flow","new","reset","to_owned","try_from","try_into","type_id","vzip","Edge","HopcroftKarp","add_edge","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","from","from","get_matching","into","into","matching","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","kruskal","Lowlink","borrow","borrow_mut","ch","clone","clone_into","fmt","from","into","low","new","ord","par","size","to_owned","try_from","try_into","type_id","vzip","max_independent_set","MinCostFlow","add_edge","borrow","borrow_mut","clone","clone_into","from","into","min_cost_flow","new","to_owned","try_from","try_into","type_id","vzip","prim","PSP","borrow","borrow_mut","clone","clone_into","from","gain_if_blue","gain_if_both_blue","gain_if_both_red","gain_if_red","if_red_then_must_be_red","into","must_be_blue","must_be_red","new","penalty_if_blue","penalty_if_different","penalty_if_red","penalty_if_red_blue","solve","to_owned","try_from","try_into","type_id","vzip","SCC","borrow","borrow_mut","from","groups","into","new","to_vec","try_from","try_into","type_id","vzip","tsort","tsp","two_edge_connected_components","warshall_floyd","chmax","chmin","ds_macros","eps","io","max","min","modulo","mul_vec","rec","sort_with","timer","trait_alias","bell_number","berlekamp_massey","binomial_coefficient","convolution","crt","divisor","ext_gcd","factorial","factorize","ff","gcd_lcm","linalg","miller_rabin","mod_ops","nim_product","prime_test","primitive_root","rational","sum_floor_linear","totient","bell_number_table","berlekamp_massey","BinomialCoefficient","ExtLucas","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","from","from","get","get","into","into","new","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","conv_and","conv_or","mobius_sub","mobius_super","subset_conv","zeta_sub","zeta_super","convolution_and","convolution_or","fast_mobius_subset","fast_mobius_superset","subset_convolution","fast_zeta_subset","fast_zeta_superset","crt","crt_vec","count_divisors","enumerate_divisors","ext_gcd","FactorialTable","bell","bell_number","bernoulli","bernoulli_number","borrow","borrow_mut","catalan","catalan_number","clone","clone_into","comb","default","facto","fmt","from","h","into","inv_facto","new","perm","to_owned","try_from","try_into","type_id","vzip","sieve","trial","FactorizeSieve","borrow","borrow_mut","factorize","from","into","new","try_from","try_into","type_id","vzip","factorize","modint","traits","ModInt","Modulo","add","add_assign","borrow","borrow_mut","clone","clone_into","default","div","div_assign","eq","fmt","fmt","frac","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","into","inv","mul","mul_assign","ne","neg","new","one","pow","sub","sub_assign","sum","to_owned","to_string","try_from","try_into","type_id","value","vzip","zero","FF","Frac","Inv","Output","Output","Output","Pow","frac","inv","pow","GcdLcm","Output","gcd","gcd_lcm","lcm","matrix","square_matrix","Matrix","add","add_assign","borrow","borrow_mut","clone","clone_into","eq","from","from_vec","get_mut","height","index","into","mul","mul_assign","ne","neg","new","sub","sub_assign","to_owned","to_vec","transpose","try_from","try_into","type_id","vzip","width","SquareMatrix","SquareMatrixElem","add","add_assign","borrow","borrow_mut","clone","clone_into","eq","fmt","from","from_vec","get_mut","index","into","mul","mul_assign","ne","neg","new","pow","size","straight_mul","strassen_mul","sub","sub_assign","to_owned","to_vec","transpose","try_from","try_into","type_id","unit","vzip","miller_rabin","enum_inv","inv","log","pow","sqrt","enumerate_mod_inv","mod_inv","mod_log","mod_pow","mod_sqrt","nim_product_16","nim_product_32","nim_product_64","nim_product_8","eratosthenes","traits","EratosthenesSieve","borrow","borrow_mut","from","into","is_prime","new","try_from","try_into","type_id","vzip","CheckPrime","is_prime","primitive_root","Rational","add","add_assign","borrow","borrow_mut","clone","clone_into","div","div_assign","eq","fmt","from","from","into","mul","mul_assign","ne","neg","new","partial_cmp","sub","sub_assign","to_owned","try_from","try_into","type_id","vzip","sum_floor_linear","totient","totient_table","dice","Dice","back","borrow","borrow_mut","bottom","clone","clone_into","eq","fmt","from","front","into","left","ne","new","right","rot_back","rot_clockwise","rot_counterclockwise","rot_front","rot_left","rot_right","to_owned","top","try_from","try_into","type_id","vzip","edit_distance","kmp","manacher","rle","sa","zalgo","edit_distance","KMP","borrow","borrow_mut","clone","clone_into","fmt","from","into","matches","new","to_owned","try_from","try_into","type_id","vzip","manacher","rle","SuffixArray","borrow","borrow_mut","clone","clone_into","fmt","from","index","into","lcp_array","new","to_owned","to_slice","try_from","try_into","type_id","vzip","zalgo","Tree","TreeEdge","TreeNode","add_directed","add_undirected","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","centroid","children","clone","clone","clone","clone_into","clone_into","clone_into","depth_query","euler_tour","fmt","fmt","fmt","from","from","from","hld","index","into","into","into","is_empty","lca","len","neighbors","neighbors_size","new","nodes","parent","rerooting","rooting","to","to_owned","to_owned","to_owned","tree_dp","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","utils","vzip","vzip","vzip","weight","centroids","TreeDepthQuery","ancestor","borrow","borrow_mut","children_query","from","into","me_query","new","try_from","try_into","type_id","vzip","EulerTour","borrow","borrow_mut","from","into","new","point_query","subtree_query","try_from","try_into","type_id","vzip","HLD","borrow","borrow_mut","clone","clone_into","fmt","from","get_id","into","lca","new","parent","path_query_edge","path_query_vertex","subtree_query_edge","subtree_query_vertex","to_owned","try_from","try_into","type_id","vzip","DoublingLCA","borrow","borrow_mut","from","get_lca","into","new","try_from","try_into","type_id","vzip","RerootingDP","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","rooting","TreeDP","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","tree_diameter","tree_distance","tree_height","tree_path","join_str","JoinStr","join_str"],"q":["haar_kyopro_lib_rust","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::algebra","","","","","","","","","","","","","","haar_kyopro_lib_rust::algebra::action","","","","","","","","haar_kyopro_lib_rust::algebra::add_sum","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::algebra::affine","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::algebra::bitxor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::algebra::dihedral","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::algebra::dihedral::DihedralValue","","haar_kyopro_lib_rust::algebra::dual","","","","","","","","","","","","","","","haar_kyopro_lib_rust::algebra::max","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::algebra::min","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::algebra::one_zero","","","","","","haar_kyopro_lib_rust::algebra::prod","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::algebra::sum","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::algebra::traits","","","","","","","","","","","","","","haar_kyopro_lib_rust::algebra::update","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::algebra::update_sum","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::algo","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::algo::bsearch","","","haar_kyopro_lib_rust::algo::compressor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::algo::enumerate_bitset","","","","","","","haar_kyopro_lib_rust::algo::enumerate_bitset::gray_code","haar_kyopro_lib_rust::algo::enumerate_bitset::subset_asc","haar_kyopro_lib_rust::algo::enumerate_bitset::subset_between","haar_kyopro_lib_rust::algo::enumerate_bitset::subset_desc","haar_kyopro_lib_rust::algo::enumerate_bitset::subset_size_k","haar_kyopro_lib_rust::algo::enumerate_bitset::superset_asc","haar_kyopro_lib_rust::algo::enumerate_bitset::superset_desc","haar_kyopro_lib_rust::algo::imos_1d","","","","","","","","","","","","haar_kyopro_lib_rust::algo::interval_scheduling","haar_kyopro_lib_rust::algo::inversion_number","haar_kyopro_lib_rust::algo::knapsack","","","","","haar_kyopro_lib_rust::algo::knapsack::limited","haar_kyopro_lib_rust::algo::knapsack::small_quantity","haar_kyopro_lib_rust::algo::knapsack::small_value","haar_kyopro_lib_rust::algo::knapsack::small_weight","haar_kyopro_lib_rust::algo::knapsack::unlimited","haar_kyopro_lib_rust::algo::lcs","haar_kyopro_lib_rust::algo::lis","haar_kyopro_lib_rust::algo::max_rect","","haar_kyopro_lib_rust::algo::merge","","","haar_kyopro_lib_rust::algo::mo","","","","","","","","","","","","haar_kyopro_lib_rust::algo::permutation","","","haar_kyopro_lib_rust::algo::sliding_window","","haar_kyopro_lib_rust::algo::subset_sum","","haar_kyopro_lib_rust::algo::subset_sum::count","haar_kyopro_lib_rust::algo::subset_sum::limited","haar_kyopro_lib_rust::algo::two_sat","","","","","","","","","","","","","","haar_kyopro_lib_rust::ds","","","","","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::ds::binary_trie","","","","","","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::ds::cht","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::ds::cumulative_sum_1d","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::ds::disjoint_sparse_table","","","","","","","","","","","haar_kyopro_lib_rust::ds::dual_segtree","","","","","","","","","","","","","","haar_kyopro_lib_rust::ds::fenwick","","","","","","","","","","","","","haar_kyopro_lib_rust::ds::lazy_segtree","","","","","","","","","","","","haar_kyopro_lib_rust::ds::lazy_segtree_coeff","","","","","","","","","","","","","haar_kyopro_lib_rust::ds::lazy_skew_heap","","","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::ds::li_chao","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::ds::persistent_array","","","","","","","","","","","","haar_kyopro_lib_rust::ds::persistent_queue","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::ds::persistent_stack","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::ds::range_search_tree","","","","","","","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::ds::rollbackable_vector","","","","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::ds::segtree","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::ds::segtree_linear_add","","","","","","","","","","","","haar_kyopro_lib_rust::ds::skew_heap","","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::ds::sparse_table","","","","","","","","","","","haar_kyopro_lib_rust::ds::starry_sky_tree","","","","","","","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::ds::succinct_dict","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::ds::swag","","","","","","","","","","","","","haar_kyopro_lib_rust::ds::traits","","","","","","","","","","","","","","","haar_kyopro_lib_rust::ds::unionfind","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::geom","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::geom::area_intersection_circle_polygon","haar_kyopro_lib_rust::geom::area_intersection_circles","haar_kyopro_lib_rust::geom::area_polygon","haar_kyopro_lib_rust::geom::ccw","","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::geom::circumcircle","haar_kyopro_lib_rust::geom::closest_pair","haar_kyopro_lib_rust::geom::common_tangent_circles","haar_kyopro_lib_rust::geom::convex","haar_kyopro_lib_rust::geom::convex_cut","haar_kyopro_lib_rust::geom::convex_diameter","haar_kyopro_lib_rust::geom::convex_hull","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::geom::dist_line_point","haar_kyopro_lib_rust::geom::dist_segment_point","haar_kyopro_lib_rust::geom::dist_segments","haar_kyopro_lib_rust::geom::incircle","haar_kyopro_lib_rust::geom::intersect_circle_line","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::geom::intersect_circle_segment","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::geom::intersect_circles","","","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::geom::intersect_line_segment","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::geom::intersect_segments","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::geom::point_in_polygon","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::geom::tangent_circle","haar_kyopro_lib_rust::graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::graph::articulation_points","haar_kyopro_lib_rust::graph::bellman_ford","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::graph::bellman_ford::BFResult","haar_kyopro_lib_rust::graph::bi_match","","","","","","","","","","","","haar_kyopro_lib_rust::graph::bipartite","haar_kyopro_lib_rust::graph::bridges","haar_kyopro_lib_rust::graph::chinese_postman","haar_kyopro_lib_rust::graph::detect_cycle","haar_kyopro_lib_rust::graph::dijkstra","haar_kyopro_lib_rust::graph::dinic","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::graph::eulerian","","haar_kyopro_lib_rust::graph::eulerian::directed","","","","","","","","","","","","","","","haar_kyopro_lib_rust::graph::eulerian::undirected","","","","","","","","","","","","","","","haar_kyopro_lib_rust::graph::flow","","","","","","","haar_kyopro_lib_rust::graph::ford_fulkerson","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::graph::hopcroft_karp","","","","","","","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::graph::kruskal","haar_kyopro_lib_rust::graph::lowlink","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::graph::max_independent_set","haar_kyopro_lib_rust::graph::min_cost_flow","","","","","","","","","","","","","","","haar_kyopro_lib_rust::graph::prim","haar_kyopro_lib_rust::graph::psp","","","","","","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::graph::scc","","","","","","","","","","","","haar_kyopro_lib_rust::graph::tsort","haar_kyopro_lib_rust::graph::tsp","haar_kyopro_lib_rust::graph::two_edge","haar_kyopro_lib_rust::graph::warshall_floyd","haar_kyopro_lib_rust::macros","","","","","","","","","","","","","haar_kyopro_lib_rust::math","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::math::bell_number","haar_kyopro_lib_rust::math::berlekamp_massey","haar_kyopro_lib_rust::math::binomial_coefficient","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::math::convolution","","","","","","","haar_kyopro_lib_rust::math::convolution::conv_and","haar_kyopro_lib_rust::math::convolution::conv_or","haar_kyopro_lib_rust::math::convolution::mobius_sub","haar_kyopro_lib_rust::math::convolution::mobius_super","haar_kyopro_lib_rust::math::convolution::subset_conv","haar_kyopro_lib_rust::math::convolution::zeta_sub","haar_kyopro_lib_rust::math::convolution::zeta_super","haar_kyopro_lib_rust::math::crt","","haar_kyopro_lib_rust::math::divisor","","haar_kyopro_lib_rust::math::ext_gcd","haar_kyopro_lib_rust::math::factorial","","","","","","","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::math::factorize","","haar_kyopro_lib_rust::math::factorize::sieve","","","","","","","","","","","haar_kyopro_lib_rust::math::factorize::trial","haar_kyopro_lib_rust::math::ff","","haar_kyopro_lib_rust::math::ff::modint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::math::ff::traits","","","","","","","","","","haar_kyopro_lib_rust::math::gcd_lcm","","","","","haar_kyopro_lib_rust::math::linalg","","haar_kyopro_lib_rust::math::linalg::matrix","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::math::linalg::square_matrix","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::math::miller_rabin","haar_kyopro_lib_rust::math::mod_ops","","","","","haar_kyopro_lib_rust::math::mod_ops::enum_inv","haar_kyopro_lib_rust::math::mod_ops::inv","haar_kyopro_lib_rust::math::mod_ops::log","haar_kyopro_lib_rust::math::mod_ops::pow","haar_kyopro_lib_rust::math::mod_ops::sqrt","haar_kyopro_lib_rust::math::nim_product","","","","haar_kyopro_lib_rust::math::prime_test","","haar_kyopro_lib_rust::math::prime_test::eratosthenes","","","","","","","","","","","haar_kyopro_lib_rust::math::prime_test::traits","","haar_kyopro_lib_rust::math::primitive_root","haar_kyopro_lib_rust::math::rational","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::math::sum_floor_linear","haar_kyopro_lib_rust::math::totient","","haar_kyopro_lib_rust::misc","haar_kyopro_lib_rust::misc::dice","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::seq","","","","","","haar_kyopro_lib_rust::seq::edit_distance","haar_kyopro_lib_rust::seq::kmp","","","","","","","","","","","","","","","haar_kyopro_lib_rust::seq::manacher","haar_kyopro_lib_rust::seq::rle","haar_kyopro_lib_rust::seq::sa","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::seq::zalgo","haar_kyopro_lib_rust::tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::tree::centroid","haar_kyopro_lib_rust::tree::depth_query","","","","","","","","","","","","","haar_kyopro_lib_rust::tree::euler_tour","","","","","","","","","","","","haar_kyopro_lib_rust::tree::hld","","","","","","","","","","","","","","","","","","","","","haar_kyopro_lib_rust::tree::lca","","","","","","","","","","","haar_kyopro_lib_rust::tree::rerooting","","","","","","","","","","","haar_kyopro_lib_rust::tree::rooting","haar_kyopro_lib_rust::tree::tree_dp","","","","","","","","","","","haar_kyopro_lib_rust::tree::utils","","","","haar_kyopro_lib_rust::utils","haar_kyopro_lib_rust::utils::join_str",""],"d":["代数的構造","","","","","","データ構造","","","","グラフ一般に関するもの","","","","","macro_exportされたmacro置き場","数学","","","分類を放置しているもの","","","…","","","","","木に関するもの二分探索","座標圧縮","","","区間スケジューリング問題","転倒数","ナップサック問題","最長共通部分列","最長増加部分列","","","","","スライド最小値","部分和問題","","lower_bound, upper_boundの組を求める。","x以上となる最小のindexを求める。","xを超える最小のindexを求める。","","","","","","","","","","","","","","","","","","","<code>i</code>番目の値を返す。","<code>value</code>が何番目の値(0-index)かを返す。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","…","数列の転倒数を計算する。","","","","","","個数制限付きナップサック問題","要素数が小さいナップサック問題","価値の総和が小さいナップサック問題","容量が小さいナップサック問題","個数制限無しナップサック問題","列a, bの最長共通部分列の一つを求める。","列の最長増加部分列の一つを求める。","…","…","","","","","","","","","","","","","","","","","","","","…","","","部分和問題 …","…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Time complexity O(1)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","係数乗算付き区間加算区間総和遅延セグ木…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","[l, r) に含まれる<code>b</code>の個数","","","","","","[0, index) に含まれる<code>b</code>の個数","nth(1-indexed)番目の<code>b</code>の位置関節点の列挙","負閉路を持つグラフの最短経路 (Bellman-Ford)","二部マッチング","二部グラフ判定","","","","","橋の列挙","中国人郵便配達問題","","","","","有向グラフの閉路検出","非負重み付き最短経路 (Dijkstra)","最大流 (Dinic)","","(準)Eulerグラフの判定","","","","最大流 (Ford-Fulkerson)","","","","","","二部マッチング (Hopcroft-Karp)","","","","","最小全域木 (Kruskal)","","","最大独立集合","最小費用流","","","最小全域木 (Prim)","Project Selection Problem","","","強連結成分分解","","","","","","","","","","トポロジカルソート","巡回セールスマン問題","二重辺連結成分分解","","","","","全頂点間最短経路長","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","橋の列挙","Time complexity O(V ^ 2 * 2 ^ V)","","Time complexity O((E + V) log V)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Project Selection Problem","","","","","","頂点iが青ならばcの利益を得る。","頂点iとjがともに青ならばcの利益を得る。","頂点iとjがともに赤ならばcの利益を得る。","頂点iが赤ならばcの利益を得る。","頂点iが赤ならば、頂点jも赤…","","頂点iは青でなければならない。","頂点iは赤でなければならない。","","頂点iが青ならばcの損失になる。","頂点iとjが異なる色ならばcの損失となる。","頂点iが赤ならばcの損失になる。","頂点iが赤かつ頂点jが青…","must be制約を破った場合、<code>None</code>…","","","","","","","","","","","","","","","","","","Time complexity O(N)","","","Time complexity O(n ^ 3)","","","","","","","","","","","","","","","","","","中国剰余定理","約数列挙","拡張ユークリッドの互除法","","","","最大公約数・最小公倍数","","","","","","原始根","有理数","$\\\\sum_{i=0}^{n-1} \\\\lfloor \\\\frac{ai+b}{m} \\\\rfloor$","トーシェント関数","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Time complexity O(sqrt n)","Time complexity O(sqrt n)","","","","","","","","","","","","","n個からk個とりだす組み合わせの個数 (nCk)","","nの階乗","","","","","nの階乗の逆元","Time complexity O(n)","n個からk個とりだす順列の個数 (nPk)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mod累乗","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","重心列挙","","","","","","","","","","","","","","","","重軽分解","","","","","","最小共通祖先","","","","","","","全方位木DP","根付き木に変換","","","","","木DP","","","","","","","","","","","","","","","","Tree depth query","","","","","","","","","","","","","","","","","","","","","","","","","重軽分解","","","","","","","","","","","","","演算は可換性を仮定する。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","木の任意の2頂点の距離の最大値を求める。","…","…","…","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,5,5,5,6,5,6,5,6,5,6,5,5,6,6,5,6,6,6,6,5,6,5,6,5,6,5,6,5,6,7,8,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,13,0,13,12,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,16,0,17,18,19,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,23,22,23,22,22,23,22,23,22,23,23,22,23,22,23,23,23,22,22,23,23,22,23,22,23,22,23,22,23,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,24,24,24,24,24,24,24,24,24,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,25,25,25,25,25,25,25,25,25,25,0,0,0,0,0,0,0,0,0,0,26,26,26,26,26,26,26,26,26,26,26,26,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,28,28,0,29,28,29,28,29,28,29,28,29,28,28,29,28,29,28,29,29,29,28,29,28,29,28,29,28,29,28,29,0,0,30,31,30,31,30,31,31,31,31,30,31,31,30,31,30,31,30,31,30,31,30,31,30,30,31,0,32,32,32,32,32,32,32,32,32,32,0,33,33,33,33,33,33,33,33,33,33,33,33,33,0,34,34,34,34,34,34,34,34,34,34,34,34,0,35,35,35,35,35,35,35,35,35,35,35,0,36,36,36,36,36,36,36,36,36,36,36,36,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,38,38,0,39,39,39,38,39,38,38,38,38,38,39,38,39,38,39,39,38,39,38,39,38,39,38,39,38,0,40,40,40,40,40,40,40,40,40,40,40,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,0,43,44,43,44,43,43,43,43,43,44,43,44,44,43,43,43,44,43,44,43,44,43,44,43,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,0,47,47,47,47,47,47,47,47,47,47,47,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,49,49,49,49,49,49,49,49,49,49,50,50,0,0,51,50,51,50,50,50,51,51,50,51,50,51,50,51,50,51,50,51,50,51,51,50,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,0,53,53,53,53,53,53,53,53,53,53,53,53,0,0,0,0,54,55,56,0,57,58,57,54,55,56,58,0,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,60,61,61,0,0,0,0,0,0,62,60,61,63,61,62,60,60,61,60,61,61,0,0,0,62,60,60,61,63,64,60,61,63,64,0,64,0,60,61,63,64,60,61,63,64,0,0,0,0,0,0,62,60,61,63,60,61,63,64,63,0,0,0,60,61,60,61,63,65,62,60,60,61,63,64,60,60,61,61,63,64,60,60,61,63,64,63,60,0,0,0,0,0,0,60,61,63,64,63,63,62,60,62,60,60,61,60,61,63,64,60,60,63,64,61,63,60,0,61,63,64,63,62,60,62,60,62,60,60,61,60,62,60,0,63,60,61,63,64,60,61,60,61,63,64,60,61,63,64,60,61,63,64,61,63,60,61,63,64,0,0,0,0,66,66,66,66,66,66,66,0,66,66,66,66,66,66,66,66,66,66,66,66,0,0,0,0,0,0,0,67,67,67,67,67,67,0,67,67,0,67,67,67,67,67,67,0,0,0,0,68,0,68,68,68,68,68,68,68,68,68,0,68,68,68,68,68,68,69,0,69,69,69,69,69,69,69,69,69,69,69,0,69,69,69,69,69,69,70,70,70,70,0,70,70,70,70,70,70,70,70,70,0,70,70,70,70,70,70,70,71,0,71,71,71,71,71,71,71,71,71,71,0,71,71,71,71,71,71,72,0,72,72,72,72,72,72,72,72,72,72,0,72,72,72,72,72,72,73,73,73,0,73,73,73,73,73,73,73,73,0,73,73,73,73,73,0,0,0,0,74,75,75,0,0,0,0,76,75,76,75,0,0,76,75,76,75,0,0,0,75,0,0,76,75,0,74,76,76,75,76,0,76,76,75,75,0,75,0,0,0,76,75,0,0,74,76,0,74,76,76,76,75,76,75,76,75,0,0,0,76,75,76,75,0,74,76,76,0,0,77,77,77,0,77,77,77,77,77,77,77,77,77,77,77,77,77,77,78,0,79,79,79,79,79,79,79,79,79,79,79,0,0,0,0,0,0,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,0,0,0,81,81,81,81,81,81,81,81,81,81,81,81,81,81,0,82,82,82,82,82,82,82,82,82,82,82,82,82,82,83,0,83,83,83,83,83,0,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,0,0,85,85,86,85,86,86,86,86,85,86,85,85,86,85,85,86,85,86,85,86,85,86,85,86,0,0,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,0,0,88,88,88,88,88,88,88,88,88,88,88,88,88,88,0,0,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,0,90,90,90,90,90,90,90,90,90,90,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,92,91,92,91,92,91,92,91,92,91,92,91,92,91,92,91,92,91,92,91,92,91,92,91,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,0,93,93,93,0,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,0,0,0,94,94,94,94,94,94,94,94,94,94,0,0,0,0,0,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,96,95,95,0,0,0,97,98,99,0,99,98,97,0,100,100,100,100,0,0,0,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,0,0,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,103,103,103,103,103,103,103,103,103,0,104,0,0,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,0,0,0,0,0,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,0,0,0,0,0,0,0,0,107,107,107,107,107,107,107,107,107,107,107,107,107,107,0,0,0,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,0,0,0,0,109,109,110,111,109,110,111,109,0,111,110,111,109,110,111,109,0,0,110,111,109,110,111,109,0,111,110,111,109,109,0,109,111,111,109,109,111,0,0,110,110,111,109,0,110,111,109,110,111,109,110,111,109,0,110,111,109,110,0,0,112,112,112,112,112,112,112,112,112,112,112,112,0,113,113,113,113,113,113,113,113,113,113,113,0,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,0,115,115,115,115,115,115,115,115,115,115,0,116,116,116,116,116,116,116,116,116,116,0,0,117,117,117,117,117,117,117,117,117,117,0,0,0,0,0,0,118],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[],["addsum",3]],[[]],[[["usize",15]]],[[],["addsum",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],null,[[]],[[]],[[],["affine",3]],[[]],[[],["affine",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[],["bitxor",3]],[[]],[[],["bitxor",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[],["dihedralvalue",4]],[[],["dihedral",3]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,[[]],[[]],[[],["dual",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[],["max",3]],[[]],[[],["max",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[],["min",3]],[[]],[[],["min",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,[[]],[[]],null,[[]],[[]],[[],["prod",3]],[[]],[[],["prod",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[],["sum",3]],[[]],[[],["sum",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],null,[[]],[[]],[[],["update",3]],[[]],[[],["update",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[],["updatesum",3]],[[]],[[["usize",15]]],[[],["updatesum",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["usize",15]],[[],["usize",15]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["compressor",3]],[[],["compressor",3]],[[],["compressorbuilder",3]],[[]],[[]],[[]],[[]],[[],["compressorbuilder",3]],[[]],[[]],[[["usize",15]]],[[],["usize",15]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],null,[[]],[[]],[[],["vec",3]],[[]],[[]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["usize",15],["range",3,["usize"]]]],[[]],[[],[["usize",15],["vec",3,["usize"]]]],[[],["u64",15]],null,null,null,null,null,[[["usize",15]]],[[]],[[["u64",15]],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[],[["copy",8],["partialeq",8],["vec",3]]],[[],[["usize",15],["vec",3,["usize"]]]],[[["copy",8],["partialeq",8]],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[],[["ord",8],["copy",8],["vec",3]]],null,[[["usize",15]]],[[]],[[]],[[]],[[]],[[["usize",15],["box",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["bool",15]],[[["clone",8],["vec",3],["ord",8]]],[[],["bool",15]],[[["usize",15]],[["ord",8],["copy",8],["vec",3]]],[[["usize",15]],[["ord",8],["copy",8],["vec",3]]],null,null,[[["usize",15]],["vec",3]],[[["usize",15]],[["vec",3,["bool"]],["bool",15]]],null,[[["isize",15]]],[[["isize",15]]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["isize",15]]],[[],[["option",4,["vec"]],["vec",3,["bool"]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["binarytrie",3]],[[]],[[["u64",15]],["usize",15]],[[],["binarytrie",3]],[[["u64",15]],[["usize",15],["option",4,["usize"]]]],[[["formatter",3]],["result",6]],[[]],[[["u64",15]],["usize",15]],[[]],[[],["bool",15]],[[],["usize",15]],[[["u64",15]],["usize",15]],[[["u64",15]],[["u64",15],["option",4,["u64"]]]],[[["u64",15]],[["u64",15],["option",4,["u64"]]]],[[]],[[]],[[],[["vec",3,["u64"]],["u64",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["u64",15]],["usize",15]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["mode",4]],[[],["convexhulltrick",3]],[[]],[[]],[[["mode",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["mode",4]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[],["cumulativesum1d",3]],[[],["cumulativesum1d",3]],[[]],[[["formatter",3]],["result",6]],[[["usize",15],["range",3,["usize"]]]],[[]],[[]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]]],[[]],[[]],null,[[]],[[]],[[["usize",15],["range",3,["usize"]]]],[[]],[[]],[[["vec",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[],["vec",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["usize",15],["range",3,["usize"]]]],[[]],null,[[]],[[]],[[["usize",15],["rangeto",3,["usize"]]]],[[["usize",15],["range",3,["usize"]]]],[[]],[[]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["usize",15]]],[[]],null,[[]],[[]],[[["usize",15],["range",3,["usize"]]]],[[]],[[]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["usize",15],["range",3,["usize"]]]],[[]],null,[[]],[[]],[[["usize",15],["range",3,["usize"]]]],[[]],[[["vec",3]]],[[]],[[["usize",15],["vec",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["usize",15],["range",3,["usize"]]]],[[]],null,[[]],[[]],[[]],[[],["lazyskewheap",3]],[[]],[[],["lazyskewheap",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["bool",15]],[[],["usize",15]],[[["lazyskewheap",3]]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["mode",4]],[[]],[[["mode",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["mode",4]]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,[[]],[[]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[],["option",4]],[[]],[[]],[[],["persistentqueue",3]],[[["formatter",3]],["result",6]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[],["usize",15]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[],["persistentstack",3]],[[]],[[],["persistentstack",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,[[["i64",15]]],[[]],[[]],[[]],[[]],[[],["rangesearchtree",3]],[[],["rangesearchtreebuilder",3]],[[]],[[],["rangesearchtreebuilder",3]],[[]],[[]],[[],["vec",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,[[["usize",15]]],[[]],[[]],[[],["rollbackablevec",3]],[[]],[[],["rollbackablevec",3]],[[["formatter",3]],["result",6]],[[["vec",3]]],[[]],[[["usize",15]]],[[]],[[],["bool",15]],[[],["usize",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[["usize",15]]],[[]],[[]],[[],["segmenttree",3]],[[]],[[["usize",15],["range",3,["usize"]]]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["usize",15]]],[[]],null,[[]],[[]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["usize",15],["range",3,["usize"]]]],[[]],null,[[]],[[]],[[],["skewheap",3]],[[]],[[],["skewheap",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["bool",15]],[[],["usize",15]],[[["skewheap",3]]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[["usize",15],["range",3,["usize"]]]],[[]],[[]],[[["vec",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[],["mode",4]],[[]],[[["usize",15],["range",3,["usize"]]]],[[]],[[]],[[]],[[]],[[["usize",15],["mode",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15],["range",3,["usize"]]]],[[]],[[]],null,[[["usize",15]],["u32",15]],[[]],[[]],[[],["succinctdict",3]],[[]],[[["usize",15],["bool",15],["range",3,["usize"]]],["u32",15]],[[]],[[]],[[],["bool",15]],[[],["usize",15]],[[["vec",3,["bool"]],["bool",15]]],[[["usize",15],["bool",15]],["u32",15]],[[["usize",15],["bool",15]],[["usize",15],["option",4,["usize"]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[],["usize",15]],[[]],[[],[["vec",3,["vec"]],["vec",3,["usize"]]]],[[]],[[["usize",15]],["bool",15]],[[["usize",15]],["usize",15]],[[["usize",15]]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],["epsfloat",3]],[[],["vector",3]],[[],["line",3]],[[],["circle",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["epsfloat",3]],[[],["vector",3]],[[],["line",3]],[[],["circle",3]],[[],["vector",3]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["bool",15]],[[["vector",3]],["bool",15]],[[["line",3]],["bool",15]],[[["circle",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["f64",15]]],[[]],[[]],[[]],null,[[["str",15]],["result",4]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vector",3]],["bool",15]],[[["line",3]],["bool",15]],[[["circle",3]],["bool",15]],[[]],[[["f64",15]]],[[["vector",3]]],[[["vector",3]]],[[]],[[],["vector",3]],[[],[["option",4,["ordering"]],["ordering",4]]],null,[[]],[[["vector",3]],["vector",3]],null,[[["vector",3]],["vector",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["vector",3]],[[]],[[]],[[]],[[]],[[["circle",3],["eps",8]],["eps",8]],[[["circle",3],["eps",8]],["eps",8]],[[],["eps",8]],null,null,null,null,null,null,[[]],[[]],[[["vector",3],["eps",8]],["ccw",4]],[[],["ccw",4]],[[]],[[["ccw",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["i32",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["vector",3],["eps",8]],[["circle",3],["eps",8]]],[[["vector",3],["vec",3,["vector"]]],["option",4]],[[["circle",3],["eps",8],["debug",8]],[["vector",3],["vec",3,["vector"]]]],[[],["bool",15]],[[["line",3],["eps",8]]],[[["vector",3],["vec",3,["vector"]]],["eps",8]],null,null,null,[[]],[[]],[[],["hull",4]],[[]],[[["vector",3],["vec",3,["vector"]]],[["vector",3],["vec",3,["vector"]]]],[[["hull",4]],["bool",15]],[[]],[[["hull",4],["vector",3],["vec",3,["vector"]]],[["vector",3],["vec",3,["vector"]]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["eps",8],["vector",3],["line",3]],["eps",8]],[[["eps",8],["vector",3],["line",3]],["eps",8]],[[["eps",8],["line",3]],["eps",8]],[[["vector",3],["eps",8]],[["circle",3],["eps",8]]],null,null,null,null,[[]],[[]],[[],["intersectcircleline",4]],[[]],[[["intersectcircleline",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["circle",3],["eps",8],["line",3]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,[[]],[[]],[[],["intersectcirclesegment",4]],[[]],[[["intersectcirclesegment",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["circle",3],["eps",8],["line",3]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,[[]],[[]],[[],["intersectcircles",4]],[[]],[[["intersectcircles",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["circle",3],["eps",8]]],[[]],[[],[["option",4,["u32"]],["u32",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,[[]],[[]],[[],["intersectlinesegment",4]],[[]],[[["intersectlinesegment",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["eps",8],["line",3]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,[[]],[[]],[[],["intersectsegments",4]],[[]],[[["intersectsegments",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["eps",8],["line",3]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,[[]],[[]],[[],["pointpolygon",4]],[[]],[[["pointpolygon",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["vector",3],["eps",8]],["pointpolygon",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["circle",3],["eps",8],["vector",3]],[["vector",3],["vec",3,["vector"]]]],null,null,null,null,[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],null,null,[[],["edge",3]],[[],["graph",3]],[[]],[[]],null,null,null,null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,[[],["usize",15]],[[],["usize",15]],[[]],[[]],null,null,null,[[]],[[]],[[],["bool",15]],null,[[],["usize",15]],null,null,null,[[["usize",15]]],[[["usize",15]]],null,null,[[]],[[]],null,[[],["usize",15]],[[],["usize",15]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,[[]],[[]],null,[[["lowlink",3]],[["usize",15],["vec",3,["usize"]]]],null,null,null,null,[[["graph",3],["usize",15]],[["vec",3,["bfresult"]],["bfresult",4]]],[[]],[[]],[[],["bfresult",4]],[[]],[[["bfresult",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["bfresult",4]],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["graph",3]],[["vec",3,["option"]],["option",4]]],[[["lowlink",3]],["vec",3]],[[["graph",3]]],[[["graph",3]],[["vec",3],["option",4,["vec"]]]],[[["graph",3]],[["vec",3,["option"]],["option",4]]],null,[[["usize",15]]],[[]],[[]],[[],["dinic",3]],[[]],[[]],[[["usize",15]],["vec",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,[[["usize",15]]],[[]],[[]],[[],["directedeuleriantrail",3]],[[]],[[]],[[]],[[["usize",15]]],[[],[["vec",3,["usize"]],["option",4,["vec"]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[["usize",15]]],[[]],[[]],[[],["undirectedeuleriantrail",3]],[[]],[[]],[[]],[[["usize",15]]],[[],[["vec",3,["usize"]],["option",4,["vec"]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,[[["usize",15]]],[[["usize",15]],["vec",3]],[[["usize",15]]],[[["usize",15]]],[[]],null,[[["usize",15]]],[[]],[[]],[[],["fordfulkerson",3]],[[]],[[]],[[["usize",15]],["vec",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["edge",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["vec",3]],[[]],[[]],[[],["u32",15]],[[["usize",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["graph",3]],["vec",3]],null,[[]],[[]],null,[[],["lowlink",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],null,[[["graph",3]]],null,null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["vec",3,["vec"]],["vec",3,["bool"]]],[["usize",15],["vec",3,["usize"]]]],null,[[["usize",15],["u64",15],["i64",15]]],[[]],[[]],[[],["mincostflow",3]],[[]],[[]],[[]],[[["usize",15],["u64",15]],[["result",4,["i64"]],["i64",15]]],[[["usize",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["graph",3]],["vec",3]],null,[[]],[[]],[[],["psp",3]],[[]],[[]],[[["usize",15],["u64",15]]],[[["usize",15],["u64",15]]],[[["usize",15],["u64",15]]],[[["usize",15],["u64",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["u64",15]]],[[["usize",15],["u64",15]]],[[["usize",15],["u64",15]]],[[["usize",15],["u64",15]]],[[],[["option",4,["i64"]],["i64",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[]],[[],["vec",3]],[[]],[[["graph",3]]],[[],[["usize",15],["vec",3,["usize"]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["graph",3]],[["vec",3,["usize"]],["option",4,["vec"]]]],[[["graph",3],["usize",15]],["option",4]],[[["lowlink",3]],[["vec",3,["vec"]],["vec",3,["usize"]]]],[[["graph",3]],[["option",4,["vec"]],["vec",3,["vec"]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]],[["vec",3,["vec"]],["vec",3]]],[[["vec",3]],["vec",3]],null,null,[[]],[[]],[[]],[[]],[[],["extlucas",3]],[[],["binomialcoefficient",3]],[[]],[[]],[[]],[[]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[]],[[]],[[["u64",15]]],[[["u64",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,[[["vec",3]],["vec",3]],[[["vec",3]],["vec",3]],[[]],[[]],[[["vec",3]],["vec",3]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[["u64",15]],["u64",15]],[[["u64",15]],[["vec",3,["u64"]],["u64",15]]],[[["u64",15]]],null,null,[[["usize",15]]],null,[[["usize",15]],["vec",3]],[[]],[[]],null,[[["usize",15]]],[[],["factorialtable",3]],[[]],[[["usize",15]]],[[],["factorialtable",3]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,[[]],[[]],[[["usize",15]],[["usize",15],["vec",3,["usize"]]]],[[]],[[]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["u64",15]],["vec",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[],["modint",3]],[[]],[[],["modint",3]],[[]],[[]],[[["modint",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["i64",15]]],[[["i128",15]]],[[["u8",15]]],[[["isize",15]]],[[]],[[["i64",15]]],[[["i32",15]]],[[["i16",15]]],[[["i8",15]]],[[["usize",15]]],[[["u128",15]]],[[["u64",15]]],[[["u32",15]]],[[["u16",15]]],[[["str",15]],["result",4]],[[]],[[]],[[]],[[]],[[["modint",3]],["bool",15]],[[]],[[["u32",15]]],[[]],[[["u64",15]]],[[]],[[]],[[["iterator",8]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u32",15]],[[]],[[]],null,null,null,null,null,null,null,[[["i64",15]]],[[]],[[["u64",15]]],null,null,[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[],["matrix",3]],[[]],[[["matrix",3]],["bool",15]],[[]],[[["vec",3,["vec"]],["vec",3]]],[[["usize",15]],["option",4]],[[],["usize",15]],[[["usize",15]]],[[]],[[]],[[]],[[["matrix",3]],["bool",15]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[],[["vec",3,["vec"]],["vec",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],null,null,[[]],[[]],[[]],[[]],[[],["squarematrix",3]],[[]],[[["squarematrix",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["vec",3,["vec"]],["vec",3]]],[[["usize",15]],["option",4]],[[["usize",15]]],[[]],[[]],[[]],[[["squarematrix",3]],["bool",15]],[[]],[[["usize",15]]],[[["u64",15]]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3,["vec"]],["vec",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["usize",15]]],[[]],[[["u64",15]],["bool",15]],null,null,null,null,null,[[["usize",15],["u64",15]],[["vec",3,["u64"]],["u64",15]]],[[["u64",15]],[["u64",15],["option",4,["u64"]]]],[[["u64",15]],[["u64",15],["option",4,["u64"]]]],[[["u64",15]],["u64",15]],[[["u64",15]],[["u64",15],["option",4,["u64"]]]],[[["u16",15]],["u16",15]],[[["u32",15]],["u32",15]],[[["u64",15]],["u64",15]],[[["u8",15]],["u8",15]],null,null,null,[[]],[[]],[[]],[[]],[[["usize",15]],["bool",15]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[],["bool",15]],[[["u64",15]],[["u64",15],["option",4,["u64"]]]],null,[[]],[[["rational",3]]],[[]],[[]],[[],["rational",3]],[[]],[[]],[[]],[[["rational",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["i64",15]]],[[]],[[]],[[]],[[["rational",3]],["bool",15]],[[]],[[["i64",15]]],[[],[["ordering",4],["option",4,["ordering"]]]],[[]],[[["rational",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[["usize",15]],[["usize",15],["vec",3,["usize"]]]],null,null,null,[[]],[[]],null,[[],["dice",3]],[[]],[[["dice",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],null,[[]],null,[[["dice",3]],["bool",15]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,[[],["usize",15]],null,[[]],[[]],[[],["kmp",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["str",15]],[["usize",15],["vec",3,["usize"]]]],[[["str",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],[["usize",15],["vec",3,["usize"]]]],[[],["vec",3]],null,[[]],[[]],[[],["suffixarray",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[["usize",15]]],[[]],[[],[["usize",15],["vec",3,["usize"]]]],[[["str",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],[["usize",15],["vec",3,["usize"]]]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["treeedge",3]],[[],["treenode",3]],[[],["tree",3]],[[]],[[]],[[]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[],["bool",15]],null,[[],["usize",15]],[[]],[[],["usize",15]],[[["usize",15]]],null,null,null,null,null,[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],null,[[["tree",3]],[["usize",15],["vec",3,["usize"]]]],null,[[["usize",15]],[["usize",15],["option",4,["usize"]]]],[[]],[[]],[[["usize",15]],["option",4]],[[]],[[]],[[["usize",15]]],[[["tree",3],["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[]],[[]],[[["tree",3],["usize",15]]],[[["usize",15]],["usize",15]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[],["hld",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[["usize",15]],["usize",15]],[[]],[[["usize",15]],["usize",15]],[[["copy",8],["usize",15],["tree",3]]],[[["usize",15]],[["usize",15],["option",4,["usize"]]]],[[["usize",15]],["vec",3]],[[["usize",15]],["vec",3]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[]],[[["usize",15]],["usize",15]],[[]],[[["tree",3],["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[]],[[]],[[["box",3],["box",3],["box",3]]],[[["tree",3]],["vec",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["tree",3],["usize",15]],[["str",15],["result",4,["str"]]]],null,[[]],[[]],[[]],[[]],[[["box",3],["box",3],["box",3]]],[[["tree",3],["usize",15]],["vec",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["tree",3]]],[[["tree",3],["usize",15]],["vec",3]],[[["tree",3]],["vec",3]],[[["tree",3],["usize",15]],[["usize",15],["vec",3,["usize"]]]],null,null,[[["str",15]],["string",3]]],"p":[[8,"Action"],[3,"AddSum"],[3,"Affine"],[3,"BitXor"],[4,"DihedralValue"],[3,"Dihedral"],[13,"R"],[13,"S"],[3,"Dual"],[3,"Max"],[3,"Min"],[8,"Zero"],[8,"One"],[3,"Prod"],[3,"Sum"],[8,"AlgeStruct"],[8,"Identity"],[8,"Inverse"],[8,"BinaryOp"],[3,"Update"],[3,"UpdateSum"],[3,"CompressorBuilder"],[3,"Compressor"],[3,"Imos1D"],[3,"Mo"],[3,"TwoSat"],[3,"BinaryTrie"],[4,"Mode"],[3,"ConvexHullTrick"],[3,"CumulativeSum1DBuilder"],[3,"CumulativeSum1D"],[3,"DisjointSparseTable"],[3,"DualSegmentTree"],[3,"FenwickTree"],[3,"LazySegmentTree"],[3,"LazySegmentTreeCoeff"],[3,"LazySkewHeap"],[4,"Mode"],[3,"LiChaoTree"],[3,"PersistentArray"],[3,"PersistentQueue"],[3,"PersistentStack"],[3,"RangeSearchTreeBuilder"],[3,"RangeSearchTree"],[3,"RollbackableVec"],[3,"SegmentTree"],[3,"SegmentTreeLinearAdd"],[3,"SkewHeap"],[3,"SparseTable"],[4,"Mode"],[3,"StarrySkyTree"],[3,"SuccinctDict"],[3,"SlidingWindowAggregation"],[8,"Foldable"],[8,"FoldableMut"],[8,"IndexableMut"],[8,"Assignable"],[8,"Updatable"],[3,"UnionFind"],[3,"EpsFloat"],[3,"Vector"],[8,"Eps"],[3,"Line"],[3,"Circle"],[8,"EpsValue"],[4,"CCW"],[4,"Hull"],[4,"IntersectCircleLine"],[4,"IntersectCircleSegment"],[4,"IntersectCircles"],[4,"IntersectLineSegment"],[4,"IntersectSegments"],[4,"PointPolygon"],[8,"EdgeTrait"],[3,"Graph"],[3,"Edge"],[4,"BFResult"],[13,"Value"],[3,"BipartiteMatching"],[3,"Dinic"],[3,"DirectedEulerianTrail"],[3,"UndirectedEulerianTrail"],[8,"MaxFlow"],[3,"FordFulkerson"],[3,"HopcroftKarp"],[3,"Edge"],[3,"Lowlink"],[3,"MinCostFlow"],[3,"PSP"],[3,"SCC"],[3,"ExtLucas"],[3,"BinomialCoefficient"],[3,"FactorialTable"],[3,"FactorizeSieve"],[3,"ModInt"],[8,"Modulo"],[8,"Pow"],[8,"Inv"],[8,"Frac"],[8,"GcdLcm"],[3,"Matrix"],[3,"SquareMatrix"],[3,"EratosthenesSieve"],[8,"CheckPrime"],[3,"Rational"],[3,"Dice"],[3,"KMP"],[3,"SuffixArray"],[3,"Tree"],[3,"TreeEdge"],[3,"TreeNode"],[3,"TreeDepthQuery"],[3,"EulerTour"],[3,"HLD"],[3,"DoublingLCA"],[3,"RerootingDP"],[3,"TreeDP"],[8,"JoinStr"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};