var searchIndex = JSON.parse('{\
"haar_lib":{"doc":"Rust GitHub last commit","t":"AAOOOOAAOAOOAAOOOOAAAAOOAOAOOAOOAAAAAAAAAAAAAAAAAAIQQKKKKKDLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIIIIIIIIIIQIKKKDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFNNNELLFLLLLLLMMDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFAAAAAAAFFFFFFFDLLLLLLLLLLLDLLLLLLLLLLLFFDLLLLLLLLLLLLLLAAAAAFFFFFFFFFFFFFFFDLLLLLLLLLLLFFFFFDLLLLLLLLLLLLLLLLLLLLLLLLFDDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLFFDLLLLLLLLLLDLLLLLLLLLLLAAFFDLLLLLLLLLLLLLFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLDINNELLLLLLLLLLLLLLLLLLLLLLLLLLLLDDCCLLLLLLLLLLLLLLLLLLLLLLLLLDDCCLLLLLLLLLLLLLLLLLLLLLLLLLDCCLLLLLLLLLLDCCLLLLLLLLLLLLLDLLLLLLLLLLLLDCCCLLLLLLLLLLLLLLLLIDCCLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLDCLLLLLLLLLLLICDCLLLLLLLLLLLLIDLLLLLLLLLLLLLLLLLLLLLIDNNELLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLRDLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLCCCDCLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLICDLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLICNNEDCLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLIIIIQQQIQQKKKKKDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLQIKAAKKAKKDLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLDDDDLLLLLLAAALLLLLLLLAMALLLLLLLLAAAAAALLLLLLAAALLLLLLLLLLLLLLMLLAAAAAALLLLLLLLLLLLLLLLALLMLLAMLLLLLLLLLLLLLLLLLLLLLLFFFENNNNNLLFLLLLLLLLLLLLLLLLLFFFFFFENNLLLLFLLFLLLLLLFFFFNENNLLLLLLLLFLLLLLLLLNENNNNLLLLLLLLFLLLLLLLLLLNNNNENNLLLLLLLLLLFLLLLLLLLLLNENNNLLLLLLLLFLLLLLLLLLNENNNLLLLLLLFLLLLLLLLLLNNNELLLLLLLLLLLFLLLLLFDIDIDDQLLAAAAALLLLLLLLAAALLLLLLLLAAAMAALLLLLLKLLLLLMAMLLLLLALAALLAAKLAKLMLLLLLLLLLLLLAAALLLLLLLLAKLMAFCFFCFFFFFAFFFFAADLLLLLLLLLLLLLLDLLLLLLLLLLLLLLNDDENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFDMLLMLLLLLMLMMMLLLLLFFDLLLMMLFLLLLDLLLLLLLLLLLFFFFIFSSDDSDSSLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLMMFAAAAAAAFFFFFDLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAAAAAAAAAAAAAAADLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFDDLLLLLLLLLLLLLLLLLLLLLLLLLLAAAAAAAFFFFFFFFFFFFDLLLLFLLLMLMMLLLLLFDALALLLALLLLLLLLLLLLLLLLLFAADLLLLLLLLLLFIQKKKFFAAAAAAFFFFFFFFFFFFDLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFAADLLLLLLLLLLIKFDLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFAAADMLLMLLLLLMLMLMLLLLLLLMLLLLFENDNLLLLLLLLMLLLLLLFLLLLLLLLLLMMMAAAAADDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIIQQQIKKKKKDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNENLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLFAAIIIIIQQIKKDDDDIDQLLLLLLLLLLLLAMLLLLLLLAALLLLLKLLLLLLMAMLLLLLLALLLLLLLMAKLLAAKLMLLLALLLLLLLLLLLLLLLALLLLLKLMFDLLLLLLLLLLLLDLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLDLLLLLLLLLLFFDLLLLLLLLLLFFFFAAAAAAAAFDLLLLLLLLLLLLLLLLLLLLLLLIKDMLMLLLLLLLLLLLLLFQIKDLLLLLLLLLLLLLLIK","n":["algebra","algo","btreemap","btreeset","chmax","chmin","ds","flow","for_loop","geom","get","get_time","graph","grid","hashmap","hashset","impl_algebra","input","linalg","macros","matching","math","max","min","misc","mul_vec","num","rec","sort_with","testtools","timer","trait_alias","traits","tree","utils","action","add_sum","affine","bitand","bitor","bitxor","dihedral","dual","max","min","prod","sum","traits","update","update_sum","Action","FType","UType","convert","fold","fold_id","update","update_id","AddSum","borrow","borrow_mut","clone","clone_into","convert","default","fold","fold_id","from","into","new","to_owned","try_from","try_into","type_id","update","update_id","vzip","Affine","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","BitAnd","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","into","new","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","BitOr","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","into","new","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","BitXor","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","id","id","id","id","id","id","into","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","new","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","Dihedral","DihedralValue","R","S","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","id","into","into","inv","new","op","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Dual","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","Max","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","id","id","id","id","id","id","into","new","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","Min","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","id","id","id","id","id","id","into","new","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","Prod","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","id","id","id","id","id","id","id","id","into","new","op","op","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","Sum","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","id","id","id","id","id","id","id","id","id","id","id","id","id","into","inv","inv","inv","inv","inv","inv","inv","inv","new","op","op","op","op","op","op","op","op","op","op","op","op","op","op","to_owned","try_from","try_into","type_id","vzip","AbelianGroup","AbelianMonoid","AlgeStruct","Associative","BinaryOp","Commutative","Group","Idempotence","Identity","Inverse","Monoid","Output","Semigroup","id","inv","op","Update","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","id","into","new","op","to_owned","try_from","try_into","type_id","vzip","UpdateSum","borrow","borrow_mut","clone","clone_into","convert","default","fold","fold_id","from","into","new","to_owned","try_from","try_into","type_id","update","update_id","vzip","bsearch","bsearch_f","compressor","edit_distance","enumerate_bitset","imos_1d","imos_2d","interval_scheduling","inversion_number","kmp","knapsack","lcs","lis","majority_vote","manacher","max_partial_sum","max_rect","merge","mo","num_subseq","parallel_binary_search","permutation","psp","rle","rolling_hash","sa","sliding_window","static_range_freq_query","static_range_inversions_query","subset_sum","two_sat","zalgo","equal_range","lower_bound","upper_bound","AllNg","AllOk","NgOk","SearchResult","borrow","borrow_mut","bsearch_ng_ok","from","into","try_from","try_into","type_id","vzip","ng","ok","Compressor","CompressorBuilder","add","add_vec","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","compress","decompress","default","from","from","get","index","into","into","new","size","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","edit_distance","gray_code","subset_asc","subset_between","subset_desc","subset_size_k","superset_asc","superset_desc","gray_code","subset_asc","subset_between","subset_desc","subset_size_k","super_asc","superset_desc","Imos1D","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","update","vzip","Imos2D","borrow","borrow_mut","build","from","into","new","try_from","try_into","type_id","update","vzip","interval_scheduling","inversion_number","KMP","borrow","borrow_mut","clone","clone_into","fmt","from","into","matches","new","to_owned","try_from","try_into","type_id","vzip","limited","small_quantity","small_value","small_weight","unlimited","knapsack_limited","knapsack_small_quantity","knapsack_small_value","knapsack_small_weight","knapsack_unlimited","lcs","lis","majority_vote","manacher","max_partial_sum","max_rect","max_rect_in_histogram","inplace_merge","inplace_merge_by","merge","Mo","add","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","num_subseq","parallel_binary_search","next_permutation","permutations","prev_permutation","PSP","borrow","borrow_mut","clone","clone_into","from","gain_if_blue","gain_if_both_blue","gain_if_both_red","gain_if_red","if_red_then_must_be_red","into","must_be_blue","must_be_red","new","penalty_if_blue","penalty_if_different","penalty_if_red","penalty_if_red_blue","solve","to_owned","try_from","try_into","type_id","vzip","rle","RollingHash","Table","borrow","borrow","borrow_mut","borrow_mut","from","from","hash","hash","hash_table","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","SuffixArray","borrow","borrow_mut","clone","clone_into","fmt","from","index","into","lcp_array","new","to_owned","to_slice","try_from","try_into","type_id","vzip","sliding_maximum","sliding_minimum","StaticRangeFreqQuery","borrow","borrow_mut","from","into","new","query","try_from","try_into","type_id","vzip","StaticRangeInversionsQuery","add_query","borrow","borrow_mut","from","into","new","solve","try_from","try_into","type_id","vzip","count","limited","subset_sum","subset_sum_limited","TwoSat","add_if","add_or","borrow","borrow_mut","from","into","new","not_coexist","solve","try_from","try_into","type_id","vzip","zalgo","binary_trie","bitset","cht","cumulative_sum_1d","cumulative_sum_2d","disjoint_sparse_table","dual_segtree","dynamic_segtree","fenwick","fenwick_add","fenwick_on_fenwick","foldable_deque","interval_heap","lazy_segtree","lazy_segtree_coeff","lazy_skew_heap","li_chao","multiset","palindromic_tree","partially_persistent_unionfind","persistent_array","persistent_queue","persistent_stack","potential_unionfind","qword_tree","range_search_tree","rollbackable_vector","segtree","segtree_beats","segtree_linear_add","segtree_on_segtree","skew_heap","sparse_table","starry_sky_tree","succinct_dict","traits","unionfind","wavelet_matrix","BinaryTrie","borrow","borrow_mut","clone","clone_into","count","erase","fmt","from","insert","into","is_empty","len","max","min","new","to_owned","try_from","try_into","type_id","vzip","Bitset","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","flip","fmt","from","into","len","new","set","test","to_owned","try_from","try_into","type_id","vzip","ConvexHullTrick","Elem","Max","Min","Mode","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","from","from","into","into","new","query","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","CumulativeSum1D","CumulativeSum1DBuilder","Foldable","Group","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","fmt","fold","from","from","index","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","CumulativeSum2D","CumulativeSum2DBuilder","Foldable2D","Group","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","fmt","fold","from","from","index","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","DisjointSparseTable","Foldable","Semigroup","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","vzip","DualSegtree","Monoid","Updatable","borrow","borrow_mut","from","from_vec","get","into","new","to_vec","try_from","try_into","type_id","update","vzip","DynamicSegtree","assign","borrow","borrow_mut","fmt","fold","from","into","new","try_from","try_into","type_id","vzip","FenwickTree","Foldable","Group","Updatable","borrow","borrow_mut","clone","clone_into","default","fold","fold","from","into","new","to_owned","try_from","try_into","type_id","update","vzip","Elem","FenwickTreeAdd","Foldable","Updatable","add","borrow","borrow_mut","fold","fold","from","into","new","sub","try_from","try_into","type_id","vzip","FenwickOnFenwick","FenwickOnFenwickBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","default","fold","fold_to","from","from","into","into","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","FoldableDeque","back","borrow","borrow_mut","fold","from","front","into","is_empty","len","new","pop_back","pop_front","push_back","push_front","try_from","try_into","type_id","vzip","IntervalHeap","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","max","min","new","pop_max","pop_min","push","to_owned","try_from","try_into","type_id","vzip","LazySegtree","Updatable","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","update","vzip","Elem","Foldable","LazySegtreeCoeff","Updatable","borrow","borrow_mut","fold","from","init_with_vec","into","new","try_from","try_into","type_id","update","vzip","Elem","LazySkewHeap","add","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","meld","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","Elem","LiChaoTree","Max","Min","Mode","add_line","add_segment","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","from","from","into","into","new","query","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","MultiSet","borrow","borrow_mut","clone","clone_into","contains","count","default","first","fmt","from","insert","into","is_empty","last","len","new","pop_first","pop_last","remove","to_owned","try_from","try_into","type_id","vzip","Node","PalindromicTree","borrow","borrow","borrow_mut","borrow_mut","count","default","from","from","get_from_strpos","get_node","index","into","into","len","length","new","parent_of","suffix_link_of","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","At","PartiallyPersistentUnionFind","at","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","is_same","latest","merge","new","root_of","size_of","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","PersistentArray","borrow","borrow_mut","from","get","into","new","set","try_from","try_into","type_id","vzip","PersistentQueue","back","borrow","borrow_mut","default","fmt","from","front","into","is_empty","len","new","pop","push","try_from","try_into","type_id","vzip","PersistentStack","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","iter","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","PotentialUnionFind","borrow","borrow_mut","count_groups","diff","from","get_groups","into","is_same","merge","new","potential_of","root_of","size_of","try_from","try_into","type_id","vzip","MAX","QwordTree","borrow","borrow_mut","contains","default","erase","erase_unchecked","from","insert","insert_unchecked","into","is_empty","len","max","max_le","min","min_ge","new","try_from","try_into","type_id","vzip","RangeSearchTree","RangeSearchTreeBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","default","from","from","into","into","new","search","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","RollbackableVec","assign","borrow","borrow_mut","clone","clone_into","default","fmt","from","from","index","into","is_empty","len","new","pop","push","rollback","to_owned","try_from","try_into","type_id","vzip","Assignable","Foldable","Monoid","Segtree","Updatable","assign","borrow","borrow_mut","clone","clone_into","fold","from","index","into","new","to_owned","try_from","try_into","type_id","update","vzip","SegtreeBeats","add","borrow","borrow_mut","chmax","chmin","clone","clone_into","fmt","from","get_max","get_min","get_sum","into","new","new_with_vec","to_owned","try_from","try_into","type_id","vzip","Elem","Indexable","SegtreeLinearAdd","borrow","borrow_mut","from","get","into","new","try_from","try_into","type_id","update","vzip","SegtreeOnSegtree","SegtreeOnSegtreeBuilder","add","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","default","fold","from","from","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","SkewHeap","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","is_empty","len","meld","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","SparseTable","borrow","borrow_mut","fold","from","into","new","try_from","try_into","type_id","vzip","Elem","Foldable","Max","Min","Mode","StarrySkyTree","Updatable","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fold","from","from","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","vzip","vzip","SuccinctDict","access","borrow","borrow_mut","clone","clone_into","count","from","into","is_empty","len","new","rank","select","to_owned","try_from","try_into","type_id","vzip","Assignable","Foldable","Foldable2D","Indexable","Output","Output","Output","Updatable","Value","Value","assign","fold","fold","get","update","UnionFind","borrow","borrow_mut","count_groups","from","get_groups","into","is_same","merge","new","new_with_values","root_of","size_of","try_from","try_into","type_id","value_of","vzip","WaveletMatrix","access","borrow","borrow_mut","clone","clone_into","count","from","into","maximum","minimum","new","next_value","prev_value","quantile","range_freq","rank","select","to_owned","try_from","try_into","type_id","vzip","Cap","MaxFlow","add_edge","dinic","ford_fulkerson","get_edges","max_flow","min_cost_flow","new","reset","Dinic","add_edge","borrow","borrow_mut","clone","clone_into","from","get_edges","into","max_flow","new","reset","to_owned","try_from","try_into","type_id","vzip","FordFulkerson","add_edge","borrow","borrow_mut","clone","clone_into","from","get_edges","into","max_flow","new","reset","to_owned","try_from","try_into","type_id","vzip","MinCostFlow","add_edge","borrow","borrow_mut","clone","clone_into","from","into","min_cost_flow","new","to_owned","try_from","try_into","type_id","vzip","Circle","Eps","Line","Vector","abs","abs","abs_sq","add","angle","angle_diff","area_intersection_circle_polygon","area_intersection_circles","area_polygon","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ccw","center","circumcircle","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","closest_pair","common_tangent_circles","convex","convex_cut","convex_diameter","convex_hull","cross","cross","default","default","default","diff","dist_line_point","dist_segment_point","dist_segments","div","dot","dot","eq","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","ge","gt","incircle","intersect_circle_line","intersect_circle_segment","intersect_circles","intersect_line_segment","intersect_segments","into","into","into","into","is_orthogonal","is_parallel","le","lt","mul","ne","new","new","new","normal","normal","partial_cmp","point_in_polygon","polar","projection","radius","reflection","sub","tangent_circle","to","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unit","unit","vzip","vzip","vzip","vzip","area_intersection_circle_polygon","area_intersection_circles","area_polygon","CCW","CLOCKWISE","COUNTER_CLOCKWISE","ONLINE_BACK","ONLINE_FRONT","ON_SEGMENT","borrow","borrow_mut","ccw","clockwise","clone","clone_into","counter_clockwise","eq","fmt","from","into","on_segment","online_back","online_front","to_owned","to_value","try_from","try_into","type_id","vzip","circumcircle","closest_pair","common_tangent_circles","is_convex","convex_cut","convex_diameter","Hull","Lower","Upper","borrow","borrow_mut","clone","clone_into","convex_hull","eq","from","half_hull","into","to_owned","try_from","try_into","type_id","vzip","dist_line_point","dist_segment_point","dist_segments","incircle","CROSSED","IntersectCircleLine","OUTSIDE","TANGENT","borrow","borrow_mut","clone","clone_into","crossed","eq","fmt","from","intersect_circle_line","into","outside","tangent","to_owned","try_from","try_into","type_id","vzip","INSIDE","IntersectCircleSegment","ONE_CROSSPOINT","OUTSIDE","TANGENT","TWO_CROSSPOINTS","borrow","borrow_mut","clone","clone_into","eq","fmt","from","inside","intersect_circle_segment","into","one_crosspoint","outside","tangent","to_owned","try_from","try_into","two_crosspoints","type_id","vzip","CIRCUMSCRIBED","INSCRIBED","INSIDE","INTERSECTED","IntersectCircles","OUTSIDE","SAME","borrow","borrow_mut","circumscribed","clone","clone_into","eq","fmt","from","inscribed","inside","intersect_circles","intersected","into","num_common_tangent","outside","same","to_owned","try_from","try_into","type_id","vzip","CROSSED","IntersectLineSegment","LEFTSIDE","OVERLAPPED","RIGHTSIDE","borrow","borrow_mut","clone","clone_into","crossed","eq","fmt","from","intersect_line_segment","into","leftside","overlapped","rightside","to_owned","try_from","try_into","type_id","vzip","INTERSECTED","IntersectSegments","NOT_INTERSECTED","OVERLAPPED","SAME","borrow","borrow_mut","clone","clone_into","eq","fmt","from","intersect_segments","intersected","into","not_intersected","overlapped","same","to_owned","try_from","try_into","type_id","vzip","EXCLUSION","INCLUSION","ON_SEGMENT","PointPolygon","borrow","borrow_mut","clone","clone_into","eq","exclusion","fmt","from","inclusion","into","on_segment","point_in_polygon","to_owned","try_from","try_into","type_id","vzip","tangent_circle","Directed","Direction","Edge","EdgeTrait","Graph","Undirected","Weight","add","add","articulation_points","bellman_ford","bfs","biconnected","bipartite","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bridges","chinese_postman","chu_liu_edmonds","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cycle","detect_cycle","dijkstra","edges","enumerate_triangles","eulerian","extend","extend","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","functional_graph","index","into","into","into","into","is_empty","kruskal","len","lowlink","max_independent_set","new","new","prim","pseudo_tree","rev","rev","scc","to","to","to","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tsort","tsp","two_edge","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","warshall_floyd","weight","weight","weight","yen","articulation_points","NumInf","bellman_ford","bfs","Lowlink","biconnected","check_bipartite","bridges","chinese_postman_problem","chu_liu_edmonds","directed_shortest","directed_shortest_cycle","detect_cycle","dijkstra","enumerate_triangles","directed","undirected","DirectedEulerianTrail","add_edge","borrow","borrow_mut","clone","clone_into","from","into","new","solve","to_owned","try_from","try_into","type_id","vzip","UndirectedEulerianTrail","add_edge","borrow","borrow_mut","clone","clone_into","from","into","new","solve","to_owned","try_from","try_into","type_id","vzip","Branch","FunctionalGraph","FunctionalGraphBuilder","Kind","Leaf","Loop","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","clone","clone_into","eq","fmt","from","from","from","grp_index_of","into","into","into","kind_of","loops","new","next_of","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","kruskal","Lowlink","back","borrow","borrow_mut","ch","clone","clone_into","fmt","from","into","low","new","ord","par","size","to_owned","try_from","try_into","type_id","vzip","max_independent_set","prim","PseudoTree","borrow","borrow_mut","from","group","in_loop","into","pseudo_tree","try_from","try_into","type_id","vzip","SCC","borrow","borrow_mut","from","groups","into","new","to_vec","try_from","try_into","type_id","vzip","tsort","tsp","two_edge_connected_components","warshall_floyd","Elem","yen_algorithm","D","DIR_4","Dir","Grid","L","Position","R","U","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","dx","dy","eq","eq","fmt","fmt","fmt","from","from","from","get","into","into","into","iter","iter_mut","mov_strict","new","new","new","to_graph","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","x","y","grid_to_graph","determinant_mod_2","determinant_p","gaussian_elim_mod_2","inverse_mod_2","inverse_p","matrix","square_matrix","determinant_mod_2","determinant_p","gaussian_elim_mod_2","inverse_mod_2","inverse_p","Matrix","add","add_assign","borrow","borrow_mut","clone","clone_into","eq","from","from_vec","get_mut","height","index","into","mul","mul_assign","neg","new","sub","sub_assign","to_owned","transpose","try_from","try_into","type_id","vzip","width","SquareMatrix","add","add_assign","borrow","borrow_mut","clone","clone_into","eq","from","from_vec","get_mut","index","into","mul","mul_assign","neg","new","pow","size","straight_mul","strassen_mul","sub","sub_assign","to_owned","transpose","try_from","try_into","type_id","unit","vzip","chmax","chmin","ds_macros","for_loop","get_time","impl_algebra","io","max","min","mul_vec","rec","sort_with","timer","trait_alias","bi_match","hopcroft_karp","BipartiteMatching","add_edge","borrow","borrow_mut","from","into","matching","new","try_from","try_into","type_id","vzip","Edge","HopcroftKarp","add_edge","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","from","from","get_matching","into","into","matching","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","bell_number","berlekamp_massey","binomial_coefficient","convolution","count_coprime","crt","divisor","enumerate_quotients","ext_gcd","factorial","factorial_prime_factor","factorize","gcd_lcm","linear_congruence","miller_rabin","mod_ops","montmort","multipoint_eval","nim_product","ntt","polynomial","polynomial_taylor_shift","prime_test","primitive_root","rational","sum_floor_linear","sum_of_exponential_times_polynomial_limit","totient","totient_sum","bell_number_table","berlekamp_massey","BinomialCoefficient","ExtLucas","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","from","from","get","get","into","into","new","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","conv_and","conv_or","mobius_sub","mobius_super","subset_conv","zeta_sub","zeta_super","convolution_and","convolution_or","fast_mobius_subset","fast_mobius_superset","subset_convolution","fast_zeta_subset","fast_zeta_superset","count_coprime","crt","crt_vec","count_divisors","enumerate_divisors","Quotient","borrow","borrow_mut","clone","clone_into","enumerate_quotients","eq","fmt","from","from","into","q","to","to_owned","try_from","try_into","type_id","vzip","ext_gcd","FactorialTable","bell","bell_number","bernoulli","bernoulli_number","borrow","borrow_mut","catalan","catalan_number","clone","clone_into","comb","facto","fmt","from","h","into","inv_facto","new","perm","to_owned","try_from","try_into","type_id","vzip","factorial_prime_factor","sieve","trial","FactorizeSieve","borrow","borrow_mut","factorize","from","into","new","try_from","try_into","type_id","vzip","factorize","GcdLcm","Output","gcd","gcd_lcm","lcm","linear_congruence","miller_rabin","enum_inv","inv","inv_p","log","pow","sqrt","enumerate_mod_inv","mod_inv","mod_inv_p","mod_log","mod_pow","mod_sqrt","montmort","multipoint_eval","nim_product_16","nim_product_32","nim_product_64","nim_product_8","NTT","borrow","borrow_mut","convolve","from","into","new","try_from","try_into","type_id","vzip","Polynomial","PolynomialOperator","add","add_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","coeff_of","constant","deg","divmod","eq","eval","fmt","from","from","from_vec","get_to","into","into","inv","is_empty","len","mul","mul_assign","new","scale","shrink","sq","sub","sub_assign","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","zero","polynomial_taylor_shift","eratosthenes","traits","EratosthenesSieve","borrow","borrow_mut","from","into","is_prime","new","try_from","try_into","type_id","vzip","CheckPrime","is_prime","primitive_root","Rational","add","add_assign","borrow","borrow_mut","clone","clone_into","div","div_assign","eq","fmt","from","from","into","mul","mul_assign","neg","new","partial_cmp","sub","sub_assign","to_owned","try_from","try_into","type_id","vzip","sum_floor_linear","sum_of_exponential_times_polynomial_limit","totient","totient_table","totient_sum","dice","paren","parse_paren","Dice","back","borrow","borrow_mut","bottom","clone","clone_into","eq","fmt","from","front","into","left","new","right","rot_back","rot_clockwise","rot_counterclockwise","rot_front","rot_left","rot_right","to_owned","top","try_from","try_into","type_id","vzip","check_paren","Elem","Paren","ParseResult","Value","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","elems","fmt","fmt","from","from","into","into","parse_paren","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","close","inner","open","const_modint","ff","modint","num_inf","total_f64","ConstModInt","ConstModIntBuilder","add","add_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","div","div_assign","eq","eq","fmt","fmt","frac","from","from","from_i64","from_u64","into","into","inv","mul","mul_assign","neg","new","new","pow","sub","sub_assign","to_owned","to_owned","to_string","to_u32","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","FF","FFElem","Inv","Output","Output","Output","Pow","frac","from_i64","from_u64","inv","pow","ModInt","ModIntBuilder","add","add_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","div","div_assign","eq","eq","fmt","fmt","fmt","frac","from","from","from_i64","from_u64","into","into","inv","mul","mul_assign","neg","new","new","pow","sub","sub_assign","to_owned","to_owned","to_string","to_u32","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Inf","NegInf","NumInf","Value","add","borrow","borrow_mut","clone","clone_into","cmp","eq","fmt","from","into","is_inf","is_neg_inf","is_value","neg","partial_cmp","sub","to_owned","try_from","try_into","type_id","unwrap","vzip","Totalf64","add","add_assign","borrow","borrow_mut","clone","clone_into","cmp","default","div","div_assign","eq","fmt","from","into","mul","mul_assign","neg","one","partial_cmp","sub","sub_assign","to_owned","try_from","try_into","type_id","vzip","zero","rand_range","num","one_zero","Float","Int","Signed","Unsigned","One","Output","Output","Zero","one","zero","RootedTreeBuilder","Tree","TreeBuilder","TreeEdge","TreeEdgeTrait","TreeNode","Weight","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","centroid","children","clone","clone","clone","clone_into","clone_into","clone_into","default","depth_query","euler_tour","extend","extend","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hld","index","into","into","into","into","into","is_empty","lca","len","neighbors","neighbors_size","new","new","new","nodes_iter","parent","rerooting","rev","rev","root","rooted_isomorphism","rooting","to","to","to","to_owned","to_owned","to_owned","tree_dp","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","utils","vzip","vzip","vzip","vzip","vzip","weight","weight","weight","centroids","TreeDepthQuery","ancestor","borrow","borrow_mut","children_query","from","into","me_query","new","try_from","try_into","type_id","vzip","EulerTour","borrow","borrow_mut","from","into","new","point_query","subtree_query","try_from","try_into","type_id","vzip","HLD","borrow","borrow_mut","clone","clone_into","fmt","from","get_id","into","lca","new","parent","path_query_edge","path_query_vertex","subtree_query_edge","subtree_query_vertex","to_owned","try_from","try_into","type_id","vzip","DoublingLCA","ancestor","borrow","borrow_mut","from","get_lca","into","jump","new","try_from","try_into","type_id","vzip","RerootingDP","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","rooted_isomorphism","rooting","TreeDP","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vzip","tree_diameter","tree_distance","tree_height","tree_path","bits","fastio","join_str","linear","swap","transpose","xor_shift","yesno","highest_one","FastIO","borrow","borrow_mut","drop","from","getc","into","new","peek","read_chars","read_f64","read_i32","read_i64","read_isize","read_u32","read_u64","read_usize","skip","try_from","try_into","type_id","vzip","write","writeln","JoinStr","join_str","Linear","a","apply","b","borrow","borrow_mut","clone","clone_into","fmt","from","into","mov_x","to_owned","try_from","try_into","type_id","vzip","swap_vv","Output","Transpose","transpose","XorShift","borrow","borrow_mut","clone","clone_into","fmt","from","gen","into","new","to_owned","try_from","try_into","type_id","vzip","YesNo","yesno"],"q":[[0,"haar_lib"],[35,"haar_lib::algebra"],[50,"haar_lib::algebra::action"],[58,"haar_lib::algebra::add_sum"],[77,"haar_lib::algebra::affine"],[95,"haar_lib::algebra::bitand"],[123,"haar_lib::algebra::bitor"],[151,"haar_lib::algebra::bitxor"],[203,"haar_lib::algebra::dihedral"],[237,"haar_lib::algebra::dual"],[255,"haar_lib::algebra::max"],[295,"haar_lib::algebra::min"],[335,"haar_lib::algebra::prod"],[379,"haar_lib::algebra::sum"],[431,"haar_lib::algebra::traits"],[447,"haar_lib::algebra::update"],[465,"haar_lib::algebra::update_sum"],[484,"haar_lib::algo"],[516,"haar_lib::algo::bsearch"],[519,"haar_lib::algo::bsearch_f"],[532,"haar_lib::algo::bsearch_f::SearchResult"],[534,"haar_lib::algo::compressor"],[568,"haar_lib::algo::edit_distance"],[569,"haar_lib::algo::enumerate_bitset"],[576,"haar_lib::algo::enumerate_bitset::gray_code"],[577,"haar_lib::algo::enumerate_bitset::subset_asc"],[578,"haar_lib::algo::enumerate_bitset::subset_between"],[579,"haar_lib::algo::enumerate_bitset::subset_desc"],[580,"haar_lib::algo::enumerate_bitset::subset_size_k"],[581,"haar_lib::algo::enumerate_bitset::superset_asc"],[582,"haar_lib::algo::enumerate_bitset::superset_desc"],[583,"haar_lib::algo::imos_1d"],[595,"haar_lib::algo::imos_2d"],[607,"haar_lib::algo::interval_scheduling"],[608,"haar_lib::algo::inversion_number"],[609,"haar_lib::algo::kmp"],[624,"haar_lib::algo::knapsack"],[629,"haar_lib::algo::knapsack::limited"],[630,"haar_lib::algo::knapsack::small_quantity"],[631,"haar_lib::algo::knapsack::small_value"],[632,"haar_lib::algo::knapsack::small_weight"],[633,"haar_lib::algo::knapsack::unlimited"],[634,"haar_lib::algo::lcs"],[635,"haar_lib::algo::lis"],[636,"haar_lib::algo::majority_vote"],[637,"haar_lib::algo::manacher"],[638,"haar_lib::algo::max_partial_sum"],[639,"haar_lib::algo::max_rect"],[641,"haar_lib::algo::merge"],[644,"haar_lib::algo::mo"],[656,"haar_lib::algo::num_subseq"],[657,"haar_lib::algo::parallel_binary_search"],[658,"haar_lib::algo::permutation"],[661,"haar_lib::algo::psp"],[686,"haar_lib::algo::rle"],[687,"haar_lib::algo::rolling_hash"],[709,"haar_lib::algo::sa"],[726,"haar_lib::algo::sliding_window"],[728,"haar_lib::algo::static_range_freq_query"],[739,"haar_lib::algo::static_range_inversions_query"],[751,"haar_lib::algo::subset_sum"],[753,"haar_lib::algo::subset_sum::count"],[754,"haar_lib::algo::subset_sum::limited"],[755,"haar_lib::algo::two_sat"],[769,"haar_lib::algo::zalgo"],[770,"haar_lib::ds"],[808,"haar_lib::ds::binary_trie"],[829,"haar_lib::ds::bitset"],[853,"haar_lib::ds::cht"],[886,"haar_lib::ds::cumulative_sum_1d"],[915,"haar_lib::ds::cumulative_sum_2d"],[944,"haar_lib::ds::disjoint_sparse_table"],[957,"haar_lib::ds::dual_segtree"],[973,"haar_lib::ds::dynamic_segtree"],[986,"haar_lib::ds::fenwick"],[1006,"haar_lib::ds::fenwick_add"],[1023,"haar_lib::ds::fenwick_on_fenwick"],[1054,"haar_lib::ds::foldable_deque"],[1073,"haar_lib::ds::interval_heap"],[1095,"haar_lib::ds::lazy_segtree"],[1108,"haar_lib::ds::lazy_segtree_coeff"],[1124,"haar_lib::ds::lazy_skew_heap"],[1147,"haar_lib::ds::li_chao"],[1177,"haar_lib::ds::multiset"],[1202,"haar_lib::ds::palindromic_tree"],[1230,"haar_lib::ds::partially_persistent_unionfind"],[1255,"haar_lib::ds::persistent_array"],[1267,"haar_lib::ds::persistent_queue"],[1285,"haar_lib::ds::persistent_stack"],[1304,"haar_lib::ds::potential_unionfind"],[1322,"haar_lib::ds::qword_tree"],[1345,"haar_lib::ds::range_search_tree"],[1371,"haar_lib::ds::rollbackable_vector"],[1394,"haar_lib::ds::segtree"],[1415,"haar_lib::ds::segtree_beats"],[1436,"haar_lib::ds::segtree_linear_add"],[1450,"haar_lib::ds::segtree_on_segtree"],[1477,"haar_lib::ds::skew_heap"],[1498,"haar_lib::ds::sparse_table"],[1509,"haar_lib::ds::starry_sky_tree"],[1538,"haar_lib::ds::succinct_dict"],[1557,"haar_lib::ds::traits"],[1572,"haar_lib::ds::unionfind"],[1590,"haar_lib::ds::wavelet_matrix"],[1613,"haar_lib::flow"],[1623,"haar_lib::flow::dinic"],[1640,"haar_lib::flow::ford_fulkerson"],[1657,"haar_lib::flow::min_cost_flow"],[1672,"haar_lib::geom"],[1788,"haar_lib::geom::area_intersection_circle_polygon"],[1789,"haar_lib::geom::area_intersection_circles"],[1790,"haar_lib::geom::area_polygon"],[1791,"haar_lib::geom::ccw"],[1817,"haar_lib::geom::circumcircle"],[1818,"haar_lib::geom::closest_pair"],[1819,"haar_lib::geom::common_tangent_circles"],[1820,"haar_lib::geom::convex"],[1821,"haar_lib::geom::convex_cut"],[1822,"haar_lib::geom::convex_diameter"],[1823,"haar_lib::geom::convex_hull"],[1840,"haar_lib::geom::dist_line_point"],[1841,"haar_lib::geom::dist_segment_point"],[1842,"haar_lib::geom::dist_segments"],[1843,"haar_lib::geom::incircle"],[1844,"haar_lib::geom::intersect_circle_line"],[1865,"haar_lib::geom::intersect_circle_segment"],[1890,"haar_lib::geom::intersect_circles"],[1918,"haar_lib::geom::intersect_line_segment"],[1941,"haar_lib::geom::intersect_segments"],[1964,"haar_lib::geom::point_in_polygon"],[1985,"haar_lib::geom::tangent_circle"],[1986,"haar_lib::graph"],[2087,"haar_lib::graph::articulation_points"],[2088,"haar_lib::graph::bellman_ford"],[2090,"haar_lib::graph::bfs"],[2091,"haar_lib::graph::biconnected"],[2093,"haar_lib::graph::bipartite"],[2094,"haar_lib::graph::bridges"],[2095,"haar_lib::graph::chinese_postman"],[2096,"haar_lib::graph::chu_liu_edmonds"],[2097,"haar_lib::graph::cycle"],[2098,"haar_lib::graph::cycle::directed_shortest"],[2099,"haar_lib::graph::detect_cycle"],[2100,"haar_lib::graph::dijkstra"],[2101,"haar_lib::graph::enumerate_triangles"],[2102,"haar_lib::graph::eulerian"],[2104,"haar_lib::graph::eulerian::directed"],[2119,"haar_lib::graph::eulerian::undirected"],[2134,"haar_lib::graph::functional_graph"],[2176,"haar_lib::graph::kruskal"],[2177,"haar_lib::graph::lowlink"],[2197,"haar_lib::graph::max_independent_set"],[2198,"haar_lib::graph::prim"],[2199,"haar_lib::graph::pseudo_tree"],[2211,"haar_lib::graph::scc"],[2223,"haar_lib::graph::tsort"],[2224,"haar_lib::graph::tsp"],[2225,"haar_lib::graph::two_edge"],[2226,"haar_lib::graph::warshall_floyd"],[2227,"haar_lib::graph::yen"],[2229,"haar_lib::grid"],[2290,"haar_lib::grid::to_graph"],[2291,"haar_lib::linalg"],[2298,"haar_lib::linalg::determinant_mod_2"],[2299,"haar_lib::linalg::determinant_p"],[2300,"haar_lib::linalg::gaussian_elim_mod_2"],[2301,"haar_lib::linalg::inverse_mod_2"],[2302,"haar_lib::linalg::inverse_p"],[2303,"haar_lib::linalg::matrix"],[2330,"haar_lib::linalg::square_matrix"],[2360,"haar_lib::macros"],[2374,"haar_lib::matching"],[2376,"haar_lib::matching::bi_match"],[2388,"haar_lib::matching::hopcroft_karp"],[2414,"haar_lib::math"],[2443,"haar_lib::math::bell_number"],[2444,"haar_lib::math::berlekamp_massey"],[2445,"haar_lib::math::binomial_coefficient"],[2473,"haar_lib::math::convolution"],[2480,"haar_lib::math::convolution::conv_and"],[2481,"haar_lib::math::convolution::conv_or"],[2482,"haar_lib::math::convolution::mobius_sub"],[2483,"haar_lib::math::convolution::mobius_super"],[2484,"haar_lib::math::convolution::subset_conv"],[2485,"haar_lib::math::convolution::zeta_sub"],[2486,"haar_lib::math::convolution::zeta_super"],[2487,"haar_lib::math::count_coprime"],[2488,"haar_lib::math::crt"],[2490,"haar_lib::math::divisor"],[2492,"haar_lib::math::enumerate_quotients"],[2510,"haar_lib::math::ext_gcd"],[2511,"haar_lib::math::factorial"],[2536,"haar_lib::math::factorial_prime_factor"],[2537,"haar_lib::math::factorize"],[2539,"haar_lib::math::factorize::sieve"],[2550,"haar_lib::math::factorize::trial"],[2551,"haar_lib::math::gcd_lcm"],[2556,"haar_lib::math::linear_congruence"],[2557,"haar_lib::math::miller_rabin"],[2558,"haar_lib::math::mod_ops"],[2564,"haar_lib::math::mod_ops::enum_inv"],[2565,"haar_lib::math::mod_ops::inv"],[2566,"haar_lib::math::mod_ops::inv_p"],[2567,"haar_lib::math::mod_ops::log"],[2568,"haar_lib::math::mod_ops::pow"],[2569,"haar_lib::math::mod_ops::sqrt"],[2570,"haar_lib::math::montmort"],[2571,"haar_lib::math::multipoint_eval"],[2572,"haar_lib::math::nim_product"],[2576,"haar_lib::math::ntt"],[2587,"haar_lib::math::polynomial"],[2631,"haar_lib::math::polynomial_taylor_shift"],[2632,"haar_lib::math::prime_test"],[2634,"haar_lib::math::prime_test::eratosthenes"],[2645,"haar_lib::math::prime_test::traits"],[2647,"haar_lib::math::primitive_root"],[2648,"haar_lib::math::rational"],[2674,"haar_lib::math::sum_floor_linear"],[2675,"haar_lib::math::sum_of_exponential_times_polynomial_limit"],[2676,"haar_lib::math::totient"],[2678,"haar_lib::math::totient_sum"],[2679,"haar_lib::misc"],[2682,"haar_lib::misc::dice"],[2709,"haar_lib::misc::paren"],[2710,"haar_lib::misc::parse_paren"],[2740,"haar_lib::misc::parse_paren::Elem"],[2743,"haar_lib::num"],[2748,"haar_lib::num::const_modint"],[2795,"haar_lib::num::ff"],[2807,"haar_lib::num::modint"],[2854,"haar_lib::num::num_inf"],[2880,"haar_lib::num::total_f64"],[2908,"haar_lib::testtools"],[2909,"haar_lib::traits"],[2911,"haar_lib::traits::num"],[2915,"haar_lib::traits::one_zero"],[2921,"haar_lib::tree"],[3018,"haar_lib::tree::centroid"],[3019,"haar_lib::tree::depth_query"],[3032,"haar_lib::tree::euler_tour"],[3044,"haar_lib::tree::hld"],[3065,"haar_lib::tree::lca"],[3078,"haar_lib::tree::rerooting"],[3089,"haar_lib::tree::rooted_isomorphism"],[3090,"haar_lib::tree::rooting"],[3091,"haar_lib::tree::tree_dp"],[3102,"haar_lib::tree::utils"],[3106,"haar_lib::utils"],[3114,"haar_lib::utils::bits"],[3115,"haar_lib::utils::fastio"],[3139,"haar_lib::utils::join_str"],[3141,"haar_lib::utils::linear"],[3158,"haar_lib::utils::swap"],[3159,"haar_lib::utils::transpose"],[3162,"haar_lib::utils::xor_shift"],[3177,"haar_lib::utils::yesno"]],"d":["代数的構造","","","","","","データ構造","","","幾何","","","グラフ一般に関するもの","","","","","","","macro_exportされたmacro置き場","","数学","","","分類を放置しているもの","","","…","","","","","","木に関するもの","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","二分探索","","座標圧縮","","","","","区間スケジューリング問題","転倒数","Knuth-Morris-Pratt法","ナップサック問題","最長共通部分列","最長増加部分列","Boyer-Moore majority vote algorithm","","最大連続部分和","","","","相異なる部分列の総数","並列二分探索","","Project Selection Problem","Run Length Encoding","","","スライド最小値","配列に対する範囲頻度取得クエリ","範囲転倒数取得クエリ","部分和問題","","","lower_bound, upper_boundの組を求める。","x以上となる最小のindexを求める。","xを超える最小のindexを求める。","","","","","","","二分探索","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","<code>i</code>番目の値を返す。","<code>value</code>が何番目の値(0-index)かを返す。","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","…","数列の転倒数を計算する。","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","個数制限付きナップサック問題","要素数が小さいナップサック問題","価値の総和が小さいナップサック問題","容量が小さいナップサック問題","個数制限無しナップサック問題","列a, bの最長共通部分列の一つを求める。","列の最長増加部分列の一つを求める。","","","…","…","…","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","返り値<code>ret</code>に対して、<code>ret[i]</code>は<code>a[0..i]</code>…","","","","","Project Selection Problem","","","","","Returns the argument unchanged.","頂点iが青ならばcの利益を得る。","頂点iとjがともに青ならばcの利益を得る。","頂点iとjがともに赤ならばcの利益を得る。","頂点iが赤ならばcの利益を得る。","頂点iが赤ならば、頂点jも赤…","Calls <code>U::from(self)</code>.","頂点iは青でなければならない。","頂点iは赤でなければならない。","","頂点iが青ならばcの損失になる。","頂点iとjが異なる色ならばcの損失となる。","頂点iが赤ならばcの損失になる。","頂点iが赤かつ頂点jが青…","must be制約を破った場合、<code>None</code>…","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","…","…","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Time Complexity $O(|a|)$","Time Complexity $O(log |a|)$","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","部分和問題 …","…","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Convex Hull Trick","1次元累積和","2次元累積和","半群の列の区間演算を行う(O(1))","","","","","","","","","係数乗算付き区間加算区間総和遅延セグ木","遅延加算付き融合可能ヒープ","Li-Chao tree","","","部分永続UnionFind","永続配列","永続キュー","永続スタック","ポテンシャル付きUnionfind","64分木","領域内の点を列挙する","ロールバック可能Vec","","","区間一次関数加算セグメントツリー","","融合可能ヒープ","冪等性と結合性をもつ列の区間取得(O(1))","区間加算・区間Max(Min)","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","…","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","…","","","","","","","","","","","","","","","","","","","","","","","Time complexity O(1)","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Time Complexity O(1)","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","使用する点を登録する。","","","","","","","","","","","Time Complexity $O(\\\\log ^ 2 n)$","Time Complexity $O(\\\\log ^ 2 n)$","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Time Complexity $O(\\\\log ^ 2 n)$","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","時刻tでの状態","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","最新時点の状態","","","","Complexity","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","永続スタック","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","　0 ~ 16777215 ($2^24 - 1$) の値の集合を管理する","","","xを含むかどうかを判定する","","xを集合から削除する","Safety","Returns the argument unchanged.","xを集合に加える","Safety","Calls <code>U::from(self)</code>.","集合が空かどうかを判断する","集合に含まれている要素数を返す","最大値を返す","x以下で最大の値を返す","最小値を返す","x以上で最小の値を返す","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","範囲<code>l..r</code>に一次関数<code>ax + b</code>の値を加算する。(<code>x</code>…","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","[l, r) に含まれる<code>b</code>の個数","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","[0, index) に含まれる<code>b</code>の個数","nth(0-indexed)番目の<code>b</code>の位置","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","<code>index</code>番目の値を得る。","","","","","<code>range</code>に含まれる<code>value</code>の個数。","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>range</code>での最大値","<code>range</code>での最小値","","<code>range</code>で<code>lb</code>以上の最小値","<code>range</code>で<code>ub</code>未満の最大値","<code>range</code>でk(0-indexed)番目に小さい値。","<code>range</code>で<code>lb</code>以上<code>ub</code>未満の値の個数","[0, index)に含まれる<code>value</code>の個数。","<code>nth</code>(0-indexed)番目の<code>value</code>の位置。","","","","","","","","","最大流 (Dinic)","最大流 (Ford-Fulkerson)","","","最小費用流","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","円と多角形の共通部分の面積","2つの円の共通部分の面積","多角形の面積","","","","","","","","","点と線分の位置関係","","三角形の外接円","","","","","","","","","最近点対","2つの円の共通接線","凸多角形の判定","凸多角形の直線での切断","凸多角形の直径","凸包","","","","","","","直線と点の距離","線分と点の距離","2つの線分間の距離","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","三角形の内接円","円と直線の位置関係","円と線分の位置関係","2つの円の位置関係","直線と線分の位置関係","2つの線分の位置関係","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","点と多角形の位置関係","","","","","","点を通る円の接線","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","関節点の列挙","負閉路を持つグラフの最短経路 (Bellman-Ford)","","二重頂点連結分解","二部グラフ判定","","","","","","","","","橋の列挙","中国人郵便配達問題","有向グラフ上の最小有向全域木を求める","","","","","","","","","","有向グラフの閉路検出","非負重み付き最短経路 (Dijkstra)","","","(準)Eulerグラフの判定","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","最小全域木 (Kruskal)","","","最大独立集合","","","最小全域木 (Prim)","","","","強連結成分分解","","","","","","","","","","","","","","","","トポロジカルソート","巡回セールスマン問題","二重辺連結成分分解","","","","","","","","","全頂点間最短経路長","","","","","","","","","","","","橋の列挙","Time complexity O(V ^ 2 * 2 ^ V)","有向グラフ上の最小有向全域木を求める","…","…","","Time complexity O((E + V) log V)","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","…","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","最大独立集合を求める","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Time complexity O(N)","","","Time complexity O(n ^ 3)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","グリッドをグラフに変換する","","","","","","","","","素数mod p上での行列式を求める。 $O(n^3)$","","","素数mod p上での逆行列を求める。 $O(n^3)$","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","二部マッチング","二部マッチング (Hopcroft-Karp)","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","中国剰余定理","約数列挙","","拡張ユークリッドの互除法","","$a!$の素因数pの個数を求める。","","最大公約数・最小公倍数","","","mod mでの演算","","","","","","","","原始根","有理数","$\\\\sum_{i=0}^{n-1} \\\\lfloor \\\\frac{ai+b}{m} \\\\rfloor$","$\\\\sum_{i=0}^{\\\\infty} r^ii^d$","トーシェント関数","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Time complexity O(sqrt n)","Time complexity O(sqrt n)","","","","","","1以上N以下の自然数xについて<code>floor(N/x)</code>…","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","n個からk個とりだす組み合わせの個数 (nCk)","nの階乗","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","nの階乗の逆元","Time complexity O(n)","n個からk個とりだす順列の個数 (nPk)","","","","","","$a!$の素因数pの個数を求める。","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","ax + b = 0 (mod m) を満たすxを求める。","","0,1,..,nの素数mod pでの逆元を列挙する。","mod mでの逆元","素数mod pでの逆元","$a^x = b \\\\bmod m$を満たすxを求める。","$x^p \\\\bmod m$を求める。","$x^2 = a \\\\bmod p$を満たすxを一つ求める。","0,1,..,nの素数mod pでの逆元を列挙する。","mod mでの逆元","素数mod pでの逆元","$a^x = b \\\\bmod m$を満たすxを求める。","$x^p \\\\bmod m$を求める。","$x^2 = a \\\\bmod p$を満たすxを一つ求める。","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","$\\\\sum_{i=0}^{\\\\infty} r^ii^d$","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","括弧列が対応が取れているかを調べる","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","正の無限大、負の無限大をもつ数","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","浮動小数点型","整数型","符号付きの数値型","非負の数値型","乗算についての単位元をもつ","","","加算についての単位元をもつ","","","","","","","","","","","","","","","","","","","","","","重心列挙","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","重軽分解","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","最小共通祖先","","","","","","","","","全方位木DP","","","","","根付き木に変換","","","","","","","木DP","","","","","","","","","","","","","","","","","","","","","","","","","","Tree depth query","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","重軽分解","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","演算は可換性を仮定する。","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","…","","","","","","全方位木DP","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","木の任意の2頂点の距離の最大値を求める。","…","…","…","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,101,101,101,101,101,101,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,0,33,33,33,34,33,34,33,34,33,34,33,34,33,34,33,34,34,33,34,34,34,34,33,34,33,34,33,34,33,34,33,34,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,0,0,0,0,0,0,0,0,0,37,0,36,222,38,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,52,52,0,52,52,0,52,52,52,52,52,52,223,223,0,0,54,54,56,54,56,54,54,56,54,56,54,56,56,54,56,54,56,56,56,54,54,56,56,54,56,54,56,54,56,54,56,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,59,59,59,59,59,59,59,59,59,59,0,62,62,62,62,62,62,62,62,62,62,62,0,0,0,63,63,63,63,63,63,63,63,63,63,63,63,63,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,65,65,65,65,65,65,65,65,65,65,0,0,0,0,0,0,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,0,0,0,69,71,69,71,69,71,69,71,69,69,71,69,69,71,69,71,69,71,69,71,0,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,0,0,0,74,74,74,74,74,74,74,74,74,74,0,75,75,75,75,75,75,75,75,75,75,75,0,0,0,0,0,76,76,76,76,76,76,76,76,76,76,76,76,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,0,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,0,0,82,82,0,80,82,80,82,80,82,80,82,80,82,82,80,82,80,82,80,80,80,82,80,82,80,82,80,82,80,82,80,0,0,0,0,84,85,84,85,84,85,85,85,85,84,85,85,84,85,84,85,84,85,84,85,84,85,84,84,85,0,0,0,0,86,87,86,87,86,87,87,87,87,86,87,87,86,87,86,87,86,87,86,87,86,87,86,86,87,0,0,0,89,89,89,89,89,89,89,89,89,89,0,0,0,91,91,91,91,91,91,91,91,91,91,91,91,91,0,92,92,92,92,92,92,92,92,92,92,92,92,0,0,0,0,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,0,0,0,0,96,96,96,96,96,96,96,96,96,96,96,96,96,0,0,97,97,98,97,98,97,97,98,97,98,97,98,98,97,98,97,98,97,97,98,97,98,97,98,97,98,98,97,98,0,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,0,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,0,0,102,102,102,102,102,102,102,102,102,102,102,0,0,0,0,104,104,104,104,104,104,104,104,104,104,104,104,0,0,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,0,0,110,110,0,108,108,108,110,108,110,110,110,110,110,108,110,108,110,108,108,110,108,110,108,110,108,110,108,110,0,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,0,0,113,112,113,112,112,112,113,112,113,113,112,113,112,113,112,113,113,113,113,112,113,112,113,112,113,112,0,0,114,114,115,114,115,114,115,114,115,115,114,114,114,115,115,114,115,114,115,114,115,114,115,0,116,116,116,116,116,116,116,116,116,116,116,0,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,0,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,0,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,0,0,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,0,0,121,122,121,122,121,121,121,121,121,122,121,122,121,121,122,121,122,121,122,121,122,121,122,121,0,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,0,0,0,0,0,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,0,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,0,0,0,128,128,128,128,128,128,128,128,128,128,128,0,0,129,130,129,130,129,129,129,129,129,130,130,129,130,129,129,129,130,129,130,129,130,129,130,130,129,0,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,0,134,134,134,134,134,134,134,134,134,134,0,0,135,135,0,0,0,137,135,137,135,135,135,137,137,135,137,135,137,135,137,135,137,135,137,135,137,137,135,0,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,0,0,0,0,224,225,226,0,227,228,227,224,225,226,228,0,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,0,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,179,0,179,0,0,179,179,0,179,179,0,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,0,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,0,143,143,143,143,143,143,143,143,143,143,143,143,143,143,0,0,0,0,144,145,144,144,144,144,0,0,0,146,144,145,147,146,144,145,147,0,147,0,146,144,145,147,146,144,145,147,0,0,0,0,0,0,144,145,144,145,147,145,0,0,0,144,144,145,146,144,145,147,144,145,147,146,144,145,147,145,146,146,0,0,0,0,0,0,146,144,145,147,145,145,146,146,144,146,146,145,147,144,145,146,0,144,145,147,145,144,0,145,146,144,145,147,146,144,145,147,146,144,145,147,146,144,145,147,144,145,146,144,145,147,0,0,0,0,149,149,149,149,149,149,149,0,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,0,0,0,0,0,0,0,150,150,150,150,150,150,0,150,150,0,150,150,150,150,150,150,0,0,0,0,151,0,151,151,151,151,151,151,151,151,151,151,0,151,151,151,151,151,151,151,151,152,0,152,152,152,152,152,152,152,152,152,152,152,152,0,152,152,152,152,152,152,152,152,152,152,153,153,153,153,0,153,153,153,153,153,153,153,153,153,153,153,153,0,153,153,153,153,153,153,153,153,153,153,154,0,154,154,154,154,154,154,154,154,154,154,154,0,154,154,154,154,154,154,154,154,154,155,0,155,155,155,155,155,155,155,155,155,155,0,155,155,155,155,155,155,155,155,155,155,156,156,156,0,156,156,156,156,156,156,156,156,156,156,156,0,156,156,156,156,156,0,0,0,0,0,0,0,158,159,159,0,0,0,0,0,161,157,160,159,161,157,160,159,0,0,0,161,157,160,159,161,157,160,159,0,0,0,159,0,0,159,159,161,157,160,159,158,161,161,157,160,159,161,0,161,161,157,160,159,159,0,159,0,0,161,159,0,0,158,161,0,158,161,161,161,157,160,159,161,157,160,159,161,157,160,159,0,0,0,161,157,160,159,161,157,160,159,0,158,161,161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,166,166,166,166,166,166,166,166,166,166,166,166,166,0,167,167,167,167,167,167,167,167,167,167,167,167,167,167,170,0,0,0,170,170,168,168,169,170,168,169,170,168,170,170,170,170,168,169,170,169,168,169,170,169,169,168,169,170,168,169,170,168,169,170,168,169,170,168,169,170,0,0,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,0,0,0,171,171,171,171,171,171,0,171,171,171,171,0,172,172,172,172,172,172,172,172,172,172,172,0,0,0,0,0,0,173,173,0,0,173,0,173,173,173,174,173,175,174,173,175,174,173,175,174,173,175,174,173,173,173,174,173,174,173,175,174,173,175,175,174,173,175,175,175,174,174,173,175,0,174,173,175,174,173,175,174,173,175,174,173,175,174,173,175,174,174,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,0,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,180,180,180,180,180,180,180,180,180,180,0,0,181,181,182,181,182,182,182,182,181,182,181,181,182,181,181,182,181,182,181,182,181,182,181,182,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,183,184,183,184,183,184,183,184,183,184,183,184,183,184,183,184,183,184,183,184,183,184,183,184,183,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,185,185,185,185,0,185,185,185,185,185,185,185,185,185,185,185,185,0,0,0,186,0,186,186,186,0,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,0,0,0,0,187,187,187,187,187,187,187,187,187,187,0,0,229,229,229,229,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,191,191,191,191,191,191,191,191,191,0,0,190,190,190,188,190,188,188,188,188,188,188,190,188,188,188,190,188,188,188,190,188,190,188,188,190,190,190,190,188,190,190,190,188,190,188,190,188,190,188,190,188,188,0,0,0,0,192,192,192,192,192,192,192,192,192,192,0,230,0,0,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,0,0,0,0,0,0,0,0,0,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,0,0,196,0,196,195,196,195,196,195,196,195,196,195,195,196,195,196,195,196,0,195,196,195,196,195,196,195,196,195,196,231,231,231,0,0,0,0,0,0,0,189,189,197,189,197,189,197,189,197,189,189,189,189,197,189,189,189,197,197,189,197,197,197,189,189,189,189,189,197,189,189,189,189,197,189,189,189,197,189,197,189,197,189,197,189,0,0,0,232,233,176,0,176,176,176,233,232,0,0,199,199,200,199,200,199,200,199,200,199,199,199,200,199,200,199,199,200,200,199,200,200,200,199,199,199,199,199,200,199,199,199,199,200,199,199,199,200,199,200,199,200,199,200,199,164,164,0,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,0,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,0,0,0,0,0,0,0,0,18,17,0,17,18,0,0,0,0,0,0,205,206,208,209,210,207,206,208,209,210,207,206,208,0,210,209,210,207,209,210,207,210,0,0,206,208,209,210,207,205,206,208,209,209,210,207,209,0,209,206,208,209,210,207,207,0,207,210,210,206,208,209,207,210,0,205,209,207,0,0,205,209,209,209,210,207,0,206,208,209,210,207,206,208,209,210,207,206,208,209,210,207,0,206,208,209,210,207,205,209,209,0,0,212,212,212,212,212,212,212,212,212,212,212,212,0,213,213,213,213,213,213,213,213,213,213,213,0,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,0,215,215,215,215,215,215,215,215,215,215,215,215,0,216,216,216,216,216,216,216,216,216,216,0,0,0,217,217,217,217,217,217,217,217,217,217,0,0,0,0,0,0,0,0,0,0,0,0,0,0,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,0,234,0,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,0,235,0,235,0,221,221,221,221,221,221,221,221,221,221,221,221,221,221,0,236],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[]],[[]],[[]],[[]],0,[[]],[[]],[[[3,[2,2]]],[[3,[2,2]]]],[[]],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]],[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]],1],[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]]]],[[],[[3,[5,5]]]],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]],[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]]],[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]]]],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]]],[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]]]],[[]],[[]],[[],3],[[]],[[],9],[[],9],[[],10],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]],[0,[4,6,5,[8,[7]]]],[0,[4,6,5,[8,[7]]]]],[[0,[4,6,5,[8,[7]]]]]],[[[3,[[0,[4,5,[8,[[0,[4,6,5,[8,[7]]]]]]]],[0,[4,6,5,[8,[7]]]]]]],[[0,[4,6,5,[8,[7]]]]]],[[]],0,[[]],[[]],[[[11,[2]]],[[11,[2]]]],[[]],[[],[[11,[5]]]],[[[11,[12]],[11,[12]]],13],[[[11,[14]],15],16],[[]],[[[11,[[0,[17,18,19]]]]]],[[]],[[],11],[[[11,[[0,[4,6,19]]]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[20,[2]]],[[20,[2]]]],[[]],[[],[[20,[5]]]],[[[20,[12]],[20,[12]]],13],[[[20,[14]],15],16],[[]],[[[20,[21]]]],[[[20,[1]]]],[[[20,[22]]]],[[[20,[23]]]],[[[20,[7]]]],[[[20,[24]]]],[[]],[[],20],[[[20,[7]]]],[[[20,[24]]]],[[[20,[21]]]],[[[20,[1]]]],[[[20,[23]]]],[[[20,[22]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[25,[2]]],[[25,[2]]]],[[]],[[],[[25,[5]]]],[[[25,[12]],[25,[12]]],13],[[[25,[14]],15],16],[[]],[[[25,[7]]]],[[[25,[21]]]],[[[25,[22]]]],[[[25,[24]]]],[[[25,[23]]]],[[[25,[1]]]],[[]],[[],25],[[[25,[24]]]],[[[25,[7]]]],[[[25,[22]]]],[[[25,[1]]]],[[[25,[23]]]],[[[25,[21]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[26,[2]]],[[26,[2]]]],[[]],[[],[[26,[5]]]],[[[26,[12]],[26,[12]]],13],[[[26,[14]],15],16],[[]],[[[26,[27]]]],[[[26,[28]]]],[[[26,[1]]]],[[[26,[29]]]],[[[26,[22]]]],[[[26,[30]]]],[[[26,[31]]]],[[[26,[32]]]],[[[26,[7]]]],[[[26,[21]]]],[[[26,[23]]]],[[[26,[24]]]],[[]],[[[26,[28]]]],[[[26,[29]]]],[[[26,[21]]]],[[[26,[7]]]],[[[26,[24]]]],[[[26,[32]]]],[[[26,[23]]]],[[[26,[22]]]],[[[26,[1]]]],[[[26,[31]]]],[[[26,[30]]]],[[[26,[27]]]],[[],26],[[[26,[31]]]],[[[26,[1]]]],[[[26,[32]]]],[[[26,[23]]]],[[[26,[30]]]],[[[26,[7]]]],[[[26,[22]]]],[[[26,[28]]]],[[[26,[27]]]],[[[26,[29]]]],[[[26,[21]]]],[[[26,[24]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[33,33],[34,34],[[]],[[]],[[33,33],13],[[34,34],13],[[33,15],16],[[34,15],16],[[]],[[]],[34],[[]],[[]],[34],[1,34],[34],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,[[]],[[]],[[[35,[2]]],[[35,[2]]]],[[]],[[],[[35,[5]]]],[[[35,[12]],[35,[12]]],13],[[[35,[14]],15],16],[[]],[[[35,[36]]]],[[]],[37,[[35,[37]]]],[[[35,[38]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[39,[2]]],[[39,[2]]]],[[]],[[],[[39,[5]]]],[[[39,[12]],[39,[12]]],13],[[[39,[14]],15],16],[[]],[[[39,[21]]]],[[[39,[30]]]],[[[39,[29]]]],[[[39,[24]]]],[[[39,[32]]]],[[[39,[27]]]],[[[39,[23]]]],[[[39,[1]]]],[[[39,[28]]]],[[[39,[31]]]],[[[39,[7]]]],[[[39,[22]]]],[[]],[[],39],[[[39,[1]]]],[[[39,[31]]]],[[[39,[23]]]],[[[39,[32]]]],[[[39,[28]]]],[[[39,[7]]]],[[[39,[21]]]],[[[39,[30]]]],[[[39,[24]]]],[[[39,[22]]]],[[[39,[29]]]],[[[39,[27]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[40,[2]]],[[40,[2]]]],[[]],[[],[[40,[5]]]],[[[40,[12]],[40,[12]]],13],[[[40,[14]],15],16],[[]],[[[40,[23]]]],[[[40,[31]]]],[[[40,[30]]]],[[[40,[27]]]],[[[40,[24]]]],[[[40,[21]]]],[[[40,[29]]]],[[[40,[7]]]],[[[40,[1]]]],[[[40,[28]]]],[[[40,[22]]]],[[[40,[32]]]],[[]],[[],40],[[[40,[30]]]],[[[40,[1]]]],[[[40,[31]]]],[[[40,[21]]]],[[[40,[28]]]],[[[40,[29]]]],[[[40,[7]]]],[[[40,[23]]]],[[[40,[27]]]],[[[40,[32]]]],[[[40,[22]]]],[[[40,[24]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[41,[2]]],[[41,[2]]]],[[]],[[],[[41,[5]]]],[[[41,[12]],[41,[12]]],13],[[[41,[14]],15],16],[[]],[[[41,[23]]]],[[[41,[42]]]],[[[41,[24]]]],[[[41,[1]]]],[[[41,[21]]]],[[[41,[29]]]],[[[41,[28]]]],[[[41,[30]]]],[[[41,[7]]]],[[[41,[43]]]],[[[41,[27]]]],[[[41,[32]]]],[[[41,[22]]]],[[[41,[31]]]],[[]],[[],41],[[[41,[43]]]],[[[41,[42]]]],[[[41,[31]]]],[[[41,[30]]]],[[[41,[23]]]],[[[41,[21]]]],[[[41,[28]]]],[[[41,[7]]]],[[[41,[22]]]],[[[41,[29]]]],[[[41,[27]]]],[[[41,[24]]]],[[[41,[1]]]],[[[41,[32]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[44,[2]]],[[44,[2]]]],[[]],[[],[[44,[5]]]],[[[44,[12]],[44,[12]]],13],[[[44,[14]],15],16],[[]],[[[44,[28]]]],[[[44,[1]]]],[[[44,[24]]]],[[[44,[30]]]],[[[44,[32]]]],[[[44,[27]]]],[[[44,[43]]]],[[[44,[31]]]],[[[44,[22]]]],[[[44,[21]]]],[[[44,[29]]]],[[[44,[7]]]],[[[44,[23]]]],[[[44,[42]]]],[[]],[[[44,[28]]]],[[[44,[32]]]],[[[44,[29]]]],[[[44,[42]]]],[[[44,[27]]]],[[[44,[43]]]],[[[44,[31]]]],[[[44,[30]]]],[[],44],[[[44,[42]]]],[[[44,[24]]]],[[[44,[27]]]],[[[44,[22]]]],[[[44,[31]]]],[[[44,[1]]]],[[[44,[43]]]],[[[44,[30]]]],[[[44,[28]]]],[[[44,[7]]]],[[[44,[29]]]],[[[44,[21]]]],[[[44,[23]]]],[[[44,[32]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],0,[[]],[[]],[[[45,[2]]],[[45,[2]]]],[[]],[[],[[45,[5]]]],[[[45,[12]],[45,[12]]],13],[[[45,[14]],15],16],[[]],[45],[[]],[[],45],[45],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[46,[2,2]]],[[46,[2,2]]]],[[]],[[[46,[[0,[4,5,[8,[[0,[6,5,[8,[7]]]]]]]],[0,[6,5,[8,[7]]]]]],1]],[[],[[46,[5,5]]]],[[[46,[[0,[4,5,[8,[[0,[6,5,[8,[7]]]]]]]],[0,[6,5,[8,[7]]]]]]]],[[[46,[[0,[4,5,[8,[[0,[6,5,[8,[7]]]]]]]],[0,[6,5,[8,[7]]]]]]]],[[]],[[]],[[],46],[[]],[[],9],[[],9],[[],10],[[[46,[[0,[4,5,[8,[[0,[6,5,[8,[7]]]]]]]],[0,[6,5,[8,[7]]]]]]]],[[[46,[[0,[4,5,[8,[[0,[6,5,[8,[7]]]]]]]],[0,[6,5,[8,[7]]]]]]]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[47],[47,1],[47,1],0,0,0,0,[[]],[[]],[[[0,[19,48,4,49,50,[8,[24]]]],[0,[19,48,4,49,50,[8,[24]]]],51],[[52,[[0,[19,48,4,49,50,[8,[24]]]]]]]],[[]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,[[[54,[[0,[2,47,53]]]],[0,[2,47,53]]]],[[[54,[[0,[2,47,53]]]],55]],[[]],[[]],[[]],[[]],[[[54,[[0,[2,47,53]]]]],[[56,[[0,[2,47,53]]]]]],[[[56,[2]]],[[56,[2]]]],[[[54,[2]]],[[54,[2]]]],[[]],[[]],[[[56,[[0,[2,47,53]]]],55],57],[[[56,[[0,[2,47,53]]]],55],57],[[],[[54,[5]]]],[[]],[[]],[[[56,[[0,[2,47,53]]]],1],[[0,[2,47,53]]]],[[[56,[[0,[2,47,53]]]],[0,[2,47,53]]],1],[[]],[[]],[[],[[54,[[0,[2,47,53]]]]]],[[[56,[[0,[2,47,53]]]]],1],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],[[],1],0,0,0,0,0,0,0,[23,57],[23,57],[[23,23],57],[23,57],[[23,23],57],[[23,23],57],[[23,23],57],0,[[]],[[]],[[[59,[[0,[19,58,18,4,49]]]]],[[60,[[0,[19,58,18,4,49]]]]]],[[]],[[]],[1,[[59,[[0,[19,58,18,4,49]]]]]],[[],9],[[],9],[[],10],[[[59,[[0,[19,58,18,4,49]]]],[61,[1]],[0,[19,58,18,4,49]]]],[[]],0,[[]],[[]],[[[62,[[0,[19,58,18,4,49]]]]],[[60,[[60,[[0,[19,58,18,4,49]]]]]]]],[[]],[[]],[[1,1],[[62,[[0,[19,58,18,4,49]]]]]],[[],9],[[],9],[[],10],[[[62,[[0,[19,58,18,4,49]]]],[61,[1]],[61,[1]],[0,[19,58,18,4,49]]]],[[]],[[],[[60,[1]]]],[[],7],0,[[]],[[]],[[[63,[2]]],[[63,[2]]]],[[]],[[[63,[14]],15],16],[[]],[[]],[[[63,[[0,[12,2]]]]],[[60,[1]]]],[[[60,[[0,[12,2]]]]],[[63,[[0,[12,2]]]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,[1,[[0,[5,[8,[1]],19,47,4,6]]]],[[[0,[5,19,4,47]]],[[0,[5,19,4,47]]]],[7,1],[1,[[0,[5,19,47,4]]]],[1,[[0,[5,19,47,4]]]],[[],[[60,[[0,[19,12]]]]]],[[],[[60,[1]]]],[[],64],[[],[[60,[1]]]],[[],64],[[[0,[19,12]]],1],[[]],[1],[1],[[[60,[[0,[47,19]]]],[60,[[0,[47,19]]]]],[[60,[[0,[47,19]]]]]],0,[[65,1,1]],[[]],[[]],[[]],[[]],[[1,1,[66,[51]],[66,[51]],[66,[51]],[66,[51]],[66,[51]]],65],[65],[[],9],[[],9],[[],10],[[]],[7,[[60,[7]]]],[[1,1,67,67,67],[[60,[1]]]],[[],13],[[[60,[[0,[47,19]]]]],57],[[],13],0,[[]],[[]],[68,68],[[]],[[]],[[68,1,7]],[[68,1,1,7]],[[68,1,1,7]],[[68,1,7]],[[68,1,1]],[[]],[[68,1]],[[68,1]],[1,68],[[68,1,7]],[[68,1,1,7]],[[68,1,7]],[[68,1,1,7]],[68,[[64,[32]]]],[[]],[[],9],[[],9],[[],10],[[]],[[],60],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[69,70],7],[[71,[61,[1]]],7],[[69,70],71],[[]],[[]],[[1,7,7],69],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,[[]],[[]],[72,72],[[]],[[72,15],16],[[]],[[72,1]],[[]],[72,[[60,[1]]]],[70,72],[[]],[72],[[],9],[[],9],[[],10],[[]],[1,[[60,[[0,[47,19]]]]]],[1,[[60,[[0,[47,19]]]]]],0,[[]],[[]],[[]],[[]],[[[60,[[0,[73,53]]]]],[[74,[[0,[73,53]]]]]],[[[74,[[0,[73,53]]]],[61,[1]],[0,[73,53]]],1],[[],9],[[],9],[[],10],[[]],0,[[75,[61,[1]]]],[[]],[[]],[[]],[[]],[[],75],[75,[[60,[7]]]],[[],9],[[],9],[[],10],[[]],0,0,[[1,1],[[60,[[0,[19,[8,[1]],4]]]]]],[[1,1],[[60,[13]]]],0,[[76,31,31]],[[76,31,31]],[[]],[[]],[[]],[[]],[1,76],[[76,31,31]],[76,[[64,[[60,[13]]]]]],[[],9],[[],9],[[],10],[[]],[[],[[60,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[77,77],[[]],[[77,7],1],[[77,7],[[64,[1]]]],[[77,15],16],[[]],[[77,7],1],[[]],[77,13],[77,1],[[77,7],[[64,[7]]]],[[77,7],[[64,[7]]]],[1,77],[[]],[[],9],[[],9],[[],10],[[]],0,[[78,78]],[[78,78]],[[78,78]],[[78,78]],[[78,78]],[[78,78]],[[]],[[]],[78,78],[[]],[[78,1]],[[78,15],16],[[]],[[]],[78,1],[1,78],[[78,1,13]],[[78,1],13],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,[[[80,[79]],[81,[79]]]],[[]],[[]],[[]],[[]],[82,82],[[[80,[2]]],[[80,[2]]]],[[]],[[]],[[82,82],13],[[82,15],16],[[[80,[14]],15],16],[[]],[[]],[[]],[[]],[82,[[80,[79]]]],[[[80,[79]],79],79],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[[84,[83]]],[[85,[83]]]],[[[85,[[0,[2,83]]]]],[[85,[[0,[2,83]]]]]],[[]],[[[85,[[0,[14,83]]]],15],16],[[[85,[83]],[61,[1]]]],[[]],[[]],[[[85,[83]],1]],[[]],[[]],[[1,83],[[84,[83]]]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[[84,[83]],1,19]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[[86,[83]]],[[87,[83]]]],[[[87,[[0,[2,83]]]]],[[87,[[0,[2,83]]]]]],[[]],[[[87,[[0,[14,83]]]],15],16],[[[87,[83]],[61,[1]],[61,[1]]]],[[]],[[]],[[[87,[83]]]],[[]],[[]],[[1,1,83],[[86,[83]]]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[[86,[83]],1,1,19]],[[]],[[]],0,0,0,[[]],[[]],[[[89,[88]],[61,[1]]]],[[]],[[]],[[[60,[2]],88],[[89,[88]]]],[[],9],[[],9],[[],10],[[]],0,0,0,[[]],[[]],[[]],[[[91,[90]]]],[[[91,[90]],1],2],[[]],[[1,90],[[91,[90]]]],[[[91,[90]]],[[60,[2]]]],[[],9],[[],9],[[],10],[[[91,[90]],[61,[1]]]],[[]],0,[[[92,[[0,[90,2]]]],1,2]],[[]],[[]],[[[92,[[0,[14,90]]]],15],16],[[[92,[[0,[90,2]]]],[61,[1]]],2],[[]],[[]],[[[0,[90,2]]],[[92,[[0,[90,2]]]]]],[[],9],[[],9],[[],10],[[]],0,0,0,0,[[]],[[]],[[[93,[[0,[2,83]]]]],[[93,[[0,[2,83]]]]]],[[]],[[],[[93,[[0,[5,83]]]]]],[[[93,[83]],[61,[1]]]],[[[93,[83]],[94,[1]]]],[[]],[[]],[[1,83],[[93,[83]]]],[[]],[[],9],[[],9],[[],10],[[[93,[83]],1,2]],[[]],0,0,0,0,[[[96,[95]],1,95]],[[]],[[]],[[[96,[95]],[61,[1]]]],[[[96,[95]],[94,[1]]]],[[]],[[]],[1,[[96,[95]]]],[[[96,[95]],1,95]],[[],9],[[],9],[[],10],[[]],0,0,[[97,32,32]],[[]],[[]],[[]],[[]],[[97,19],[[98,[19]]]],[97,97],[[[98,[2]]],[[98,[2]]]],[[]],[[]],[[],97],[[[98,[[0,[19,4,49]]]],[61,[32]],[61,[32]]],[[0,[19,4,49]]]],[[[98,[[0,[19,4,49]]]],[94,[32]],[94,[32]]],[[0,[19,4,49]]]],[[]],[[]],[[]],[[]],[[],97],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[[98,[[0,[19,4,49]]]],32,32,[0,[19,4,49]]]],[[]],[[]],0,[[[99,[88]]],[[64,[2]]]],[[]],[[]],[[[99,[88]]],[[64,[2]]]],[[]],[[[99,[88]]],[[64,[2]]]],[[]],[[[99,[88]]],13],[[[99,[88]]],1],[88,[[99,[88]]]],[[[99,[88]]],[[64,[2]]]],[[[99,[88]]],[[64,[2]]]],[[[99,[88]],2]],[[[99,[88]],2]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[100,[2]]],[[100,[2]]]],[[]],[[],[[100,[5]]]],[[[100,[14]],15],16],[[]],[[]],[[[100,[47]]],13],[[[100,[47]]],1],[[[100,[47]]],[[64,[47]]]],[[[100,[47]]],[[64,[47]]]],[[],[[100,[47]]]],[[[100,[47]]],[[64,[47]]]],[[[100,[47]]],[[64,[47]]]],[[[100,[47]],47]],[[]],[[],9],[[],9],[[],10],[[]],0,0,[[]],[[]],[[[102,[[0,[2,53]],[0,[2,53]],[0,[2,101]]]],[61,[1]]],[[0,[2,53]]]],[[]],[[]],[[1,[0,[2,101]]],[[102,[[0,[2,53]],[0,[2,53]],[0,[2,101]]]]]],[[],9],[[],9],[[],10],[[[102,[[0,[2,53]],[0,[2,53]],[0,[2,101]]]],[61,[1]],[0,[2,53]]]],[[]],0,0,0,0,[[]],[[]],[[[104,[103]],[61,[1]]],103],[[]],[[[104,[103]],[60,[103]]]],[[]],[[1,[60,[103]]],[[104,[103]]]],[[],9],[[],9],[[],10],[[[104,[103]],[61,[1]],103]],[[]],0,0,[[[106,[105]],105]],[[]],[[]],[[[106,[2]]],[[106,[2]]]],[[]],[[],[[106,[5]]]],[[[106,[14]],15],16],[[]],[[]],[[[106,[105]]],13],[[[106,[105]]],1],[[[106,[105]],[106,[105]]]],[[],[[106,[105]]]],[[[106,[105]]],[[64,[105]]]],[[[106,[105]]],[[64,[105]]]],[[[106,[105]],105]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,[[[108,[107]],[81,[107]]]],[[[108,[107]],[81,[107]],[109,[107]]]],[[]],[[]],[[]],[[]],[110,110],[[]],[[110,110],13],[[110,15],16],[[]],[[]],[[]],[[]],[[[60,[107]],110],[[108,[107]]]],[[[108,[107]],107],[[64,[107]]]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,[[]],[[]],[[[111,[2]]],[[111,[2]]]],[[]],[[[111,[[0,[47,53,2]]]],[0,[47,53,2]]],13],[[[111,[[0,[47,53,2]]]],[0,[47,53,2]]],1],[[],[[111,[5]]]],[[[111,[[0,[47,53,2]]]]],[[64,[[0,[47,53,2]]]]]],[[[111,[14]],15],16],[[]],[[[111,[[0,[47,53,2]]]],[0,[47,53,2]]]],[[]],[[[111,[[0,[47,53,2]]]]],13],[[[111,[[0,[47,53,2]]]]],[[64,[[0,[47,53,2]]]]]],[[[111,[[0,[47,53,2]]]]],1],[[],[[111,[[0,[47,53,2]]]]]],[[[111,[[0,[47,53,2]]]]],[[64,[[0,[47,53,2]]]]]],[[[111,[[0,[47,53,2]]]]],[[64,[[0,[47,53,2]]]]]],[[[111,[[0,[47,53,2]]]],[0,[47,53,2]]],13],[[]],[[],9],[[],9],[[],10],[[]],0,0,[[]],[[]],[[]],[[]],[112,1],[[],112],[[]],[[]],[[113,1],[[64,[112]]]],[[113,1],[[64,[112]]]],[112,1],[[]],[[]],[113,1],[112,31],[70,113],[[113,1],[[64,[112]]]],[[113,1],[[64,[112]]]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,[[114,1],115],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[115,1,1],13],[114,115],[[114,1,1]],[1,114],[[115,1],1],[[115,1],1],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,[[]],[[]],[[]],[[[116,[2]],1],2],[[]],[[1,2],[[116,[2]]]],[[[116,[2]],1,2],[[116,[2]]]],[[],9],[[],9],[[],10],[[]],0,[117,64],[[]],[[]],[[],[[117,[5]]]],[[[117,[14]],15],16],[[]],[117,64],[[]],[117,13],[117,1],[[],117],[117,[[64,[117]]]],[117,117],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[118,[2]]],[[118,[2]]]],[[]],[[],[[118,[5]]]],[[[118,[14]],15],16],[[]],[[]],[118,57],[[],118],[118,64],[118,[[64,[118]]]],[118,118],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[119,[[0,[18,4,49,19]]]]],1],[[[119,[[0,[18,4,49,19]]]],1,1],[[64,[[0,[18,4,49,19]]]]]],[[]],[[[119,[[0,[18,4,49,19]]]]],[[60,[[60,[1]]]]]],[[]],[[[119,[[0,[18,4,49,19]]]],1,1],13],[[[119,[[0,[18,4,49,19]]]],1,1,[0,[18,4,49,19]]],1],[1,[[119,[[0,[18,4,49,19]]]]]],[[[119,[[0,[18,4,49,19]]]],1],[[0,[18,4,49,19]]]],[[[119,[[0,[18,4,49,19]]]],1],1],[[[119,[[0,[18,4,49,19]]]],1],1],[[],9],[[],9],[[],10],[[]],0,0,[[]],[[]],[[120,23],13],[[],120],[[120,23],13],[[120,23]],[[]],[[120,23],13],[[120,23]],[[]],[120,13],[120,1],[120,[[64,[23]]]],[[120,23],[[64,[23]]]],[120,[[64,[23]]]],[[120,23],[[64,[23]]]],[[],120],[[],9],[[],9],[[],10],[[]],0,0,[[[121,[[0,[19,47]]]],[0,[19,47]],[0,[19,47]]]],[[]],[[]],[[]],[[]],[[[121,[[0,[19,47]]]]],[[122,[[0,[19,47]]]]]],[[[121,[2]]],[[121,[2]]]],[[]],[[],[[121,[5]]]],[[]],[[]],[[]],[[]],[[],[[121,[[0,[19,47]]]]]],[[[122,[[0,[19,47]]]]],60],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,[[[123,[2]],1,2]],[[]],[[]],[[[123,[2]]],[[123,[2]]]],[[]],[[],[[123,[5]]]],[[[123,[14]],15],16],[60,123],[[]],[[123,1]],[[]],[[[123,[2]]],13],[[[123,[2]]],1],[[],[[123,[2]]]],[[[123,[2]]],[[64,[2]]]],[[[123,[2]],2]],[[[123,[2]]],13],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,[[[124,[90]],1,2]],[[]],[[]],[[[124,[[0,[2,90]]]]],[[124,[[0,[2,90]]]]]],[[]],[[[124,[90]],[125,[1]]]],[[]],[[[124,[90]],1]],[[]],[[1,90],[[124,[90]]]],[[]],[[],9],[[],9],[[],10],[[[124,[90]],1,2]],[[]],0,[[126,[61,[1]],32]],[[]],[[]],[[126,[61,[1]],32]],[[126,[61,[1]],32]],[126,126],[[]],[[126,15],16],[[]],[[126,[61,[1]]],32],[[126,[61,[1]]],32],[[126,[61,[1]]],32],[[]],[1,126],[[[60,[32]]],126],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,[[]],[[]],[[]],[[[128,[127]],1]],[[]],[1,[[128,[127]]]],[[],9],[[],9],[[],10],[[[128,[127]],[61,[1]],[81,[127]]]],[[]],0,0,[[129,32,32]],[[]],[[]],[[]],[[]],[[129,[0,[90,2]]],[[130,[[0,[90,2]]]]]],[129,129],[[]],[[],129],[[[130,[90]],[61,[32]],[61,[32]]],2],[[]],[[]],[[]],[[]],[[],129],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[[130,[90]],32,32,2]],[[]],[[]],0,[[]],[[]],[[[131,[2]]],[[131,[2]]]],[[]],[[],[[131,[5]]]],[[[131,[14]],15],16],[[]],[[]],[[[131,[47]]],13],[[[131,[47]]],1],[[[131,[47]],[131,[47]]]],[[],[[131,[47]]]],[[[131,[47]]],[[64,[47]]]],[[[131,[47]]],[[64,[47]]]],[[[131,[47]],47]],[[]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[[134,[[0,[38,132,133]]]],[61,[1]]]],[[]],[[]],[[[60,[[0,[2,5]]]],[0,[38,132,133]]],[[134,[[0,[38,132,133]]]]]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[135,135],[[]],[[[137,[136]],[61,[1]]]],[[]],[[]],[[]],[[]],[[1,135],[[137,[136]]]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[[137,[136]],[61,[1]],136]],[[]],[[]],0,[[138,1],7],[[]],[[]],[138,138],[[]],[[138,[61,[1]],13],1],[[]],[[]],[138,13],[138,1],[[[60,[13]]],138],[[138,1,13],1],[[138,1,13],[[64,[1]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[139,1],[[]],[139,[[60,[[60,[1]]]]]],[[]],[[139,1,1],13],[[139,1,1],1],[1,139],[[1,60,[66,[51]]],139],[[139,1],1],[[139,1],1],[[],9],[[],9],[[],10],[[139,1],64],[[]],0,[[140,1],7],[[]],[[]],[140,140],[[]],[[140,[125,[1]],7],1],[[]],[[]],[[140,[125,[1]]],[[64,[7]]]],[[140,[125,[1]]],[[64,[7]]]],[[[60,[7]]],140],[[140,[0,[[125,[1]],2]],7],[[64,[7]]]],[[140,[0,[[125,[1]],2]],7],[[64,[7]]]],[[140,[125,[1]],1],[[64,[7]]]],[[140,[0,[[125,[1]],2]],7,7],1],[[140,1,7],1],[[140,1,7],[[64,[1]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,[[1,1]],0,0,[1,60],[[1,1]],0,[1],[[]],0,[[141,1,1]],[[]],[[]],[141,141],[[]],[[]],[[141,1],60],[[]],[[141,1,1]],[1,141],[141],[[]],[[],9],[[],9],[[],10],[[]],0,[[142,1,1]],[[]],[[]],[142,142],[[]],[[]],[[142,1],60],[[]],[[142,1,1]],[1,142],[142],[[]],[[],9],[[],9],[[],10],[[]],0,[[143,1,1,7,32]],[[]],[[]],[143,143],[[]],[[]],[[]],[[143,1,1,7],[[9,[32]]]],[1,143],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,[144,43],[145,43],[144,43],[[144,144],144],[[144,144],43],[[144,144],43],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[146,146],[144,144],[145,145],[147,147],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[144,144],43],[[145,145],43],[[],144],[[],145],[[],147],[145,144],0,0,0,[[144,43],144],[[144,144],43],[[145,145],43],[[146,43,43],13],[[144,144,146],13],[[145,145,146],13],[[147,147,146],13],[[144,15],16],[[145,15],16],[[147,15],16],[[]],[[]],[[]],[[]],0,[[146,43,43],13],[[146,43,43],13],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[145,145,146],13],[[145,145,146],13],[[146,43,43],13],[[146,43,43],13],[[144,43],144],[[146,43,43],13],[43,146],[[144,144],145],[[144,43],147],[144,144],[145,144],[[146,43,43],[[64,[148]]]],0,[[43,43],144],[[145,144],144],0,[[145,144],144],[[144,144],144],0,0,[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[],10],[144,144],[145,144],[[]],[[]],[[]],[[]],[[147,146],43],[[147,147,146],43],[[],43],0,0,0,0,0,0,[[]],[[]],[[144,144,144,146],149],[149,13],[149,149],[[]],[149,13],[[149,149],13],[[149,15],16],[[]],[[]],[149,13],[149,13],[149,13],[[]],[149,27],[[],9],[[],9],[[],10],[[]],[[144,144,144],147],[[[60,[144]],146],64],[[147,147,146],[[60,[144]]]],[146,13],[[145,146]],[[],43],0,0,0,[[]],[[]],[150,150],[[]],[[[60,[144]],146],[[60,[144]]]],[[150,150],13],[[]],[[[60,[144]],150,146],[[60,[144]]]],[[]],[[]],[[],9],[[],9],[[],10],[[]],[[145,144],43],[[145,144],43],[[145,145],43],[[144,144,144],147],0,0,0,0,[[]],[[]],[151,151],[[]],[151,13],[[151,151],13],[[151,15],16],[[]],[[147,145,146]],[[]],[151,13],[151,13],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,0,[[]],[[]],[152,152],[[]],[[152,152],13],[[152,15],16],[[]],[152,13],[[147,145,146]],[[]],[152,13],[152,13],[152,13],[[]],[[],9],[[],9],[152,13],[[],10],[[]],0,0,0,0,0,0,0,[[]],[[]],[153,13],[153,153],[[]],[[153,153],13],[[153,15],16],[[]],[153,13],[153,13],[[147,147,146]],[153,13],[[]],[153,[[64,[23]]]],[153,13],[153,13],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,[[]],[[]],[154,154],[[]],[154,13],[[154,154],13],[[154,15],16],[[]],[[145,145,146]],[[]],[154,13],[154,13],[154,13],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,[[]],[[]],[155,155],[[]],[[155,155],13],[[155,15],16],[[]],[[145,145,146]],[155,13],[[]],[155,13],[155,13],[155,13],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,[[]],[[]],[156,156],[[]],[[156,156],13],[156,13],[[156,15],16],[[]],[156,13],[[]],[156,13],[[144,146],156],[[]],[[],9],[[],9],[[],10],[[]],[[147,144,146],[[60,[144]]]],0,0,0,0,0,0,0,[[[159,[157,[0,[158,2]]]],[0,[158,2]]]],[[[159,[160,[0,[158,2]]]],[0,[158,2]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[161,[2,2]]],[[161,[2,2]]]],[157,157],[160,160],[[[159,[2,2]]],[[159,[2,2]]]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[[159,[157,[0,[158,2]]]],55]],[[[159,[160,[0,[158,2]]]],55]],[[[161,[14,14]],15],16],[[157,15],16],[[160,15],16],[[[159,[14,14]],15],16],[[],1],[[]],[[[161,[2]]],1],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[159,13],0,[159,1],0,0,[[1,1],161],[1,[[159,[162,[0,[158,2]]]]]],0,0,[[]],[[[161,[2]]],[[161,[2]]]],0,[[],1],[[[161,[2]]],1],0,[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,0,[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],0,[[]],[[[161,[2]]]],0,0,[163,[[60,[1]]]],0,[[[159,[162,158]],1],[[60,[[164,[[0,[19,47,5,4]]]]]]]],[[[159,[162,158]],55],[[60,[[64,[1]]]]]],0,[163,60],[[[159,[160,158]]],[[60,[64]]]],[163,60],[[[159,[160,158]]],[[0,[18,19,47,4]]]],[[[159,[157,158]],1],[[60,[158]]]],0,[[[159,[157,158]],1],[[64,[[60,[158]]]]]],[[[159,[162,158]]],[[64,[[60,[158]]]]]],[[[159,[162,158]]],[[60,[[64,[[0,[4,19,47,18,165]]]]]]]],[[[159,[160,158]]],60],0,0,0,[[[166,[[0,[158,2]]]],[0,[158,2]]]],[[]],[[]],[[[166,[[0,[2,158]]]]],[[166,[[0,[2,158]]]]]],[[]],[[]],[[]],[1,[[166,[[0,[158,2]]]]]],[[[166,[[0,[158,2]]]]],64],[[]],[[],9],[[],9],[[],10],[[]],0,[[[167,[[0,[158,2]]]],[0,[158,2]]]],[[]],[[]],[[[167,[[0,[2,158]]]]],[[167,[[0,[2,158]]]]]],[[]],[[]],[[]],[1,[[167,[[0,[158,2]]]]]],[[[167,[[0,[158,2]]]]],64],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,0,[[168,1,1]],[[]],[[]],[[]],[[]],[[]],[[]],[168,169],[170,170],[[]],[[170,170],13],[[170,15],16],[[]],[[]],[[]],[[169,1],1],[[]],[[]],[[]],[[169,1],170],[169,[[60,[[60,[1]]]]]],[1,168],[[169,1],1],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[[159,[160,[0,[2,158]]]]],[[60,[[0,[2,158]]]]]],0,0,[[]],[[]],0,[163,163],[[]],[[163,15],16],[[]],[[]],0,[[[159,[160,158]]],163],0,0,0,[[]],[[],9],[[],9],[[],10],[[]],[[[159,[160,158]]],[[60,[1]]]],[[[159,[160,158]]],[[60,[158]]]],0,[[]],[[]],[[]],0,0,[[]],[[[159,[160,158]]],171],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[]],[172,[[60,[[60,[1]]]]]],[[]],[[[159,[157,158]]],172],[172,[[60,[1]]]],[[],9],[[],9],[[],10],[[]],[[[159,[157,158]]],[[64,[[60,[1]]]]]],[[[159,[157,158]],1],[[64,[[0,[19,47,4]]]]]],[163,[[60,[[60,[1]]]]]],[[[159,[162,158]]],[[64,[[60,[[60,[[64,[[0,[4,19,47,18]]]]]]]]]]]],0,[[[159,[162,158]],1,1,1],[[60,[64]]]],0,0,0,0,0,0,0,0,[[173,173],173],[[]],[[]],[[]],[[]],[[]],[[]],[174,174],[173,173],[[[175,[2]]],[[175,[2]]]],[[]],[[]],[[]],[[],174],[[],173],0,0,[[174,174],13],[[173,173],13],[[174,15],16],[[173,15],16],[[[175,[14]],15],16],[[]],[[]],[[]],[[175,174]],[[]],[[]],[[]],[175,57],[175,57],[[174,173,1,1],[[64,[174]]]],[[1,1],174],[[31,31],173],[55,175],0,[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[]],[[]],[[]],0,0,[[1,1,51,51],[[159,[157,[161,[2]]]]]],0,0,0,0,0,0,0,[[[60,[78]]],7],[[[60,[[60,[7]]]],7],7],[[[60,[78]]]],[[[60,[78]]],[[64,[[60,[78]]]]]],[[[60,[[60,[7]]]],7],[[64,[[60,[[60,[7]]]]]]]],0,[[[177,[176]],[177,[176]]],[[177,[176]]]],[[[177,[176]],[177,[176]]]],[[]],[[]],[[[177,[[0,[2,176]]]]],[[177,[[0,[2,176]]]]]],[[]],[[[177,[[0,[12,176]]]],[177,[[0,[12,176]]]]],13],[[]],[[[60,[[60,[23]]]],176],[[177,[176]]]],[[[177,[176]],1,1],64],[[[177,[176]]],1],[[[177,[176]],1]],[[]],[[[177,[176]],[177,[176]]],[[177,[176]]]],[[[177,[176]],[177,[176]]]],[[[177,[176]]],[[177,[176]]]],[[1,1,176],[[177,[176]]]],[[[177,[176]],[177,[176]]],[[177,[176]]]],[[[177,[176]],[177,[176]]]],[[]],[[[177,[176]]],[[177,[176]]]],[[],9],[[],9],[[],10],[[]],[[[177,[176]]],1],0,[[[178,[176]],[178,[176]]],[[178,[176]]]],[[[178,[176]],[178,[176]]]],[[]],[[]],[[[178,[[0,[2,176]]]]],[[178,[[0,[2,176]]]]]],[[]],[[[178,[[0,[12,176]]]],[178,[[0,[12,176]]]]],13],[[]],[[[60,[[60,[23]]]],176],[[178,[176]]]],[[[178,[176]],1,1],64],[[[178,[176]],1]],[[]],[[[178,[176]],[178,[176]]],[[178,[176]]]],[[[178,[176]],[178,[176]]]],[[[178,[176]]],[[178,[176]]]],[[1,176],[[178,[176]]]],[[[178,[176]],7],[[178,[176]]]],[[[178,[176]]],1],[[[178,[176]],[178,[176]]],[[178,[176]]]],[[[178,[176]],[178,[176]]],[[178,[176]]]],[[[178,[176]],[178,[176]]],[[178,[176]]]],[[[178,[176]],[178,[176]]]],[[]],[[[178,[176]]],[[178,[176]]]],[[],9],[[],9],[[],10],[[1,176],[[178,[176]]]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[180,[179]],1,1]],[[]],[[]],[[]],[[]],[[[180,[179]]],7],[[1,1],[[180,[179]]]],[[],9],[[],9],[[],10],[[]],0,0,[[181,1,1]],[[]],[[]],[[]],[[]],[182,182],[[]],[[182,15],16],[[]],[[]],[181,60],[[]],[[]],[181,23],[[1,1],181],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,176],[[60,[60]]]],[[[60,[23]],176],60],0,0,[[]],[[]],[[]],[[]],[183,183],[184,184],[[]],[[]],[[]],[[]],[[183,7,7],7],[[184,7,7],7],[[]],[[]],[[7,7],183],[7,184],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,0,0,0,0,[[[60,[[0,[19,4,49,6]]]],[60,[[0,[19,4,49,6]]]]],[[60,[[0,[19,4,49,6]]]]]],[[[60,[[0,[19,4,49,6]]]],[60,[[0,[19,4,49,6]]]]],[[60,[[0,[19,4,49,6]]]]]],[[]],[[]],[[[60,[[0,[19,5,4,49,6]]]],[60,[[0,[19,5,4,49,6]]]]],[[60,[[0,[19,5,4,49,6]]]]]],[[]],[[]],[[7,7],7],[[],64],[[],64],[7,7],[7,[[60,[7]]]],0,[[]],[[]],[185,185],[[]],[7,[[60,[185]]]],[[185,185],13],[[185,15],16],[[]],0,[[]],0,0,[[]],[[],9],[[],9],[[],10],[[]],[[7,7]],0,0,[[[186,[176]],1,1]],0,[[[186,[176]],1],60],[[]],[[]],0,[[[186,[176]],1]],[[[186,[[0,[2,176]]]]],[[186,[[0,[2,176]]]]]],[[]],[[[186,[176]],1,1]],[[[186,[176]],1]],[[[186,[[0,[14,176]]]],15],16],[[]],[[[186,[176]],1,1]],[[]],[[[186,[176]],1]],[[1,176],[[186,[176]]]],[[[186,[176]],1,1]],[[]],[[],9],[[],9],[[],10],[[]],[[7,7],7],0,0,0,[[]],[[]],[[187,1],[[60,[1]]]],[[]],[[]],[1,187],[[],9],[[],9],[[],10],[[]],[7,60],0,0,[[]],[[]],[[]],[[32,32,7],[[64,[32]]]],[7,13],0,0,0,0,0,0,[[1,7],[[60,[7]]]],[[7,7],[[64,[7]]]],[[7,7],7],[[7,7,7],[[64,[7]]]],[[7,7,7],7],[[7,7],[[64,[7]]]],[[1,7],[[60,[7]]]],[[188,[60,[189]],190],[[60,[189]]]],[[21,21],21],[[23,23],23],[[7,7],7],[[24,24],24],0,[[]],[[]],[[191,[60,[189]],[60,[189]]],[[60,[189]]]],[[]],[[]],[[23,1],191],[[],9],[[],9],[[],10],[[]],0,0,[[190,188,188],188],[[190,188,188]],[[]],[[]],[[]],[[]],[188,188],[[]],[[188,1],189],[189,188],[188,[[64,[1]]]],[[190,188,188]],[[188,188],13],[[188,189],189],[[188,15],16],[[]],[[]],[[[60,[189]]],188],[[188,1],188],[[]],[[]],[[190,188,1],188],[188,13],[188,1],[[190,188,188],188],[[190,188,188]],[191,190],[[190,188,189],188],[188],[[190,188],188],[[190,188,188],188],[[190,188,188]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],[[],188],[[[60,[189]],189,191],[[60,[189]]]],0,0,0,[[]],[[]],[[]],[[]],[[192,1],13],[1,192],[[],9],[[],9],[[],10],[[]],0,[[],13],[7,[[64,[7]]]],0,[[193,193],193],[[193,193]],[[]],[[]],[193,193],[[]],[[193,193],193],[[193,193]],[[193,193],13],[[193,15],16],[[]],[32,193],[[]],[[193,193],193],[[193,193]],[193,193],[[32,32],193],[[193,193],[[64,[148]]]],[[193,193],193],[[193,193]],[[]],[[],9],[[],9],[[],10],[[]],[[7,7,7,7],7],[[7,7,7],7],[7,7],[1,[[60,[7]]]],[[7,7],7],0,0,0,0,0,[[]],[[]],0,[[[194,[2]]],[[194,[2]]]],[[]],[[[194,[12]],[194,[12]]],13],[[[194,[14]],15],16],[[]],0,[[]],0,[[2,2,2,2,2,2],[[194,[2]]]],0,[[[194,[2]]],[[194,[2]]]],[[[194,[2]]],[[194,[2]]]],[[[194,[2]]],[[194,[2]]]],[[[194,[2]]],[[194,[2]]]],[[[194,[2]]],[[194,[2]]]],[[[194,[2]]],[[194,[2]]]],[[]],0,[[],9],[[],9],[[],10],[[]],[[55,[0,[19,53]],[0,[19,53]]],13],0,0,0,0,[[]],[[]],[[]],[[]],[[[195,[2]]],[[195,[2]]]],[[[196,[2]]],[[196,[2]]]],[[]],[[]],0,[[[195,[14]],15],16],[[[196,[14]],15],16],[[]],[[]],[[]],[[]],[[57,[0,[19,53,14]],[0,[19,53,14]]],[[64,[[195,[[0,[19,53,14]]]]]]]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[189,189],189],[[189,189]],[[]],[[]],[[]],[[]],[197,197],[189,189],[[]],[[]],[[],189],[[189,189],189],[[189,189]],[[197,197],13],[[189,189],13],[[189,15],16],[[189,15],16],[[197,32,32]],[[]],[[]],[[197,32]],[[197,7]],[[]],[[]],[189,189],[[189,189],189],[[189,189]],[189,189],[[],197],[23,189],[[189,7],189],[[189,189],189],[[189,189]],[[]],[[]],[[],198],[189,23],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,0,0,0,0,[[32,32]],[32],[7],[[]],[7],0,0,[[199,199],199],[[199,199]],[[]],[[]],[[]],[[]],[200,200],[199,199],[[]],[[]],[[199,199],199],[[199,199]],[[200,200],13],[[199,199],13],[[200,15],16],[[199,15],16],[[199,15],16],[[200,32,32]],[[]],[[]],[[200,32]],[[200,7]],[[]],[[]],[199],[[199,199],199],[[199,199]],[199,199],[23,200],[[23,23],199],[[199,7]],[[199,199],199],[[199,199]],[[]],[[]],[[],198],[199,23],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,0,[[[164,[4]],[164,[4]]],[[164,[4]]]],[[]],[[]],[[[164,[2]]],[[164,[2]]]],[[]],[[[164,[47]],[164,[47]]],148],[[[164,[12]],[164,[12]]],13],[[[164,[14]],15],16],[[]],[[]],[[[164,[19]]],13],[[[164,[19]]],13],[[[164,[19]]],13],[[[164,[201]]],[[164,[201]]]],[[[164,[48]],[164,[48]]],[[64,[148]]]],[[[164,[49]],[164,[49]]],[[164,[49]]]],[[]],[[],9],[[],9],[[],10],[[[164,[19]]],19],[[]],0,[[202,202]],[[202,202]],[[]],[[]],[202,202],[[]],[[202,202],148],[[],202],[[202,202]],[[202,202]],[[202,202],13],[[202,15],16],[[]],[[]],[[202,202]],[[202,202]],[202],[[]],[[202,202],[[64,[148]]]],[[202,202]],[[202,202]],[[]],[[],9],[[],9],[[],10],[[]],[[]],[[203,[61,[[0,[204,48,2]]]]],[[61,[[0,[204,48,2]]]]]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[206,[[0,[205,2]]]]],[[207,[[0,[205,2]]]]]],[[[208,[[0,[205,2]]]]],[[207,[[0,[205,2]]]]]],0,0,[[[209,[2,2]]],[[209,[2,2]]]],[[[210,[2]]],[[210,[2]]]],[[[207,[2]]],[[207,[2]]]],[[]],[[]],[[]],[[],[[210,[5]]]],0,0,[[[206,[[0,[205,2]]]],55]],[[[208,[[0,[205,2]]]],55]],[[[209,[14,14]],15],16],[[[210,[14]],15],16],[[[207,[14]],15],16],[[],1],[[]],[[]],[[[209,[2]]],1],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[207,13],0,[207,1],[[[210,[205]]],211],[[[210,[205]]],1],[1,[[206,[[0,[205,2]]]]]],[[1,1],[[208,[[0,[205,2]]]]]],[[1,1],209],[207,57],0,0,[[]],[[[209,[2]]],[[209,[2]]]],[207,[[64,[1]]]],0,0,[[],1],[[[209,[2]]],1],0,[[]],[[]],[[]],0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[],10],[[],10],0,[[]],[[]],[[]],[[]],[[]],[[]],[[[209,[2]]]],0,[[[207,[205]]],[[60,[1]]]],0,[[212,1,1],[[64,[1]]]],[[]],[[]],[[212,1,1],64],[[]],[[]],[[212,1]],[[[207,[205]],1],212],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[]],[[]],[[[207,[205]],1],213],[[213,1],1],[[213,1]],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[214,214],[[]],[[214,15],16],[[]],[[214,1],1],[[]],[[214,1,1],1],[[[207,[205]],1],214],[[214,1],[[64,[1]]]],[[214,1,1],60],[[214,1,1],60],[[214,1]],[[214,1]],[[]],[[],9],[[],9],[[],10],[[]],0,[[215,1,1],[[64,[1]]]],[[]],[[]],[[]],[[215,1,1],1],[[]],[[215,1,1,1],[[64,[1]]]],[[[207,[205]],1],215],[[],9],[[],9],[[],10],[[]],0,[[]],[[]],[[]],[[]],[[2,[66,[51]],[66,[51]],[66,[51]]],[[216,[19,2]]]],[[[216,[19,2]],[207,[205]]],[[60,[2]]]],[[],9],[[],9],[[],10],[[]],[[[207,[205]],1]],[[[207,[205]],1],[[9,[70]]]],0,[[]],[[]],[[]],[[]],[[2,[66,[51]],[66,[51]],[66,[51]]],[[217,[19,2]]]],[[[217,[19,2]],[207,[205]],1],[[60,[2]]]],[[],9],[[],9],[[],10],[[]],[[[207,[205]]]],[[[207,[205]],1],[[60,[[0,[4,19,5]]]]]],[[[207,[205]]],60],[[[207,[205]],1,1],[[60,[1]]]],0,0,0,0,0,0,0,0,[7,23],0,[[]],[[]],[218],[[]],[218,[[64,[24]]]],[[]],[[],218],[218,[[64,[24]]]],[218,[[60,[219]]]],[218,43],[218,27],[218,32],[218,31],[218,23],[218,7],[218,1],[218],[[],9],[[],9],[[],10],[[]],[[218,220]],[[218,220]],0,[70,198],0,0,[[[81,[[0,[4,6,19]]]],[0,[4,6,19]]],[[0,[4,6,19]]]],0,[[]],[[]],[[[81,[2]]],[[81,[2]]]],[[]],[[[81,[14]],15],16],[[]],[[]],[[[81,[[0,[49,6,19]]]],[0,[49,6,19]]],[[81,[[0,[49,6,19]]]]]],[[]],[[],9],[[],9],[[],10],[[]],[[1,1,1,1]],0,0,[[]],0,[[]],[[]],[221,221],[[]],[[221,15],16],[[]],[221,7],[[]],[[],221],[[]],[[],9],[[],9],[[],10],[[]],0,[[70,70],70]],"c":[],"p":[[15,"usize"],[8,"Clone"],[3,"AddSum"],[8,"Add"],[8,"Default"],[8,"Mul"],[15,"u64"],[8,"From"],[4,"Result"],[3,"TypeId"],[3,"Affine"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"One"],[8,"Zero"],[8,"Copy"],[3,"BitAnd"],[15,"u16"],[15,"u128"],[15,"u32"],[15,"u8"],[3,"BitOr"],[3,"BitXor"],[15,"i32"],[15,"i16"],[15,"i8"],[15,"i128"],[15,"isize"],[15,"i64"],[4,"DihedralValue"],[3,"Dihedral"],[3,"Dual"],[8,"Identity"],[8,"AlgeStruct"],[8,"BinaryOp"],[3,"Max"],[3,"Min"],[3,"Prod"],[15,"f32"],[15,"f64"],[3,"Sum"],[3,"Update"],[3,"UpdateSum"],[8,"Ord"],[8,"PartialOrd"],[8,"Sub"],[8,"Div"],[8,"Fn"],[4,"SearchResult"],[8,"Eq"],[3,"CompressorBuilder"],[8,"IntoIterator"],[3,"Compressor"],[8,"Iterator"],[8,"Signed"],[3,"Imos1D"],[3,"Vec"],[3,"Range"],[3,"Imos2D"],[3,"KMP"],[4,"Option"],[3,"Mo"],[3,"Box"],[8,"FnMut"],[3,"PSP"],[3,"RollingHash"],[15,"str"],[3,"Table"],[3,"SuffixArray"],[8,"Hash"],[3,"StaticRangeFreqQuery"],[3,"StaticRangeInversionsQuery"],[3,"TwoSat"],[3,"BinaryTrie"],[3,"Bitset"],[8,"Elem"],[3,"ConvexHullTrick"],[3,"Linear"],[4,"Mode"],[8,"Group"],[3,"CumulativeSum1DBuilder"],[3,"CumulativeSum1D"],[3,"CumulativeSum2DBuilder"],[3,"CumulativeSum2D"],[8,"Semigroup"],[3,"DisjointSparseTable"],[8,"Monoid"],[3,"DualSegtree"],[3,"DynamicSegtree"],[3,"FenwickTree"],[3,"RangeTo"],[8,"Elem"],[3,"FenwickTreeAdd"],[3,"FenwickOnFenwickBuilder"],[3,"FenwickOnFenwick"],[3,"FoldableDeque"],[3,"IntervalHeap"],[8,"Action"],[3,"LazySegtree"],[8,"Elem"],[3,"LazySegtreeCoeff"],[8,"Elem"],[3,"LazySkewHeap"],[8,"Elem"],[3,"LiChaoTree"],[3,"RangeInclusive"],[4,"Mode"],[3,"MultiSet"],[3,"Node"],[3,"PalindromicTree"],[3,"PartiallyPersistentUnionFind"],[3,"At"],[3,"PersistentArray"],[3,"PersistentQueue"],[3,"PersistentStack"],[3,"PotentialUnionFind"],[3,"QwordTree"],[3,"RangeSearchTreeBuilder"],[3,"RangeSearchTree"],[3,"RollbackableVec"],[3,"Segtree"],[8,"RangeBounds"],[3,"SegtreeBeats"],[8,"Elem"],[3,"SegtreeLinearAdd"],[3,"SegtreeOnSegtreeBuilder"],[3,"SegtreeOnSegtree"],[3,"SkewHeap"],[8,"Associative"],[8,"Idempotence"],[3,"SparseTable"],[4,"Mode"],[8,"Elem"],[3,"StarrySkyTree"],[3,"SuccinctDict"],[3,"UnionFind"],[3,"WaveletMatrix"],[3,"Dinic"],[3,"FordFulkerson"],[3,"MinCostFlow"],[3,"Vector"],[3,"Line"],[3,"Eps"],[3,"Circle"],[4,"Ordering"],[4,"CCW"],[4,"Hull"],[4,"IntersectCircleLine"],[4,"IntersectCircleSegment"],[4,"IntersectCircles"],[4,"IntersectLineSegment"],[4,"IntersectSegments"],[4,"PointPolygon"],[3,"Directed"],[8,"EdgeTrait"],[3,"Graph"],[3,"Undirected"],[3,"Edge"],[8,"Direction"],[3,"Lowlink"],[4,"NumInf"],[8,"Unsigned"],[3,"DirectedEulerianTrail"],[3,"UndirectedEulerianTrail"],[3,"FunctionalGraphBuilder"],[3,"FunctionalGraph"],[4,"Kind"],[3,"PseudoTree"],[3,"SCC"],[3,"Dir"],[3,"Position"],[3,"Grid"],[8,"FF"],[3,"Matrix"],[3,"SquareMatrix"],[8,"MaxFlow"],[3,"BipartiteMatching"],[3,"HopcroftKarp"],[3,"Edge"],[3,"ExtLucas"],[3,"BinomialCoefficient"],[3,"Quotient"],[3,"FactorialTable"],[3,"FactorizeSieve"],[3,"Polynomial"],[3,"ConstModInt"],[3,"PolynomialOperator"],[3,"NTT"],[3,"EratosthenesSieve"],[3,"Rational"],[3,"Dice"],[3,"ParseResult"],[4,"Elem"],[3,"ConstModIntBuilder"],[3,"String"],[3,"ModInt"],[3,"ModIntBuilder"],[8,"Neg"],[3,"Totalf64"],[8,"Rng"],[8,"SampleUniform"],[8,"TreeEdgeTrait"],[3,"TreeBuilder"],[3,"Tree"],[3,"RootedTreeBuilder"],[3,"TreeEdge"],[3,"TreeNode"],[8,"DoubleEndedIterator"],[3,"TreeDepthQuery"],[3,"EulerTour"],[3,"HLD"],[3,"DoublingLCA"],[3,"RerootingDP"],[3,"TreeDP"],[3,"FastIO"],[15,"char"],[8,"Display"],[3,"XorShift"],[8,"Inverse"],[13,"NgOk"],[8,"Foldable"],[8,"Foldable2D"],[8,"Indexable"],[8,"Assignable"],[8,"Updatable"],[8,"GcdLcm"],[8,"CheckPrime"],[13,"Paren"],[8,"Pow"],[8,"Inv"],[8,"JoinStr"],[8,"Transpose"],[8,"YesNo"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
